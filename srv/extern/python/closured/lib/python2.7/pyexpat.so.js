"use strict";
(function(FUNCTION_TABLE_OFFSET) {
  var Module = {};
  var args = [];
  Module.arguments = [];
  var __globalConstructor__ = function globalConstructor() {};
  var $0___SIZE = 144;
  var $1___SIZE = 16;
  var $2___SIZE = 196;
  var $3___SIZE = 20;
  var $4___SIZE = 368;
  var $4___FLATTENER = [ 0, 76, 332 ];
  var $struct_ATTRIBUTE___SIZE = 16;
  var $struct_BINDING___SIZE = 28;
  var $struct_BLOCK___SIZE = 12;
  var $struct_CONTENT_SCAFFOLD___SIZE = 28;
  var $struct_DEFAULT_ATTRIBUTE___SIZE = 12;
  var $struct_DTD___SIZE = 188;
  var $struct_DTD___FLATTENER = [ 0, 20, 40, 60, 80, 104, 128, 129, 130, 131, 132, 152, 160, 164, 168, 172, 176, 180, 184 ];
  var $struct_ELEMENT_TYPE___SIZE = 24;
  var $struct_ENCODING___SIZE = 76;
  var $struct_ENCODING___FLATTENER = [ 0, 16, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 73 ];
  var $struct_ENTITY___SIZE = 36;
  var $struct_ENTITY___FLATTENER = [ 0, 4, 8, 12, 16, 20, 24, 28, 32, 33, 34 ];
  var $struct_FILE___SIZE = 148;
  var $struct_FILE___FLATTENER = [ 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 70, 71, 72, 76, 84, 88, 92, 96, 100, 104, 108 ];
  var $struct_HASH_TABLE___SIZE = 20;
  var $struct_HASH_TABLE_ITER___SIZE = 8;
  var $struct_HandlerInfo___SIZE = 20;
  var $struct_INIT_ENCODING___SIZE = 80;
  var $struct_NAMED___SIZE = 4;
  var $struct_NS_ATT___SIZE = 12;
  var $struct_OPEN_INTERNAL_ENTITY___SIZE = 24;
  var $struct_POSITION___SIZE = 8;
  var $struct_PREFIX___SIZE = 8;
  var $struct_PROLOG_STATE___SIZE = 24;
  var $struct_PyBufferProcs___SIZE = 24;
  var $struct_PyCodeObject___SIZE = 72;
  var $struct_PyExpat_CAPI___SIZE = 80;
  var $struct_PyGetSetDef___SIZE = 20;
  var $struct_PyIntObject___SIZE = 12;
  var $struct_PyInterpreterState___SIZE = 40;
  var $struct_PyListObject___SIZE = 20;
  var $struct_PyMappingMethods___SIZE = 12;
  var $struct_PyMemberDef___SIZE = 0;
  var $struct_PyMemberDef___FLATTENER = [];
  var $struct_PyMethodDef___SIZE = 16;
  var $struct_PyNumberMethods___SIZE = 156;
  var $struct_PyObject___SIZE = 8;
  var $struct_PySequenceMethods___SIZE = 40;
  var $struct_PyThreadState___SIZE = 84;
  var $struct_PyTryBlock___SIZE = 12;
  var $struct_PyTupleObject___SIZE = 16;
  var $struct_PyUnicodeObject___SIZE = 24;
  var $struct_PyVarObject___SIZE = 12;
  var $struct_Py_buffer___SIZE = 52;
  var $struct_Py_buffer___FLATTENER = [ 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 48 ];
  var $struct_STRING_POOL___SIZE = 24;
  var $struct_TAG___SIZE = 48;
  var $struct_TAG___FLATTENER = [ 0, 4, 8, 12, 36, 40, 44 ];
  var $struct_TAG_NAME___SIZE = 24;
  var $struct_XML_Content___SIZE = 20;
  var $struct_XML_Encoding___SIZE = 1036;
  var $struct_XML_Encoding___FLATTENER = [ 0, 1024, 1028, 1032 ];
  var $struct_XML_Expat_Version___SIZE = 12;
  var $struct_XML_Feature___SIZE = 12;
  var $struct_XML_Memory_Handling_Suite___SIZE = 12;
  var $struct_XML_ParserStruct___SIZE = 496;
  var $struct_XML_ParserStruct___FLATTENER = [ 0, 4, 8, 12, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 144, 148, 228, 232, 236, 237, 240, 244, 248, 252, 256, 280, 284, 288, 292, 296, 300, 304, 308, 312, 316, 320, 324, 328, 332, 336, 340, 344, 348, 352, 353, 356, 360, 364, 368, 372, 376, 380, 384, 388, 392, 396, 400, 404, 408, 416, 440, 464, 468, 472, 476, 480, 488, 489, 492 ];
  var $struct_XML_ParsingStatus___SIZE = 8;
  var $struct__IO_marker___SIZE = 12;
  var $struct__frame___SIZE = 316;
  var $struct__frame___FLATTENER = [ 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 312 ];
  var $struct__typeobject___SIZE = 196;
  var $struct_attribute_id___SIZE = 12;
  var $struct_attribute_id___FLATTENER = [ 0, 4, 8, 9 ];
  var $struct_normal_encoding___SIZE = 368;
  var $struct_normal_encoding___FLATTENER = [ 0, 76, 332, 336, 340, 344, 348, 352, 356, 360, 364 ];
  var $struct_unknown_encoding___SIZE = 1912;
  var $struct_unknown_encoding___FLATTENER = [ 0, 368, 372, 376, 888 ];
  var $struct_xmlparseobject___SIZE = 52;
  var __str;
  var _ErrorObject;
  var __str1;
  var __str2;
  var __str3;
  var __str4;
  var __str5;
  var __str6;
  var __str7;
  var __str8;
  var __str9;
  var __str10;
  var __str11;
  var __str12;
  var __str13;
  var __str14;
  var __str15;
  var __str16;
  var __str17;
  var __str18;
  var __str19;
  var __str20;
  var ___PRETTY_FUNCTION___9695;
  var __str21;
  var __str22;
  var __str23;
  var __str24;
  var __str25;
  var __str26;
  var __str27;
  var __str28;
  var __str29;
  var __str30;
  var __str31;
  var __str32;
  var __str33;
  var __str34;
  var __str35;
  var __str36;
  var __str37;
  var __str38;
  var __str39;
  var __str40;
  var __str41;
  var __str42;
  var __str43;
  var __str44;
  var _xmlparse_Parse__doc__;
  var __str45;
  var __str46;
  var __str47;
  var _xmlparse_ParseFile__doc__;
  var __str48;
  var __str49;
  var _xmlparse_SetBase__doc__;
  var __str50;
  var _xmlparse_GetBase__doc__;
  var __str51;
  var _xmlparse_GetInputContext__doc__;
  var _xmlparse_ExternalEntityParserCreate__doc__;
  var __str52;
  var _xmlparse_SetParamEntityParsing__doc__;
  var __str53;
  var _xmlparse_UseForeignDTD__doc__;
  var __str54;
  var __str55;
  var __str56;
  var __str57;
  var __str58;
  var __str59;
  var __str60;
  var __str61;
  var _xmlparse_methods;
  var _template_string;
  var _template_buffer;
  var __str62;
  var __str63;
  var __str64;
  var __str65;
  var __str66;
  var __str67;
  var __str68;
  var __str69;
  var __str70;
  var __str71;
  var __str72;
  var __str73;
  var __str74;
  var __str75;
  var __str76;
  var __str77;
  var __str78;
  var __str79;
  var __str80;
  var __str81;
  var __str82;
  var __str83;
  var _Xmlparsetype__doc__;
  var __str84;
  var _Xmlparsetype;
  var _pyexpat_ParserCreate__doc__;
  var __str85;
  var _kwlist_11478;
  var __str86;
  var __str87;
  var __str88;
  var __str89;
  var _pyexpat_ErrorString__doc__;
  var __str90;
  var _pyexpat_methods;
  var __str91;
  var __str92;
  var _pyexpat_module_documentation;
  var __str93;
  var __str94;
  var __str95;
  var __str96;
  var __str97;
  var __str98;
  var __str99;
  var __str100;
  var __str101;
  var __str102;
  var __str103;
  var __str104;
  var __str105;
  var __str106;
  var __str107;
  var __str108;
  var __str109;
  var __str110;
  var __str111;
  var __str112;
  var __str113;
  var __str114;
  var __str115;
  var __str116;
  var __str117;
  var __str118;
  var __str119;
  var __str120;
  var __str121;
  var __str122;
  var __str123;
  var __str124;
  var __str125;
  var __str126;
  var __str127;
  var __str128;
  var __str129;
  var __str130;
  var __str131;
  var __str132;
  var __str133;
  var __str134;
  var __str135;
  var __str136;
  var __str137;
  var __str138;
  var __str139;
  var __str140;
  var __str141;
  var __str142;
  var __str143;
  var __str144;
  var __str145;
  var __str146;
  var __str147;
  var __str148;
  var __str149;
  var __str150;
  var __str151;
  var __str152;
  var __str153;
  var __str154;
  var __str155;
  var __str156;
  var __str157;
  var __str158;
  var __str159;
  var __str160;
  var __str161;
  var __str162;
  var __str163;
  var __str164;
  var _capi_11557;
  var __str165;
  var __str166;
  var __str167;
  var __str168;
  var __str169;
  var __str170;
  var __str171;
  var __str172;
  var __str173;
  var __str174;
  var __str175;
  var __str176;
  var __str177;
  var __str178;
  var __str179;
  var __str180;
  var __str181;
  var __str182;
  var __str183;
  var __str184;
  var __str185;
  var __str186;
  var __str187;
  var _handler_info;
  var _implicitContext;
  var __str188;
  var __str1189;
  var ___PRETTY_FUNCTION___3804;
  var _message_3952;
  var __str2190;
  var __str3191;
  var __str4192;
  var __str5193;
  var __str6194;
  var __str7195;
  var __str8196;
  var __str9197;
  var __str10198;
  var __str11199;
  var __str12200;
  var __str13201;
  var __str14202;
  var __str15203;
  var __str16204;
  var __str17205;
  var __str18206;
  var __str19207;
  var __str20208;
  var __str21209;
  var __str22210;
  var __str23211;
  var __str24212;
  var __str25213;
  var __str26214;
  var __str27215;
  var __str28216;
  var __str29217;
  var __str30218;
  var __str31219;
  var __str32220;
  var __str33221;
  var __str34222;
  var __str35223;
  var __str36224;
  var __str37225;
  var __str38226;
  var __str39227;
  var __str40228;
  var __str41229;
  var __str42230;
  var _features_3974;
  var __str43231;
  var __str44232;
  var __str45233;
  var __str46234;
  var __str47235;
  var _xmlLen_5245;
  var _xmlNamespace_5244;
  var _xmlnsLen_5247;
  var _xmlnsNamespace_5246;
  var _externalSubsetName_5988;
  var _atypeCDATA_5989;
  var _atypeID_5990;
  var _atypeIDREF_5991;
  var _atypeIDREFS_5992;
  var _atypeENTITY_5993;
  var _atypeENTITIES_5994;
  var _atypeNMTOKEN_5995;
  var _atypeNMTOKENS_5996;
  var _enumValueSep_5998;
  var _notationPrefix_5997;
  var _enumValueStart_5999;
  var _KW_ANY;
  var _KW_ATTLIST;
  var _KW_CDATA;
  var _KW_DOCTYPE;
  var _KW_ELEMENT;
  var _KW_EMPTY;
  var _KW_ENTITIES;
  var _KW_ENTITY;
  var _KW_FIXED;
  var _KW_ID;
  var _KW_IDREF;
  var _KW_IDREFS;
  var _KW_IGNORE;
  var _KW_IMPLIED;
  var _KW_INCLUDE;
  var _KW_NDATA;
  var _KW_NMTOKEN;
  var _KW_NMTOKENS;
  var _KW_NOTATION;
  var _KW_PCDATA;
  var _KW_PUBLIC;
  var _KW_REQUIRED;
  var _KW_SYSTEM;
  var _types_1924;
  var _namingBitmap;
  var _nmstrtPages;
  var _namePages;
  var _CDATA_LSQB_1940;
  var _utf8_encoding_ns;
  var _utf8_encoding;
  var _internal_utf8_encoding_ns;
  var _internal_utf8_encoding;
  var _latin1_encoding_ns;
  var _latin1_encoding;
  var _ascii_encoding_ns;
  var _ascii_encoding;
  var _CDATA_LSQB_5469;
  var _little2_encoding_ns;
  var _little2_encoding;
  var _internal_little2_encoding_ns;
  var _internal_little2_encoding;
  var _CDATA_LSQB_9063;
  var _big2_encoding_ns;
  var _big2_encoding;
  var _KW_version;
  var _KW_encoding;
  var _KW_standalone;
  var _KW_yes;
  var _KW_no;
  var _KW_ISO_8859_1;
  var _KW_US_ASCII;
  var _KW_UTF_8;
  var _KW_UTF_16;
  var _KW_UTF_16BE;
  var _KW_UTF_16LE;
  var _encodingNames_12940;
  var _encodings;
  var _encodingsNS;
  function _set_error_attr($err, $name, $value) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 24;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $err_addr = __stackBase__;
      var $name_addr = __stackBase__ + 4;
      var $value_addr = __stackBase__ + 8;
      var $retval = __stackBase__ + 12;
      var $0 = __stackBase__ + 16;
      var $v = __stackBase__ + 20;
      
      HEAP[$err_addr] = $err;
      HEAP[$name_addr] = $name;
      HEAP[$value_addr] = $value;
      var $1 = HEAP[$value_addr];
      var $2 = _PyInt_FromLong($1);
      HEAP[$v] = $2;
      
      
      if (HEAP[$v] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 1;
        break;
      }
     case 1:
      var $5 = HEAP[$err_addr];
      var $6 = HEAP[$name_addr];
      var $7 = HEAP[$v];
      var $8 = _PyObject_SetAttrString($5, $6, $7);
      var $9 = $8 == -1;
      if ($9) {
        __label__ = 2;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 2:
      
      
      if (HEAP[$v] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 3:
      
      
      
      var $15 = HEAP[HEAP[$v]] - 1;
      
      var $17 = HEAP[$v];
      HEAP[$17] = $15;
      
      
      
      
      if (HEAP[HEAP[$v]] == 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      
      
      
      
      var $26 = HEAP[HEAP[HEAP[$v] + 4] + 24];
      var $27 = HEAP[$v];
      FUNCTION_TABLE[$26]($27);
      __label__ = 5;
      break;
     case 5:
      HEAP[$0] = 0;
      __label__ = 9;
      break;
     case 6:
      
      
      
      var $31 = HEAP[HEAP[$v]] - 1;
      
      var $33 = HEAP[$v];
      HEAP[$33] = $31;
      
      
      
      
      if (HEAP[HEAP[$v]] == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      
      
      
      
      var $42 = HEAP[HEAP[HEAP[$v] + 4] + 24];
      var $43 = HEAP[$v];
      FUNCTION_TABLE[$42]($43);
      __label__ = 8;
      break;
     case 8:
      HEAP[$0] = 1;
      __label__ = 9;
      break;
     case 9:
      var $44 = HEAP[$0];
      HEAP[$retval] = $44;
      __label__ = 10;
      break;
     case 10:
      var $retval9 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval9;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _set_error($self, $code) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 288;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 288);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $self_addr = __stackBase__;
      var $code_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      var $err = __stackBase__ + 16;
      var $buffer = __stackBase__ + 20;
      var $parser = __stackBase__ + 276;
      var $lineno = __stackBase__ + 280;
      var $column = __stackBase__ + 284;
      
      HEAP[$self_addr] = $self;
      HEAP[$code_addr] = $code;
      
      
      var $3 = HEAP[HEAP[$self_addr] + 8];
      HEAP[$parser] = $3;
      var $4 = HEAP[$parser];
      var $5 = _PyExpat_XML_GetCurrentLineNumber($4);
      HEAP[$lineno] = $5;
      var $6 = HEAP[$parser];
      var $7 = _PyExpat_XML_GetCurrentColumnNumber($6);
      HEAP[$column] = $7;
      var $8 = HEAP[$code_addr];
      var $9 = _PyExpat_XML_ErrorString($8);
      var $buffer1 = $buffer;
      var $10 = HEAP[$lineno];
      var $11 = HEAP[$column];
      var $12 = _sprintf($buffer1, __str, allocate([ $9, 0, 0, 0, $10, 0, 0, 0, $11, 0, 0, 0 ], [ "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STACK));
      var $13 = HEAP[_ErrorObject];
      var $buffer2 = $buffer;
      var $14 = _PyObject_CallFunction($13, __str1, allocate([ $buffer2, 0, 0, 0 ], [ "i8*", 0, 0, 0 ], ALLOC_STACK));
      HEAP[$err] = $14;
      
      
      if (HEAP[$err] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 1:
      var $17 = HEAP[$code_addr];
      var $18 = HEAP[$err];
      var $19 = _set_error_attr($18, __str2, $17);
      
      if ($19 != 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 2:
      var $21 = HEAP[$err];
      var $22 = HEAP[$column];
      var $23 = _set_error_attr($21, __str3, $22);
      
      if ($23 != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 3:
      var $25 = HEAP[$err];
      var $26 = HEAP[$lineno];
      var $27 = _set_error_attr($25, __str4, $26);
      
      if ($27 != 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      var $29 = HEAP[_ErrorObject];
      var $30 = HEAP[$err];
      _PyErr_SetObject($29, $30);
      __label__ = 5;
      break;
     case 5:
      
      
      if (HEAP[$err] != 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 6:
      
      
      
      var $36 = HEAP[HEAP[$err]] - 1;
      
      var $38 = HEAP[$err];
      HEAP[$38] = $36;
      
      
      
      
      if (HEAP[HEAP[$err]] == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      
      
      
      
      var $47 = HEAP[HEAP[HEAP[$err] + 4] + 24];
      var $48 = HEAP[$err];
      FUNCTION_TABLE[$47]($48);
      __label__ = 8;
      break;
     case 8:
      HEAP[$0] = 0;
      var $49 = HEAP[$0];
      HEAP[$retval] = $49;
      __label__ = 9;
      break;
     case 9:
      var $retval10 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval10;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _have_handler($self, $type) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 20;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $self_addr = __stackBase__;
      var $type_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      var $handler = __stackBase__ + 16;
      
      HEAP[$self_addr] = $self;
      HEAP[$type_addr] = $type;
      
      
      
      
      
      var $6 = HEAP[HEAP[HEAP[$self_addr] + 48] + 4 * HEAP[$type_addr]];
      HEAP[$handler] = $6;
      
      
      var $9 = HEAP[$handler] != 0;
      HEAP[$0] = $9;
      var $10 = HEAP[$0];
      HEAP[$retval] = $10;
      __label__ = 1;
      break;
     case 1:
      var $retval1 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval1;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _get_handler_name($hinfo) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $hinfo_addr = __stackBase__;
      var $retval = __stackBase__ + 4;
      var $0 = __stackBase__ + 8;
      var $name = __stackBase__ + 12;
      
      HEAP[$hinfo_addr] = $hinfo;
      
      
      var $3 = HEAP[HEAP[$hinfo_addr] + 16];
      HEAP[$name] = $3;
      
      
      if (HEAP[$name] == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      
      
      var $8 = HEAP[HEAP[$hinfo_addr]];
      var $9 = _PyString_FromString($8);
      HEAP[$name] = $9;
      
      var $11 = HEAP[$hinfo_addr] + 16;
      var $12 = HEAP[$name];
      HEAP[$11] = $12;
      __label__ = 2;
      break;
     case 2:
      
      
      if (HEAP[$name] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      
      
      var $18 = HEAP[HEAP[$name]] + 1;
      
      var $20 = HEAP[$name];
      HEAP[$20] = $18;
      __label__ = 4;
      break;
     case 4:
      var $21 = HEAP[$name];
      HEAP[$0] = $21;
      var $22 = HEAP[$0];
      HEAP[$retval] = $22;
      __label__ = 5;
      break;
     case 5:
      var $retval4 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval4;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _conv_string_to_unicode($str) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 12;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $str_addr = __stackBase__;
      var $retval = __stackBase__ + 4;
      var $0 = __stackBase__ + 8;
      
      HEAP[$str_addr] = $str;
      
      
      if (HEAP[$str_addr] == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      
      var $4 = HEAP[__Py_NoneStruct] + 1;
      HEAP[__Py_NoneStruct] = $4;
      HEAP[$0] = __Py_NoneStruct;
      __label__ = 3;
      break;
     case 2:
      var $5 = HEAP[$str_addr];
      var $6 = _strlen($5);
      var $7 = HEAP[$str_addr];
      var $8 = _PyUnicodeUCS2_DecodeUTF8($7, $6, __str5);
      HEAP[$0] = $8;
      __label__ = 3;
      break;
     case 3:
      var $9 = HEAP[$0];
      HEAP[$retval] = $9;
      __label__ = 4;
      break;
     case 4:
      var $retval3 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval3;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _conv_string_len_to_unicode($str, $len) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $str_addr = __stackBase__;
      var $len_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      
      HEAP[$str_addr] = $str;
      HEAP[$len_addr] = $len;
      
      
      if (HEAP[$str_addr] == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      
      var $4 = HEAP[__Py_NoneStruct] + 1;
      HEAP[__Py_NoneStruct] = $4;
      HEAP[$0] = __Py_NoneStruct;
      __label__ = 3;
      break;
     case 2:
      var $5 = HEAP[$str_addr];
      var $6 = HEAP[$len_addr];
      var $7 = _PyUnicodeUCS2_DecodeUTF8($5, $6, __str5);
      HEAP[$0] = $7;
      __label__ = 3;
      break;
     case 3:
      var $8 = HEAP[$0];
      HEAP[$retval] = $8;
      __label__ = 4;
      break;
     case 4:
      var $retval3 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval3;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _conv_string_to_utf8($str) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 12;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $str_addr = __stackBase__;
      var $retval = __stackBase__ + 4;
      var $0 = __stackBase__ + 8;
      
      HEAP[$str_addr] = $str;
      
      
      if (HEAP[$str_addr] == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      
      var $4 = HEAP[__Py_NoneStruct] + 1;
      HEAP[__Py_NoneStruct] = $4;
      HEAP[$0] = __Py_NoneStruct;
      __label__ = 3;
      break;
     case 2:
      var $5 = HEAP[$str_addr];
      var $6 = _PyString_FromString($5);
      HEAP[$0] = $6;
      __label__ = 3;
      break;
     case 3:
      var $7 = HEAP[$0];
      HEAP[$retval] = $7;
      __label__ = 4;
      break;
     case 4:
      var $retval3 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval3;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _conv_string_len_to_utf8($str, $len) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $str_addr = __stackBase__;
      var $len_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      
      HEAP[$str_addr] = $str;
      HEAP[$len_addr] = $len;
      
      
      if (HEAP[$str_addr] == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      
      var $4 = HEAP[__Py_NoneStruct] + 1;
      HEAP[__Py_NoneStruct] = $4;
      HEAP[$0] = __Py_NoneStruct;
      __label__ = 3;
      break;
     case 2:
      var $5 = HEAP[$str_addr];
      var $6 = HEAP[$len_addr];
      var $7 = _PyString_FromStringAndSize($5, $6);
      HEAP[$0] = $7;
      __label__ = 3;
      break;
     case 3:
      var $8 = HEAP[$0];
      HEAP[$retval] = $8;
      __label__ = 4;
      break;
     case 4:
      var $retval3 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval3;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _error_external_entity_ref_handler($parser, $context, $base, $systemId, $publicId) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $context_addr = __stackBase__ + 4;
      var $base_addr = __stackBase__ + 8;
      var $systemId_addr = __stackBase__ + 12;
      var $publicId_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[__stackBase__] = $parser;
      HEAP[$context_addr] = $context;
      HEAP[$base_addr] = $base;
      HEAP[$systemId_addr] = $systemId;
      HEAP[$publicId_addr] = $publicId;
      HEAP[$0] = 0;
      var $1 = HEAP[$0];
      HEAP[$retval] = $1;
      __label__ = 1;
      break;
     case 1:
      var $retval1 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval1;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _noop_character_data_handler($userData, $data, $len) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 12;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $data_addr = __stackBase__ + 4;
      var $len_addr = __stackBase__ + 8;
      
      HEAP[__stackBase__] = $userData;
      HEAP[$data_addr] = $data;
      HEAP[$len_addr] = $len;
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _flag_error($self) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 4;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $self_addr = __stackBase__;
      
      HEAP[$self_addr] = $self;
      var $0 = HEAP[$self_addr];
      _clear_handlers($0, 0);
      
      
      var $3 = HEAP[HEAP[$self_addr] + 8];
      _PyExpat_XML_SetExternalEntityRefHandler($3, FUNCTION_TABLE_OFFSET + 2);
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _getcode($slot, $func_name, $lineno) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 20;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $slot_addr = __stackBase__;
      var $func_name_addr = __stackBase__ + 4;
      var $lineno_addr = __stackBase__ + 8;
      var $retval = __stackBase__ + 12;
      var $0 = __stackBase__ + 16;
      
      HEAP[$slot_addr] = $slot;
      HEAP[$func_name_addr] = $func_name;
      HEAP[$lineno_addr] = $lineno;
      
      
      
      
      
      if (HEAP[_handler_info + HEAP[$slot_addr] * 20 + 12] == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      var $6 = HEAP[$slot_addr];
      var $7 = HEAP[$func_name_addr];
      var $8 = HEAP[$lineno_addr];
      var $9 = _PyCode_NewEmpty(__str6, $7, $8);
      
      var $11 = _handler_info + $6 * 20 + 12;
      HEAP[$11] = $9;
      __label__ = 2;
      break;
     case 2:
      
      
      
      var $15 = HEAP[_handler_info + HEAP[$slot_addr] * 20 + 12];
      HEAP[$0] = $15;
      var $16 = HEAP[$0];
      HEAP[$retval] = $16;
      __label__ = 3;
      break;
     case 3:
      var $retval2 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval2;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _trace_frame($tstate, $f, $code, $val) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 36;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $tstate_addr = __stackBase__;
      var $f_addr = __stackBase__ + 4;
      var $code_addr = __stackBase__ + 8;
      var $val_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_11 = __stackBase__ + 20;
      var $iftmp_10 = __stackBase__ + 24;
      var $0 = __stackBase__ + 28;
      var $result = __stackBase__ + 32;
      
      HEAP[$tstate_addr] = $tstate;
      HEAP[$f_addr] = $f;
      HEAP[$code_addr] = $code;
      HEAP[$val_addr] = $val;
      HEAP[$result] = 0;
      
      
      
      
      if (HEAP[HEAP[$tstate_addr] + 20] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 1;
        break;
      }
     case 1:
      
      
      
      
      if (HEAP[HEAP[$tstate_addr] + 16] != 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      HEAP[$0] = 0;
      __label__ = 17;
      break;
     case 3:
      
      
      
      
      if (HEAP[HEAP[$tstate_addr] + 24] != 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 4:
      
      
      
      var $16 = HEAP[HEAP[$tstate_addr] + 16] + 1;
      
      var $18 = HEAP[$tstate_addr] + 16;
      HEAP[$18] = $16;
      
      
      var $21 = HEAP[HEAP[$tstate_addr] + 24];
      
      
      var $24 = HEAP[HEAP[$tstate_addr] + 32];
      var $25 = HEAP[$f_addr];
      var $26 = HEAP[$code_addr];
      var $27 = HEAP[$val_addr];
      var $28 = FUNCTION_TABLE[$21]($24, $25, $26, $27);
      HEAP[$result] = $28;
      
      
      
      
      if (HEAP[HEAP[$tstate_addr] + 28] != 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 5:
      
      
      
      
      if (HEAP[HEAP[$tstate_addr] + 24] != 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      HEAP[$iftmp_10] = 1;
      __label__ = 8;
      break;
     case 7:
      HEAP[$iftmp_10] = 0;
      __label__ = 8;
      break;
     case 8:
      
      var $38 = HEAP[$tstate_addr] + 20;
      var $39 = HEAP[$iftmp_10];
      HEAP[$38] = $39;
      
      
      
      var $43 = HEAP[HEAP[$tstate_addr] + 16] - 1;
      
      var $45 = HEAP[$tstate_addr] + 16;
      HEAP[$45] = $43;
      
      
      if (HEAP[$result] != 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      var $48 = HEAP[$result];
      HEAP[$0] = $48;
      __label__ = 17;
      break;
     case 10:
      
      
      
      
      if (HEAP[HEAP[$tstate_addr] + 28] != 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 11:
      
      
      
      var $56 = HEAP[HEAP[$tstate_addr] + 16] + 1;
      
      var $58 = HEAP[$tstate_addr] + 16;
      HEAP[$58] = $56;
      
      
      var $61 = HEAP[HEAP[$tstate_addr] + 28];
      
      
      var $64 = HEAP[HEAP[$tstate_addr] + 36];
      var $65 = HEAP[$f_addr];
      var $66 = HEAP[$code_addr];
      var $67 = HEAP[$val_addr];
      var $68 = FUNCTION_TABLE[$61]($64, $65, $66, $67);
      HEAP[$result] = $68;
      
      
      
      
      if (HEAP[HEAP[$tstate_addr] + 28] != 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 12:
      
      
      
      
      if (HEAP[HEAP[$tstate_addr] + 24] != 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      HEAP[$iftmp_11] = 1;
      __label__ = 15;
      break;
     case 14:
      HEAP[$iftmp_11] = 0;
      __label__ = 15;
      break;
     case 15:
      
      var $78 = HEAP[$tstate_addr] + 20;
      var $79 = HEAP[$iftmp_11];
      HEAP[$78] = $79;
      
      
      
      var $83 = HEAP[HEAP[$tstate_addr] + 16] - 1;
      
      var $85 = HEAP[$tstate_addr] + 16;
      HEAP[$85] = $83;
      __label__ = 16;
      break;
     case 16:
      var $86 = HEAP[$result];
      HEAP[$0] = $86;
      __label__ = 17;
      break;
     case 17:
      var $87 = HEAP[$0];
      HEAP[$retval] = $87;
      __label__ = 18;
      break;
     case 18:
      var $retval17 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval17;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _trace_frame_exc($tstate, $f) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 36;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $tstate_addr = __stackBase__;
      var $f_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      var $type = __stackBase__ + 16;
      var $value = __stackBase__ + 20;
      var $traceback = __stackBase__ + 24;
      var $arg = __stackBase__ + 28;
      var $err = __stackBase__ + 32;
      
      HEAP[$tstate_addr] = $tstate;
      HEAP[$f_addr] = $f;
      
      
      
      
      if (HEAP[HEAP[$tstate_addr] + 28] == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = 0;
      __label__ = 20;
      break;
     case 2:
      _PyErr_Fetch($type, $value, $traceback);
      
      
      if (HEAP[$value] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      HEAP[$value] = __Py_NoneStruct;
      
      
      
      var $10 = HEAP[HEAP[$value]] + 1;
      var $11 = HEAP[$value];
      HEAP[$11] = $10;
      __label__ = 4;
      break;
     case 4:
      var $12 = HEAP[$traceback];
      var $13 = HEAP[$value];
      var $14 = HEAP[$type];
      var $15 = _PyTuple_Pack(3, allocate([ $14, 0, 0, 0, $13, 0, 0, 0, $12, 0, 0, 0 ], [ "%struct.PyObject*", 0, 0, 0, "%struct.PyObject*", 0, 0, 0, "%struct.PyObject*", 0, 0, 0 ], ALLOC_STACK));
      HEAP[$arg] = $15;
      
      
      if (HEAP[$arg] == 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      var $18 = HEAP[$traceback];
      var $19 = HEAP[$value];
      var $20 = HEAP[$type];
      _PyErr_Restore($20, $19, $18);
      HEAP[$0] = 0;
      __label__ = 20;
      break;
     case 6:
      var $21 = HEAP[$tstate_addr];
      var $22 = HEAP[$f_addr];
      var $23 = HEAP[$arg];
      var $24 = _trace_frame($21, $22, 1, $23);
      HEAP[$err] = $24;
      
      
      
      var $28 = HEAP[HEAP[$arg]] - 1;
      
      var $30 = HEAP[$arg];
      HEAP[$30] = $28;
      
      
      
      
      if (HEAP[HEAP[$arg]] == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      
      
      
      
      var $39 = HEAP[HEAP[HEAP[$arg] + 4] + 24];
      var $40 = HEAP[$arg];
      FUNCTION_TABLE[$39]($40);
      __label__ = 8;
      break;
     case 8:
      
      
      if (HEAP[$err] == 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      var $43 = HEAP[$traceback];
      var $44 = HEAP[$value];
      var $45 = HEAP[$type];
      _PyErr_Restore($45, $44, $43);
      __label__ = 19;
      break;
     case 10:
      
      
      if (HEAP[$type] != 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 11:
      var $48 = HEAP[$type];
      
      
      var $51 = HEAP[$48] - 1;
      var $52 = $48;
      HEAP[$52] = $51;
      
      
      
      if (HEAP[$48] == 0) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      
      
      
      
      var $60 = HEAP[HEAP[HEAP[$type] + 4] + 24];
      var $61 = HEAP[$type];
      FUNCTION_TABLE[$60]($61);
      __label__ = 13;
      break;
     case 13:
      
      
      if (HEAP[$value] != 0) {
        __label__ = 14;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 14:
      var $64 = HEAP[$value];
      
      
      var $67 = HEAP[$64] - 1;
      var $68 = $64;
      HEAP[$68] = $67;
      
      
      
      if (HEAP[$64] == 0) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      
      
      
      
      var $76 = HEAP[HEAP[HEAP[$value] + 4] + 24];
      var $77 = HEAP[$value];
      FUNCTION_TABLE[$76]($77);
      __label__ = 16;
      break;
     case 16:
      
      
      if (HEAP[$traceback] != 0) {
        __label__ = 17;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 17:
      var $80 = HEAP[$traceback];
      
      
      var $83 = HEAP[$80] - 1;
      var $84 = $80;
      HEAP[$84] = $83;
      
      
      
      if (HEAP[$80] == 0) {
        __label__ = 18;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 18:
      
      
      
      
      var $92 = HEAP[HEAP[HEAP[$traceback] + 4] + 24];
      var $93 = HEAP[$traceback];
      FUNCTION_TABLE[$92]($93);
      __label__ = 19;
      break;
     case 19:
      var $94 = HEAP[$err];
      HEAP[$0] = $94;
      __label__ = 20;
      break;
     case 20:
      var $95 = HEAP[$0];
      HEAP[$retval] = $95;
      __label__ = 21;
      break;
     case 21:
      var $retval20 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval20;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _call_with_frame($c, $func, $args, $self) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 36;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $c_addr = __stackBase__;
      var $func_addr = __stackBase__ + 4;
      var $args_addr = __stackBase__ + 8;
      var $self_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $tstate = __stackBase__ + 24;
      var $f = __stackBase__ + 28;
      var $res = __stackBase__ + 32;
      
      HEAP[$c_addr] = $c;
      HEAP[$func_addr] = $func;
      HEAP[$args_addr] = $args;
      HEAP[$self_addr] = $self;
      var $1 = HEAP[__PyThreadState_Current];
      HEAP[$tstate] = $1;
      
      
      if (HEAP[$c_addr] == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = 0;
      __label__ = 20;
      break;
     case 2:
      var $4 = _PyEval_GetGlobals();
      var $5 = HEAP[$tstate];
      var $6 = HEAP[$c_addr];
      var $7 = _PyFrame_New($5, $6, $4, 0);
      HEAP[$f] = $7;
      
      
      if (HEAP[$f] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      HEAP[$0] = 0;
      __label__ = 20;
      break;
     case 4:
      
      var $11 = HEAP[$tstate] + 8;
      var $12 = HEAP[$f];
      HEAP[$11] = $12;
      var $13 = HEAP[$tstate];
      var $14 = HEAP[$f];
      var $15 = _trace_frame($13, $14, 0, __Py_NoneStruct);
      
      if ($15 < 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      HEAP[$0] = 0;
      __label__ = 20;
      break;
     case 6:
      var $17 = HEAP[$func_addr];
      var $18 = HEAP[$args_addr];
      var $19 = _PyEval_CallObjectWithKeywords($17, $18, 0);
      HEAP[$res] = $19;
      
      
      if (HEAP[$res] == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 7:
      
      
      
      
      if (HEAP[HEAP[$tstate] + 48] == 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      var $26 = HEAP[$f];
      var $27 = _PyTraceBack_Here($26);
      __label__ = 9;
      break;
     case 9:
      
      
      var $30 = HEAP[HEAP[$self_addr] + 8];
      var $31 = _PyExpat_XML_StopParser($30, 0);
      var $32 = HEAP[$tstate];
      var $33 = HEAP[$f];
      var $34 = _trace_frame_exc($32, $33);
      
      if ($34 < 0) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      HEAP[$0] = 0;
      __label__ = 20;
      break;
     case 11:
      __label__ = 17;
      break;
     case 12:
      var $36 = HEAP[$tstate];
      var $37 = HEAP[$f];
      var $38 = HEAP[$res];
      var $39 = _trace_frame($36, $37, 3, $38);
      
      if ($39 < 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 13:
      
      
      if (HEAP[$res] != 0) {
        __label__ = 14;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 14:
      
      
      
      var $46 = HEAP[HEAP[$res]] - 1;
      
      var $48 = HEAP[$res];
      HEAP[$48] = $46;
      
      
      
      
      if (HEAP[HEAP[$res]] == 0) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      
      
      
      
      var $57 = HEAP[HEAP[HEAP[$res] + 4] + 24];
      var $58 = HEAP[$res];
      FUNCTION_TABLE[$57]($58);
      __label__ = 16;
      break;
     case 16:
      HEAP[$res] = 0;
      __label__ = 17;
      break;
     case 17:
      
      
      var $61 = HEAP[HEAP[$f] + 12];
      
      var $63 = HEAP[$tstate] + 8;
      HEAP[$63] = $61;
      
      var $65 = HEAP[$f];
      
      
      var $68 = HEAP[$65] - 1;
      var $69 = $65;
      HEAP[$69] = $68;
      
      
      
      if (HEAP[$65] == 0) {
        __label__ = 18;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 18:
      
      
      
      
      
      var $78 = HEAP[HEAP[HEAP[$f] + 4] + 24];
      
      var $80 = HEAP[$f];
      FUNCTION_TABLE[$78]($80);
      __label__ = 19;
      break;
     case 19:
      var $81 = HEAP[$res];
      HEAP[$0] = $81;
      __label__ = 20;
      break;
     case 20:
      var $82 = HEAP[$0];
      HEAP[$retval] = $82;
      __label__ = 21;
      break;
     case 21:
      var $retval20 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval20;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _string_intern($self, $str) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $self_addr = __stackBase__;
      var $str_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      var $iftmp_38 = __stackBase__ + 16;
      var $result = __stackBase__ + 20;
      var $value = __stackBase__ + 24;
      
      HEAP[$self_addr] = $self;
      HEAP[$str_addr] = $str;
      
      
      
      
      if (HEAP[HEAP[$self_addr] + 12] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$iftmp_38] = FUNCTION_TABLE_OFFSET + 4;
      __label__ = 3;
      break;
     case 2:
      HEAP[$iftmp_38] = FUNCTION_TABLE_OFFSET + 6;
      __label__ = 3;
      break;
     case 3:
      var $5 = HEAP[$iftmp_38];
      var $6 = HEAP[$str_addr];
      var $7 = FUNCTION_TABLE[$5]($6);
      HEAP[$result] = $7;
      
      
      if (HEAP[$result] == 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      var $10 = HEAP[$result];
      HEAP[$0] = $10;
      __label__ = 14;
      break;
     case 5:
      
      
      
      
      if (HEAP[HEAP[$self_addr] + 44] == 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      var $15 = HEAP[$result];
      HEAP[$0] = $15;
      __label__ = 14;
      break;
     case 7:
      
      
      var $18 = HEAP[HEAP[$self_addr] + 44];
      var $19 = HEAP[$result];
      var $20 = _PyDict_GetItem($18, $19);
      HEAP[$value] = $20;
      
      
      if (HEAP[$value] == 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 8:
      
      
      var $25 = HEAP[HEAP[$self_addr] + 44];
      var $26 = HEAP[$result];
      var $27 = HEAP[$result];
      var $28 = _PyDict_SetItem($25, $26, $27);
      
      if ($28 == 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      var $30 = HEAP[$result];
      HEAP[$0] = $30;
      __label__ = 14;
      break;
     case 10:
      HEAP[$0] = 0;
      __label__ = 14;
      break;
     case 11:
      
      
      
      var $34 = HEAP[HEAP[$value]] + 1;
      
      var $36 = HEAP[$value];
      HEAP[$36] = $34;
      
      
      
      var $40 = HEAP[HEAP[$result]] - 1;
      
      var $42 = HEAP[$result];
      HEAP[$42] = $40;
      
      
      
      
      if (HEAP[HEAP[$result]] == 0) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      
      
      
      
      var $51 = HEAP[HEAP[HEAP[$result] + 4] + 24];
      var $52 = HEAP[$result];
      FUNCTION_TABLE[$51]($52);
      __label__ = 13;
      break;
     case 13:
      var $53 = HEAP[$value];
      HEAP[$0] = $53;
      __label__ = 14;
      break;
     case 14:
      var $54 = HEAP[$0];
      HEAP[$retval] = $54;
      __label__ = 15;
      break;
     case 15:
      var $retval14 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval14;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _call_character_handler($self, $buffer, $len) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 32;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $self_addr = __stackBase__;
      var $buffer_addr = __stackBase__ + 4;
      var $len_addr = __stackBase__ + 8;
      var $retval = __stackBase__ + 12;
      var $iftmp_39 = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $args = __stackBase__ + 24;
      var $temp = __stackBase__ + 28;
      
      HEAP[$self_addr] = $self;
      HEAP[$buffer_addr] = $buffer;
      HEAP[$len_addr] = $len;
      var $1 = HEAP[$self_addr];
      var $2 = _have_handler($1, 3);
      
      if ($2 == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -1;
      __label__ = 18;
      break;
     case 2:
      var $4 = _PyTuple_New(1);
      HEAP[$args] = $4;
      
      
      if (HEAP[$args] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      HEAP[$0] = -1;
      __label__ = 18;
      break;
     case 4:
      
      
      
      
      if (HEAP[HEAP[$self_addr] + 12] != 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      var $11 = HEAP[$buffer_addr];
      var $12 = HEAP[$len_addr];
      var $13 = _conv_string_len_to_unicode($11, $12);
      HEAP[$iftmp_39] = $13;
      __label__ = 7;
      break;
     case 6:
      var $14 = HEAP[$buffer_addr];
      var $15 = HEAP[$len_addr];
      var $16 = _conv_string_len_to_utf8($14, $15);
      HEAP[$iftmp_39] = $16;
      __label__ = 7;
      break;
     case 7:
      var $17 = HEAP[$iftmp_39];
      HEAP[$temp] = $17;
      
      
      if (HEAP[$temp] == 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 8:
      
      
      
      var $23 = HEAP[HEAP[$args]] - 1;
      
      var $25 = HEAP[$args];
      HEAP[$25] = $23;
      
      
      
      
      if (HEAP[HEAP[$args]] == 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      
      
      
      
      var $34 = HEAP[HEAP[HEAP[$args] + 4] + 24];
      var $35 = HEAP[$args];
      FUNCTION_TABLE[$34]($35);
      __label__ = 10;
      break;
     case 10:
      var $36 = HEAP[$self_addr];
      _flag_error($36);
      
      
      var $39 = HEAP[HEAP[$self_addr] + 8];
      _PyExpat_XML_SetCharacterDataHandler($39, FUNCTION_TABLE_OFFSET + 8);
      HEAP[$0] = -1;
      __label__ = 18;
      break;
     case 11:
      
      
      
      var $43 = HEAP[$args] + 12;
      var $44 = HEAP[$temp];
      HEAP[$43] = $44;
      
      var $46 = HEAP[$self_addr] + 24;
      HEAP[$46] = 1;
      
      
      
      
      var $51 = HEAP[HEAP[HEAP[$self_addr] + 48] + 12];
      var $52 = _getcode(3, __str7, 441);
      var $53 = HEAP[$args];
      var $54 = HEAP[$self_addr];
      var $55 = _call_with_frame($52, $51, $53, $54);
      HEAP[$temp] = $55;
      
      var $57 = HEAP[$self_addr] + 24;
      HEAP[$57] = 0;
      
      
      
      var $61 = HEAP[HEAP[$args]] - 1;
      
      var $63 = HEAP[$args];
      HEAP[$63] = $61;
      
      
      
      
      if (HEAP[HEAP[$args]] == 0) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      
      
      
      
      var $72 = HEAP[HEAP[HEAP[$args] + 4] + 24];
      var $73 = HEAP[$args];
      FUNCTION_TABLE[$72]($73);
      __label__ = 13;
      break;
     case 13:
      
      
      if (HEAP[$temp] == 0) {
        __label__ = 14;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 14:
      var $76 = HEAP[$self_addr];
      _flag_error($76);
      
      
      var $79 = HEAP[HEAP[$self_addr] + 8];
      _PyExpat_XML_SetCharacterDataHandler($79, FUNCTION_TABLE_OFFSET + 8);
      HEAP[$0] = -1;
      __label__ = 18;
      break;
     case 15:
      
      
      
      var $83 = HEAP[HEAP[$temp]] - 1;
      
      var $85 = HEAP[$temp];
      HEAP[$85] = $83;
      
      
      
      
      if (HEAP[HEAP[$temp]] == 0) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      
      
      
      
      var $94 = HEAP[HEAP[HEAP[$temp] + 4] + 24];
      var $95 = HEAP[$temp];
      FUNCTION_TABLE[$94]($95);
      __label__ = 17;
      break;
     case 17:
      HEAP[$0] = 0;
      __label__ = 18;
      break;
     case 18:
      var $96 = HEAP[$0];
      HEAP[$retval] = $96;
      __label__ = 19;
      break;
     case 19:
      var $retval18 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval18;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _flush_character_buffer($self) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $self_addr = __stackBase__;
      var $retval = __stackBase__ + 4;
      var $0 = __stackBase__ + 8;
      var $rc = __stackBase__ + 12;
      
      HEAP[$self_addr] = $self;
      
      
      
      
      if (HEAP[HEAP[$self_addr] + 32] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 1;
        break;
      }
     case 1:
      
      
      
      
      if (HEAP[HEAP[$self_addr] + 40] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      HEAP[$0] = 0;
      __label__ = 4;
      break;
     case 3:
      
      
      var $11 = HEAP[HEAP[$self_addr] + 40];
      
      
      var $14 = HEAP[HEAP[$self_addr] + 32];
      var $15 = HEAP[$self_addr];
      var $16 = _call_character_handler($15, $14, $11);
      HEAP[$rc] = $16;
      
      var $18 = HEAP[$self_addr] + 40;
      HEAP[$18] = 0;
      var $19 = HEAP[$rc];
      HEAP[$0] = $19;
      __label__ = 4;
      break;
     case 4:
      var $20 = HEAP[$0];
      HEAP[$retval] = $20;
      __label__ = 5;
      break;
     case 5:
      var $retval4 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval4;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _my_CharacterDataHandler($userData, $data, $len) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $userData_addr = __stackBase__;
      var $data_addr = __stackBase__ + 4;
      var $len_addr = __stackBase__ + 8;
      var $self = __stackBase__ + 12;
      
      HEAP[$userData_addr] = $userData;
      HEAP[$data_addr] = $data;
      HEAP[$len_addr] = $len;
      
      var $1 = HEAP[$userData_addr];
      HEAP[$self] = $1;
      
      
      
      
      if (HEAP[HEAP[$self] + 32] == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      var $6 = HEAP[$self];
      var $7 = HEAP[$data_addr];
      var $8 = HEAP[$len_addr];
      var $9 = _call_character_handler($6, $7, $8);
      __label__ = 8;
      break;
     case 2:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$self] + 40] + HEAP[$len_addr] > HEAP[HEAP[$self] + 36]) {
        __label__ = 3;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 3:
      var $19 = HEAP[$self];
      var $20 = _flush_character_buffer($19);
      
      if ($20 < 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 4:
      var $22 = HEAP[$self];
      var $23 = _have_handler($22, 3);
      
      if ($23 == 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 5:
      
      
      
      
      
      if (HEAP[HEAP[$self] + 36] < HEAP[$len_addr]) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      var $30 = HEAP[$self];
      var $31 = HEAP[$data_addr];
      var $32 = HEAP[$len_addr];
      var $33 = _call_character_handler($30, $31, $32);
      
      var $35 = HEAP[$self] + 40;
      HEAP[$35] = 0;
      __label__ = 8;
      break;
     case 7:
      var $36 = HEAP[$len_addr];
      
      
      
      
      
      
      var $43 = HEAP[HEAP[$self] + 32] + HEAP[HEAP[$self] + 40];
      var $44 = HEAP[$data_addr];
      _llvm_memcpy_p0i8_p0i8_i32($43, $44, $36, 1, 0);
      
      
      
      
      var $49 = HEAP[HEAP[$self] + 40] + HEAP[$len_addr];
      
      var $51 = HEAP[$self] + 40;
      HEAP[$51] = $49;
      __label__ = 8;
      break;
     case 8:
      __label__ = 9;
      break;
     case 9:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _my_StartElementHandler($userData, $name, $atts) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 48;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 48);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $userData_addr = __stackBase__;
      var $name_addr = __stackBase__ + 4;
      var $atts_addr = __stackBase__ + 8;
      var $iftmp_42 = __stackBase__ + 12;
      var $self = __stackBase__ + 16;
      var $container = __stackBase__ + 20;
      var $rv = __stackBase__ + 24;
      var $args = __stackBase__ + 28;
      var $i = __stackBase__ + 32;
      var $max = __stackBase__ + 36;
      var $n = __stackBase__ + 40;
      var $v = __stackBase__ + 44;
      
      HEAP[$userData_addr] = $userData;
      HEAP[$name_addr] = $name;
      HEAP[$atts_addr] = $atts;
      
      var $1 = HEAP[$userData_addr];
      HEAP[$self] = $1;
      var $2 = HEAP[$self];
      var $3 = _have_handler($2, 0);
      
      if ($3 != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 52;
        break;
      }
     case 1:
      var $5 = HEAP[$self];
      var $6 = _flush_character_buffer($5);
      
      if ($6 < 0) {
        __label__ = 52;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      
      
      
      
      if (HEAP[HEAP[$self] + 20] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      
      var $14 = HEAP[HEAP[$self] + 8];
      var $15 = _PyExpat_XML_GetSpecifiedAttributeCount($14);
      HEAP[$max] = $15;
      __label__ = 7;
      break;
     case 4:
      HEAP[$max] = 0;
      __label__ = 6;
      break;
     case 5:
      
      var $17 = HEAP[$max] + 2;
      HEAP[$max] = $17;
      __label__ = 6;
      break;
     case 6:
      
      
      
      
      
      if (HEAP[HEAP[$atts_addr] + 4 * HEAP[$max]] != 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 7:
      
      
      
      
      if (HEAP[HEAP[$self] + 16] != 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      var $27 = HEAP[$max];
      var $28 = _PyList_New($27);
      HEAP[$container] = $28;
      __label__ = 10;
      break;
     case 9:
      var $29 = _PyDict_New();
      HEAP[$container] = $29;
      __label__ = 10;
      break;
     case 10:
      
      
      if (HEAP[$container] == 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      var $32 = HEAP[$self];
      _flag_error($32);
      __label__ = 52;
      break;
     case 12:
      HEAP[$i] = 0;
      __label__ = 39;
      break;
     case 13:
      
      
      
      var $36 = HEAP[HEAP[$atts_addr] + 4 * HEAP[$i]];
      var $37 = HEAP[$self];
      var $38 = _string_intern($37, $36);
      HEAP[$n] = $38;
      
      
      if (HEAP[$n] == 0) {
        __label__ = 14;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 14:
      var $41 = HEAP[$self];
      _flag_error($41);
      
      
      
      var $45 = HEAP[HEAP[$container]] - 1;
      
      var $47 = HEAP[$container];
      HEAP[$47] = $45;
      
      
      
      
      if (HEAP[HEAP[$container]] == 0) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      
      
      
      
      var $56 = HEAP[HEAP[HEAP[$container] + 4] + 24];
      var $57 = HEAP[$container];
      FUNCTION_TABLE[$56]($57);
      __label__ = 16;
      break;
     case 16:
      __label__ = 52;
      break;
     case 17:
      
      
      
      
      if (HEAP[HEAP[$self] + 12] != 0) {
        __label__ = 18;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 18:
      HEAP[$iftmp_42] = FUNCTION_TABLE_OFFSET + 4;
      __label__ = 20;
      break;
     case 19:
      HEAP[$iftmp_42] = FUNCTION_TABLE_OFFSET + 6;
      __label__ = 20;
      break;
     case 20:
      
      
      
      
      var $66 = HEAP[HEAP[$atts_addr] + 4 * (HEAP[$i] + 1)];
      var $67 = HEAP[$iftmp_42];
      var $68 = FUNCTION_TABLE[$67]($66);
      HEAP[$v] = $68;
      
      
      if (HEAP[$v] == 0) {
        __label__ = 21;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 21:
      var $71 = HEAP[$self];
      _flag_error($71);
      
      
      
      var $75 = HEAP[HEAP[$container]] - 1;
      
      var $77 = HEAP[$container];
      HEAP[$77] = $75;
      
      
      
      
      if (HEAP[HEAP[$container]] == 0) {
        __label__ = 22;
        break;
      } else {
        __label__ = 23;
        break;
      }
     case 22:
      
      
      
      
      var $86 = HEAP[HEAP[HEAP[$container] + 4] + 24];
      var $87 = HEAP[$container];
      FUNCTION_TABLE[$86]($87);
      __label__ = 23;
      break;
     case 23:
      
      
      
      var $91 = HEAP[HEAP[$n]] - 1;
      
      var $93 = HEAP[$n];
      HEAP[$93] = $91;
      
      
      
      
      if (HEAP[HEAP[$n]] == 0) {
        __label__ = 24;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 24:
      
      
      
      
      var $102 = HEAP[HEAP[HEAP[$n] + 4] + 24];
      var $103 = HEAP[$n];
      FUNCTION_TABLE[$102]($103);
      __label__ = 25;
      break;
     case 25:
      __label__ = 52;
      break;
     case 26:
      
      
      
      
      if (HEAP[HEAP[$self] + 16] != 0) {
        __label__ = 27;
        break;
      } else {
        __label__ = 28;
        break;
      }
     case 27:
      
      
      
      
      
      var $113 = HEAP[HEAP[$container] + 12] + 4 * HEAP[$i];
      var $114 = HEAP[$n];
      HEAP[$113] = $114;
      
      
      
      
      
      
      var $121 = HEAP[HEAP[$container] + 12] + 4 * (HEAP[$i] + 1);
      var $122 = HEAP[$v];
      HEAP[$121] = $122;
      __label__ = 38;
      break;
     case 28:
      var $123 = HEAP[$container];
      var $124 = HEAP[$n];
      var $125 = HEAP[$v];
      var $126 = _PyDict_SetItem($123, $124, $125);
      
      if ($126 != 0) {
        __label__ = 29;
        break;
      } else {
        __label__ = 34;
        break;
      }
     case 29:
      var $128 = HEAP[$self];
      _flag_error($128);
      
      
      
      var $132 = HEAP[HEAP[$n]] - 1;
      
      var $134 = HEAP[$n];
      HEAP[$134] = $132;
      
      
      
      
      if (HEAP[HEAP[$n]] == 0) {
        __label__ = 30;
        break;
      } else {
        __label__ = 31;
        break;
      }
     case 30:
      
      
      
      
      var $143 = HEAP[HEAP[HEAP[$n] + 4] + 24];
      var $144 = HEAP[$n];
      FUNCTION_TABLE[$143]($144);
      __label__ = 31;
      break;
     case 31:
      
      
      
      var $148 = HEAP[HEAP[$v]] - 1;
      
      var $150 = HEAP[$v];
      HEAP[$150] = $148;
      
      
      
      
      if (HEAP[HEAP[$v]] == 0) {
        __label__ = 32;
        break;
      } else {
        __label__ = 33;
        break;
      }
     case 32:
      
      
      
      
      var $159 = HEAP[HEAP[HEAP[$v] + 4] + 24];
      var $160 = HEAP[$v];
      FUNCTION_TABLE[$159]($160);
      __label__ = 33;
      break;
     case 33:
      __label__ = 52;
      break;
     case 34:
      
      
      
      var $164 = HEAP[HEAP[$n]] - 1;
      
      var $166 = HEAP[$n];
      HEAP[$166] = $164;
      
      
      
      
      if (HEAP[HEAP[$n]] == 0) {
        __label__ = 35;
        break;
      } else {
        __label__ = 36;
        break;
      }
     case 35:
      
      
      
      
      var $175 = HEAP[HEAP[HEAP[$n] + 4] + 24];
      var $176 = HEAP[$n];
      FUNCTION_TABLE[$175]($176);
      __label__ = 36;
      break;
     case 36:
      
      
      
      var $180 = HEAP[HEAP[$v]] - 1;
      
      var $182 = HEAP[$v];
      HEAP[$182] = $180;
      
      
      
      
      if (HEAP[HEAP[$v]] == 0) {
        __label__ = 37;
        break;
      } else {
        __label__ = 38;
        break;
      }
     case 37:
      
      
      
      
      var $191 = HEAP[HEAP[HEAP[$v] + 4] + 24];
      var $192 = HEAP[$v];
      FUNCTION_TABLE[$191]($192);
      __label__ = 38;
      break;
     case 38:
      
      var $194 = HEAP[$i] + 2;
      HEAP[$i] = $194;
      __label__ = 39;
      break;
     case 39:
      
      
      
      if (HEAP[$i] < HEAP[$max]) {
        __label__ = 13;
        break;
      } else {
        __label__ = 40;
        break;
      }
     case 40:
      var $198 = HEAP[$self];
      var $199 = HEAP[$name_addr];
      var $200 = _string_intern($198, $199);
      HEAP[$args] = $200;
      
      
      if (HEAP[$args] != 0) {
        __label__ = 41;
        break;
      } else {
        __label__ = 42;
        break;
      }
     case 41:
      var $203 = HEAP[$args];
      var $204 = HEAP[$container];
      var $205 = _Py_BuildValue(__str8, allocate([ $203, 0, 0, 0, $204, 0, 0, 0 ], [ "%struct.PyObject*", 0, 0, 0, "%struct.PyObject*", 0, 0, 0 ], ALLOC_STACK));
      HEAP[$args] = $205;
      __label__ = 42;
      break;
     case 42:
      
      
      if (HEAP[$args] == 0) {
        __label__ = 43;
        break;
      } else {
        __label__ = 46;
        break;
      }
     case 43:
      
      
      
      var $211 = HEAP[HEAP[$container]] - 1;
      
      var $213 = HEAP[$container];
      HEAP[$213] = $211;
      
      
      
      
      if (HEAP[HEAP[$container]] == 0) {
        __label__ = 44;
        break;
      } else {
        __label__ = 45;
        break;
      }
     case 44:
      
      
      
      
      var $222 = HEAP[HEAP[HEAP[$container] + 4] + 24];
      var $223 = HEAP[$container];
      FUNCTION_TABLE[$222]($223);
      __label__ = 45;
      break;
     case 45:
      __label__ = 52;
      break;
     case 46:
      
      var $225 = HEAP[$self] + 24;
      HEAP[$225] = 1;
      
      
      
      
      var $230 = HEAP[HEAP[HEAP[$self] + 48]];
      var $231 = _getcode(0, __str9, 566);
      var $232 = HEAP[$args];
      var $233 = HEAP[$self];
      var $234 = _call_with_frame($231, $230, $232, $233);
      HEAP[$rv] = $234;
      
      var $236 = HEAP[$self] + 24;
      HEAP[$236] = 0;
      
      
      
      var $240 = HEAP[HEAP[$args]] - 1;
      
      var $242 = HEAP[$args];
      HEAP[$242] = $240;
      
      
      
      
      if (HEAP[HEAP[$args]] == 0) {
        __label__ = 47;
        break;
      } else {
        __label__ = 48;
        break;
      }
     case 47:
      
      
      
      
      var $251 = HEAP[HEAP[HEAP[$args] + 4] + 24];
      var $252 = HEAP[$args];
      FUNCTION_TABLE[$251]($252);
      __label__ = 48;
      break;
     case 48:
      
      
      if (HEAP[$rv] == 0) {
        __label__ = 49;
        break;
      } else {
        __label__ = 50;
        break;
      }
     case 49:
      var $255 = HEAP[$self];
      _flag_error($255);
      __label__ = 52;
      break;
     case 50:
      
      
      
      var $259 = HEAP[HEAP[$rv]] - 1;
      
      var $261 = HEAP[$rv];
      HEAP[$261] = $259;
      
      
      
      
      if (HEAP[HEAP[$rv]] == 0) {
        __label__ = 51;
        break;
      } else {
        __label__ = 52;
        break;
      }
     case 51:
      
      
      
      
      var $270 = HEAP[HEAP[HEAP[$rv] + 4] + 24];
      var $271 = HEAP[$rv];
      FUNCTION_TABLE[$270]($271);
      __label__ = 52;
      break;
     case 52:
      __label__ = 53;
      break;
     case 53:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _my_EndElementHandler($userData, $name) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 20;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $userData_addr = __stackBase__;
      var $name_addr = __stackBase__ + 4;
      var $self = __stackBase__ + 8;
      var $args = __stackBase__ + 12;
      var $rv = __stackBase__ + 16;
      
      HEAP[$userData_addr] = $userData;
      HEAP[$name_addr] = $name;
      
      var $1 = HEAP[$userData_addr];
      HEAP[$self] = $1;
      HEAP[$args] = 0;
      HEAP[$rv] = 0;
      var $2 = HEAP[$self];
      var $3 = _have_handler($2, 1);
      
      if ($3 != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 1:
      var $5 = HEAP[$self];
      var $6 = _flush_character_buffer($5);
      
      if ($6 < 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      var $8 = HEAP[$self];
      var $9 = HEAP[$name_addr];
      var $10 = _string_intern($8, $9);
      var $11 = _Py_BuildValue(__str10, allocate([ $10, 0, 0, 0 ], [ "%struct.PyObject*", 0, 0, 0 ], ALLOC_STACK));
      HEAP[$args] = $11;
      
      
      if (HEAP[$args] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      var $14 = HEAP[$self];
      _flag_error($14);
      __label__ = 11;
      break;
     case 4:
      
      var $16 = HEAP[$self] + 24;
      HEAP[$16] = 1;
      
      
      
      
      var $21 = HEAP[HEAP[HEAP[$self] + 48] + 4];
      var $22 = _getcode(1, __str11, 618);
      var $23 = HEAP[$args];
      var $24 = HEAP[$self];
      var $25 = _call_with_frame($22, $21, $23, $24);
      HEAP[$rv] = $25;
      
      var $27 = HEAP[$self] + 24;
      HEAP[$27] = 0;
      
      
      
      var $31 = HEAP[HEAP[$args]] - 1;
      
      var $33 = HEAP[$args];
      HEAP[$33] = $31;
      
      
      
      
      if (HEAP[HEAP[$args]] == 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      
      
      
      
      var $42 = HEAP[HEAP[HEAP[$args] + 4] + 24];
      var $43 = HEAP[$args];
      FUNCTION_TABLE[$42]($43);
      __label__ = 6;
      break;
     case 6:
      
      
      if (HEAP[$rv] == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      var $46 = HEAP[$self];
      _flag_error($46);
      __label__ = 11;
      break;
     case 8:
      
      
      
      var $50 = HEAP[HEAP[$rv]] - 1;
      
      var $52 = HEAP[$rv];
      HEAP[$52] = $50;
      
      
      
      
      if (HEAP[HEAP[$rv]] == 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      
      
      
      
      var $61 = HEAP[HEAP[HEAP[$rv] + 4] + 24];
      var $62 = HEAP[$rv];
      FUNCTION_TABLE[$61]($62);
      __label__ = 10;
      break;
     case 10:
      __label__ = 11;
      break;
     case 11:
      __label__ = 12;
      break;
     case 12:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _my_ProcessingInstructionHandler($userData, $target, $data) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $userData_addr = __stackBase__;
      var $target_addr = __stackBase__ + 4;
      var $data_addr = __stackBase__ + 8;
      var $iftmp_45 = __stackBase__ + 12;
      var $self = __stackBase__ + 16;
      var $args = __stackBase__ + 20;
      var $rv = __stackBase__ + 24;
      
      HEAP[$userData_addr] = $userData;
      HEAP[$target_addr] = $target;
      HEAP[$data_addr] = $data;
      
      var $1 = HEAP[$userData_addr];
      HEAP[$self] = $1;
      HEAP[$args] = 0;
      HEAP[$rv] = 0;
      var $2 = HEAP[$self];
      var $3 = _have_handler($2, 2);
      
      if ($3 != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 1:
      var $5 = HEAP[$self];
      var $6 = _flush_character_buffer($5);
      
      if ($6 < 0) {
        __label__ = 14;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      
      
      
      
      if (HEAP[HEAP[$self] + 12] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      HEAP[$iftmp_45] = FUNCTION_TABLE_OFFSET + 4;
      __label__ = 5;
      break;
     case 4:
      HEAP[$iftmp_45] = FUNCTION_TABLE_OFFSET + 6;
      __label__ = 5;
      break;
     case 5:
      var $12 = HEAP[$self];
      var $13 = HEAP[$target_addr];
      var $14 = _string_intern($12, $13);
      var $15 = HEAP[$iftmp_45];
      var $16 = HEAP[$data_addr];
      var $17 = _Py_BuildValue(__str12, allocate([ $14, 0, 0, 0, $15, 0, 0, 0, $16, 0, 0, 0 ], [ "%struct.PyObject*", 0, 0, 0, "%struct.PyObject* (i8*)*", 0, 0, 0, "i8*", 0, 0, 0 ], ALLOC_STACK));
      HEAP[$args] = $17;
      
      
      if (HEAP[$args] == 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      var $20 = HEAP[$self];
      _flag_error($20);
      __label__ = 14;
      break;
     case 7:
      
      var $22 = HEAP[$self] + 24;
      HEAP[$22] = 1;
      
      
      
      
      var $27 = HEAP[HEAP[HEAP[$self] + 48] + 8];
      var $28 = _getcode(2, __str13, 624);
      var $29 = HEAP[$args];
      var $30 = HEAP[$self];
      var $31 = _call_with_frame($28, $27, $29, $30);
      HEAP[$rv] = $31;
      
      var $33 = HEAP[$self] + 24;
      HEAP[$33] = 0;
      
      
      
      var $37 = HEAP[HEAP[$args]] - 1;
      
      var $39 = HEAP[$args];
      HEAP[$39] = $37;
      
      
      
      
      if (HEAP[HEAP[$args]] == 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      
      
      
      
      var $48 = HEAP[HEAP[HEAP[$args] + 4] + 24];
      var $49 = HEAP[$args];
      FUNCTION_TABLE[$48]($49);
      __label__ = 9;
      break;
     case 9:
      
      
      if (HEAP[$rv] == 0) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      var $52 = HEAP[$self];
      _flag_error($52);
      __label__ = 14;
      break;
     case 11:
      
      
      
      var $56 = HEAP[HEAP[$rv]] - 1;
      
      var $58 = HEAP[$rv];
      HEAP[$58] = $56;
      
      
      
      
      if (HEAP[HEAP[$rv]] == 0) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      
      
      
      
      var $67 = HEAP[HEAP[HEAP[$rv] + 4] + 24];
      var $68 = HEAP[$rv];
      FUNCTION_TABLE[$67]($68);
      __label__ = 13;
      break;
     case 13:
      __label__ = 14;
      break;
     case 14:
      __label__ = 15;
      break;
     case 15:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _my_UnparsedEntityDeclHandler($userData, $entityName, $base, $systemId, $publicId, $notationName) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 36;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $userData_addr = __stackBase__;
      var $entityName_addr = __stackBase__ + 4;
      var $base_addr = __stackBase__ + 8;
      var $systemId_addr = __stackBase__ + 12;
      var $publicId_addr = __stackBase__ + 16;
      var $notationName_addr = __stackBase__ + 20;
      var $self = __stackBase__ + 24;
      var $args = __stackBase__ + 28;
      var $rv = __stackBase__ + 32;
      
      HEAP[$userData_addr] = $userData;
      HEAP[$entityName_addr] = $entityName;
      HEAP[$base_addr] = $base;
      HEAP[$systemId_addr] = $systemId;
      HEAP[$publicId_addr] = $publicId;
      HEAP[$notationName_addr] = $notationName;
      
      var $1 = HEAP[$userData_addr];
      HEAP[$self] = $1;
      HEAP[$args] = 0;
      HEAP[$rv] = 0;
      var $2 = HEAP[$self];
      var $3 = _have_handler($2, 4);
      
      if ($3 != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 1:
      var $5 = HEAP[$self];
      var $6 = _flush_character_buffer($5);
      
      if ($6 < 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      var $8 = HEAP[$self];
      var $9 = HEAP[$notationName_addr];
      var $10 = _string_intern($8, $9);
      var $11 = HEAP[$self];
      var $12 = HEAP[$publicId_addr];
      var $13 = _string_intern($11, $12);
      var $14 = HEAP[$self];
      var $15 = HEAP[$systemId_addr];
      var $16 = _string_intern($14, $15);
      var $17 = HEAP[$self];
      var $18 = HEAP[$base_addr];
      var $19 = _string_intern($17, $18);
      var $20 = HEAP[$self];
      var $21 = HEAP[$entityName_addr];
      var $22 = _string_intern($20, $21);
      var $23 = _Py_BuildValue(__str14, allocate([ $22, 0, 0, 0, $19, 0, 0, 0, $16, 0, 0, 0, $13, 0, 0, 0, $10, 0, 0, 0 ], [ "%struct.PyObject*", 0, 0, 0, "%struct.PyObject*", 0, 0, 0, "%struct.PyObject*", 0, 0, 0, "%struct.PyObject*", 0, 0, 0, "%struct.PyObject*", 0, 0, 0 ], ALLOC_STACK));
      HEAP[$args] = $23;
      
      
      if (HEAP[$args] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      var $26 = HEAP[$self];
      _flag_error($26);
      __label__ = 11;
      break;
     case 4:
      
      var $28 = HEAP[$self] + 24;
      HEAP[$28] = 1;
      
      
      
      
      var $33 = HEAP[HEAP[HEAP[$self] + 48] + 16];
      var $34 = _getcode(4, __str15, 636);
      var $35 = HEAP[$args];
      var $36 = HEAP[$self];
      var $37 = _call_with_frame($34, $33, $35, $36);
      HEAP[$rv] = $37;
      
      var $39 = HEAP[$self] + 24;
      HEAP[$39] = 0;
      
      
      
      var $43 = HEAP[HEAP[$args]] - 1;
      
      var $45 = HEAP[$args];
      HEAP[$45] = $43;
      
      
      
      
      if (HEAP[HEAP[$args]] == 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      
      
      
      
      var $54 = HEAP[HEAP[HEAP[$args] + 4] + 24];
      var $55 = HEAP[$args];
      FUNCTION_TABLE[$54]($55);
      __label__ = 6;
      break;
     case 6:
      
      
      if (HEAP[$rv] == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      var $58 = HEAP[$self];
      _flag_error($58);
      __label__ = 11;
      break;
     case 8:
      
      
      
      var $62 = HEAP[HEAP[$rv]] - 1;
      
      var $64 = HEAP[$rv];
      HEAP[$64] = $62;
      
      
      
      
      if (HEAP[HEAP[$rv]] == 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      
      
      
      
      var $73 = HEAP[HEAP[HEAP[$rv] + 4] + 24];
      var $74 = HEAP[$rv];
      FUNCTION_TABLE[$73]($74);
      __label__ = 10;
      break;
     case 10:
      __label__ = 11;
      break;
     case 11:
      __label__ = 12;
      break;
     case 12:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _my_EntityDeclHandler($userData, $entityName, $is_parameter_entity, $value, $value_length, $base, $systemId, $publicId, $notationName) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 52;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 52);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $userData_addr = __stackBase__;
      var $entityName_addr = __stackBase__ + 4;
      var $is_parameter_entity_addr = __stackBase__ + 8;
      var $value_addr = __stackBase__ + 12;
      var $value_length_addr = __stackBase__ + 16;
      var $base_addr = __stackBase__ + 20;
      var $systemId_addr = __stackBase__ + 24;
      var $publicId_addr = __stackBase__ + 28;
      var $notationName_addr = __stackBase__ + 32;
      var $iftmp_46 = __stackBase__ + 36;
      var $self = __stackBase__ + 40;
      var $args = __stackBase__ + 44;
      var $rv = __stackBase__ + 48;
      
      HEAP[$userData_addr] = $userData;
      HEAP[$entityName_addr] = $entityName;
      HEAP[$is_parameter_entity_addr] = $is_parameter_entity;
      HEAP[$value_addr] = $value;
      HEAP[$value_length_addr] = $value_length;
      HEAP[$base_addr] = $base;
      HEAP[$systemId_addr] = $systemId;
      HEAP[$publicId_addr] = $publicId;
      HEAP[$notationName_addr] = $notationName;
      
      var $1 = HEAP[$userData_addr];
      HEAP[$self] = $1;
      HEAP[$args] = 0;
      HEAP[$rv] = 0;
      var $2 = HEAP[$self];
      var $3 = _have_handler($2, 17);
      
      if ($3 != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 1:
      var $5 = HEAP[$self];
      var $6 = _flush_character_buffer($5);
      
      if ($6 < 0) {
        __label__ = 14;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      var $8 = HEAP[$self];
      var $9 = HEAP[$notationName_addr];
      var $10 = _string_intern($8, $9);
      var $11 = HEAP[$self];
      var $12 = HEAP[$publicId_addr];
      var $13 = _string_intern($11, $12);
      var $14 = HEAP[$self];
      var $15 = HEAP[$systemId_addr];
      var $16 = _string_intern($14, $15);
      var $17 = HEAP[$self];
      var $18 = HEAP[$base_addr];
      var $19 = _string_intern($17, $18);
      
      
      
      
      if (HEAP[HEAP[$self] + 12] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      var $24 = HEAP[$value_addr];
      var $25 = HEAP[$value_length_addr];
      var $26 = _conv_string_len_to_unicode($24, $25);
      HEAP[$iftmp_46] = $26;
      __label__ = 5;
      break;
     case 4:
      var $27 = HEAP[$value_addr];
      var $28 = HEAP[$value_length_addr];
      var $29 = _conv_string_len_to_utf8($27, $28);
      HEAP[$iftmp_46] = $29;
      __label__ = 5;
      break;
     case 5:
      var $30 = HEAP[$self];
      var $31 = HEAP[$entityName_addr];
      var $32 = _string_intern($30, $31);
      var $33 = HEAP[$is_parameter_entity_addr];
      var $34 = HEAP[$iftmp_46];
      var $35 = _Py_BuildValue(__str16, allocate([ $32, 0, 0, 0, $33, 0, 0, 0, $34, 0, 0, 0, $19, 0, 0, 0, $16, 0, 0, 0, $13, 0, 0, 0, $10, 0, 0, 0 ], [ "%struct.PyObject*", 0, 0, 0, "i32", 0, 0, 0, "%struct.PyObject*", 0, 0, 0, "%struct.PyObject*", 0, 0, 0, "%struct.PyObject*", 0, 0, 0, "%struct.PyObject*", 0, 0, 0, "%struct.PyObject*", 0, 0, 0 ], ALLOC_STACK));
      HEAP[$args] = $35;
      
      
      if (HEAP[$args] == 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      var $38 = HEAP[$self];
      _flag_error($38);
      __label__ = 14;
      break;
     case 7:
      
      var $40 = HEAP[$self] + 24;
      HEAP[$40] = 1;
      
      
      
      
      var $45 = HEAP[HEAP[HEAP[$self] + 48] + 68];
      var $46 = _getcode(17, __str17, 673);
      var $47 = HEAP[$args];
      var $48 = HEAP[$self];
      var $49 = _call_with_frame($46, $45, $47, $48);
      HEAP[$rv] = $49;
      
      var $51 = HEAP[$self] + 24;
      HEAP[$51] = 0;
      
      
      
      var $55 = HEAP[HEAP[$args]] - 1;
      
      var $57 = HEAP[$args];
      HEAP[$57] = $55;
      
      
      
      
      if (HEAP[HEAP[$args]] == 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      
      
      
      
      var $66 = HEAP[HEAP[HEAP[$args] + 4] + 24];
      var $67 = HEAP[$args];
      FUNCTION_TABLE[$66]($67);
      __label__ = 9;
      break;
     case 9:
      
      
      if (HEAP[$rv] == 0) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      var $70 = HEAP[$self];
      _flag_error($70);
      __label__ = 14;
      break;
     case 11:
      
      
      
      var $74 = HEAP[HEAP[$rv]] - 1;
      
      var $76 = HEAP[$rv];
      HEAP[$76] = $74;
      
      
      
      
      if (HEAP[HEAP[$rv]] == 0) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      
      
      
      
      var $85 = HEAP[HEAP[HEAP[$rv] + 4] + 24];
      var $86 = HEAP[$rv];
      FUNCTION_TABLE[$85]($86);
      __label__ = 13;
      break;
     case 13:
      __label__ = 14;
      break;
     case 14:
      __label__ = 15;
      break;
     case 15:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _my_XmlDeclHandler($userData, $version, $encoding, $standalone) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 36;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $userData_addr = __stackBase__;
      var $version_addr = __stackBase__ + 4;
      var $encoding_addr = __stackBase__ + 8;
      var $standalone_addr = __stackBase__ + 12;
      var $iftmp_48 = __stackBase__ + 16;
      var $iftmp_47 = __stackBase__ + 20;
      var $self = __stackBase__ + 24;
      var $args = __stackBase__ + 28;
      var $rv = __stackBase__ + 32;
      
      HEAP[$userData_addr] = $userData;
      HEAP[$version_addr] = $version;
      HEAP[$encoding_addr] = $encoding;
      HEAP[$standalone_addr] = $standalone;
      
      var $1 = HEAP[$userData_addr];
      HEAP[$self] = $1;
      HEAP[$args] = 0;
      HEAP[$rv] = 0;
      var $2 = HEAP[$self];
      var $3 = _have_handler($2, 18);
      
      if ($3 != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 1:
      var $5 = HEAP[$self];
      var $6 = _flush_character_buffer($5);
      
      if ($6 < 0) {
        __label__ = 17;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      
      
      
      
      if (HEAP[HEAP[$self] + 12] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      HEAP[$iftmp_47] = FUNCTION_TABLE_OFFSET + 4;
      __label__ = 5;
      break;
     case 4:
      HEAP[$iftmp_47] = FUNCTION_TABLE_OFFSET + 6;
      __label__ = 5;
      break;
     case 5:
      
      
      
      
      if (HEAP[HEAP[$self] + 12] != 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      HEAP[$iftmp_48] = FUNCTION_TABLE_OFFSET + 4;
      __label__ = 8;
      break;
     case 7:
      HEAP[$iftmp_48] = FUNCTION_TABLE_OFFSET + 6;
      __label__ = 8;
      break;
     case 8:
      var $16 = HEAP[$iftmp_48];
      var $17 = HEAP[$version_addr];
      var $18 = HEAP[$iftmp_47];
      var $19 = HEAP[$encoding_addr];
      var $20 = HEAP[$standalone_addr];
      var $21 = _Py_BuildValue(__str18, allocate([ $16, 0, 0, 0, $17, 0, 0, 0, $18, 0, 0, 0, $19, 0, 0, 0, $20, 0, 0, 0 ], [ "%struct.PyObject* (i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "%struct.PyObject* (i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STACK));
      HEAP[$args] = $21;
      
      
      if (HEAP[$args] == 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      var $24 = HEAP[$self];
      _flag_error($24);
      __label__ = 17;
      break;
     case 10:
      
      var $26 = HEAP[$self] + 24;
      HEAP[$26] = 1;
      
      
      
      
      var $31 = HEAP[HEAP[HEAP[$self] + 48] + 72];
      var $32 = _getcode(18, __str19, 683);
      var $33 = HEAP[$args];
      var $34 = HEAP[$self];
      var $35 = _call_with_frame($32, $31, $33, $34);
      HEAP[$rv] = $35;
      
      var $37 = HEAP[$self] + 24;
      HEAP[$37] = 0;
      
      
      
      var $41 = HEAP[HEAP[$args]] - 1;
      
      var $43 = HEAP[$args];
      HEAP[$43] = $41;
      
      
      
      
      if (HEAP[HEAP[$args]] == 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      
      
      
      
      var $52 = HEAP[HEAP[HEAP[$args] + 4] + 24];
      var $53 = HEAP[$args];
      FUNCTION_TABLE[$52]($53);
      __label__ = 12;
      break;
     case 12:
      
      
      if (HEAP[$rv] == 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      var $56 = HEAP[$self];
      _flag_error($56);
      __label__ = 17;
      break;
     case 14:
      
      
      
      var $60 = HEAP[HEAP[$rv]] - 1;
      
      var $62 = HEAP[$rv];
      HEAP[$62] = $60;
      
      
      
      
      if (HEAP[HEAP[$rv]] == 0) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      
      
      
      
      var $71 = HEAP[HEAP[HEAP[$rv] + 4] + 24];
      var $72 = HEAP[$rv];
      FUNCTION_TABLE[$71]($72);
      __label__ = 16;
      break;
     case 16:
      __label__ = 17;
      break;
     case 17:
      __label__ = 18;
      break;
     case 18:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _conv_content_model($model, $conv_string) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 32;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $model_addr = __stackBase__;
      var $conv_string_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      var $result = __stackBase__ + 16;
      var $children = __stackBase__ + 20;
      var $i = __stackBase__ + 24;
      var $child = __stackBase__ + 28;
      
      HEAP[$model_addr] = $model;
      HEAP[$conv_string_addr] = $conv_string;
      HEAP[$result] = 0;
      
      
      var $3 = HEAP[HEAP[$model_addr] + 12];
      var $4 = _PyTuple_New($3);
      HEAP[$children] = $4;
      
      
      if (HEAP[$children] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 1:
      
      
      
      
      if (HEAP[HEAP[$model_addr] + 12] > 2147483646) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      ___assert_fail(__str20, __str6, 694, ___PRETTY_FUNCTION___9695);
      throw "Reached an unreachable!";
     case 3:
      HEAP[$i] = 0;
      __label__ = 10;
      break;
     case 4:
      
      
      
      
      var $15 = HEAP[HEAP[$model_addr] + 16] + 20 * HEAP[$i];
      var $16 = HEAP[$conv_string_addr];
      var $17 = _conv_content_model($15, $16);
      HEAP[$child] = $17;
      
      
      if (HEAP[$child] == 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 5:
      
      
      if (HEAP[$children] != 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 6:
      
      
      
      var $25 = HEAP[HEAP[$children]] - 1;
      
      var $27 = HEAP[$children];
      HEAP[$27] = $25;
      
      
      
      
      if (HEAP[HEAP[$children]] == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      
      
      
      
      var $36 = HEAP[HEAP[HEAP[$children] + 4] + 24];
      var $37 = HEAP[$children];
      FUNCTION_TABLE[$36]($37);
      __label__ = 8;
      break;
     case 8:
      HEAP[$0] = 0;
      __label__ = 13;
      break;
     case 9:
      
      
      
      
      var $42 = HEAP[$children] + 12 + HEAP[$i] * 4;
      var $43 = HEAP[$child];
      HEAP[$42] = $43;
      
      var $45 = HEAP[$i] + 1;
      HEAP[$i] = $45;
      __label__ = 10;
      break;
     case 10:
      
      
      
      
      
      if (HEAP[HEAP[$model_addr] + 12] > HEAP[$i]) {
        __label__ = 4;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 11:
      
      
      var $53 = HEAP[HEAP[$model_addr] + 8];
      
      
      var $56 = HEAP[HEAP[$model_addr] + 4];
      
      
      var $59 = HEAP[HEAP[$model_addr]];
      var $60 = HEAP[$conv_string_addr];
      var $61 = HEAP[$children];
      var $62 = _Py_BuildValue(__str21, allocate([ $59, 0, 0, 0, $56, 0, 0, 0, $60, 0, 0, 0, $53, 0, 0, 0, $61, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "%struct.PyObject* (i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "%struct.PyObject*", 0, 0, 0 ], ALLOC_STACK));
      HEAP[$result] = $62;
      __label__ = 12;
      break;
     case 12:
      var $63 = HEAP[$result];
      HEAP[$0] = $63;
      __label__ = 13;
      break;
     case 13:
      var $64 = HEAP[$0];
      HEAP[$retval] = $64;
      __label__ = 14;
      break;
     case 14:
      var $retval13 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval13;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _my_ElementDeclHandler($userData, $name, $model) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 36;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $userData_addr = __stackBase__;
      var $name_addr = __stackBase__ + 4;
      var $model_addr = __stackBase__ + 8;
      var $iftmp_51 = __stackBase__ + 12;
      var $self = __stackBase__ + 16;
      var $args = __stackBase__ + 20;
      var $rv = __stackBase__ + 24;
      var $modelobj = __stackBase__ + 28;
      var $nameobj = __stackBase__ + 32;
      
      HEAP[$userData_addr] = $userData;
      HEAP[$name_addr] = $name;
      HEAP[$model_addr] = $model;
      
      var $1 = HEAP[$userData_addr];
      HEAP[$self] = $1;
      HEAP[$args] = 0;
      var $2 = HEAP[$self];
      var $3 = _have_handler($2, 19);
      
      if ($3 != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 1:
      HEAP[$rv] = 0;
      var $5 = HEAP[$self];
      var $6 = _flush_character_buffer($5);
      
      if ($6 < 0) {
        __label__ = 19;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      
      
      
      
      if (HEAP[HEAP[$self] + 12] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      HEAP[$iftmp_51] = FUNCTION_TABLE_OFFSET + 4;
      __label__ = 5;
      break;
     case 4:
      HEAP[$iftmp_51] = FUNCTION_TABLE_OFFSET + 6;
      __label__ = 5;
      break;
     case 5:
      var $12 = HEAP[$model_addr];
      var $13 = HEAP[$iftmp_51];
      var $14 = _conv_content_model($12, $13);
      HEAP[$modelobj] = $14;
      
      
      if (HEAP[$modelobj] == 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      var $17 = HEAP[$self];
      _flag_error($17);
      __label__ = 19;
      break;
     case 7:
      var $18 = HEAP[$self];
      var $19 = HEAP[$name_addr];
      var $20 = _string_intern($18, $19);
      HEAP[$nameobj] = $20;
      
      
      if (HEAP[$nameobj] == 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 8:
      
      
      
      var $26 = HEAP[HEAP[$modelobj]] - 1;
      
      var $28 = HEAP[$modelobj];
      HEAP[$28] = $26;
      
      
      
      
      if (HEAP[HEAP[$modelobj]] == 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      
      
      
      
      var $37 = HEAP[HEAP[HEAP[$modelobj] + 4] + 24];
      var $38 = HEAP[$modelobj];
      FUNCTION_TABLE[$37]($38);
      __label__ = 10;
      break;
     case 10:
      var $39 = HEAP[$self];
      _flag_error($39);
      __label__ = 19;
      break;
     case 11:
      var $40 = HEAP[$nameobj];
      var $41 = HEAP[$modelobj];
      var $42 = _Py_BuildValue(__str22, allocate([ $40, 0, 0, 0, $41, 0, 0, 0 ], [ "%struct.PyObject*", 0, 0, 0, "%struct.PyObject*", 0, 0, 0 ], ALLOC_STACK));
      HEAP[$args] = $42;
      
      
      if (HEAP[$args] == 0) {
        __label__ = 12;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 12:
      
      
      
      var $48 = HEAP[HEAP[$modelobj]] - 1;
      
      var $50 = HEAP[$modelobj];
      HEAP[$50] = $48;
      
      
      
      
      if (HEAP[HEAP[$modelobj]] == 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      
      
      
      
      var $59 = HEAP[HEAP[HEAP[$modelobj] + 4] + 24];
      var $60 = HEAP[$modelobj];
      FUNCTION_TABLE[$59]($60);
      __label__ = 14;
      break;
     case 14:
      var $61 = HEAP[$self];
      _flag_error($61);
      __label__ = 19;
      break;
     case 15:
      
      var $63 = HEAP[$self] + 24;
      HEAP[$63] = 1;
      
      
      
      
      var $68 = HEAP[HEAP[HEAP[$self] + 48] + 76];
      var $69 = _getcode(19, __str23, 750);
      var $70 = HEAP[$args];
      var $71 = HEAP[$self];
      var $72 = _call_with_frame($69, $68, $70, $71);
      HEAP[$rv] = $72;
      
      var $74 = HEAP[$self] + 24;
      HEAP[$74] = 0;
      
      
      if (HEAP[$rv] == 0) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      var $77 = HEAP[$self];
      _flag_error($77);
      __label__ = 19;
      break;
     case 17:
      
      
      
      var $81 = HEAP[HEAP[$rv]] - 1;
      
      var $83 = HEAP[$rv];
      HEAP[$83] = $81;
      
      
      
      
      if (HEAP[HEAP[$rv]] == 0) {
        __label__ = 18;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 18:
      
      
      
      
      var $92 = HEAP[HEAP[HEAP[$rv] + 4] + 24];
      var $93 = HEAP[$rv];
      FUNCTION_TABLE[$92]($93);
      __label__ = 19;
      break;
     case 19:
      
      
      if (HEAP[$args] != 0) {
        __label__ = 20;
        break;
      } else {
        __label__ = 22;
        break;
      }
     case 20:
      
      
      
      var $99 = HEAP[HEAP[$args]] - 1;
      
      var $101 = HEAP[$args];
      HEAP[$101] = $99;
      
      
      
      
      if (HEAP[HEAP[$args]] == 0) {
        __label__ = 21;
        break;
      } else {
        __label__ = 22;
        break;
      }
     case 21:
      
      
      
      
      var $110 = HEAP[HEAP[HEAP[$args] + 4] + 24];
      var $111 = HEAP[$args];
      FUNCTION_TABLE[$110]($111);
      __label__ = 22;
      break;
     case 22:
      
      
      var $114 = HEAP[HEAP[$self] + 8];
      var $115 = HEAP[$model_addr];
      _PyExpat_XML_FreeContentModel($114, $115);
      __label__ = 23;
      break;
     case 23:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _my_AttlistDeclHandler($userData, $elname, $attname, $att_type, $dflt, $isrequired) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 44;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 44);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $userData_addr = __stackBase__;
      var $elname_addr = __stackBase__ + 4;
      var $attname_addr = __stackBase__ + 8;
      var $att_type_addr = __stackBase__ + 12;
      var $dflt_addr = __stackBase__ + 16;
      var $isrequired_addr = __stackBase__ + 20;
      var $iftmp_53 = __stackBase__ + 24;
      var $iftmp_52 = __stackBase__ + 28;
      var $self = __stackBase__ + 32;
      var $args = __stackBase__ + 36;
      var $rv = __stackBase__ + 40;
      
      HEAP[$userData_addr] = $userData;
      HEAP[$elname_addr] = $elname;
      HEAP[$attname_addr] = $attname;
      HEAP[$att_type_addr] = $att_type;
      HEAP[$dflt_addr] = $dflt;
      HEAP[$isrequired_addr] = $isrequired;
      
      var $1 = HEAP[$userData_addr];
      HEAP[$self] = $1;
      HEAP[$args] = 0;
      HEAP[$rv] = 0;
      var $2 = HEAP[$self];
      var $3 = _have_handler($2, 20);
      
      if ($3 != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 1:
      var $5 = HEAP[$self];
      var $6 = _flush_character_buffer($5);
      
      if ($6 < 0) {
        __label__ = 17;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      
      
      
      
      if (HEAP[HEAP[$self] + 12] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      HEAP[$iftmp_52] = FUNCTION_TABLE_OFFSET + 4;
      __label__ = 5;
      break;
     case 4:
      HEAP[$iftmp_52] = FUNCTION_TABLE_OFFSET + 6;
      __label__ = 5;
      break;
     case 5:
      
      
      
      
      if (HEAP[HEAP[$self] + 12] != 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      HEAP[$iftmp_53] = FUNCTION_TABLE_OFFSET + 4;
      __label__ = 8;
      break;
     case 7:
      HEAP[$iftmp_53] = FUNCTION_TABLE_OFFSET + 6;
      __label__ = 8;
      break;
     case 8:
      var $16 = HEAP[$self];
      var $17 = HEAP[$attname_addr];
      var $18 = _string_intern($16, $17);
      var $19 = HEAP[$self];
      var $20 = HEAP[$elname_addr];
      var $21 = _string_intern($19, $20);
      var $22 = HEAP[$iftmp_53];
      var $23 = HEAP[$att_type_addr];
      var $24 = HEAP[$iftmp_52];
      var $25 = HEAP[$dflt_addr];
      var $26 = HEAP[$isrequired_addr];
      var $27 = _Py_BuildValue(__str24, allocate([ $21, 0, 0, 0, $18, 0, 0, 0, $22, 0, 0, 0, $23, 0, 0, 0, $24, 0, 0, 0, $25, 0, 0, 0, $26, 0, 0, 0 ], [ "%struct.PyObject*", 0, 0, 0, "%struct.PyObject*", 0, 0, 0, "%struct.PyObject* (i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "%struct.PyObject* (i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STACK));
      HEAP[$args] = $27;
      
      
      if (HEAP[$args] == 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      var $30 = HEAP[$self];
      _flag_error($30);
      __label__ = 17;
      break;
     case 10:
      
      var $32 = HEAP[$self] + 24;
      HEAP[$32] = 1;
      
      
      
      
      var $37 = HEAP[HEAP[HEAP[$self] + 48] + 80];
      var $38 = _getcode(20, __str25, 775);
      var $39 = HEAP[$args];
      var $40 = HEAP[$self];
      var $41 = _call_with_frame($38, $37, $39, $40);
      HEAP[$rv] = $41;
      
      var $43 = HEAP[$self] + 24;
      HEAP[$43] = 0;
      
      
      
      var $47 = HEAP[HEAP[$args]] - 1;
      
      var $49 = HEAP[$args];
      HEAP[$49] = $47;
      
      
      
      
      if (HEAP[HEAP[$args]] == 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      
      
      
      
      var $58 = HEAP[HEAP[HEAP[$args] + 4] + 24];
      var $59 = HEAP[$args];
      FUNCTION_TABLE[$58]($59);
      __label__ = 12;
      break;
     case 12:
      
      
      if (HEAP[$rv] == 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      var $62 = HEAP[$self];
      _flag_error($62);
      __label__ = 17;
      break;
     case 14:
      
      
      
      var $66 = HEAP[HEAP[$rv]] - 1;
      
      var $68 = HEAP[$rv];
      HEAP[$68] = $66;
      
      
      
      
      if (HEAP[HEAP[$rv]] == 0) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      
      
      
      
      var $77 = HEAP[HEAP[HEAP[$rv] + 4] + 24];
      var $78 = HEAP[$rv];
      FUNCTION_TABLE[$77]($78);
      __label__ = 16;
      break;
     case 16:
      __label__ = 17;
      break;
     case 17:
      __label__ = 18;
      break;
     case 18:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _my_SkippedEntityHandler($userData, $entityName, $is_parameter_entity) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 24;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $userData_addr = __stackBase__;
      var $entityName_addr = __stackBase__ + 4;
      var $is_parameter_entity_addr = __stackBase__ + 8;
      var $self = __stackBase__ + 12;
      var $args = __stackBase__ + 16;
      var $rv = __stackBase__ + 20;
      
      HEAP[$userData_addr] = $userData;
      HEAP[$entityName_addr] = $entityName;
      HEAP[$is_parameter_entity_addr] = $is_parameter_entity;
      
      var $1 = HEAP[$userData_addr];
      HEAP[$self] = $1;
      HEAP[$args] = 0;
      HEAP[$rv] = 0;
      var $2 = HEAP[$self];
      var $3 = _have_handler($2, 21);
      
      if ($3 != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 1:
      var $5 = HEAP[$self];
      var $6 = _flush_character_buffer($5);
      
      if ($6 < 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      var $8 = HEAP[$self];
      var $9 = HEAP[$entityName_addr];
      var $10 = _string_intern($8, $9);
      var $11 = HEAP[$is_parameter_entity_addr];
      var $12 = _Py_BuildValue(__str26, allocate([ $10, 0, 0, 0, $11, 0, 0, 0 ], [ "%struct.PyObject*", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STACK));
      HEAP[$args] = $12;
      
      
      if (HEAP[$args] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      var $15 = HEAP[$self];
      _flag_error($15);
      __label__ = 11;
      break;
     case 4:
      
      var $17 = HEAP[$self] + 24;
      HEAP[$17] = 1;
      
      
      
      
      var $22 = HEAP[HEAP[HEAP[$self] + 48] + 84];
      var $23 = _getcode(21, __str27, 783);
      var $24 = HEAP[$args];
      var $25 = HEAP[$self];
      var $26 = _call_with_frame($23, $22, $24, $25);
      HEAP[$rv] = $26;
      
      var $28 = HEAP[$self] + 24;
      HEAP[$28] = 0;
      
      
      
      var $32 = HEAP[HEAP[$args]] - 1;
      
      var $34 = HEAP[$args];
      HEAP[$34] = $32;
      
      
      
      
      if (HEAP[HEAP[$args]] == 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      
      
      
      
      var $43 = HEAP[HEAP[HEAP[$args] + 4] + 24];
      var $44 = HEAP[$args];
      FUNCTION_TABLE[$43]($44);
      __label__ = 6;
      break;
     case 6:
      
      
      if (HEAP[$rv] == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      var $47 = HEAP[$self];
      _flag_error($47);
      __label__ = 11;
      break;
     case 8:
      
      
      
      var $51 = HEAP[HEAP[$rv]] - 1;
      
      var $53 = HEAP[$rv];
      HEAP[$53] = $51;
      
      
      
      
      if (HEAP[HEAP[$rv]] == 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      
      
      
      
      var $62 = HEAP[HEAP[HEAP[$rv] + 4] + 24];
      var $63 = HEAP[$rv];
      FUNCTION_TABLE[$62]($63);
      __label__ = 10;
      break;
     case 10:
      __label__ = 11;
      break;
     case 11:
      __label__ = 12;
      break;
     case 12:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _my_NotationDeclHandler($userData, $notationName, $base, $systemId, $publicId) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 32;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $userData_addr = __stackBase__;
      var $notationName_addr = __stackBase__ + 4;
      var $base_addr = __stackBase__ + 8;
      var $systemId_addr = __stackBase__ + 12;
      var $publicId_addr = __stackBase__ + 16;
      var $self = __stackBase__ + 20;
      var $args = __stackBase__ + 24;
      var $rv = __stackBase__ + 28;
      
      HEAP[$userData_addr] = $userData;
      HEAP[$notationName_addr] = $notationName;
      HEAP[$base_addr] = $base;
      HEAP[$systemId_addr] = $systemId;
      HEAP[$publicId_addr] = $publicId;
      
      var $1 = HEAP[$userData_addr];
      HEAP[$self] = $1;
      HEAP[$args] = 0;
      HEAP[$rv] = 0;
      var $2 = HEAP[$self];
      var $3 = _have_handler($2, 5);
      
      if ($3 != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 1:
      var $5 = HEAP[$self];
      var $6 = _flush_character_buffer($5);
      
      if ($6 < 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      var $8 = HEAP[$self];
      var $9 = HEAP[$publicId_addr];
      var $10 = _string_intern($8, $9);
      var $11 = HEAP[$self];
      var $12 = HEAP[$systemId_addr];
      var $13 = _string_intern($11, $12);
      var $14 = HEAP[$self];
      var $15 = HEAP[$base_addr];
      var $16 = _string_intern($14, $15);
      var $17 = HEAP[$self];
      var $18 = HEAP[$notationName_addr];
      var $19 = _string_intern($17, $18);
      var $20 = _Py_BuildValue(__str28, allocate([ $19, 0, 0, 0, $16, 0, 0, 0, $13, 0, 0, 0, $10, 0, 0, 0 ], [ "%struct.PyObject*", 0, 0, 0, "%struct.PyObject*", 0, 0, 0, "%struct.PyObject*", 0, 0, 0, "%struct.PyObject*", 0, 0, 0 ], ALLOC_STACK));
      HEAP[$args] = $20;
      
      
      if (HEAP[$args] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      var $23 = HEAP[$self];
      _flag_error($23);
      __label__ = 11;
      break;
     case 4:
      
      var $25 = HEAP[$self] + 24;
      HEAP[$25] = 1;
      
      
      
      
      var $30 = HEAP[HEAP[HEAP[$self] + 48] + 20];
      var $31 = _getcode(5, __str29, 794);
      var $32 = HEAP[$args];
      var $33 = HEAP[$self];
      var $34 = _call_with_frame($31, $30, $32, $33);
      HEAP[$rv] = $34;
      
      var $36 = HEAP[$self] + 24;
      HEAP[$36] = 0;
      
      
      
      var $40 = HEAP[HEAP[$args]] - 1;
      
      var $42 = HEAP[$args];
      HEAP[$42] = $40;
      
      
      
      
      if (HEAP[HEAP[$args]] == 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      
      
      
      
      var $51 = HEAP[HEAP[HEAP[$args] + 4] + 24];
      var $52 = HEAP[$args];
      FUNCTION_TABLE[$51]($52);
      __label__ = 6;
      break;
     case 6:
      
      
      if (HEAP[$rv] == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      var $55 = HEAP[$self];
      _flag_error($55);
      __label__ = 11;
      break;
     case 8:
      
      
      
      var $59 = HEAP[HEAP[$rv]] - 1;
      
      var $61 = HEAP[$rv];
      HEAP[$61] = $59;
      
      
      
      
      if (HEAP[HEAP[$rv]] == 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      
      
      
      
      var $70 = HEAP[HEAP[HEAP[$rv] + 4] + 24];
      var $71 = HEAP[$rv];
      FUNCTION_TABLE[$70]($71);
      __label__ = 10;
      break;
     case 10:
      __label__ = 11;
      break;
     case 11:
      __label__ = 12;
      break;
     case 12:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _my_StartNamespaceDeclHandler($userData, $prefix, $uri) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 24;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $userData_addr = __stackBase__;
      var $prefix_addr = __stackBase__ + 4;
      var $uri_addr = __stackBase__ + 8;
      var $self = __stackBase__ + 12;
      var $args = __stackBase__ + 16;
      var $rv = __stackBase__ + 20;
      
      HEAP[$userData_addr] = $userData;
      HEAP[$prefix_addr] = $prefix;
      HEAP[$uri_addr] = $uri;
      
      var $1 = HEAP[$userData_addr];
      HEAP[$self] = $1;
      HEAP[$args] = 0;
      HEAP[$rv] = 0;
      var $2 = HEAP[$self];
      var $3 = _have_handler($2, 6);
      
      if ($3 != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 1:
      var $5 = HEAP[$self];
      var $6 = _flush_character_buffer($5);
      
      if ($6 < 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      var $8 = HEAP[$self];
      var $9 = HEAP[$uri_addr];
      var $10 = _string_intern($8, $9);
      var $11 = HEAP[$self];
      var $12 = HEAP[$prefix_addr];
      var $13 = _string_intern($11, $12);
      var $14 = _Py_BuildValue(__str8, allocate([ $13, 0, 0, 0, $10, 0, 0, 0 ], [ "%struct.PyObject*", 0, 0, 0, "%struct.PyObject*", 0, 0, 0 ], ALLOC_STACK));
      HEAP[$args] = $14;
      
      
      if (HEAP[$args] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      var $17 = HEAP[$self];
      _flag_error($17);
      __label__ = 11;
      break;
     case 4:
      
      var $19 = HEAP[$self] + 24;
      HEAP[$19] = 1;
      
      
      
      
      var $24 = HEAP[HEAP[HEAP[$self] + 48] + 24];
      var $25 = _getcode(6, __str30, 801);
      var $26 = HEAP[$args];
      var $27 = HEAP[$self];
      var $28 = _call_with_frame($25, $24, $26, $27);
      HEAP[$rv] = $28;
      
      var $30 = HEAP[$self] + 24;
      HEAP[$30] = 0;
      
      
      
      var $34 = HEAP[HEAP[$args]] - 1;
      
      var $36 = HEAP[$args];
      HEAP[$36] = $34;
      
      
      
      
      if (HEAP[HEAP[$args]] == 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      
      
      
      
      var $45 = HEAP[HEAP[HEAP[$args] + 4] + 24];
      var $46 = HEAP[$args];
      FUNCTION_TABLE[$45]($46);
      __label__ = 6;
      break;
     case 6:
      
      
      if (HEAP[$rv] == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      var $49 = HEAP[$self];
      _flag_error($49);
      __label__ = 11;
      break;
     case 8:
      
      
      
      var $53 = HEAP[HEAP[$rv]] - 1;
      
      var $55 = HEAP[$rv];
      HEAP[$55] = $53;
      
      
      
      
      if (HEAP[HEAP[$rv]] == 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      
      
      
      
      var $64 = HEAP[HEAP[HEAP[$rv] + 4] + 24];
      var $65 = HEAP[$rv];
      FUNCTION_TABLE[$64]($65);
      __label__ = 10;
      break;
     case 10:
      __label__ = 11;
      break;
     case 11:
      __label__ = 12;
      break;
     case 12:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _my_EndNamespaceDeclHandler($userData, $prefix) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 20;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $userData_addr = __stackBase__;
      var $prefix_addr = __stackBase__ + 4;
      var $self = __stackBase__ + 8;
      var $args = __stackBase__ + 12;
      var $rv = __stackBase__ + 16;
      
      HEAP[$userData_addr] = $userData;
      HEAP[$prefix_addr] = $prefix;
      
      var $1 = HEAP[$userData_addr];
      HEAP[$self] = $1;
      HEAP[$args] = 0;
      HEAP[$rv] = 0;
      var $2 = HEAP[$self];
      var $3 = _have_handler($2, 7);
      
      if ($3 != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 1:
      var $5 = HEAP[$self];
      var $6 = _flush_character_buffer($5);
      
      if ($6 < 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      var $8 = HEAP[$self];
      var $9 = HEAP[$prefix_addr];
      var $10 = _string_intern($8, $9);
      var $11 = _Py_BuildValue(__str10, allocate([ $10, 0, 0, 0 ], [ "%struct.PyObject*", 0, 0, 0 ], ALLOC_STACK));
      HEAP[$args] = $11;
      
      
      if (HEAP[$args] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      var $14 = HEAP[$self];
      _flag_error($14);
      __label__ = 11;
      break;
     case 4:
      
      var $16 = HEAP[$self] + 24;
      HEAP[$16] = 1;
      
      
      
      
      var $21 = HEAP[HEAP[HEAP[$self] + 48] + 28];
      var $22 = _getcode(7, __str31, 806);
      var $23 = HEAP[$args];
      var $24 = HEAP[$self];
      var $25 = _call_with_frame($22, $21, $23, $24);
      HEAP[$rv] = $25;
      
      var $27 = HEAP[$self] + 24;
      HEAP[$27] = 0;
      
      
      
      var $31 = HEAP[HEAP[$args]] - 1;
      
      var $33 = HEAP[$args];
      HEAP[$33] = $31;
      
      
      
      
      if (HEAP[HEAP[$args]] == 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      
      
      
      
      var $42 = HEAP[HEAP[HEAP[$args] + 4] + 24];
      var $43 = HEAP[$args];
      FUNCTION_TABLE[$42]($43);
      __label__ = 6;
      break;
     case 6:
      
      
      if (HEAP[$rv] == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      var $46 = HEAP[$self];
      _flag_error($46);
      __label__ = 11;
      break;
     case 8:
      
      
      
      var $50 = HEAP[HEAP[$rv]] - 1;
      
      var $52 = HEAP[$rv];
      HEAP[$52] = $50;
      
      
      
      
      if (HEAP[HEAP[$rv]] == 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      
      
      
      
      var $61 = HEAP[HEAP[HEAP[$rv] + 4] + 24];
      var $62 = HEAP[$rv];
      FUNCTION_TABLE[$61]($62);
      __label__ = 10;
      break;
     case 10:
      __label__ = 11;
      break;
     case 11:
      __label__ = 12;
      break;
     case 12:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _my_CommentHandler($userData, $data) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 24;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $userData_addr = __stackBase__;
      var $data_addr = __stackBase__ + 4;
      var $iftmp_54 = __stackBase__ + 8;
      var $self = __stackBase__ + 12;
      var $args = __stackBase__ + 16;
      var $rv = __stackBase__ + 20;
      
      HEAP[$userData_addr] = $userData;
      HEAP[$data_addr] = $data;
      
      var $1 = HEAP[$userData_addr];
      HEAP[$self] = $1;
      HEAP[$args] = 0;
      HEAP[$rv] = 0;
      var $2 = HEAP[$self];
      var $3 = _have_handler($2, 8);
      
      if ($3 != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 1:
      var $5 = HEAP[$self];
      var $6 = _flush_character_buffer($5);
      
      if ($6 < 0) {
        __label__ = 14;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      
      
      
      
      if (HEAP[HEAP[$self] + 12] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      HEAP[$iftmp_54] = FUNCTION_TABLE_OFFSET + 4;
      __label__ = 5;
      break;
     case 4:
      HEAP[$iftmp_54] = FUNCTION_TABLE_OFFSET + 6;
      __label__ = 5;
      break;
     case 5:
      var $12 = HEAP[$iftmp_54];
      var $13 = HEAP[$data_addr];
      var $14 = _Py_BuildValue(__str32, allocate([ $12, 0, 0, 0, $13, 0, 0, 0 ], [ "%struct.PyObject* (i8*)*", 0, 0, 0, "i8*", 0, 0, 0 ], ALLOC_STACK));
      HEAP[$args] = $14;
      
      
      if (HEAP[$args] == 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      var $17 = HEAP[$self];
      _flag_error($17);
      __label__ = 14;
      break;
     case 7:
      
      var $19 = HEAP[$self] + 24;
      HEAP[$19] = 1;
      
      
      
      
      var $24 = HEAP[HEAP[HEAP[$self] + 48] + 32];
      var $25 = _getcode(8, __str33, 810);
      var $26 = HEAP[$args];
      var $27 = HEAP[$self];
      var $28 = _call_with_frame($25, $24, $26, $27);
      HEAP[$rv] = $28;
      
      var $30 = HEAP[$self] + 24;
      HEAP[$30] = 0;
      
      
      
      var $34 = HEAP[HEAP[$args]] - 1;
      
      var $36 = HEAP[$args];
      HEAP[$36] = $34;
      
      
      
      
      if (HEAP[HEAP[$args]] == 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      
      
      
      
      var $45 = HEAP[HEAP[HEAP[$args] + 4] + 24];
      var $46 = HEAP[$args];
      FUNCTION_TABLE[$45]($46);
      __label__ = 9;
      break;
     case 9:
      
      
      if (HEAP[$rv] == 0) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      var $49 = HEAP[$self];
      _flag_error($49);
      __label__ = 14;
      break;
     case 11:
      
      
      
      var $53 = HEAP[HEAP[$rv]] - 1;
      
      var $55 = HEAP[$rv];
      HEAP[$55] = $53;
      
      
      
      
      if (HEAP[HEAP[$rv]] == 0) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      
      
      
      
      var $64 = HEAP[HEAP[HEAP[$rv] + 4] + 24];
      var $65 = HEAP[$rv];
      FUNCTION_TABLE[$64]($65);
      __label__ = 13;
      break;
     case 13:
      __label__ = 14;
      break;
     case 14:
      __label__ = 15;
      break;
     case 15:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _my_StartCdataSectionHandler($userData) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $self = __stackBase__ + 4;
      var $args = __stackBase__ + 8;
      var $rv = __stackBase__ + 12;
      
      HEAP[__stackBase__] = $userData;
      
      var $1 = HEAP[__stackBase__];
      HEAP[$self] = $1;
      HEAP[$args] = 0;
      HEAP[$rv] = 0;
      var $2 = HEAP[$self];
      var $3 = _have_handler($2, 9);
      
      if ($3 != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 1:
      var $5 = HEAP[$self];
      var $6 = _flush_character_buffer($5);
      
      if ($6 < 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      var $8 = _Py_BuildValue(__str34, allocate(1, "i32", ALLOC_STACK));
      HEAP[$args] = $8;
      
      
      if (HEAP[$args] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      var $11 = HEAP[$self];
      _flag_error($11);
      __label__ = 11;
      break;
     case 4:
      
      var $13 = HEAP[$self] + 24;
      HEAP[$13] = 1;
      
      
      
      
      var $18 = HEAP[HEAP[HEAP[$self] + 48] + 36];
      var $19 = _getcode(9, __str35, 814);
      var $20 = HEAP[$args];
      var $21 = HEAP[$self];
      var $22 = _call_with_frame($19, $18, $20, $21);
      HEAP[$rv] = $22;
      
      var $24 = HEAP[$self] + 24;
      HEAP[$24] = 0;
      
      
      
      var $28 = HEAP[HEAP[$args]] - 1;
      
      var $30 = HEAP[$args];
      HEAP[$30] = $28;
      
      
      
      
      if (HEAP[HEAP[$args]] == 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      
      
      
      
      var $39 = HEAP[HEAP[HEAP[$args] + 4] + 24];
      var $40 = HEAP[$args];
      FUNCTION_TABLE[$39]($40);
      __label__ = 6;
      break;
     case 6:
      
      
      if (HEAP[$rv] == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      var $43 = HEAP[$self];
      _flag_error($43);
      __label__ = 11;
      break;
     case 8:
      
      
      
      var $47 = HEAP[HEAP[$rv]] - 1;
      
      var $49 = HEAP[$rv];
      HEAP[$49] = $47;
      
      
      
      
      if (HEAP[HEAP[$rv]] == 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      
      
      
      
      var $58 = HEAP[HEAP[HEAP[$rv] + 4] + 24];
      var $59 = HEAP[$rv];
      FUNCTION_TABLE[$58]($59);
      __label__ = 10;
      break;
     case 10:
      __label__ = 11;
      break;
     case 11:
      __label__ = 12;
      break;
     case 12:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _my_EndCdataSectionHandler($userData) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $self = __stackBase__ + 4;
      var $args = __stackBase__ + 8;
      var $rv = __stackBase__ + 12;
      
      HEAP[__stackBase__] = $userData;
      
      var $1 = HEAP[__stackBase__];
      HEAP[$self] = $1;
      HEAP[$args] = 0;
      HEAP[$rv] = 0;
      var $2 = HEAP[$self];
      var $3 = _have_handler($2, 10);
      
      if ($3 != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 1:
      var $5 = HEAP[$self];
      var $6 = _flush_character_buffer($5);
      
      if ($6 < 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      var $8 = _Py_BuildValue(__str34, allocate(1, "i32", ALLOC_STACK));
      HEAP[$args] = $8;
      
      
      if (HEAP[$args] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      var $11 = HEAP[$self];
      _flag_error($11);
      __label__ = 11;
      break;
     case 4:
      
      var $13 = HEAP[$self] + 24;
      HEAP[$13] = 1;
      
      
      
      
      var $18 = HEAP[HEAP[HEAP[$self] + 48] + 40];
      var $19 = _getcode(10, __str36, 818);
      var $20 = HEAP[$args];
      var $21 = HEAP[$self];
      var $22 = _call_with_frame($19, $18, $20, $21);
      HEAP[$rv] = $22;
      
      var $24 = HEAP[$self] + 24;
      HEAP[$24] = 0;
      
      
      
      var $28 = HEAP[HEAP[$args]] - 1;
      
      var $30 = HEAP[$args];
      HEAP[$30] = $28;
      
      
      
      
      if (HEAP[HEAP[$args]] == 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      
      
      
      
      var $39 = HEAP[HEAP[HEAP[$args] + 4] + 24];
      var $40 = HEAP[$args];
      FUNCTION_TABLE[$39]($40);
      __label__ = 6;
      break;
     case 6:
      
      
      if (HEAP[$rv] == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      var $43 = HEAP[$self];
      _flag_error($43);
      __label__ = 11;
      break;
     case 8:
      
      
      
      var $47 = HEAP[HEAP[$rv]] - 1;
      
      var $49 = HEAP[$rv];
      HEAP[$49] = $47;
      
      
      
      
      if (HEAP[HEAP[$rv]] == 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      
      
      
      
      var $58 = HEAP[HEAP[HEAP[$rv] + 4] + 24];
      var $59 = HEAP[$rv];
      FUNCTION_TABLE[$58]($59);
      __label__ = 10;
      break;
     case 10:
      __label__ = 11;
      break;
     case 11:
      __label__ = 12;
      break;
     case 12:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _my_DefaultHandler($userData, $s, $len) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $userData_addr = __stackBase__;
      var $s_addr = __stackBase__ + 4;
      var $len_addr = __stackBase__ + 8;
      var $iftmp_55 = __stackBase__ + 12;
      var $self = __stackBase__ + 16;
      var $args = __stackBase__ + 20;
      var $rv = __stackBase__ + 24;
      
      HEAP[$userData_addr] = $userData;
      HEAP[$s_addr] = $s;
      HEAP[$len_addr] = $len;
      
      var $1 = HEAP[$userData_addr];
      HEAP[$self] = $1;
      HEAP[$args] = 0;
      HEAP[$rv] = 0;
      var $2 = HEAP[$self];
      var $3 = _have_handler($2, 11);
      
      if ($3 != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 1:
      var $5 = HEAP[$self];
      var $6 = _flush_character_buffer($5);
      
      if ($6 < 0) {
        __label__ = 14;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      
      
      
      
      if (HEAP[HEAP[$self] + 12] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      var $12 = HEAP[$s_addr];
      var $13 = HEAP[$len_addr];
      var $14 = _conv_string_len_to_unicode($12, $13);
      HEAP[$iftmp_55] = $14;
      __label__ = 5;
      break;
     case 4:
      var $15 = HEAP[$s_addr];
      var $16 = HEAP[$len_addr];
      var $17 = _conv_string_len_to_utf8($15, $16);
      HEAP[$iftmp_55] = $17;
      __label__ = 5;
      break;
     case 5:
      var $18 = HEAP[$iftmp_55];
      var $19 = _Py_BuildValue(__str10, allocate([ $18, 0, 0, 0 ], [ "%struct.PyObject*", 0, 0, 0 ], ALLOC_STACK));
      HEAP[$args] = $19;
      
      
      if (HEAP[$args] == 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      var $22 = HEAP[$self];
      _flag_error($22);
      __label__ = 14;
      break;
     case 7:
      
      var $24 = HEAP[$self] + 24;
      HEAP[$24] = 1;
      
      
      
      
      var $29 = HEAP[HEAP[HEAP[$self] + 48] + 44];
      var $30 = _getcode(11, __str37, 833);
      var $31 = HEAP[$args];
      var $32 = HEAP[$self];
      var $33 = _call_with_frame($30, $29, $31, $32);
      HEAP[$rv] = $33;
      
      var $35 = HEAP[$self] + 24;
      HEAP[$35] = 0;
      
      
      
      var $39 = HEAP[HEAP[$args]] - 1;
      
      var $41 = HEAP[$args];
      HEAP[$41] = $39;
      
      
      
      
      if (HEAP[HEAP[$args]] == 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      
      
      
      
      var $50 = HEAP[HEAP[HEAP[$args] + 4] + 24];
      var $51 = HEAP[$args];
      FUNCTION_TABLE[$50]($51);
      __label__ = 9;
      break;
     case 9:
      
      
      if (HEAP[$rv] == 0) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      var $54 = HEAP[$self];
      _flag_error($54);
      __label__ = 14;
      break;
     case 11:
      
      
      
      var $58 = HEAP[HEAP[$rv]] - 1;
      
      var $60 = HEAP[$rv];
      HEAP[$60] = $58;
      
      
      
      
      if (HEAP[HEAP[$rv]] == 0) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      
      
      
      
      var $69 = HEAP[HEAP[HEAP[$rv] + 4] + 24];
      var $70 = HEAP[$rv];
      FUNCTION_TABLE[$69]($70);
      __label__ = 13;
      break;
     case 13:
      __label__ = 14;
      break;
     case 14:
      __label__ = 15;
      break;
     case 15:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _my_DefaultHandlerExpandHandler($userData, $s, $len) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $userData_addr = __stackBase__;
      var $s_addr = __stackBase__ + 4;
      var $len_addr = __stackBase__ + 8;
      var $iftmp_56 = __stackBase__ + 12;
      var $self = __stackBase__ + 16;
      var $args = __stackBase__ + 20;
      var $rv = __stackBase__ + 24;
      
      HEAP[$userData_addr] = $userData;
      HEAP[$s_addr] = $s;
      HEAP[$len_addr] = $len;
      
      var $1 = HEAP[$userData_addr];
      HEAP[$self] = $1;
      HEAP[$args] = 0;
      HEAP[$rv] = 0;
      var $2 = HEAP[$self];
      var $3 = _have_handler($2, 12);
      
      if ($3 != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 1:
      var $5 = HEAP[$self];
      var $6 = _flush_character_buffer($5);
      
      if ($6 < 0) {
        __label__ = 14;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      
      
      
      
      if (HEAP[HEAP[$self] + 12] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      var $12 = HEAP[$s_addr];
      var $13 = HEAP[$len_addr];
      var $14 = _conv_string_len_to_unicode($12, $13);
      HEAP[$iftmp_56] = $14;
      __label__ = 5;
      break;
     case 4:
      var $15 = HEAP[$s_addr];
      var $16 = HEAP[$len_addr];
      var $17 = _conv_string_len_to_utf8($15, $16);
      HEAP[$iftmp_56] = $17;
      __label__ = 5;
      break;
     case 5:
      var $18 = HEAP[$iftmp_56];
      var $19 = _Py_BuildValue(__str10, allocate([ $18, 0, 0, 0 ], [ "%struct.PyObject*", 0, 0, 0 ], ALLOC_STACK));
      HEAP[$args] = $19;
      
      
      if (HEAP[$args] == 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      var $22 = HEAP[$self];
      _flag_error($22);
      __label__ = 14;
      break;
     case 7:
      
      var $24 = HEAP[$self] + 24;
      HEAP[$24] = 1;
      
      
      
      
      var $29 = HEAP[HEAP[HEAP[$self] + 48] + 48];
      var $30 = _getcode(12, __str38, 839);
      var $31 = HEAP[$args];
      var $32 = HEAP[$self];
      var $33 = _call_with_frame($30, $29, $31, $32);
      HEAP[$rv] = $33;
      
      var $35 = HEAP[$self] + 24;
      HEAP[$35] = 0;
      
      
      
      var $39 = HEAP[HEAP[$args]] - 1;
      
      var $41 = HEAP[$args];
      HEAP[$41] = $39;
      
      
      
      
      if (HEAP[HEAP[$args]] == 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      
      
      
      
      var $50 = HEAP[HEAP[HEAP[$args] + 4] + 24];
      var $51 = HEAP[$args];
      FUNCTION_TABLE[$50]($51);
      __label__ = 9;
      break;
     case 9:
      
      
      if (HEAP[$rv] == 0) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      var $54 = HEAP[$self];
      _flag_error($54);
      __label__ = 14;
      break;
     case 11:
      
      
      
      var $58 = HEAP[HEAP[$rv]] - 1;
      
      var $60 = HEAP[$rv];
      HEAP[$60] = $58;
      
      
      
      
      if (HEAP[HEAP[$rv]] == 0) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      
      
      
      
      var $69 = HEAP[HEAP[HEAP[$rv] + 4] + 24];
      var $70 = HEAP[$rv];
      FUNCTION_TABLE[$69]($70);
      __label__ = 13;
      break;
     case 13:
      __label__ = 14;
      break;
     case 14:
      __label__ = 15;
      break;
     case 15:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _my_NotStandaloneHandler($userData) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $retval = __stackBase__ + 4;
      var $0 = __stackBase__ + 8;
      var $self = __stackBase__ + 12;
      var $args = __stackBase__ + 16;
      var $rv = __stackBase__ + 20;
      var $rc = __stackBase__ + 24;
      
      HEAP[__stackBase__] = $userData;
      
      var $2 = HEAP[__stackBase__];
      HEAP[$self] = $2;
      HEAP[$args] = 0;
      HEAP[$rv] = 0;
      HEAP[$rc] = 0;
      var $3 = HEAP[$self];
      var $4 = _have_handler($3, 13);
      
      if ($4 != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 1:
      var $6 = HEAP[$self];
      var $7 = _flush_character_buffer($6);
      
      if ($7 < 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      var $9 = HEAP[$rc];
      HEAP[$0] = $9;
      __label__ = 12;
      break;
     case 3:
      var $10 = _Py_BuildValue(__str34, allocate(1, "i32", ALLOC_STACK));
      HEAP[$args] = $10;
      
      
      if (HEAP[$args] == 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      var $13 = HEAP[$self];
      _flag_error($13);
      var $14 = HEAP[$rc];
      HEAP[$0] = $14;
      __label__ = 12;
      break;
     case 5:
      
      var $16 = HEAP[$self] + 24;
      HEAP[$16] = 1;
      
      
      
      
      var $21 = HEAP[HEAP[HEAP[$self] + 48] + 52];
      var $22 = _getcode(13, __str39, 844);
      var $23 = HEAP[$args];
      var $24 = HEAP[$self];
      var $25 = _call_with_frame($22, $21, $23, $24);
      HEAP[$rv] = $25;
      
      var $27 = HEAP[$self] + 24;
      HEAP[$27] = 0;
      
      
      
      var $31 = HEAP[HEAP[$args]] - 1;
      
      var $33 = HEAP[$args];
      HEAP[$33] = $31;
      
      
      
      
      if (HEAP[HEAP[$args]] == 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      
      
      
      
      var $42 = HEAP[HEAP[HEAP[$args] + 4] + 24];
      var $43 = HEAP[$args];
      FUNCTION_TABLE[$42]($43);
      __label__ = 7;
      break;
     case 7:
      
      
      if (HEAP[$rv] == 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      var $46 = HEAP[$self];
      _flag_error($46);
      var $47 = HEAP[$rc];
      HEAP[$0] = $47;
      __label__ = 12;
      break;
     case 9:
      var $48 = HEAP[$rv];
      var $49 = _PyInt_AsLong($48);
      HEAP[$rc] = $49;
      
      
      
      var $53 = HEAP[HEAP[$rv]] - 1;
      
      var $55 = HEAP[$rv];
      HEAP[$55] = $53;
      
      
      
      
      if (HEAP[HEAP[$rv]] == 0) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      
      
      
      
      var $64 = HEAP[HEAP[HEAP[$rv] + 4] + 24];
      var $65 = HEAP[$rv];
      FUNCTION_TABLE[$64]($65);
      __label__ = 11;
      break;
     case 11:
      var $66 = HEAP[$rc];
      HEAP[$0] = $66;
      __label__ = 12;
      break;
     case 12:
      var $67 = HEAP[$0];
      HEAP[$retval] = $67;
      __label__ = 13;
      break;
     case 13:
      var $retval12 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval12;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _my_ExternalEntityRefHandler($parser, $context, $base, $systemId, $publicId) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 48;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 48);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $context_addr = __stackBase__ + 4;
      var $base_addr = __stackBase__ + 8;
      var $systemId_addr = __stackBase__ + 12;
      var $publicId_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $iftmp_58 = __stackBase__ + 24;
      var $0 = __stackBase__ + 28;
      var $self = __stackBase__ + 32;
      var $args = __stackBase__ + 36;
      var $rv = __stackBase__ + 40;
      var $rc = __stackBase__ + 44;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$context_addr] = $context;
      HEAP[$base_addr] = $base;
      HEAP[$systemId_addr] = $systemId;
      HEAP[$publicId_addr] = $publicId;
      
      
      
      var $4 = HEAP[HEAP[$parser_addr]];
      HEAP[$self] = $4;
      HEAP[$args] = 0;
      HEAP[$rv] = 0;
      HEAP[$rc] = 0;
      var $5 = HEAP[$self];
      var $6 = _have_handler($5, 14);
      
      if ($6 != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 1:
      var $8 = HEAP[$self];
      var $9 = _flush_character_buffer($8);
      
      if ($9 < 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      var $11 = HEAP[$rc];
      HEAP[$0] = $11;
      __label__ = 15;
      break;
     case 3:
      var $12 = HEAP[$self];
      var $13 = HEAP[$publicId_addr];
      var $14 = _string_intern($12, $13);
      var $15 = HEAP[$self];
      var $16 = HEAP[$systemId_addr];
      var $17 = _string_intern($15, $16);
      var $18 = HEAP[$self];
      var $19 = HEAP[$base_addr];
      var $20 = _string_intern($18, $19);
      
      
      
      
      if (HEAP[HEAP[$self] + 12] != 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      HEAP[$iftmp_58] = FUNCTION_TABLE_OFFSET + 4;
      __label__ = 6;
      break;
     case 5:
      HEAP[$iftmp_58] = FUNCTION_TABLE_OFFSET + 6;
      __label__ = 6;
      break;
     case 6:
      var $25 = HEAP[$iftmp_58];
      var $26 = HEAP[$context_addr];
      var $27 = _Py_BuildValue(__str40, allocate([ $25, 0, 0, 0, $26, 0, 0, 0, $20, 0, 0, 0, $17, 0, 0, 0, $14, 0, 0, 0 ], [ "%struct.PyObject* (i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "%struct.PyObject*", 0, 0, 0, "%struct.PyObject*", 0, 0, 0, "%struct.PyObject*", 0, 0, 0 ], ALLOC_STACK));
      HEAP[$args] = $27;
      
      
      if (HEAP[$args] == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      var $30 = HEAP[$self];
      _flag_error($30);
      var $31 = HEAP[$rc];
      HEAP[$0] = $31;
      __label__ = 15;
      break;
     case 8:
      
      var $33 = HEAP[$self] + 24;
      HEAP[$33] = 1;
      
      
      
      
      var $38 = HEAP[HEAP[HEAP[$self] + 48] + 56];
      var $39 = _getcode(14, __str41, 857);
      var $40 = HEAP[$args];
      var $41 = HEAP[$self];
      var $42 = _call_with_frame($39, $38, $40, $41);
      HEAP[$rv] = $42;
      
      var $44 = HEAP[$self] + 24;
      HEAP[$44] = 0;
      
      
      
      var $48 = HEAP[HEAP[$args]] - 1;
      
      var $50 = HEAP[$args];
      HEAP[$50] = $48;
      
      
      
      
      if (HEAP[HEAP[$args]] == 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      
      
      
      
      var $59 = HEAP[HEAP[HEAP[$args] + 4] + 24];
      var $60 = HEAP[$args];
      FUNCTION_TABLE[$59]($60);
      __label__ = 10;
      break;
     case 10:
      
      
      if (HEAP[$rv] == 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      var $63 = HEAP[$self];
      _flag_error($63);
      var $64 = HEAP[$rc];
      HEAP[$0] = $64;
      __label__ = 15;
      break;
     case 12:
      var $65 = HEAP[$rv];
      var $66 = _PyInt_AsLong($65);
      HEAP[$rc] = $66;
      
      
      
      var $70 = HEAP[HEAP[$rv]] - 1;
      
      var $72 = HEAP[$rv];
      HEAP[$72] = $70;
      
      
      
      
      if (HEAP[HEAP[$rv]] == 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      
      
      
      
      var $81 = HEAP[HEAP[HEAP[$rv] + 4] + 24];
      var $82 = HEAP[$rv];
      FUNCTION_TABLE[$81]($82);
      __label__ = 14;
      break;
     case 14:
      var $83 = HEAP[$rc];
      HEAP[$0] = $83;
      __label__ = 15;
      break;
     case 15:
      var $84 = HEAP[$0];
      HEAP[$retval] = $84;
      __label__ = 16;
      break;
     case 16:
      var $retval15 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval15;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _my_StartDoctypeDeclHandler($userData, $doctypeName, $sysid, $pubid, $has_internal_subset) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 32;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $userData_addr = __stackBase__;
      var $doctypeName_addr = __stackBase__ + 4;
      var $sysid_addr = __stackBase__ + 8;
      var $pubid_addr = __stackBase__ + 12;
      var $has_internal_subset_addr = __stackBase__ + 16;
      var $self = __stackBase__ + 20;
      var $args = __stackBase__ + 24;
      var $rv = __stackBase__ + 28;
      
      HEAP[$userData_addr] = $userData;
      HEAP[$doctypeName_addr] = $doctypeName;
      HEAP[$sysid_addr] = $sysid;
      HEAP[$pubid_addr] = $pubid;
      HEAP[$has_internal_subset_addr] = $has_internal_subset;
      
      var $1 = HEAP[$userData_addr];
      HEAP[$self] = $1;
      HEAP[$args] = 0;
      HEAP[$rv] = 0;
      var $2 = HEAP[$self];
      var $3 = _have_handler($2, 15);
      
      if ($3 != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 1:
      var $5 = HEAP[$self];
      var $6 = _flush_character_buffer($5);
      
      if ($6 < 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      var $8 = HEAP[$self];
      var $9 = HEAP[$pubid_addr];
      var $10 = _string_intern($8, $9);
      var $11 = HEAP[$self];
      var $12 = HEAP[$sysid_addr];
      var $13 = _string_intern($11, $12);
      var $14 = HEAP[$self];
      var $15 = HEAP[$doctypeName_addr];
      var $16 = _string_intern($14, $15);
      var $17 = HEAP[$has_internal_subset_addr];
      var $18 = _Py_BuildValue(__str42, allocate([ $16, 0, 0, 0, $13, 0, 0, 0, $10, 0, 0, 0, $17, 0, 0, 0 ], [ "%struct.PyObject*", 0, 0, 0, "%struct.PyObject*", 0, 0, 0, "%struct.PyObject*", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STACK));
      HEAP[$args] = $18;
      
      
      if (HEAP[$args] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      var $21 = HEAP[$self];
      _flag_error($21);
      __label__ = 11;
      break;
     case 4:
      
      var $23 = HEAP[$self] + 24;
      HEAP[$23] = 1;
      
      
      
      
      var $28 = HEAP[HEAP[HEAP[$self] + 48] + 60];
      var $29 = _getcode(15, __str43, 867);
      var $30 = HEAP[$args];
      var $31 = HEAP[$self];
      var $32 = _call_with_frame($29, $28, $30, $31);
      HEAP[$rv] = $32;
      
      var $34 = HEAP[$self] + 24;
      HEAP[$34] = 0;
      
      
      
      var $38 = HEAP[HEAP[$args]] - 1;
      
      var $40 = HEAP[$args];
      HEAP[$40] = $38;
      
      
      
      
      if (HEAP[HEAP[$args]] == 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      
      
      
      
      var $49 = HEAP[HEAP[HEAP[$args] + 4] + 24];
      var $50 = HEAP[$args];
      FUNCTION_TABLE[$49]($50);
      __label__ = 6;
      break;
     case 6:
      
      
      if (HEAP[$rv] == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      var $53 = HEAP[$self];
      _flag_error($53);
      __label__ = 11;
      break;
     case 8:
      
      
      
      var $57 = HEAP[HEAP[$rv]] - 1;
      
      var $59 = HEAP[$rv];
      HEAP[$59] = $57;
      
      
      
      
      if (HEAP[HEAP[$rv]] == 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      
      
      
      
      var $68 = HEAP[HEAP[HEAP[$rv] + 4] + 24];
      var $69 = HEAP[$rv];
      FUNCTION_TABLE[$68]($69);
      __label__ = 10;
      break;
     case 10:
      __label__ = 11;
      break;
     case 11:
      __label__ = 12;
      break;
     case 12:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _my_EndDoctypeDeclHandler($userData) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $self = __stackBase__ + 4;
      var $args = __stackBase__ + 8;
      var $rv = __stackBase__ + 12;
      
      HEAP[__stackBase__] = $userData;
      
      var $1 = HEAP[__stackBase__];
      HEAP[$self] = $1;
      HEAP[$args] = 0;
      HEAP[$rv] = 0;
      var $2 = HEAP[$self];
      var $3 = _have_handler($2, 16);
      
      if ($3 != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 1:
      var $5 = HEAP[$self];
      var $6 = _flush_character_buffer($5);
      
      if ($6 < 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      var $8 = _Py_BuildValue(__str34, allocate(1, "i32", ALLOC_STACK));
      HEAP[$args] = $8;
      
      
      if (HEAP[$args] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      var $11 = HEAP[$self];
      _flag_error($11);
      __label__ = 11;
      break;
     case 4:
      
      var $13 = HEAP[$self] + 24;
      HEAP[$13] = 1;
      
      
      
      
      var $18 = HEAP[HEAP[HEAP[$self] + 48] + 64];
      var $19 = _getcode(16, __str44, 869);
      var $20 = HEAP[$args];
      var $21 = HEAP[$self];
      var $22 = _call_with_frame($19, $18, $20, $21);
      HEAP[$rv] = $22;
      
      var $24 = HEAP[$self] + 24;
      HEAP[$24] = 0;
      
      
      
      var $28 = HEAP[HEAP[$args]] - 1;
      
      var $30 = HEAP[$args];
      HEAP[$30] = $28;
      
      
      
      
      if (HEAP[HEAP[$args]] == 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      
      
      
      
      var $39 = HEAP[HEAP[HEAP[$args] + 4] + 24];
      var $40 = HEAP[$args];
      FUNCTION_TABLE[$39]($40);
      __label__ = 6;
      break;
     case 6:
      
      
      if (HEAP[$rv] == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      var $43 = HEAP[$self];
      _flag_error($43);
      __label__ = 11;
      break;
     case 8:
      
      
      
      var $47 = HEAP[HEAP[$rv]] - 1;
      
      var $49 = HEAP[$rv];
      HEAP[$49] = $47;
      
      
      
      
      if (HEAP[HEAP[$rv]] == 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      
      
      
      
      var $58 = HEAP[HEAP[HEAP[$rv] + 4] + 24];
      var $59 = HEAP[$rv];
      FUNCTION_TABLE[$58]($59);
      __label__ = 10;
      break;
     case 10:
      __label__ = 11;
      break;
     case 11:
      __label__ = 12;
      break;
     case 12:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _get_parse_result($self, $rv) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $self_addr = __stackBase__;
      var $rv_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      
      HEAP[$self_addr] = $self;
      HEAP[$rv_addr] = $rv;
      var $1 = _PyErr_Occurred();
      
      if ($1 != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = 0;
      __label__ = 7;
      break;
     case 2:
      
      
      if (HEAP[$rv_addr] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      
      var $7 = HEAP[HEAP[$self_addr] + 8];
      var $8 = _PyExpat_XML_GetErrorCode($7);
      var $9 = HEAP[$self_addr];
      var $10 = _set_error($9, $8);
      HEAP[$0] = $10;
      __label__ = 7;
      break;
     case 4:
      var $11 = HEAP[$self_addr];
      var $12 = _flush_character_buffer($11);
      
      if ($12 < 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      HEAP[$0] = 0;
      __label__ = 7;
      break;
     case 6:
      var $14 = HEAP[$rv_addr];
      var $15 = _PyInt_FromLong($14);
      HEAP[$0] = $15;
      __label__ = 7;
      break;
     case 7:
      var $16 = HEAP[$0];
      HEAP[$retval] = $16;
      __label__ = 8;
      break;
     case 8:
      var $retval7 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval7;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _xmlparse_Parse($self, $args) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $self_addr = __stackBase__;
      var $args_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      var $s = __stackBase__ + 16;
      var $slen = __stackBase__ + 20;
      var $isFinal = __stackBase__ + 24;
      
      HEAP[$self_addr] = $self;
      HEAP[$args_addr] = $args;
      HEAP[$isFinal] = 0;
      var $1 = HEAP[$args_addr];
      var $2 = _PyArg_ParseTuple($1, __str45, allocate([ $s, 0, 0, 0, $slen, 0, 0, 0, $isFinal, 0, 0, 0 ], [ "i8**", 0, 0, 0, "i32*", 0, 0, 0, "i32*", 0, 0, 0 ], ALLOC_STACK));
      
      if ($2 == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = 0;
      __label__ = 3;
      break;
     case 2:
      var $4 = HEAP[$isFinal];
      var $5 = HEAP[$slen];
      var $6 = HEAP[$s];
      
      
      var $9 = HEAP[HEAP[$self_addr] + 8];
      var $10 = _PyExpat_XML_Parse($9, $6, $5, $4);
      var $11 = HEAP[$self_addr];
      var $12 = _get_parse_result($11, $10);
      HEAP[$0] = $12;
      __label__ = 3;
      break;
     case 3:
      var $13 = HEAP[$0];
      HEAP[$retval] = $13;
      __label__ = 4;
      break;
     case 4:
      var $retval3 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval3;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _readinst($buf, $buf_size, $meth) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 36;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $buf_addr = __stackBase__;
      var $buf_size_addr = __stackBase__ + 4;
      var $meth_addr = __stackBase__ + 8;
      var $retval = __stackBase__ + 12;
      var $0 = __stackBase__ + 16;
      var $arg = __stackBase__ + 20;
      var $bytes = __stackBase__ + 24;
      var $str = __stackBase__ + 28;
      var $len = __stackBase__ + 32;
      
      HEAP[$buf_addr] = $buf;
      HEAP[$buf_size_addr] = $buf_size;
      HEAP[$meth_addr] = $meth;
      HEAP[$arg] = 0;
      HEAP[$bytes] = 0;
      HEAP[$str] = 0;
      HEAP[$len] = -1;
      var $1 = HEAP[$buf_size_addr];
      var $2 = _PyInt_FromLong($1);
      HEAP[$bytes] = $2;
      
      
      if (HEAP[$bytes] == 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 1;
        break;
      }
     case 1:
      var $5 = _PyTuple_New(1);
      HEAP[$arg] = $5;
      
      
      if (HEAP[$arg] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 2:
      
      
      
      var $11 = HEAP[HEAP[$bytes]] - 1;
      
      var $13 = HEAP[$bytes];
      HEAP[$13] = $11;
      
      
      
      
      if (HEAP[HEAP[$bytes]] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      
      
      
      var $22 = HEAP[HEAP[HEAP[$bytes] + 4] + 24];
      var $23 = HEAP[$bytes];
      FUNCTION_TABLE[$22]($23);
      __label__ = 4;
      break;
     case 4:
      __label__ = 11;
      break;
     case 5:
      
      
      
      var $27 = HEAP[$arg] + 12;
      var $28 = HEAP[$bytes];
      HEAP[$27] = $28;
      var $29 = HEAP[$meth_addr];
      var $30 = HEAP[$arg];
      var $31 = _PyObject_Call($29, $30, 0);
      HEAP[$str] = $31;
      
      
      if (HEAP[$str] == 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 6:
      
      
      
      
      
      
      
      if ((HEAP[HEAP[HEAP[$str] + 4] + 84] & 134217728) == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      
      
      
      
      var $45 = HEAP[HEAP[HEAP[$str] + 4] + 12];
      var $46 = HEAP[_PyExc_TypeError];
      var $47 = _PyErr_Format($46, __str46, allocate([ $45, 0, 0, 0 ], [ "i8*", 0, 0, 0 ], ALLOC_STACK));
      __label__ = 11;
      break;
     case 8:
      
      
      
      var $51 = HEAP[HEAP[$str] + 8];
      HEAP[$len] = $51;
      
      
      
      if (HEAP[$len] > HEAP[$buf_size_addr]) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      var $55 = HEAP[_PyExc_ValueError];
      var $56 = HEAP[$buf_size_addr];
      var $57 = HEAP[$len];
      var $58 = _PyErr_Format($55, __str47, allocate([ $56, 0, 0, 0, $57, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STACK));
      __label__ = 11;
      break;
     case 10:
      var $59 = HEAP[$len];
      var $60 = HEAP[$str];
      var $61 = _PyString_AsString($60);
      var $62 = HEAP[$buf_addr];
      _llvm_memcpy_p0i8_p0i8_i32($62, $61, $59, 1, 0);
      __label__ = 11;
      break;
     case 11:
      
      
      if (HEAP[$arg] != 0) {
        __label__ = 12;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 12:
      
      
      
      var $68 = HEAP[HEAP[$arg]] - 1;
      
      var $70 = HEAP[$arg];
      HEAP[$70] = $68;
      
      
      
      
      if (HEAP[HEAP[$arg]] == 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      
      
      
      
      var $79 = HEAP[HEAP[HEAP[$arg] + 4] + 24];
      var $80 = HEAP[$arg];
      FUNCTION_TABLE[$79]($80);
      __label__ = 14;
      break;
     case 14:
      
      
      if (HEAP[$str] != 0) {
        __label__ = 15;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 15:
      
      
      
      var $86 = HEAP[HEAP[$str]] - 1;
      
      var $88 = HEAP[$str];
      HEAP[$88] = $86;
      
      
      
      
      if (HEAP[HEAP[$str]] == 0) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      
      
      
      
      var $97 = HEAP[HEAP[HEAP[$str] + 4] + 24];
      var $98 = HEAP[$str];
      FUNCTION_TABLE[$97]($98);
      __label__ = 17;
      break;
     case 17:
      var $99 = HEAP[$len];
      HEAP[$0] = $99;
      var $100 = HEAP[$0];
      HEAP[$retval] = $100;
      __label__ = 18;
      break;
     case 18:
      var $retval16 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval16;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _xmlparse_ParseFile($self, $f) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 32;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $self_addr = __stackBase__;
      var $f_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      var $rv = __stackBase__ + 16;
      var $readmethod = __stackBase__ + 20;
      var $bytes_read = __stackBase__ + 24;
      var $buf = __stackBase__ + 28;
      
      HEAP[$self_addr] = $self;
      HEAP[$f_addr] = $f;
      HEAP[$rv] = 1;
      HEAP[$readmethod] = 0;
      var $1 = HEAP[$f_addr];
      var $2 = _PyObject_GetAttrString($1, __str48);
      HEAP[$readmethod] = $2;
      
      
      if (HEAP[$readmethod] == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      var $5 = HEAP[_PyExc_TypeError];
      _PyErr_SetString($5, __str49);
      HEAP[$0] = 0;
      __label__ = 24;
      break;
     case 2:
      
      
      var $8 = HEAP[HEAP[$self_addr] + 8];
      var $9 = _PyExpat_XML_GetBuffer($8, 2048);
      HEAP[$buf] = $9;
      
      
      if (HEAP[$buf] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 3:
      
      
      if (HEAP[$readmethod] != 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 4:
      
      
      
      var $17 = HEAP[HEAP[$readmethod]] - 1;
      
      var $19 = HEAP[$readmethod];
      HEAP[$19] = $17;
      
      
      
      
      if (HEAP[HEAP[$readmethod]] == 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      
      
      
      
      var $28 = HEAP[HEAP[HEAP[$readmethod] + 4] + 24];
      var $29 = HEAP[$readmethod];
      FUNCTION_TABLE[$28]($29);
      __label__ = 6;
      break;
     case 6:
      var $30 = _PyErr_NoMemory();
      HEAP[$0] = $30;
      __label__ = 24;
      break;
     case 7:
      var $31 = HEAP[$buf];
      var $32 = HEAP[$readmethod];
      var $33 = _readinst($31, 2048, $32);
      HEAP[$bytes_read] = $33;
      
      
      if (HEAP[$bytes_read] < 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 8:
      
      
      if (HEAP[$readmethod] != 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 9:
      
      
      
      var $41 = HEAP[HEAP[$readmethod]] - 1;
      
      var $43 = HEAP[$readmethod];
      HEAP[$43] = $41;
      
      
      
      
      if (HEAP[HEAP[$readmethod]] == 0) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      
      
      
      
      var $52 = HEAP[HEAP[HEAP[$readmethod] + 4] + 24];
      var $53 = HEAP[$readmethod];
      FUNCTION_TABLE[$52]($53);
      __label__ = 11;
      break;
     case 11:
      HEAP[$0] = 0;
      __label__ = 24;
      break;
     case 12:
      
      
      var $56 = HEAP[$bytes_read] == 0;
      
      
      var $59 = HEAP[HEAP[$self_addr] + 8];
      var $60 = HEAP[$bytes_read];
      var $61 = _PyExpat_XML_ParseBuffer($59, $60, $56);
      HEAP[$rv] = $61;
      var $62 = _PyErr_Occurred();
      
      if ($62 != 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 13:
      
      
      if (HEAP[$readmethod] != 0) {
        __label__ = 14;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 14:
      
      
      
      var $69 = HEAP[HEAP[$readmethod]] - 1;
      
      var $71 = HEAP[$readmethod];
      HEAP[$71] = $69;
      
      
      
      
      if (HEAP[HEAP[$readmethod]] == 0) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      
      
      
      
      var $80 = HEAP[HEAP[HEAP[$readmethod] + 4] + 24];
      var $81 = HEAP[$readmethod];
      FUNCTION_TABLE[$80]($81);
      __label__ = 16;
      break;
     case 16:
      HEAP[$0] = 0;
      __label__ = 24;
      break;
     case 17:
      
      
      if (HEAP[$rv] == 0) {
        __label__ = 20;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 18:
      
      
      if (HEAP[$bytes_read] == 0) {
        __label__ = 20;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 19:
      __label__ = 2;
      break;
     case 20:
      
      
      if (HEAP[$readmethod] != 0) {
        __label__ = 21;
        break;
      } else {
        __label__ = 23;
        break;
      }
     case 21:
      
      
      
      var $91 = HEAP[HEAP[$readmethod]] - 1;
      
      var $93 = HEAP[$readmethod];
      HEAP[$93] = $91;
      
      
      
      
      if (HEAP[HEAP[$readmethod]] == 0) {
        __label__ = 22;
        break;
      } else {
        __label__ = 23;
        break;
      }
     case 22:
      
      
      
      
      var $102 = HEAP[HEAP[HEAP[$readmethod] + 4] + 24];
      var $103 = HEAP[$readmethod];
      FUNCTION_TABLE[$102]($103);
      __label__ = 23;
      break;
     case 23:
      var $104 = HEAP[$self_addr];
      var $105 = HEAP[$rv];
      var $106 = _get_parse_result($104, $105);
      HEAP[$0] = $106;
      __label__ = 24;
      break;
     case 24:
      var $107 = HEAP[$0];
      HEAP[$retval] = $107;
      __label__ = 25;
      break;
     case 25:
      var $retval24 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval24;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _xmlparse_SetBase($self, $args) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 20;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $self_addr = __stackBase__;
      var $args_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      var $base = __stackBase__ + 16;
      
      HEAP[$self_addr] = $self;
      HEAP[$args_addr] = $args;
      var $1 = HEAP[$args_addr];
      var $2 = _PyArg_ParseTuple($1, __str50, allocate([ $base, 0, 0, 0 ], [ "i8**", 0, 0, 0 ], ALLOC_STACK));
      
      if ($2 == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = 0;
      __label__ = 5;
      break;
     case 2:
      var $4 = HEAP[$base];
      
      
      var $7 = HEAP[HEAP[$self_addr] + 8];
      var $8 = _PyExpat_XML_SetBase($7, $4);
      
      if ($8 == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      var $10 = _PyErr_NoMemory();
      HEAP[$0] = $10;
      __label__ = 5;
      break;
     case 4:
      
      var $12 = HEAP[__Py_NoneStruct] + 1;
      HEAP[__Py_NoneStruct] = $12;
      HEAP[$0] = __Py_NoneStruct;
      __label__ = 5;
      break;
     case 5:
      var $13 = HEAP[$0];
      HEAP[$retval] = $13;
      __label__ = 6;
      break;
     case 6:
      var $retval5 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval5;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _xmlparse_GetBase($self, $unused) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $self_addr = __stackBase__;
      var $unused_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      
      HEAP[$self_addr] = $self;
      HEAP[$unused_addr] = $unused;
      
      
      var $3 = HEAP[HEAP[$self_addr] + 8];
      var $4 = _PyExpat_XML_GetBase($3);
      var $5 = _Py_BuildValue(__str51, allocate([ $4, 0, 0, 0 ], [ "i8*", 0, 0, 0 ], ALLOC_STACK));
      HEAP[$0] = $5;
      var $6 = HEAP[$0];
      HEAP[$retval] = $6;
      __label__ = 1;
      break;
     case 1:
      var $retval1 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval1;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _xmlparse_GetInputContext($self, $unused) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $self_addr = __stackBase__;
      var $unused_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      var $offset = __stackBase__ + 16;
      var $size = __stackBase__ + 20;
      var $buffer = __stackBase__ + 24;
      
      HEAP[$self_addr] = $self;
      HEAP[$unused_addr] = $unused;
      
      
      
      
      if (HEAP[HEAP[$self_addr] + 24] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 1:
      
      
      var $7 = HEAP[HEAP[$self_addr] + 8];
      var $8 = _PyExpat_XML_GetInputContext($7, $offset, $size);
      HEAP[$buffer] = $8;
      
      
      if (HEAP[$buffer] != 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      
      var $13 = HEAP[$size] - HEAP[$offset];
      
      
      var $16 = HEAP[$buffer] + HEAP[$offset];
      var $17 = _PyString_FromStringAndSize($16, $13);
      HEAP[$0] = $17;
      __label__ = 5;
      break;
     case 3:
      
      var $19 = HEAP[__Py_NoneStruct] + 1;
      HEAP[__Py_NoneStruct] = $19;
      HEAP[$0] = __Py_NoneStruct;
      __label__ = 5;
      break;
     case 4:
      
      var $21 = HEAP[__Py_NoneStruct] + 1;
      HEAP[__Py_NoneStruct] = $21;
      HEAP[$0] = __Py_NoneStruct;
      __label__ = 5;
      break;
     case 5:
      var $22 = HEAP[$0];
      HEAP[$retval] = $22;
      __label__ = 6;
      break;
     case 6:
      var $retval5 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval5;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _xmlparse_ExternalEntityParserCreate($self, $args) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 36;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $self_addr = __stackBase__;
      var $args_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      var $context = __stackBase__ + 16;
      var $encoding = __stackBase__ + 20;
      var $new_parser = __stackBase__ + 24;
      var $i = __stackBase__ + 28;
      var $handler = __stackBase__ + 32;
      
      HEAP[$self_addr] = $self;
      HEAP[$args_addr] = $args;
      HEAP[$encoding] = 0;
      var $1 = HEAP[$args_addr];
      var $2 = _PyArg_ParseTuple($1, __str52, allocate([ $context, 0, 0, 0, $encoding, 0, 0, 0 ], [ "i8**", 0, 0, 0, "i8**", 0, 0, 0 ], ALLOC_STACK));
      
      if ($2 == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = 0;
      __label__ = 28;
      break;
     case 2:
      var $4 = __PyObject_GC_New(_Xmlparsetype);
      
      HEAP[$new_parser] = $4;
      
      
      if (HEAP[$new_parser] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      HEAP[$0] = 0;
      __label__ = 28;
      break;
     case 4:
      
      
      var $10 = HEAP[HEAP[$self_addr] + 36];
      
      var $12 = HEAP[$new_parser] + 36;
      HEAP[$12] = $10;
      
      var $14 = HEAP[$new_parser] + 40;
      HEAP[$14] = 0;
      
      
      
      
      if (HEAP[HEAP[$self_addr] + 32] != 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 5:
      
      
      var $21 = HEAP[HEAP[$new_parser] + 36];
      var $22 = _malloc($21);
      
      var $24 = HEAP[$new_parser] + 32;
      HEAP[$24] = $22;
      
      
      
      
      if (HEAP[HEAP[$new_parser] + 32] == 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      
      var $30 = HEAP[$new_parser];
      _PyObject_GC_Del($30);
      var $31 = _PyErr_NoMemory();
      HEAP[$0] = $31;
      __label__ = 28;
      break;
     case 7:
      __label__ = 9;
      break;
     case 8:
      
      var $33 = HEAP[$new_parser] + 32;
      HEAP[$33] = 0;
      __label__ = 9;
      break;
     case 9:
      
      
      var $36 = HEAP[HEAP[$self_addr] + 12];
      
      var $38 = HEAP[$new_parser] + 12;
      HEAP[$38] = $36;
      
      
      var $41 = HEAP[HEAP[$self_addr] + 16];
      
      var $43 = HEAP[$new_parser] + 16;
      HEAP[$43] = $41;
      
      
      var $46 = HEAP[HEAP[$self_addr] + 20];
      
      var $48 = HEAP[$new_parser] + 20;
      HEAP[$48] = $46;
      
      var $50 = HEAP[$new_parser] + 24;
      HEAP[$50] = 0;
      
      
      var $53 = HEAP[HEAP[$self_addr] + 28];
      
      var $55 = HEAP[$new_parser] + 28;
      HEAP[$55] = $53;
      var $56 = HEAP[$encoding];
      var $57 = HEAP[$context];
      
      
      var $60 = HEAP[HEAP[$self_addr] + 8];
      var $61 = _PyExpat_XML_ExternalEntityParserCreate($60, $57, $56);
      
      var $63 = HEAP[$new_parser] + 8;
      HEAP[$63] = $61;
      
      var $65 = HEAP[$new_parser] + 48;
      HEAP[$65] = 0;
      
      
      var $68 = HEAP[HEAP[$self_addr] + 44];
      
      var $70 = HEAP[$new_parser] + 44;
      HEAP[$70] = $68;
      
      
      
      
      if (HEAP[HEAP[$new_parser] + 44] != 0) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      
      
      
      
      
      var $80 = HEAP[HEAP[HEAP[$new_parser] + 44]] + 1;
      var $81 = HEAP[HEAP[$new_parser] + 44];
      HEAP[$81] = $80;
      __label__ = 11;
      break;
     case 11:
      
      var $83 = HEAP[$new_parser];
      _PyObject_GC_Track($83);
      
      
      
      
      if (HEAP[HEAP[$new_parser] + 8] == 0) {
        __label__ = 12;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 12:
      
      var $89 = HEAP[$new_parser];
      
      
      var $92 = HEAP[$89] - 1;
      var $93 = $89;
      HEAP[$93] = $92;
      
      
      
      if (HEAP[$89] == 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      
      
      
      
      
      var $102 = HEAP[HEAP[HEAP[$new_parser] + 4] + 24];
      
      var $104 = HEAP[$new_parser];
      FUNCTION_TABLE[$102]($104);
      __label__ = 14;
      break;
     case 14:
      var $105 = _PyErr_NoMemory();
      HEAP[$0] = $105;
      __label__ = 28;
      break;
     case 15:
      
      
      var $108 = HEAP[HEAP[$new_parser] + 8];
      
      var $110 = HEAP[$new_parser];
      _PyExpat_XML_SetUserData($108, $110);
      HEAP[$i] = 0;
      __label__ = 17;
      break;
     case 16:
      
      var $112 = HEAP[$i] + 1;
      HEAP[$i] = $112;
      __label__ = 17;
      break;
     case 17:
      
      
      
      
      
      if (HEAP[_handler_info + HEAP[$i] * 20] != 0) {
        __label__ = 16;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 18:
      
      var $119 = HEAP[$i] * 4;
      var $120 = _malloc($119);
      var $121 = $120;
      
      var $123 = HEAP[$new_parser] + 48;
      HEAP[$123] = $121;
      
      
      
      
      if (HEAP[HEAP[$new_parser] + 48] == 0) {
        __label__ = 19;
        break;
      } else {
        __label__ = 22;
        break;
      }
     case 19:
      
      var $129 = HEAP[$new_parser];
      
      
      var $132 = HEAP[$129] - 1;
      var $133 = $129;
      HEAP[$133] = $132;
      
      
      
      if (HEAP[$129] == 0) {
        __label__ = 20;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 20:
      
      
      
      
      
      var $142 = HEAP[HEAP[HEAP[$new_parser] + 4] + 24];
      
      var $144 = HEAP[$new_parser];
      FUNCTION_TABLE[$142]($144);
      __label__ = 21;
      break;
     case 21:
      var $145 = _PyErr_NoMemory();
      HEAP[$0] = $145;
      __label__ = 28;
      break;
     case 22:
      var $146 = HEAP[$new_parser];
      _clear_handlers($146, 1);
      HEAP[$i] = 0;
      __label__ = 26;
      break;
     case 23:
      
      
      
      
      
      var $152 = HEAP[HEAP[HEAP[$self_addr] + 48] + 4 * HEAP[$i]];
      HEAP[$handler] = $152;
      
      
      if (HEAP[$handler] != 0) {
        __label__ = 24;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 24:
      
      
      
      var $158 = HEAP[HEAP[$handler]] + 1;
      
      var $160 = HEAP[$handler];
      HEAP[$160] = $158;
      
      
      
      
      var $165 = HEAP[HEAP[$new_parser] + 48] + 4 * HEAP[$i];
      var $166 = HEAP[$handler];
      HEAP[$165] = $166;
      
      
      
      var $170 = HEAP[_handler_info + HEAP[$i] * 20 + 4];
      
      
      
      var $174 = HEAP[_handler_info + HEAP[$i] * 20 + 8];
      
      
      var $177 = HEAP[HEAP[$new_parser] + 8];
      FUNCTION_TABLE[$170]($177, $174);
      __label__ = 25;
      break;
     case 25:
      
      var $179 = HEAP[$i] + 1;
      HEAP[$i] = $179;
      __label__ = 26;
      break;
     case 26:
      
      
      
      
      
      if (HEAP[_handler_info + HEAP[$i] * 20] != 0) {
        __label__ = 23;
        break;
      } else {
        __label__ = 27;
        break;
      }
     case 27:
      
      var $186 = HEAP[$new_parser];
      HEAP[$0] = $186;
      __label__ = 28;
      break;
     case 28:
      var $187 = HEAP[$0];
      HEAP[$retval] = $187;
      __label__ = 29;
      break;
     case 29:
      var $retval28 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval28;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _xmlparse_SetParamEntityParsing($p, $args) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 20;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $p_addr = __stackBase__;
      var $args_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      var $flag = __stackBase__ + 16;
      
      HEAP[$p_addr] = $p;
      HEAP[$args_addr] = $args;
      var $1 = HEAP[$args_addr];
      var $2 = _PyArg_ParseTuple($1, __str53, allocate([ $flag, 0, 0, 0 ], [ "i32*", 0, 0, 0 ], ALLOC_STACK));
      
      if ($2 == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = 0;
      __label__ = 3;
      break;
     case 2:
      var $4 = HEAP[$flag];
      
      
      var $7 = HEAP[HEAP[$p_addr] + 8];
      var $8 = _PyExpat_XML_SetParamEntityParsing($7, $4);
      HEAP[$flag] = $8;
      var $9 = HEAP[$flag];
      var $10 = _PyInt_FromLong($9);
      HEAP[$0] = $10;
      __label__ = 3;
      break;
     case 3:
      var $11 = HEAP[$0];
      HEAP[$retval] = $11;
      __label__ = 4;
      break;
     case 4:
      var $retval3 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval3;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _xmlparse_UseForeignDTD($self, $args) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 25;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 25);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $self_addr = __stackBase__;
      var $args_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      var $flagobj = __stackBase__ + 16;
      var $flag = __stackBase__ + 20;
      var $rc = __stackBase__ + 21;
      
      HEAP[$self_addr] = $self;
      HEAP[$args_addr] = $args;
      HEAP[$flagobj] = 0;
      HEAP[$flag] = 1;
      var $1 = HEAP[$args_addr];
      var $2 = _PyArg_UnpackTuple($1, __str54, 0, 1, allocate([ $flagobj, 0, 0, 0 ], [ "%struct.PyObject**", 0, 0, 0 ], ALLOC_STACK));
      
      if ($2 == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = 0;
      __label__ = 7;
      break;
     case 2:
      
      
      if (HEAP[$flagobj] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      var $6 = HEAP[$flagobj];
      var $7 = _PyObject_IsTrue($6);
      
      var $9 = $7 != 0;
      HEAP[$flag] = $9;
      __label__ = 4;
      break;
     case 4:
      
      
      
      
      var $14 = HEAP[HEAP[$self_addr] + 8];
      var $15 = HEAP[$flag] & 255;
      var $16 = _PyExpat_XML_UseForeignDTD($14, $15);
      HEAP[$rc] = $16;
      
      
      if (HEAP[$rc] != 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      var $19 = HEAP[$self_addr];
      var $20 = HEAP[$rc];
      var $21 = _set_error($19, $20);
      HEAP[$0] = $21;
      __label__ = 7;
      break;
     case 6:
      
      var $23 = HEAP[__Py_NoneStruct] + 1;
      HEAP[__Py_NoneStruct] = $23;
      HEAP[$0] = __Py_NoneStruct;
      __label__ = 7;
      break;
     case 7:
      var $24 = HEAP[$0];
      HEAP[$retval] = $24;
      __label__ = 8;
      break;
     case 8:
      var $retval7 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval7;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _init_template_buffer() {
    var __stackBase__ = STACKTOP;
    STACKTOP += 4;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $i = __stackBase__;
      
      HEAP[$i] = 0;
      __label__ = 2;
      break;
     case 1:
      
      
      var $2 = HEAP[$i] & 255;
      var $3 = _template_buffer + HEAP[$i];
      HEAP[$3] = $2;
      
      var $5 = HEAP[$i] + 1;
      HEAP[$i] = $5;
      __label__ = 2;
      break;
     case 2:
      
      
      if (HEAP[$i] <= 255) {
        __label__ = 1;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 3:
      HEAP[_template_buffer + 256] = 0;
      __label__ = 4;
      break;
     case 4:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyUnknownEncodingHandler($encodingHandlerData, $name, $info) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 34;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 34);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $name_addr = __stackBase__ + 4;
      var $info_addr = __stackBase__ + 8;
      var $retval = __stackBase__ + 12;
      var $0 = __stackBase__ + 16;
      var $_u_string = __stackBase__ + 20;
      var $result = __stackBase__ + 24;
      var $i = __stackBase__ + 28;
      var $c = __stackBase__ + 32;
      
      HEAP[__stackBase__] = $encodingHandlerData;
      HEAP[$name_addr] = $name;
      HEAP[$info_addr] = $info;
      HEAP[$_u_string] = 0;
      HEAP[$result] = 0;
      var $1 = HEAP[$name_addr];
      var $2 = _PyUnicodeUCS2_Decode(_template_buffer, 256, $1, __str62);
      var $3 = $2;
      HEAP[$_u_string] = $3;
      
      
      if (HEAP[$_u_string] == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      var $6 = HEAP[$result];
      HEAP[$0] = $6;
      __label__ = 11;
      break;
     case 2:
      HEAP[$i] = 0;
      __label__ = 7;
      break;
     case 3:
      
      
      
      
      
      var $12 = HEAP[HEAP[HEAP[$_u_string] + 12] + 2 * HEAP[$i]];
      HEAP[$c] = $12;
      
      var $14 = HEAP[$c] == -3;
      if ($14) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      
      
      
      var $18 = HEAP[$info_addr] + HEAP[$i] * 4;
      HEAP[$18] = -1;
      __label__ = 6;
      break;
     case 5:
      
      
      var $21 = HEAP[$c];
      
      
      var $24 = HEAP[$info_addr] + HEAP[$i] * 4;
      HEAP[$24] = $21;
      __label__ = 6;
      break;
     case 6:
      
      var $26 = HEAP[$i] + 1;
      HEAP[$i] = $26;
      __label__ = 7;
      break;
     case 7:
      
      
      if (HEAP[$i] <= 255) {
        __label__ = 3;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 8:
      
      var $30 = HEAP[$info_addr] + 1024;
      HEAP[$30] = 0;
      
      var $32 = HEAP[$info_addr] + 1028;
      HEAP[$32] = 0;
      
      var $34 = HEAP[$info_addr] + 1032;
      HEAP[$34] = 0;
      HEAP[$result] = 1;
      
      var $36 = HEAP[$_u_string];
      
      
      var $39 = HEAP[$36] - 1;
      var $40 = $36;
      HEAP[$40] = $39;
      
      
      
      if (HEAP[$36] == 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      
      
      
      
      
      var $49 = HEAP[HEAP[HEAP[$_u_string] + 4] + 24];
      
      var $51 = HEAP[$_u_string];
      FUNCTION_TABLE[$49]($51);
      __label__ = 10;
      break;
     case 10:
      var $52 = HEAP[$result];
      HEAP[$0] = $52;
      __label__ = 11;
      break;
     case 11:
      var $53 = HEAP[$0];
      HEAP[$retval] = $53;
      __label__ = 12;
      break;
     case 12:
      var $retval11 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval11;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _newxmlparseobject($encoding, $namespace_separator, $intern) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $encoding_addr = __stackBase__;
      var $namespace_separator_addr = __stackBase__ + 4;
      var $intern_addr = __stackBase__ + 8;
      var $retval = __stackBase__ + 12;
      var $0 = __stackBase__ + 16;
      var $i = __stackBase__ + 20;
      var $self = __stackBase__ + 24;
      
      HEAP[$encoding_addr] = $encoding;
      HEAP[$namespace_separator_addr] = $namespace_separator;
      HEAP[$intern_addr] = $intern;
      var $1 = __PyObject_GC_New(_Xmlparsetype);
      
      HEAP[$self] = $1;
      
      
      if (HEAP[$self] == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = 0;
      __label__ = 19;
      break;
     case 2:
      
      var $6 = HEAP[$self] + 12;
      HEAP[$6] = 1;
      
      var $8 = HEAP[$self] + 32;
      HEAP[$8] = 0;
      
      var $10 = HEAP[$self] + 36;
      HEAP[$10] = 8192;
      
      var $12 = HEAP[$self] + 40;
      HEAP[$12] = 0;
      
      var $14 = HEAP[$self] + 16;
      HEAP[$14] = 0;
      
      var $16 = HEAP[$self] + 20;
      HEAP[$16] = 0;
      
      var $18 = HEAP[$self] + 24;
      HEAP[$18] = 0;
      
      var $20 = HEAP[$self] + 28;
      HEAP[$20] = 0;
      
      var $22 = HEAP[$self] + 48;
      HEAP[$22] = 0;
      
      
      if (HEAP[$namespace_separator_addr] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      
      
      var $28 = HEAP[$encoding_addr];
      var $29 = HEAP[HEAP[$namespace_separator_addr]] & 255;
      var $30 = _PyExpat_XML_ParserCreateNS($28, $29);
      
      var $32 = HEAP[$self] + 8;
      HEAP[$32] = $30;
      __label__ = 5;
      break;
     case 4:
      var $33 = HEAP[$encoding_addr];
      var $34 = _PyExpat_XML_ParserCreate($33);
      
      var $36 = HEAP[$self] + 8;
      HEAP[$36] = $34;
      __label__ = 5;
      break;
     case 5:
      
      var $38 = HEAP[$self] + 44;
      var $39 = HEAP[$intern_addr];
      HEAP[$38] = $39;
      
      
      
      
      if (HEAP[HEAP[$self] + 44] != 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      
      
      
      
      
      var $49 = HEAP[HEAP[HEAP[$self] + 44]] + 1;
      var $50 = HEAP[HEAP[$self] + 44];
      HEAP[$50] = $49;
      __label__ = 7;
      break;
     case 7:
      
      var $52 = HEAP[$self];
      _PyObject_GC_Track($52);
      
      
      
      
      if (HEAP[HEAP[$self] + 8] == 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 8:
      var $57 = HEAP[_PyExc_RuntimeError];
      _PyErr_SetString($57, __str63);
      
      var $59 = HEAP[$self];
      
      
      var $62 = HEAP[$59] - 1;
      var $63 = $59;
      HEAP[$63] = $62;
      
      
      
      if (HEAP[$59] == 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      
      
      
      
      
      var $72 = HEAP[HEAP[HEAP[$self] + 4] + 24];
      
      var $74 = HEAP[$self];
      FUNCTION_TABLE[$72]($74);
      __label__ = 10;
      break;
     case 10:
      HEAP[$0] = 0;
      __label__ = 19;
      break;
     case 11:
      
      
      var $77 = HEAP[HEAP[$self] + 8];
      
      var $79 = HEAP[$self];
      _PyExpat_XML_SetUserData($77, $79);
      
      
      var $82 = HEAP[HEAP[$self] + 8];
      _PyExpat_XML_SetUnknownEncodingHandler($82, FUNCTION_TABLE_OFFSET + 10, 0);
      HEAP[$i] = 0;
      __label__ = 13;
      break;
     case 12:
      
      var $84 = HEAP[$i] + 1;
      HEAP[$i] = $84;
      __label__ = 13;
      break;
     case 13:
      
      
      
      
      
      if (HEAP[_handler_info + HEAP[$i] * 20] != 0) {
        __label__ = 12;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 14:
      
      var $91 = HEAP[$i] * 4;
      var $92 = _malloc($91);
      var $93 = $92;
      
      var $95 = HEAP[$self] + 48;
      HEAP[$95] = $93;
      
      
      
      
      if (HEAP[HEAP[$self] + 48] == 0) {
        __label__ = 15;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 15:
      
      var $101 = HEAP[$self];
      
      
      var $104 = HEAP[$101] - 1;
      var $105 = $101;
      HEAP[$105] = $104;
      
      
      
      if (HEAP[$101] == 0) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      
      
      
      
      
      var $114 = HEAP[HEAP[HEAP[$self] + 4] + 24];
      
      var $116 = HEAP[$self];
      FUNCTION_TABLE[$114]($116);
      __label__ = 17;
      break;
     case 17:
      var $117 = _PyErr_NoMemory();
      HEAP[$0] = $117;
      __label__ = 19;
      break;
     case 18:
      var $118 = HEAP[$self];
      _clear_handlers($118, 1);
      
      var $120 = HEAP[$self];
      HEAP[$0] = $120;
      __label__ = 19;
      break;
     case 19:
      var $121 = HEAP[$0];
      HEAP[$retval] = $121;
      __label__ = 20;
      break;
     case 20:
      var $retval19 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval19;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _xmlparse_dealloc($self) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 12;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $self_addr = __stackBase__;
      var $i = __stackBase__ + 4;
      var $temp = __stackBase__ + 8;
      
      HEAP[$self_addr] = $self;
      
      var $1 = HEAP[$self_addr];
      _PyObject_GC_UnTrack($1);
      
      
      
      
      if (HEAP[HEAP[$self_addr] + 8] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      
      
      var $8 = HEAP[HEAP[$self_addr] + 8];
      _PyExpat_XML_ParserFree($8);
      __label__ = 2;
      break;
     case 2:
      
      var $10 = HEAP[$self_addr] + 8;
      HEAP[$10] = 0;
      
      
      
      
      if (HEAP[HEAP[$self_addr] + 48] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 3:
      HEAP[$i] = 0;
      __label__ = 8;
      break;
     case 4:
      
      
      
      
      
      var $20 = HEAP[HEAP[HEAP[$self_addr] + 48] + 4 * HEAP[$i]];
      HEAP[$temp] = $20;
      
      
      
      
      var $25 = HEAP[HEAP[$self_addr] + 48] + 4 * HEAP[$i];
      HEAP[$25] = 0;
      
      
      if (HEAP[$temp] != 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 5:
      
      
      
      var $31 = HEAP[HEAP[$temp]] - 1;
      
      var $33 = HEAP[$temp];
      HEAP[$33] = $31;
      
      
      
      
      if (HEAP[HEAP[$temp]] == 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      
      
      
      
      var $42 = HEAP[HEAP[HEAP[$temp] + 4] + 24];
      var $43 = HEAP[$temp];
      FUNCTION_TABLE[$42]($43);
      __label__ = 7;
      break;
     case 7:
      
      var $45 = HEAP[$i] + 1;
      HEAP[$i] = $45;
      __label__ = 8;
      break;
     case 8:
      
      
      
      
      
      if (HEAP[_handler_info + HEAP[$i] * 20] != 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 9:
      
      
      
      var $54 = HEAP[HEAP[$self_addr] + 48];
      _free($54);
      
      var $56 = HEAP[$self_addr] + 48;
      HEAP[$56] = 0;
      __label__ = 10;
      break;
     case 10:
      
      
      
      
      if (HEAP[HEAP[$self_addr] + 32] != 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      
      
      var $63 = HEAP[HEAP[$self_addr] + 32];
      _free($63);
      
      var $65 = HEAP[$self_addr] + 32;
      HEAP[$65] = 0;
      __label__ = 12;
      break;
     case 12:
      
      
      
      
      if (HEAP[HEAP[$self_addr] + 44] != 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 13:
      
      
      var $72 = HEAP[HEAP[$self_addr] + 44];
      
      
      var $75 = HEAP[$72] - 1;
      var $76 = $72;
      HEAP[$76] = $75;
      
      
      
      if (HEAP[$72] == 0) {
        __label__ = 14;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 14:
      
      
      
      
      
      
      var $86 = HEAP[HEAP[HEAP[HEAP[$self_addr] + 44] + 4] + 24];
      
      
      var $89 = HEAP[HEAP[$self_addr] + 44];
      FUNCTION_TABLE[$86]($89);
      __label__ = 15;
      break;
     case 15:
      
      var $91 = HEAP[$self_addr];
      _PyObject_GC_Del($91);
      __label__ = 16;
      break;
     case 16:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _handlername2int($name) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $name_addr = __stackBase__;
      var $retval = __stackBase__ + 4;
      var $0 = __stackBase__ + 8;
      var $i = __stackBase__ + 12;
      
      HEAP[$name_addr] = $name;
      HEAP[$i] = 0;
      __label__ = 4;
      break;
     case 1:
      
      
      
      var $4 = HEAP[_handler_info + HEAP[$i] * 20];
      var $5 = HEAP[$name_addr];
      var $6 = _strcmp($5, $4);
      
      if ($6 == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      var $8 = HEAP[$i];
      HEAP[$0] = $8;
      __label__ = 6;
      break;
     case 3:
      
      var $10 = HEAP[$i] + 1;
      HEAP[$i] = $10;
      __label__ = 4;
      break;
     case 4:
      
      
      
      
      
      if (HEAP[_handler_info + HEAP[$i] * 20] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 5:
      HEAP[$0] = -1;
      __label__ = 6;
      break;
     case 6:
      var $16 = HEAP[$0];
      HEAP[$retval] = $16;
      __label__ = 7;
      break;
     case 7:
      var $retval6 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval6;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _get_pybool($istrue) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 20;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $retval = __stackBase__ + 4;
      var $0 = __stackBase__ + 8;
      var $iftmp_110 = __stackBase__ + 12;
      var $result = __stackBase__ + 16;
      
      HEAP[__stackBase__] = $istrue;
      
      
      if (HEAP[__stackBase__] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$iftmp_110] = __Py_TrueStruct;
      __label__ = 3;
      break;
     case 2:
      HEAP[$iftmp_110] = __Py_ZeroStruct;
      __label__ = 3;
      break;
     case 3:
      var $3 = HEAP[$iftmp_110];
      HEAP[$result] = $3;
      
      
      
      var $7 = HEAP[HEAP[$result]] + 1;
      
      var $9 = HEAP[$result];
      HEAP[$9] = $7;
      var $10 = HEAP[$result];
      HEAP[$0] = $10;
      var $11 = HEAP[$0];
      HEAP[$retval] = $11;
      __label__ = 4;
      break;
     case 4:
      var $retval3 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval3;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _xmlparse_getattr($self, $name) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 96;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 96);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $self_addr = __stackBase__;
      var $name_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      var $handlernum = __stackBase__ + 16;
      var $result = __stackBase__ + 20;
      var $i = __stackBase__ + 24;
      var $rc = __stackBase__ + 28;
      var $o = __stackBase__ + 32;
      var $o50 = __stackBase__ + 36;
      var $o56 = __stackBase__ + 40;
      var $o62 = __stackBase__ + 44;
      var $o68 = __stackBase__ + 48;
      var $o74 = __stackBase__ + 52;
      var $o80 = __stackBase__ + 56;
      var $o86 = __stackBase__ + 60;
      var $o92 = __stackBase__ + 64;
      var $o98 = __stackBase__ + 68;
      var $o104 = __stackBase__ + 72;
      var $o110 = __stackBase__ + 76;
      var $o116 = __stackBase__ + 80;
      var $o122 = __stackBase__ + 84;
      var $o128 = __stackBase__ + 88;
      var $o134 = __stackBase__ + 92;
      
      HEAP[$self_addr] = $self;
      HEAP[$name_addr] = $name;
      var $1 = HEAP[$name_addr];
      var $2 = _handlername2int($1);
      HEAP[$handlernum] = $2;
      
      var $4 = HEAP[$handlernum] != -1;
      if ($4) {
        __label__ = 1;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 1:
      
      
      
      
      
      var $10 = HEAP[HEAP[HEAP[$self_addr] + 48] + 4 * HEAP[$handlernum]];
      HEAP[$result] = $10;
      
      
      if (HEAP[$result] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      HEAP[$result] = __Py_NoneStruct;
      __label__ = 3;
      break;
     case 3:
      
      
      
      var $16 = HEAP[HEAP[$result]] + 1;
      
      var $18 = HEAP[$result];
      HEAP[$18] = $16;
      var $19 = HEAP[$result];
      HEAP[$0] = $19;
      __label__ = 127;
      break;
     case 4:
      
      
      
      
      if (HEAP[HEAP[$name_addr]] == 69) {
        __label__ = 5;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 5:
      var $24 = HEAP[$name_addr];
      var $25 = _strcmp($24, __str64);
      
      if ($25 == 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      
      
      var $29 = HEAP[HEAP[$self_addr] + 8];
      var $30 = _PyExpat_XML_GetErrorCode($29);
      var $31 = _PyInt_FromLong($30);
      HEAP[$0] = $31;
      __label__ = 127;
      break;
     case 7:
      var $32 = HEAP[$name_addr];
      var $33 = _strcmp($32, __str65);
      
      if ($33 == 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      
      
      var $37 = HEAP[HEAP[$self_addr] + 8];
      var $38 = _PyExpat_XML_GetCurrentLineNumber($37);
      var $39 = _PyInt_FromLong($38);
      HEAP[$0] = $39;
      __label__ = 127;
      break;
     case 9:
      var $40 = HEAP[$name_addr];
      var $41 = _strcmp($40, __str66);
      
      if ($41 == 0) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      
      
      var $45 = HEAP[HEAP[$self_addr] + 8];
      var $46 = _PyExpat_XML_GetCurrentColumnNumber($45);
      var $47 = _PyInt_FromLong($46);
      HEAP[$0] = $47;
      __label__ = 127;
      break;
     case 11:
      var $48 = HEAP[$name_addr];
      var $49 = _strcmp($48, __str67);
      
      if ($49 == 0) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      
      
      var $53 = HEAP[HEAP[$self_addr] + 8];
      var $54 = _PyExpat_XML_GetCurrentByteIndex($53);
      var $55 = _PyInt_FromLong($54);
      HEAP[$0] = $55;
      __label__ = 127;
      break;
     case 13:
      
      
      
      
      if (HEAP[HEAP[$name_addr]] == 67) {
        __label__ = 14;
        break;
      } else {
        __label__ = 20;
        break;
      }
     case 14:
      var $60 = HEAP[$name_addr];
      var $61 = _strcmp($60, __str68);
      
      if ($61 == 0) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      
      
      var $65 = HEAP[HEAP[$self_addr] + 8];
      var $66 = _PyExpat_XML_GetCurrentLineNumber($65);
      var $67 = _PyInt_FromLong($66);
      HEAP[$0] = $67;
      __label__ = 127;
      break;
     case 16:
      var $68 = HEAP[$name_addr];
      var $69 = _strcmp($68, __str69);
      
      if ($69 == 0) {
        __label__ = 17;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 17:
      
      
      var $73 = HEAP[HEAP[$self_addr] + 8];
      var $74 = _PyExpat_XML_GetCurrentColumnNumber($73);
      var $75 = _PyInt_FromLong($74);
      HEAP[$0] = $75;
      __label__ = 127;
      break;
     case 18:
      var $76 = HEAP[$name_addr];
      var $77 = _strcmp($76, __str70);
      
      if ($77 == 0) {
        __label__ = 19;
        break;
      } else {
        __label__ = 20;
        break;
      }
     case 19:
      
      
      var $81 = HEAP[HEAP[$self_addr] + 8];
      var $82 = _PyExpat_XML_GetCurrentByteIndex($81);
      var $83 = _PyInt_FromLong($82);
      HEAP[$0] = $83;
      __label__ = 127;
      break;
     case 20:
      
      
      
      
      if (HEAP[HEAP[$name_addr]] == 98) {
        __label__ = 21;
        break;
      } else {
        __label__ = 27;
        break;
      }
     case 21:
      var $88 = HEAP[$name_addr];
      var $89 = _strcmp($88, __str71);
      
      if ($89 == 0) {
        __label__ = 22;
        break;
      } else {
        __label__ = 23;
        break;
      }
     case 22:
      
      
      var $93 = HEAP[HEAP[$self_addr] + 36];
      var $94 = _PyInt_FromLong($93);
      HEAP[$0] = $94;
      __label__ = 127;
      break;
     case 23:
      var $95 = HEAP[$name_addr];
      var $96 = _strcmp($95, __str72);
      
      if ($96 == 0) {
        __label__ = 24;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 24:
      
      
      
      
      var $102 = HEAP[HEAP[$self_addr] + 32] != 0;
      var $103 = _get_pybool($102);
      HEAP[$0] = $103;
      __label__ = 127;
      break;
     case 25:
      var $104 = HEAP[$name_addr];
      var $105 = _strcmp($104, __str73);
      
      if ($105 == 0) {
        __label__ = 26;
        break;
      } else {
        __label__ = 27;
        break;
      }
     case 26:
      
      
      var $109 = HEAP[HEAP[$self_addr] + 40];
      var $110 = _PyInt_FromLong($109);
      HEAP[$0] = $110;
      __label__ = 127;
      break;
     case 27:
      var $111 = HEAP[$name_addr];
      var $112 = _strcmp($111, __str74);
      
      if ($112 == 0) {
        __label__ = 28;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 28:
      
      
      var $116 = HEAP[HEAP[$self_addr] + 28];
      var $117 = _get_pybool($116);
      HEAP[$0] = $117;
      __label__ = 127;
      break;
     case 29:
      var $118 = HEAP[$name_addr];
      var $119 = _strcmp($118, __str75);
      
      if ($119 == 0) {
        __label__ = 30;
        break;
      } else {
        __label__ = 31;
        break;
      }
     case 30:
      
      
      var $123 = HEAP[HEAP[$self_addr] + 16];
      var $124 = _get_pybool($123);
      HEAP[$0] = $124;
      __label__ = 127;
      break;
     case 31:
      var $125 = HEAP[$name_addr];
      var $126 = _strcmp($125, __str76);
      
      if ($126 == 0) {
        __label__ = 32;
        break;
      } else {
        __label__ = 33;
        break;
      }
     case 32:
      
      
      var $130 = HEAP[HEAP[$self_addr] + 12];
      var $131 = _get_pybool($130);
      HEAP[$0] = $131;
      __label__ = 127;
      break;
     case 33:
      var $132 = HEAP[$name_addr];
      var $133 = _strcmp($132, __str77);
      
      if ($133 == 0) {
        __label__ = 34;
        break;
      } else {
        __label__ = 35;
        break;
      }
     case 34:
      
      
      var $137 = HEAP[HEAP[$self_addr] + 20];
      var $138 = _get_pybool($137);
      HEAP[$0] = $138;
      __label__ = 127;
      break;
     case 35:
      var $139 = HEAP[$name_addr];
      var $140 = _strcmp($139, __str78);
      
      if ($140 == 0) {
        __label__ = 36;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 36:
      
      
      
      
      if (HEAP[HEAP[$self_addr] + 44] == 0) {
        __label__ = 37;
        break;
      } else {
        __label__ = 38;
        break;
      }
     case 37:
      
      var $147 = HEAP[__Py_NoneStruct] + 1;
      HEAP[__Py_NoneStruct] = $147;
      HEAP[$0] = __Py_NoneStruct;
      __label__ = 127;
      break;
     case 38:
      
      
      
      
      
      var $153 = HEAP[HEAP[HEAP[$self_addr] + 44]] + 1;
      var $154 = HEAP[HEAP[$self_addr] + 44];
      HEAP[$154] = $153;
      
      
      var $157 = HEAP[HEAP[$self_addr] + 44];
      HEAP[$0] = $157;
      __label__ = 127;
      break;
     case 39:
      var $158 = HEAP[$name_addr];
      var $159 = _strcmp($158, __str79);
      
      if ($159 == 0) {
        __label__ = 40;
        break;
      } else {
        __label__ = 126;
        break;
      }
     case 40:
      var $161 = _PyList_New(0);
      HEAP[$rc] = $161;
      
      
      if (HEAP[$rc] == 0) {
        __label__ = 41;
        break;
      } else {
        __label__ = 42;
        break;
      }
     case 41:
      HEAP[$0] = 0;
      __label__ = 127;
      break;
     case 42:
      HEAP[$i] = 0;
      __label__ = 49;
      break;
     case 43:
      
      var $165 = _handler_info + HEAP[$i] * 20;
      var $166 = _get_handler_name($165);
      HEAP[$o] = $166;
      
      
      if (HEAP[$o] != 0) {
        __label__ = 44;
        break;
      } else {
        __label__ = 45;
        break;
      }
     case 44:
      var $169 = HEAP[$rc];
      var $170 = HEAP[$o];
      var $171 = _PyList_Append($169, $170);
      __label__ = 45;
      break;
     case 45:
      
      
      if (HEAP[$o] != 0) {
        __label__ = 46;
        break;
      } else {
        __label__ = 48;
        break;
      }
     case 46:
      
      
      
      var $177 = HEAP[HEAP[$o]] - 1;
      
      var $179 = HEAP[$o];
      HEAP[$179] = $177;
      
      
      
      
      if (HEAP[HEAP[$o]] == 0) {
        __label__ = 47;
        break;
      } else {
        __label__ = 48;
        break;
      }
     case 47:
      
      
      
      
      var $188 = HEAP[HEAP[HEAP[$o] + 4] + 24];
      var $189 = HEAP[$o];
      FUNCTION_TABLE[$188]($189);
      __label__ = 48;
      break;
     case 48:
      
      var $191 = HEAP[$i] + 1;
      HEAP[$i] = $191;
      __label__ = 49;
      break;
     case 49:
      
      
      
      
      
      if (HEAP[_handler_info + HEAP[$i] * 20] != 0) {
        __label__ = 43;
        break;
      } else {
        __label__ = 50;
        break;
      }
     case 50:
      var $197 = _PyString_FromString(__str64);
      HEAP[$o50] = $197;
      
      
      if (HEAP[$o50] != 0) {
        __label__ = 51;
        break;
      } else {
        __label__ = 52;
        break;
      }
     case 51:
      var $200 = HEAP[$rc];
      var $201 = HEAP[$o50];
      var $202 = _PyList_Append($200, $201);
      __label__ = 52;
      break;
     case 52:
      
      
      if (HEAP[$o50] != 0) {
        __label__ = 53;
        break;
      } else {
        __label__ = 55;
        break;
      }
     case 53:
      
      
      
      var $208 = HEAP[HEAP[$o50]] - 1;
      
      var $210 = HEAP[$o50];
      HEAP[$210] = $208;
      
      
      
      
      if (HEAP[HEAP[$o50]] == 0) {
        __label__ = 54;
        break;
      } else {
        __label__ = 55;
        break;
      }
     case 54:
      
      
      
      
      var $219 = HEAP[HEAP[HEAP[$o50] + 4] + 24];
      var $220 = HEAP[$o50];
      FUNCTION_TABLE[$219]($220);
      __label__ = 55;
      break;
     case 55:
      var $221 = _PyString_FromString(__str65);
      HEAP[$o56] = $221;
      
      
      if (HEAP[$o56] != 0) {
        __label__ = 56;
        break;
      } else {
        __label__ = 57;
        break;
      }
     case 56:
      var $224 = HEAP[$rc];
      var $225 = HEAP[$o56];
      var $226 = _PyList_Append($224, $225);
      __label__ = 57;
      break;
     case 57:
      
      
      if (HEAP[$o56] != 0) {
        __label__ = 58;
        break;
      } else {
        __label__ = 60;
        break;
      }
     case 58:
      
      
      
      var $232 = HEAP[HEAP[$o56]] - 1;
      
      var $234 = HEAP[$o56];
      HEAP[$234] = $232;
      
      
      
      
      if (HEAP[HEAP[$o56]] == 0) {
        __label__ = 59;
        break;
      } else {
        __label__ = 60;
        break;
      }
     case 59:
      
      
      
      
      var $243 = HEAP[HEAP[HEAP[$o56] + 4] + 24];
      var $244 = HEAP[$o56];
      FUNCTION_TABLE[$243]($244);
      __label__ = 60;
      break;
     case 60:
      var $245 = _PyString_FromString(__str66);
      HEAP[$o62] = $245;
      
      
      if (HEAP[$o62] != 0) {
        __label__ = 61;
        break;
      } else {
        __label__ = 62;
        break;
      }
     case 61:
      var $248 = HEAP[$rc];
      var $249 = HEAP[$o62];
      var $250 = _PyList_Append($248, $249);
      __label__ = 62;
      break;
     case 62:
      
      
      if (HEAP[$o62] != 0) {
        __label__ = 63;
        break;
      } else {
        __label__ = 65;
        break;
      }
     case 63:
      
      
      
      var $256 = HEAP[HEAP[$o62]] - 1;
      
      var $258 = HEAP[$o62];
      HEAP[$258] = $256;
      
      
      
      
      if (HEAP[HEAP[$o62]] == 0) {
        __label__ = 64;
        break;
      } else {
        __label__ = 65;
        break;
      }
     case 64:
      
      
      
      
      var $267 = HEAP[HEAP[HEAP[$o62] + 4] + 24];
      var $268 = HEAP[$o62];
      FUNCTION_TABLE[$267]($268);
      __label__ = 65;
      break;
     case 65:
      var $269 = _PyString_FromString(__str67);
      HEAP[$o68] = $269;
      
      
      if (HEAP[$o68] != 0) {
        __label__ = 66;
        break;
      } else {
        __label__ = 67;
        break;
      }
     case 66:
      var $272 = HEAP[$rc];
      var $273 = HEAP[$o68];
      var $274 = _PyList_Append($272, $273);
      __label__ = 67;
      break;
     case 67:
      
      
      if (HEAP[$o68] != 0) {
        __label__ = 68;
        break;
      } else {
        __label__ = 70;
        break;
      }
     case 68:
      
      
      
      var $280 = HEAP[HEAP[$o68]] - 1;
      
      var $282 = HEAP[$o68];
      HEAP[$282] = $280;
      
      
      
      
      if (HEAP[HEAP[$o68]] == 0) {
        __label__ = 69;
        break;
      } else {
        __label__ = 70;
        break;
      }
     case 69:
      
      
      
      
      var $291 = HEAP[HEAP[HEAP[$o68] + 4] + 24];
      var $292 = HEAP[$o68];
      FUNCTION_TABLE[$291]($292);
      __label__ = 70;
      break;
     case 70:
      var $293 = _PyString_FromString(__str68);
      HEAP[$o74] = $293;
      
      
      if (HEAP[$o74] != 0) {
        __label__ = 71;
        break;
      } else {
        __label__ = 72;
        break;
      }
     case 71:
      var $296 = HEAP[$rc];
      var $297 = HEAP[$o74];
      var $298 = _PyList_Append($296, $297);
      __label__ = 72;
      break;
     case 72:
      
      
      if (HEAP[$o74] != 0) {
        __label__ = 73;
        break;
      } else {
        __label__ = 75;
        break;
      }
     case 73:
      
      
      
      var $304 = HEAP[HEAP[$o74]] - 1;
      
      var $306 = HEAP[$o74];
      HEAP[$306] = $304;
      
      
      
      
      if (HEAP[HEAP[$o74]] == 0) {
        __label__ = 74;
        break;
      } else {
        __label__ = 75;
        break;
      }
     case 74:
      
      
      
      
      var $315 = HEAP[HEAP[HEAP[$o74] + 4] + 24];
      var $316 = HEAP[$o74];
      FUNCTION_TABLE[$315]($316);
      __label__ = 75;
      break;
     case 75:
      var $317 = _PyString_FromString(__str69);
      HEAP[$o80] = $317;
      
      
      if (HEAP[$o80] != 0) {
        __label__ = 76;
        break;
      } else {
        __label__ = 77;
        break;
      }
     case 76:
      var $320 = HEAP[$rc];
      var $321 = HEAP[$o80];
      var $322 = _PyList_Append($320, $321);
      __label__ = 77;
      break;
     case 77:
      
      
      if (HEAP[$o80] != 0) {
        __label__ = 78;
        break;
      } else {
        __label__ = 80;
        break;
      }
     case 78:
      
      
      
      var $328 = HEAP[HEAP[$o80]] - 1;
      
      var $330 = HEAP[$o80];
      HEAP[$330] = $328;
      
      
      
      
      if (HEAP[HEAP[$o80]] == 0) {
        __label__ = 79;
        break;
      } else {
        __label__ = 80;
        break;
      }
     case 79:
      
      
      
      
      var $339 = HEAP[HEAP[HEAP[$o80] + 4] + 24];
      var $340 = HEAP[$o80];
      FUNCTION_TABLE[$339]($340);
      __label__ = 80;
      break;
     case 80:
      var $341 = _PyString_FromString(__str70);
      HEAP[$o86] = $341;
      
      
      if (HEAP[$o86] != 0) {
        __label__ = 81;
        break;
      } else {
        __label__ = 82;
        break;
      }
     case 81:
      var $344 = HEAP[$rc];
      var $345 = HEAP[$o86];
      var $346 = _PyList_Append($344, $345);
      __label__ = 82;
      break;
     case 82:
      
      
      if (HEAP[$o86] != 0) {
        __label__ = 83;
        break;
      } else {
        __label__ = 85;
        break;
      }
     case 83:
      
      
      
      var $352 = HEAP[HEAP[$o86]] - 1;
      
      var $354 = HEAP[$o86];
      HEAP[$354] = $352;
      
      
      
      
      if (HEAP[HEAP[$o86]] == 0) {
        __label__ = 84;
        break;
      } else {
        __label__ = 85;
        break;
      }
     case 84:
      
      
      
      
      var $363 = HEAP[HEAP[HEAP[$o86] + 4] + 24];
      var $364 = HEAP[$o86];
      FUNCTION_TABLE[$363]($364);
      __label__ = 85;
      break;
     case 85:
      var $365 = _PyString_FromString(__str71);
      HEAP[$o92] = $365;
      
      
      if (HEAP[$o92] != 0) {
        __label__ = 86;
        break;
      } else {
        __label__ = 87;
        break;
      }
     case 86:
      var $368 = HEAP[$rc];
      var $369 = HEAP[$o92];
      var $370 = _PyList_Append($368, $369);
      __label__ = 87;
      break;
     case 87:
      
      
      if (HEAP[$o92] != 0) {
        __label__ = 88;
        break;
      } else {
        __label__ = 90;
        break;
      }
     case 88:
      
      
      
      var $376 = HEAP[HEAP[$o92]] - 1;
      
      var $378 = HEAP[$o92];
      HEAP[$378] = $376;
      
      
      
      
      if (HEAP[HEAP[$o92]] == 0) {
        __label__ = 89;
        break;
      } else {
        __label__ = 90;
        break;
      }
     case 89:
      
      
      
      
      var $387 = HEAP[HEAP[HEAP[$o92] + 4] + 24];
      var $388 = HEAP[$o92];
      FUNCTION_TABLE[$387]($388);
      __label__ = 90;
      break;
     case 90:
      var $389 = _PyString_FromString(__str72);
      HEAP[$o98] = $389;
      
      
      if (HEAP[$o98] != 0) {
        __label__ = 91;
        break;
      } else {
        __label__ = 92;
        break;
      }
     case 91:
      var $392 = HEAP[$rc];
      var $393 = HEAP[$o98];
      var $394 = _PyList_Append($392, $393);
      __label__ = 92;
      break;
     case 92:
      
      
      if (HEAP[$o98] != 0) {
        __label__ = 93;
        break;
      } else {
        __label__ = 95;
        break;
      }
     case 93:
      
      
      
      var $400 = HEAP[HEAP[$o98]] - 1;
      
      var $402 = HEAP[$o98];
      HEAP[$402] = $400;
      
      
      
      
      if (HEAP[HEAP[$o98]] == 0) {
        __label__ = 94;
        break;
      } else {
        __label__ = 95;
        break;
      }
     case 94:
      
      
      
      
      var $411 = HEAP[HEAP[HEAP[$o98] + 4] + 24];
      var $412 = HEAP[$o98];
      FUNCTION_TABLE[$411]($412);
      __label__ = 95;
      break;
     case 95:
      var $413 = _PyString_FromString(__str73);
      HEAP[$o104] = $413;
      
      
      if (HEAP[$o104] != 0) {
        __label__ = 96;
        break;
      } else {
        __label__ = 97;
        break;
      }
     case 96:
      var $416 = HEAP[$rc];
      var $417 = HEAP[$o104];
      var $418 = _PyList_Append($416, $417);
      __label__ = 97;
      break;
     case 97:
      
      
      if (HEAP[$o104] != 0) {
        __label__ = 98;
        break;
      } else {
        __label__ = 100;
        break;
      }
     case 98:
      
      
      
      var $424 = HEAP[HEAP[$o104]] - 1;
      
      var $426 = HEAP[$o104];
      HEAP[$426] = $424;
      
      
      
      
      if (HEAP[HEAP[$o104]] == 0) {
        __label__ = 99;
        break;
      } else {
        __label__ = 100;
        break;
      }
     case 99:
      
      
      
      
      var $435 = HEAP[HEAP[HEAP[$o104] + 4] + 24];
      var $436 = HEAP[$o104];
      FUNCTION_TABLE[$435]($436);
      __label__ = 100;
      break;
     case 100:
      var $437 = _PyString_FromString(__str74);
      HEAP[$o110] = $437;
      
      
      if (HEAP[$o110] != 0) {
        __label__ = 101;
        break;
      } else {
        __label__ = 102;
        break;
      }
     case 101:
      var $440 = HEAP[$rc];
      var $441 = HEAP[$o110];
      var $442 = _PyList_Append($440, $441);
      __label__ = 102;
      break;
     case 102:
      
      
      if (HEAP[$o110] != 0) {
        __label__ = 103;
        break;
      } else {
        __label__ = 105;
        break;
      }
     case 103:
      
      
      
      var $448 = HEAP[HEAP[$o110]] - 1;
      
      var $450 = HEAP[$o110];
      HEAP[$450] = $448;
      
      
      
      
      if (HEAP[HEAP[$o110]] == 0) {
        __label__ = 104;
        break;
      } else {
        __label__ = 105;
        break;
      }
     case 104:
      
      
      
      
      var $459 = HEAP[HEAP[HEAP[$o110] + 4] + 24];
      var $460 = HEAP[$o110];
      FUNCTION_TABLE[$459]($460);
      __label__ = 105;
      break;
     case 105:
      var $461 = _PyString_FromString(__str75);
      HEAP[$o116] = $461;
      
      
      if (HEAP[$o116] != 0) {
        __label__ = 106;
        break;
      } else {
        __label__ = 107;
        break;
      }
     case 106:
      var $464 = HEAP[$rc];
      var $465 = HEAP[$o116];
      var $466 = _PyList_Append($464, $465);
      __label__ = 107;
      break;
     case 107:
      
      
      if (HEAP[$o116] != 0) {
        __label__ = 108;
        break;
      } else {
        __label__ = 110;
        break;
      }
     case 108:
      
      
      
      var $472 = HEAP[HEAP[$o116]] - 1;
      
      var $474 = HEAP[$o116];
      HEAP[$474] = $472;
      
      
      
      
      if (HEAP[HEAP[$o116]] == 0) {
        __label__ = 109;
        break;
      } else {
        __label__ = 110;
        break;
      }
     case 109:
      
      
      
      
      var $483 = HEAP[HEAP[HEAP[$o116] + 4] + 24];
      var $484 = HEAP[$o116];
      FUNCTION_TABLE[$483]($484);
      __label__ = 110;
      break;
     case 110:
      var $485 = _PyString_FromString(__str76);
      HEAP[$o122] = $485;
      
      
      if (HEAP[$o122] != 0) {
        __label__ = 111;
        break;
      } else {
        __label__ = 112;
        break;
      }
     case 111:
      var $488 = HEAP[$rc];
      var $489 = HEAP[$o122];
      var $490 = _PyList_Append($488, $489);
      __label__ = 112;
      break;
     case 112:
      
      
      if (HEAP[$o122] != 0) {
        __label__ = 113;
        break;
      } else {
        __label__ = 115;
        break;
      }
     case 113:
      
      
      
      var $496 = HEAP[HEAP[$o122]] - 1;
      
      var $498 = HEAP[$o122];
      HEAP[$498] = $496;
      
      
      
      
      if (HEAP[HEAP[$o122]] == 0) {
        __label__ = 114;
        break;
      } else {
        __label__ = 115;
        break;
      }
     case 114:
      
      
      
      
      var $507 = HEAP[HEAP[HEAP[$o122] + 4] + 24];
      var $508 = HEAP[$o122];
      FUNCTION_TABLE[$507]($508);
      __label__ = 115;
      break;
     case 115:
      var $509 = _PyString_FromString(__str77);
      HEAP[$o128] = $509;
      
      
      if (HEAP[$o128] != 0) {
        __label__ = 116;
        break;
      } else {
        __label__ = 117;
        break;
      }
     case 116:
      var $512 = HEAP[$rc];
      var $513 = HEAP[$o128];
      var $514 = _PyList_Append($512, $513);
      __label__ = 117;
      break;
     case 117:
      
      
      if (HEAP[$o128] != 0) {
        __label__ = 118;
        break;
      } else {
        __label__ = 120;
        break;
      }
     case 118:
      
      
      
      var $520 = HEAP[HEAP[$o128]] - 1;
      
      var $522 = HEAP[$o128];
      HEAP[$522] = $520;
      
      
      
      
      if (HEAP[HEAP[$o128]] == 0) {
        __label__ = 119;
        break;
      } else {
        __label__ = 120;
        break;
      }
     case 119:
      
      
      
      
      var $531 = HEAP[HEAP[HEAP[$o128] + 4] + 24];
      var $532 = HEAP[$o128];
      FUNCTION_TABLE[$531]($532);
      __label__ = 120;
      break;
     case 120:
      var $533 = _PyString_FromString(__str78);
      HEAP[$o134] = $533;
      
      
      if (HEAP[$o134] != 0) {
        __label__ = 121;
        break;
      } else {
        __label__ = 122;
        break;
      }
     case 121:
      var $536 = HEAP[$rc];
      var $537 = HEAP[$o134];
      var $538 = _PyList_Append($536, $537);
      __label__ = 122;
      break;
     case 122:
      
      
      if (HEAP[$o134] != 0) {
        __label__ = 123;
        break;
      } else {
        __label__ = 125;
        break;
      }
     case 123:
      
      
      
      var $544 = HEAP[HEAP[$o134]] - 1;
      
      var $546 = HEAP[$o134];
      HEAP[$546] = $544;
      
      
      
      
      if (HEAP[HEAP[$o134]] == 0) {
        __label__ = 124;
        break;
      } else {
        __label__ = 125;
        break;
      }
     case 124:
      
      
      
      
      var $555 = HEAP[HEAP[HEAP[$o134] + 4] + 24];
      var $556 = HEAP[$o134];
      FUNCTION_TABLE[$555]($556);
      __label__ = 125;
      break;
     case 125:
      var $557 = HEAP[$rc];
      HEAP[$0] = $557;
      __label__ = 127;
      break;
     case 126:
      
      var $559 = HEAP[$self_addr];
      var $560 = HEAP[$name_addr];
      var $561 = _Py_FindMethod(_xmlparse_methods, $559, $560);
      HEAP[$0] = $561;
      __label__ = 127;
      break;
     case 127:
      var $562 = HEAP[$0];
      HEAP[$retval] = $562;
      __label__ = 128;
      break;
     case 128:
      var $retval142 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval142;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _sethandler($self, $name, $v) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 32;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $self_addr = __stackBase__;
      var $name_addr = __stackBase__ + 4;
      var $v_addr = __stackBase__ + 8;
      var $retval = __stackBase__ + 12;
      var $0 = __stackBase__ + 16;
      var $handlernum = __stackBase__ + 20;
      var $c_handler = __stackBase__ + 24;
      var $temp = __stackBase__ + 28;
      
      HEAP[$self_addr] = $self;
      HEAP[$name_addr] = $name;
      HEAP[$v_addr] = $v;
      var $1 = HEAP[$name_addr];
      var $2 = _handlername2int($1);
      HEAP[$handlernum] = $2;
      
      
      if (HEAP[$handlernum] >= 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 1:
      HEAP[$c_handler] = 0;
      
      
      
      
      
      var $10 = HEAP[HEAP[HEAP[$self_addr] + 48] + 4 * HEAP[$handlernum]];
      HEAP[$temp] = $10;
      
      
      if (HEAP[$v_addr] == __Py_NoneStruct) {
        __label__ = 2;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 2:
      
      
      if (HEAP[$handlernum] == 3) {
        __label__ = 3;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 3:
      
      
      
      
      if (HEAP[HEAP[$self_addr] + 24] != 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      HEAP[$c_handler] = FUNCTION_TABLE_OFFSET + 8;
      __label__ = 5;
      break;
     case 5:
      HEAP[$v_addr] = 0;
      __label__ = 8;
      break;
     case 6:
      
      
      if (HEAP[$v_addr] != 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      
      
      
      var $24 = HEAP[HEAP[$v_addr]] + 1;
      
      var $26 = HEAP[$v_addr];
      HEAP[$26] = $24;
      
      
      
      var $30 = HEAP[_handler_info + HEAP[$handlernum] * 20 + 8];
      HEAP[$c_handler] = $30;
      __label__ = 8;
      break;
     case 8:
      
      
      
      
      var $35 = HEAP[HEAP[$self_addr] + 48] + 4 * HEAP[$handlernum];
      var $36 = HEAP[$v_addr];
      HEAP[$35] = $36;
      
      
      if (HEAP[$temp] != 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 9:
      
      
      
      var $42 = HEAP[HEAP[$temp]] - 1;
      
      var $44 = HEAP[$temp];
      HEAP[$44] = $42;
      
      
      
      
      if (HEAP[HEAP[$temp]] == 0) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      
      
      
      
      var $53 = HEAP[HEAP[HEAP[$temp] + 4] + 24];
      var $54 = HEAP[$temp];
      FUNCTION_TABLE[$53]($54);
      __label__ = 11;
      break;
     case 11:
      
      
      
      var $58 = HEAP[_handler_info + HEAP[$handlernum] * 20 + 4];
      
      
      var $61 = HEAP[HEAP[$self_addr] + 8];
      var $62 = HEAP[$c_handler];
      FUNCTION_TABLE[$58]($61, $62);
      HEAP[$0] = 1;
      __label__ = 13;
      break;
     case 12:
      HEAP[$0] = 0;
      __label__ = 13;
      break;
     case 13:
      var $63 = HEAP[$0];
      HEAP[$retval] = $63;
      __label__ = 14;
      break;
     case 14:
      var $retval13 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval13;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _xmlparse_setattr($self, $name, $v) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 24;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $self_addr = __stackBase__;
      var $name_addr = __stackBase__ + 4;
      var $v_addr = __stackBase__ + 8;
      var $retval = __stackBase__ + 12;
      var $0 = __stackBase__ + 16;
      var $new_buffer_size = __stackBase__ + 20;
      
      HEAP[$self_addr] = $self;
      HEAP[$name_addr] = $name;
      HEAP[$v_addr] = $v;
      
      
      if (HEAP[$v_addr] == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      var $3 = HEAP[_PyExc_RuntimeError];
      _PyErr_SetString($3, __str80);
      HEAP[$0] = -1;
      __label__ = 54;
      break;
     case 2:
      var $4 = HEAP[$name_addr];
      var $5 = _strcmp($4, __str72);
      
      if ($5 == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 3:
      var $7 = HEAP[$v_addr];
      var $8 = _PyObject_IsTrue($7);
      
      if ($8 != 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 4:
      
      
      
      
      if (HEAP[HEAP[$self_addr] + 32] == 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 5:
      
      
      var $16 = HEAP[HEAP[$self_addr] + 36];
      var $17 = _malloc($16);
      
      var $19 = HEAP[$self_addr] + 32;
      HEAP[$19] = $17;
      
      
      
      
      if (HEAP[HEAP[$self_addr] + 32] == 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      var $24 = _PyErr_NoMemory();
      HEAP[$0] = -1;
      __label__ = 54;
      break;
     case 7:
      
      var $26 = HEAP[$self_addr] + 40;
      HEAP[$26] = 0;
      __label__ = 8;
      break;
     case 8:
      __label__ = 13;
      break;
     case 9:
      
      
      
      
      if (HEAP[HEAP[$self_addr] + 32] != 0) {
        __label__ = 10;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 10:
      var $31 = HEAP[$self_addr];
      var $32 = _flush_character_buffer($31);
      
      if ($32 < 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      HEAP[$0] = -1;
      __label__ = 54;
      break;
     case 12:
      
      
      var $36 = HEAP[HEAP[$self_addr] + 32];
      _free($36);
      
      var $38 = HEAP[$self_addr] + 32;
      HEAP[$38] = 0;
      __label__ = 13;
      break;
     case 13:
      HEAP[$0] = 0;
      __label__ = 54;
      break;
     case 14:
      var $39 = HEAP[$name_addr];
      var $40 = _strcmp($39, __str74);
      
      if ($40 == 0) {
        __label__ = 15;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 15:
      var $42 = HEAP[$v_addr];
      var $43 = _PyObject_IsTrue($42);
      
      if ($43 != 0) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      
      var $46 = HEAP[$self_addr] + 28;
      HEAP[$46] = 1;
      __label__ = 18;
      break;
     case 17:
      
      var $48 = HEAP[$self_addr] + 28;
      HEAP[$48] = 0;
      __label__ = 18;
      break;
     case 18:
      
      
      var $51 = HEAP[HEAP[$self_addr] + 28];
      
      
      var $54 = HEAP[HEAP[$self_addr] + 8];
      _PyExpat_XML_SetReturnNSTriplet($54, $51);
      HEAP[$0] = 0;
      __label__ = 54;
      break;
     case 19:
      var $55 = HEAP[$name_addr];
      var $56 = _strcmp($55, __str75);
      
      if ($56 == 0) {
        __label__ = 20;
        break;
      } else {
        __label__ = 24;
        break;
      }
     case 20:
      var $58 = HEAP[$v_addr];
      var $59 = _PyObject_IsTrue($58);
      
      if ($59 != 0) {
        __label__ = 21;
        break;
      } else {
        __label__ = 22;
        break;
      }
     case 21:
      
      var $62 = HEAP[$self_addr] + 16;
      HEAP[$62] = 1;
      __label__ = 23;
      break;
     case 22:
      
      var $64 = HEAP[$self_addr] + 16;
      HEAP[$64] = 0;
      __label__ = 23;
      break;
     case 23:
      HEAP[$0] = 0;
      __label__ = 54;
      break;
     case 24:
      var $65 = HEAP[$name_addr];
      var $66 = _strcmp($65, __str76);
      
      if ($66 == 0) {
        __label__ = 25;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 25:
      var $68 = HEAP[$v_addr];
      var $69 = _PyObject_IsTrue($68);
      
      if ($69 != 0) {
        __label__ = 26;
        break;
      } else {
        __label__ = 27;
        break;
      }
     case 26:
      
      var $72 = HEAP[$self_addr] + 12;
      HEAP[$72] = 1;
      __label__ = 28;
      break;
     case 27:
      
      var $74 = HEAP[$self_addr] + 12;
      HEAP[$74] = 0;
      __label__ = 28;
      break;
     case 28:
      HEAP[$0] = 0;
      __label__ = 54;
      break;
     case 29:
      var $75 = HEAP[$name_addr];
      var $76 = _strcmp($75, __str77);
      
      if ($76 == 0) {
        __label__ = 30;
        break;
      } else {
        __label__ = 34;
        break;
      }
     case 30:
      var $78 = HEAP[$v_addr];
      var $79 = _PyObject_IsTrue($78);
      
      if ($79 != 0) {
        __label__ = 31;
        break;
      } else {
        __label__ = 32;
        break;
      }
     case 31:
      
      var $82 = HEAP[$self_addr] + 20;
      HEAP[$82] = 1;
      __label__ = 33;
      break;
     case 32:
      
      var $84 = HEAP[$self_addr] + 20;
      HEAP[$84] = 0;
      __label__ = 33;
      break;
     case 33:
      HEAP[$0] = 0;
      __label__ = 54;
      break;
     case 34:
      var $85 = HEAP[$name_addr];
      var $86 = _strcmp($85, __str71);
      
      if ($86 == 0) {
        __label__ = 35;
        break;
      } else {
        __label__ = 48;
        break;
      }
     case 35:
      
      
      
      
      
      
      
      if ((HEAP[HEAP[HEAP[$v_addr] + 4] + 84] & 8388608) == 0) {
        __label__ = 36;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 36:
      var $95 = HEAP[_PyExc_TypeError];
      _PyErr_SetString($95, __str81);
      HEAP[$0] = -1;
      __label__ = 54;
      break;
     case 37:
      
      
      
      var $99 = HEAP[HEAP[$v_addr] + 8];
      HEAP[$new_buffer_size] = $99;
      
      
      
      
      
      if (HEAP[HEAP[$self_addr] + 36] == HEAP[$new_buffer_size]) {
        __label__ = 38;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 38:
      HEAP[$0] = 0;
      __label__ = 54;
      break;
     case 39:
      
      
      if (HEAP[$new_buffer_size] <= 0) {
        __label__ = 40;
        break;
      } else {
        __label__ = 41;
        break;
      }
     case 40:
      var $107 = HEAP[_PyExc_ValueError];
      _PyErr_SetString($107, __str82);
      HEAP[$0] = -1;
      __label__ = 54;
      break;
     case 41:
      
      
      
      
      if (HEAP[HEAP[$self_addr] + 32] != 0) {
        __label__ = 42;
        break;
      } else {
        __label__ = 45;
        break;
      }
     case 42:
      
      
      
      
      if (HEAP[HEAP[$self_addr] + 40] != 0) {
        __label__ = 43;
        break;
      } else {
        __label__ = 44;
        break;
      }
     case 43:
      var $116 = HEAP[$self_addr];
      var $117 = _flush_character_buffer($116);
      __label__ = 44;
      break;
     case 44:
      
      
      var $120 = HEAP[HEAP[$self_addr] + 32];
      _free($120);
      __label__ = 45;
      break;
     case 45:
      var $121 = HEAP[$new_buffer_size];
      var $122 = _malloc($121);
      
      var $124 = HEAP[$self_addr] + 32;
      HEAP[$124] = $122;
      
      
      
      
      if (HEAP[HEAP[$self_addr] + 32] == 0) {
        __label__ = 46;
        break;
      } else {
        __label__ = 47;
        break;
      }
     case 46:
      var $129 = _PyErr_NoMemory();
      HEAP[$0] = -1;
      __label__ = 54;
      break;
     case 47:
      
      var $131 = HEAP[$self_addr] + 36;
      var $132 = HEAP[$new_buffer_size];
      HEAP[$131] = $132;
      HEAP[$0] = 0;
      __label__ = 54;
      break;
     case 48:
      var $133 = HEAP[$name_addr];
      var $134 = _strcmp($133, __str83);
      
      if ($134 == 0) {
        __label__ = 49;
        break;
      } else {
        __label__ = 51;
        break;
      }
     case 49:
      var $136 = HEAP[$self_addr];
      var $137 = _flush_character_buffer($136);
      
      if ($137 < 0) {
        __label__ = 50;
        break;
      } else {
        __label__ = 51;
        break;
      }
     case 50:
      HEAP[$0] = -1;
      __label__ = 54;
      break;
     case 51:
      var $139 = HEAP[$self_addr];
      var $140 = HEAP[$name_addr];
      var $141 = HEAP[$v_addr];
      var $142 = _sethandler($139, $140, $141);
      
      if ($142 != 0) {
        __label__ = 52;
        break;
      } else {
        __label__ = 53;
        break;
      }
     case 52:
      HEAP[$0] = 0;
      __label__ = 54;
      break;
     case 53:
      var $144 = HEAP[_PyExc_AttributeError];
      var $145 = HEAP[$name_addr];
      _PyErr_SetString($144, $145);
      HEAP[$0] = -1;
      __label__ = 54;
      break;
     case 54:
      var $146 = HEAP[$0];
      HEAP[$retval] = $146;
      __label__ = 55;
      break;
     case 55:
      var $retval54 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval54;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _xmlparse_traverse($op, $visit, $arg) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $op_addr = __stackBase__;
      var $visit_addr = __stackBase__ + 4;
      var $arg_addr = __stackBase__ + 8;
      var $retval = __stackBase__ + 12;
      var $0 = __stackBase__ + 16;
      var $i = __stackBase__ + 20;
      var $vret = __stackBase__ + 24;
      
      HEAP[$op_addr] = $op;
      HEAP[$visit_addr] = $visit;
      HEAP[$arg_addr] = $arg;
      HEAP[$i] = 0;
      __label__ = 5;
      break;
     case 1:
      
      
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$op_addr] + 48] + 4 * HEAP[$i]] != 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 2:
      
      
      
      
      
      var $13 = HEAP[HEAP[HEAP[$op_addr] + 48] + 4 * HEAP[$i]];
      var $14 = HEAP[$visit_addr];
      var $15 = HEAP[$arg_addr];
      var $16 = FUNCTION_TABLE[$14]($13, $15);
      HEAP[$vret] = $16;
      
      
      if (HEAP[$vret] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      var $19 = HEAP[$vret];
      HEAP[$0] = $19;
      __label__ = 7;
      break;
     case 4:
      
      var $21 = HEAP[$i] + 1;
      HEAP[$i] = $21;
      __label__ = 5;
      break;
     case 5:
      
      
      
      
      
      if (HEAP[_handler_info + HEAP[$i] * 20] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 6:
      HEAP[$0] = 0;
      __label__ = 7;
      break;
     case 7:
      var $27 = HEAP[$0];
      HEAP[$retval] = $27;
      __label__ = 8;
      break;
     case 8:
      var $retval7 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval7;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _xmlparse_clear($op) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $op_addr = __stackBase__;
      var $retval = __stackBase__ + 4;
      var $0 = __stackBase__ + 8;
      var $_py_tmp = __stackBase__ + 12;
      
      HEAP[$op_addr] = $op;
      var $1 = HEAP[$op_addr];
      _clear_handlers($1, 0);
      
      
      
      
      if (HEAP[HEAP[$op_addr] + 44] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      
      
      var $8 = HEAP[HEAP[$op_addr] + 44];
      HEAP[$_py_tmp] = $8;
      
      var $10 = HEAP[$op_addr] + 44;
      HEAP[$10] = 0;
      
      
      
      var $14 = HEAP[HEAP[$_py_tmp]] - 1;
      
      var $16 = HEAP[$_py_tmp];
      HEAP[$16] = $14;
      
      
      
      
      if (HEAP[HEAP[$_py_tmp]] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      
      
      
      var $25 = HEAP[HEAP[HEAP[$_py_tmp] + 4] + 24];
      var $26 = HEAP[$_py_tmp];
      FUNCTION_TABLE[$25]($26);
      __label__ = 3;
      break;
     case 3:
      HEAP[$0] = 0;
      var $27 = HEAP[$0];
      HEAP[$retval] = $27;
      __label__ = 4;
      break;
     case 4:
      var $retval3 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval3;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _pyexpat_ParserCreate($notused, $args, $kw) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 40;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $args_addr = __stackBase__ + 4;
      var $kw_addr = __stackBase__ + 8;
      var $retval = __stackBase__ + 12;
      var $0 = __stackBase__ + 16;
      var $encoding = __stackBase__ + 20;
      var $namespace_separator = __stackBase__ + 24;
      var $intern = __stackBase__ + 28;
      var $result = __stackBase__ + 32;
      var $intern_decref = __stackBase__ + 36;
      
      HEAP[__stackBase__] = $notused;
      HEAP[$args_addr] = $args;
      HEAP[$kw_addr] = $kw;
      HEAP[$encoding] = 0;
      HEAP[$namespace_separator] = 0;
      HEAP[$intern] = 0;
      HEAP[$intern_decref] = 0;
      var $1 = HEAP[$args_addr];
      var $2 = HEAP[$kw_addr];
      var $3 = _PyArg_ParseTupleAndKeywords($1, $2, __str85, _kwlist_11478, allocate([ $encoding, 0, 0, 0, $namespace_separator, 0, 0, 0, $intern, 0, 0, 0 ], [ "i8**", 0, 0, 0, "i8**", 0, 0, 0, "%struct.PyObject**", 0, 0, 0 ], ALLOC_STACK));
      
      if ($3 == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = 0;
      __label__ = 17;
      break;
     case 2:
      
      
      if (HEAP[$namespace_separator] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 3:
      var $7 = HEAP[$namespace_separator];
      var $8 = _strlen($7);
      
      if ($8 > 1) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      var $10 = HEAP[_PyExc_ValueError];
      _PyErr_SetString($10, __str88);
      HEAP[$0] = 0;
      __label__ = 17;
      break;
     case 5:
      
      
      if (HEAP[$intern] == __Py_NoneStruct) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      HEAP[$intern] = 0;
      __label__ = 13;
      break;
     case 7:
      
      
      if (HEAP[$intern] == 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 8:
      var $15 = _PyDict_New();
      HEAP[$intern] = $15;
      
      
      if (HEAP[$intern] == 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      HEAP[$0] = 0;
      __label__ = 17;
      break;
     case 10:
      HEAP[$intern_decref] = 1;
      __label__ = 13;
      break;
     case 11:
      
      
      
      
      
      
      
      if ((HEAP[HEAP[HEAP[$intern] + 4] + 84] & 536870912) == 0) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      var $25 = HEAP[_PyExc_TypeError];
      _PyErr_SetString($25, __str89);
      HEAP[$0] = 0;
      __label__ = 17;
      break;
     case 13:
      var $26 = HEAP[$intern];
      var $27 = HEAP[$namespace_separator];
      var $28 = HEAP[$encoding];
      var $29 = _newxmlparseobject($28, $27, $26);
      HEAP[$result] = $29;
      
      
      if (HEAP[$intern_decref] != 0) {
        __label__ = 14;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 14:
      var $32 = HEAP[$intern];
      
      
      var $35 = HEAP[$32] - 1;
      var $36 = $32;
      HEAP[$36] = $35;
      
      
      
      if (HEAP[$32] == 0) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      
      
      
      
      var $44 = HEAP[HEAP[HEAP[$intern] + 4] + 24];
      var $45 = HEAP[$intern];
      FUNCTION_TABLE[$44]($45);
      __label__ = 16;
      break;
     case 16:
      var $46 = HEAP[$result];
      HEAP[$0] = $46;
      __label__ = 17;
      break;
     case 17:
      var $47 = HEAP[$0];
      HEAP[$retval] = $47;
      __label__ = 18;
      break;
     case 18:
      var $retval17 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval17;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _pyexpat_ErrorString($self, $args) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 20;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $args_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      var $code = __stackBase__ + 16;
      
      HEAP[__stackBase__] = $self;
      HEAP[$args_addr] = $args;
      HEAP[$code] = 0;
      var $1 = HEAP[$args_addr];
      var $2 = _PyArg_ParseTuple($1, __str90, allocate([ $code, 0, 0, 0 ], [ "i32*", 0, 0, 0 ], ALLOC_STACK));
      
      if ($2 == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = 0;
      __label__ = 3;
      break;
     case 2:
      var $4 = HEAP[$code];
      var $5 = _PyExpat_XML_ErrorString($4);
      var $6 = _Py_BuildValue(__str51, allocate([ $5, 0, 0, 0 ], [ "i8*", 0, 0, 0 ], ALLOC_STACK));
      HEAP[$0] = $6;
      __label__ = 3;
      break;
     case 3:
      var $7 = HEAP[$0];
      HEAP[$retval] = $7;
      __label__ = 4;
      break;
     case 4:
      var $retval3 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval3;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _initpyexpat() {
    var __stackBase__ = STACKTOP;
    STACKTOP += 68;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 68);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $m = __stackBase__;
      var $d = __stackBase__ + 4;
      var $errmod_name = __stackBase__ + 8;
      var $errors_module = __stackBase__ + 12;
      var $modelmod_name = __stackBase__ + 16;
      var $model_module = __stackBase__ + 20;
      var $sys_modules = __stackBase__ + 24;
      var $version = __stackBase__ + 28;
      var $capi_object = __stackBase__ + 32;
      var $info = __stackBase__ + 36;
      var $features = __stackBase__ + 48;
      var $list = __stackBase__ + 52;
      var $i = __stackBase__ + 56;
      var $ok = __stackBase__ + 60;
      var $item = __stackBase__ + 64;
      
      var $0 = _PyString_FromString(__str93);
      HEAP[$errmod_name] = $0;
      
      
      if (HEAP[$errmod_name] == 0) {
        __label__ = 36;
        break;
      } else {
        __label__ = 1;
        break;
      }
     case 1:
      var $3 = _PyString_FromString(__str94);
      HEAP[$modelmod_name] = $3;
      
      
      if (HEAP[$modelmod_name] == 0) {
        __label__ = 36;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      
      HEAP[_Xmlparsetype + 4] = _PyType_Type;
      var $7 = _Py_InitModule4(__str95, _pyexpat_methods, _pyexpat_module_documentation, 0, 1013);
      HEAP[$m] = $7;
      
      
      if (HEAP[$m] == 0) {
        __label__ = 36;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 3:
      
      
      if (HEAP[_ErrorObject] == 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      var $12 = _PyErr_NewException(__str96, 0, 0);
      HEAP[_ErrorObject] = $12;
      
      
      if (HEAP[_ErrorObject] == 0) {
        __label__ = 36;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 5:
      
      
      
      var $18 = HEAP[HEAP[_ErrorObject]] + 1;
      var $19 = HEAP[_ErrorObject];
      HEAP[$19] = $18;
      var $20 = HEAP[_ErrorObject];
      var $21 = HEAP[$m];
      var $22 = _PyModule_AddObject($21, __str97, $20);
      
      
      
      var $26 = HEAP[HEAP[_ErrorObject]] + 1;
      var $27 = HEAP[_ErrorObject];
      HEAP[$27] = $26;
      var $28 = HEAP[_ErrorObject];
      var $29 = HEAP[$m];
      var $30 = _PyModule_AddObject($29, __str98, $28);
      
      
      var $33 = HEAP[_Xmlparsetype] + 1;
      
      HEAP[_Xmlparsetype] = $33;
      var $35 = HEAP[$m];
      var $36 = _PyModule_AddObject($35, __str99, _Xmlparsetype);
      var $37 = _PyString_FromString(__str100);
      HEAP[$version] = $37;
      
      
      if (HEAP[$version] == 0) {
        __label__ = 36;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 6:
      var $40 = HEAP[$m];
      var $41 = HEAP[$version];
      var $42 = _PyModule_AddObject($40, __str101, $41);
      var $43 = _PyExpat_XML_ExpatVersion();
      var $44 = HEAP[$m];
      var $45 = _PyModule_AddStringConstant($44, __str102, $43);
      _PyExpat_XML_ExpatVersionInfo($info);
      
      var $47 = HEAP[$info + 8];
      
      var $49 = HEAP[$info + 4];
      
      var $51 = HEAP[$info];
      var $52 = _Py_BuildValue(__str103, allocate([ $51, 0, 0, 0, $49, 0, 0, 0, $47, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STACK));
      var $53 = HEAP[$m];
      var $54 = _PyModule_AddObject($53, __str104, $52);
      _init_template_buffer();
      var $55 = HEAP[$m];
      var $56 = _PyModule_AddStringConstant($55, __str105, __str106);
      var $57 = _PySys_GetObject(__str107);
      HEAP[$sys_modules] = $57;
      var $58 = HEAP[$m];
      var $59 = _PyModule_GetDict($58);
      HEAP[$d] = $59;
      var $60 = HEAP[$d];
      var $61 = HEAP[$errmod_name];
      var $62 = _PyDict_GetItem($60, $61);
      HEAP[$errors_module] = $62;
      
      
      if (HEAP[$errors_module] == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 7:
      var $65 = _PyModule_New(__str93);
      HEAP[$errors_module] = $65;
      
      
      if (HEAP[$errors_module] != 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      var $68 = HEAP[$sys_modules];
      var $69 = HEAP[$errmod_name];
      var $70 = HEAP[$errors_module];
      var $71 = _PyDict_SetItem($68, $69, $70);
      var $72 = HEAP[$m];
      var $73 = HEAP[$errors_module];
      var $74 = _PyModule_AddObject($72, __str108, $73);
      __label__ = 9;
      break;
     case 9:
      
      
      
      var $78 = HEAP[HEAP[$errmod_name]] - 1;
      
      var $80 = HEAP[$errmod_name];
      HEAP[$80] = $78;
      
      
      
      
      if (HEAP[HEAP[$errmod_name]] == 0) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      
      
      
      
      var $89 = HEAP[HEAP[HEAP[$errmod_name] + 4] + 24];
      var $90 = HEAP[$errmod_name];
      FUNCTION_TABLE[$89]($90);
      __label__ = 11;
      break;
     case 11:
      var $91 = HEAP[$d];
      var $92 = HEAP[$modelmod_name];
      var $93 = _PyDict_GetItem($91, $92);
      HEAP[$model_module] = $93;
      
      
      if (HEAP[$model_module] == 0) {
        __label__ = 12;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 12:
      var $96 = _PyModule_New(__str94);
      HEAP[$model_module] = $96;
      
      
      if (HEAP[$model_module] != 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      var $99 = HEAP[$sys_modules];
      var $100 = HEAP[$modelmod_name];
      var $101 = HEAP[$model_module];
      var $102 = _PyDict_SetItem($99, $100, $101);
      var $103 = HEAP[$m];
      var $104 = HEAP[$model_module];
      var $105 = _PyModule_AddObject($103, __str109, $104);
      __label__ = 14;
      break;
     case 14:
      
      
      
      var $109 = HEAP[HEAP[$modelmod_name]] - 1;
      
      var $111 = HEAP[$modelmod_name];
      HEAP[$111] = $109;
      
      
      
      
      if (HEAP[HEAP[$modelmod_name]] == 0) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      
      
      
      
      var $120 = HEAP[HEAP[HEAP[$modelmod_name] + 4] + 24];
      var $121 = HEAP[$modelmod_name];
      FUNCTION_TABLE[$120]($121);
      __label__ = 16;
      break;
     case 16:
      
      
      if (HEAP[$errors_module] == 0) {
        __label__ = 18;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 17:
      
      
      if (HEAP[$model_module] == 0) {
        __label__ = 18;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 18:
      __label__ = 36;
      break;
     case 19:
      var $126 = _PyExpat_XML_GetFeatureList();
      HEAP[$features] = $126;
      var $127 = _PyList_New(0);
      HEAP[$list] = $127;
      
      
      if (HEAP[$list] == 0) {
        __label__ = 20;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 20:
      _PyErr_Clear();
      __label__ = 34;
      break;
     case 21:
      HEAP[$i] = 0;
      __label__ = 31;
      break;
     case 22:
      
      
      
      
      var $134 = HEAP[HEAP[$features] + 12 * HEAP[$i] + 8];
      
      
      
      
      var $139 = HEAP[HEAP[$features] + 12 * HEAP[$i] + 4];
      var $140 = _Py_BuildValue(__str110, allocate([ $139, 0, 0, 0, $134, 0, 0, 0 ], [ "i8*", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STACK));
      HEAP[$item] = $140;
      
      
      if (HEAP[$item] == 0) {
        __label__ = 23;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 23:
      
      
      
      var $146 = HEAP[HEAP[$list]] - 1;
      
      var $148 = HEAP[$list];
      HEAP[$148] = $146;
      
      
      
      
      if (HEAP[HEAP[$list]] == 0) {
        __label__ = 24;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 24:
      
      
      
      
      var $157 = HEAP[HEAP[HEAP[$list] + 4] + 24];
      var $158 = HEAP[$list];
      FUNCTION_TABLE[$157]($158);
      __label__ = 25;
      break;
     case 25:
      HEAP[$list] = 0;
      __label__ = 32;
      break;
     case 26:
      var $159 = HEAP[$list];
      var $160 = HEAP[$item];
      var $161 = _PyList_Append($159, $160);
      HEAP[$ok] = $161;
      
      
      
      var $165 = HEAP[HEAP[$item]] - 1;
      
      var $167 = HEAP[$item];
      HEAP[$167] = $165;
      
      
      
      
      if (HEAP[HEAP[$item]] == 0) {
        __label__ = 27;
        break;
      } else {
        __label__ = 28;
        break;
      }
     case 27:
      
      
      
      
      var $176 = HEAP[HEAP[HEAP[$item] + 4] + 24];
      var $177 = HEAP[$item];
      FUNCTION_TABLE[$176]($177);
      __label__ = 28;
      break;
     case 28:
      
      
      if (HEAP[$ok] < 0) {
        __label__ = 29;
        break;
      } else {
        __label__ = 30;
        break;
      }
     case 29:
      _PyErr_Clear();
      __label__ = 32;
      break;
     case 30:
      
      var $181 = HEAP[$i] + 1;
      HEAP[$i] = $181;
      __label__ = 31;
      break;
     case 31:
      
      
      
      
      
      
      if (HEAP[HEAP[$features] + 12 * HEAP[$i]] != 0) {
        __label__ = 22;
        break;
      } else {
        __label__ = 32;
        break;
      }
     case 32:
      
      
      if (HEAP[$list] != 0) {
        __label__ = 33;
        break;
      } else {
        __label__ = 34;
        break;
      }
     case 33:
      var $190 = HEAP[$m];
      var $191 = HEAP[$list];
      var $192 = _PyModule_AddObject($190, __str111, $191);
      __label__ = 34;
      break;
     case 34:
      var $193 = _PyExpat_XML_ErrorString(1);
      var $194 = HEAP[$errors_module];
      var $195 = _PyModule_AddStringConstant($194, __str112, $193);
      var $196 = _PyExpat_XML_ErrorString(2);
      var $197 = HEAP[$errors_module];
      var $198 = _PyModule_AddStringConstant($197, __str113, $196);
      var $199 = _PyExpat_XML_ErrorString(3);
      var $200 = HEAP[$errors_module];
      var $201 = _PyModule_AddStringConstant($200, __str114, $199);
      var $202 = _PyExpat_XML_ErrorString(4);
      var $203 = HEAP[$errors_module];
      var $204 = _PyModule_AddStringConstant($203, __str115, $202);
      var $205 = _PyExpat_XML_ErrorString(5);
      var $206 = HEAP[$errors_module];
      var $207 = _PyModule_AddStringConstant($206, __str116, $205);
      var $208 = _PyExpat_XML_ErrorString(6);
      var $209 = HEAP[$errors_module];
      var $210 = _PyModule_AddStringConstant($209, __str117, $208);
      var $211 = _PyExpat_XML_ErrorString(7);
      var $212 = HEAP[$errors_module];
      var $213 = _PyModule_AddStringConstant($212, __str118, $211);
      var $214 = _PyExpat_XML_ErrorString(8);
      var $215 = HEAP[$errors_module];
      var $216 = _PyModule_AddStringConstant($215, __str119, $214);
      var $217 = _PyExpat_XML_ErrorString(9);
      var $218 = HEAP[$errors_module];
      var $219 = _PyModule_AddStringConstant($218, __str120, $217);
      var $220 = _PyExpat_XML_ErrorString(10);
      var $221 = HEAP[$errors_module];
      var $222 = _PyModule_AddStringConstant($221, __str121, $220);
      var $223 = _PyExpat_XML_ErrorString(11);
      var $224 = HEAP[$errors_module];
      var $225 = _PyModule_AddStringConstant($224, __str122, $223);
      var $226 = _PyExpat_XML_ErrorString(12);
      var $227 = HEAP[$errors_module];
      var $228 = _PyModule_AddStringConstant($227, __str123, $226);
      var $229 = _PyExpat_XML_ErrorString(13);
      var $230 = HEAP[$errors_module];
      var $231 = _PyModule_AddStringConstant($230, __str124, $229);
      var $232 = _PyExpat_XML_ErrorString(14);
      var $233 = HEAP[$errors_module];
      var $234 = _PyModule_AddStringConstant($233, __str125, $232);
      var $235 = _PyExpat_XML_ErrorString(15);
      var $236 = HEAP[$errors_module];
      var $237 = _PyModule_AddStringConstant($236, __str126, $235);
      var $238 = _PyExpat_XML_ErrorString(16);
      var $239 = HEAP[$errors_module];
      var $240 = _PyModule_AddStringConstant($239, __str127, $238);
      var $241 = _PyExpat_XML_ErrorString(17);
      var $242 = HEAP[$errors_module];
      var $243 = _PyModule_AddStringConstant($242, __str128, $241);
      var $244 = _PyExpat_XML_ErrorString(18);
      var $245 = HEAP[$errors_module];
      var $246 = _PyModule_AddStringConstant($245, __str129, $244);
      var $247 = _PyExpat_XML_ErrorString(19);
      var $248 = HEAP[$errors_module];
      var $249 = _PyModule_AddStringConstant($248, __str130, $247);
      var $250 = _PyExpat_XML_ErrorString(20);
      var $251 = HEAP[$errors_module];
      var $252 = _PyModule_AddStringConstant($251, __str131, $250);
      var $253 = _PyExpat_XML_ErrorString(21);
      var $254 = HEAP[$errors_module];
      var $255 = _PyModule_AddStringConstant($254, __str132, $253);
      var $256 = _PyExpat_XML_ErrorString(22);
      var $257 = HEAP[$errors_module];
      var $258 = _PyModule_AddStringConstant($257, __str133, $256);
      var $259 = _PyExpat_XML_ErrorString(23);
      var $260 = HEAP[$errors_module];
      var $261 = _PyModule_AddStringConstant($260, __str134, $259);
      var $262 = _PyExpat_XML_ErrorString(24);
      var $263 = HEAP[$errors_module];
      var $264 = _PyModule_AddStringConstant($263, __str135, $262);
      var $265 = _PyExpat_XML_ErrorString(25);
      var $266 = HEAP[$errors_module];
      var $267 = _PyModule_AddStringConstant($266, __str136, $265);
      var $268 = _PyExpat_XML_ErrorString(26);
      var $269 = HEAP[$errors_module];
      var $270 = _PyModule_AddStringConstant($269, __str137, $268);
      var $271 = _PyExpat_XML_ErrorString(27);
      var $272 = HEAP[$errors_module];
      var $273 = _PyModule_AddStringConstant($272, __str138, $271);
      var $274 = _PyExpat_XML_ErrorString(28);
      var $275 = HEAP[$errors_module];
      var $276 = _PyModule_AddStringConstant($275, __str139, $274);
      var $277 = _PyExpat_XML_ErrorString(29);
      var $278 = HEAP[$errors_module];
      var $279 = _PyModule_AddStringConstant($278, __str140, $277);
      var $280 = _PyExpat_XML_ErrorString(30);
      var $281 = HEAP[$errors_module];
      var $282 = _PyModule_AddStringConstant($281, __str141, $280);
      var $283 = _PyExpat_XML_ErrorString(31);
      var $284 = HEAP[$errors_module];
      var $285 = _PyModule_AddStringConstant($284, __str142, $283);
      var $286 = _PyExpat_XML_ErrorString(32);
      var $287 = HEAP[$errors_module];
      var $288 = _PyModule_AddStringConstant($287, __str143, $286);
      var $289 = _PyExpat_XML_ErrorString(33);
      var $290 = HEAP[$errors_module];
      var $291 = _PyModule_AddStringConstant($290, __str144, $289);
      var $292 = _PyExpat_XML_ErrorString(34);
      var $293 = HEAP[$errors_module];
      var $294 = _PyModule_AddStringConstant($293, __str145, $292);
      var $295 = _PyExpat_XML_ErrorString(35);
      var $296 = HEAP[$errors_module];
      var $297 = _PyModule_AddStringConstant($296, __str146, $295);
      var $298 = _PyExpat_XML_ErrorString(36);
      var $299 = HEAP[$errors_module];
      var $300 = _PyModule_AddStringConstant($299, __str147, $298);
      var $301 = _PyExpat_XML_ErrorString(37);
      var $302 = HEAP[$errors_module];
      var $303 = _PyModule_AddStringConstant($302, __str148, $301);
      var $304 = HEAP[$errors_module];
      var $305 = _PyModule_AddStringConstant($304, __str149, __str150);
      var $306 = HEAP[$m];
      var $307 = _PyModule_AddIntConstant($306, __str151, 0);
      var $308 = HEAP[$m];
      var $309 = _PyModule_AddIntConstant($308, __str152, 1);
      var $310 = HEAP[$m];
      var $311 = _PyModule_AddIntConstant($310, __str153, 2);
      var $312 = HEAP[$model_module];
      var $313 = _PyModule_AddStringConstant($312, __str149, __str154);
      var $314 = HEAP[$model_module];
      var $315 = _PyModule_AddIntConstant($314, __str155, 1);
      var $316 = HEAP[$model_module];
      var $317 = _PyModule_AddIntConstant($316, __str156, 2);
      var $318 = HEAP[$model_module];
      var $319 = _PyModule_AddIntConstant($318, __str157, 3);
      var $320 = HEAP[$model_module];
      var $321 = _PyModule_AddIntConstant($320, __str158, 4);
      var $322 = HEAP[$model_module];
      var $323 = _PyModule_AddIntConstant($322, __str159, 5);
      var $324 = HEAP[$model_module];
      var $325 = _PyModule_AddIntConstant($324, __str160, 6);
      var $326 = HEAP[$model_module];
      var $327 = _PyModule_AddIntConstant($326, __str161, 0);
      var $328 = HEAP[$model_module];
      var $329 = _PyModule_AddIntConstant($328, __str162, 1);
      var $330 = HEAP[$model_module];
      var $331 = _PyModule_AddIntConstant($330, __str163, 2);
      var $332 = HEAP[$model_module];
      var $333 = _PyModule_AddIntConstant($332, __str164, 3);
      HEAP[_capi_11557 + 4] = 80;
      HEAP[_capi_11557] = __str165;
      HEAP[_capi_11557 + 8] = 2;
      HEAP[_capi_11557 + 12] = 0;
      HEAP[_capi_11557 + 16] = 0;
      HEAP[_capi_11557 + 20] = FUNCTION_TABLE_OFFSET + 12;
      HEAP[_capi_11557 + 24] = FUNCTION_TABLE_OFFSET + 14;
      HEAP[_capi_11557 + 28] = FUNCTION_TABLE_OFFSET + 16;
      HEAP[_capi_11557 + 32] = FUNCTION_TABLE_OFFSET + 18;
      HEAP[_capi_11557 + 36] = FUNCTION_TABLE_OFFSET + 20;
      HEAP[_capi_11557 + 40] = FUNCTION_TABLE_OFFSET + 22;
      HEAP[_capi_11557 + 44] = FUNCTION_TABLE_OFFSET + 24;
      HEAP[_capi_11557 + 48] = FUNCTION_TABLE_OFFSET + 26;
      HEAP[_capi_11557 + 52] = FUNCTION_TABLE_OFFSET + 28;
      HEAP[_capi_11557 + 56] = FUNCTION_TABLE_OFFSET + 30;
      HEAP[_capi_11557 + 60] = FUNCTION_TABLE_OFFSET + 32;
      HEAP[_capi_11557 + 64] = FUNCTION_TABLE_OFFSET + 34;
      HEAP[_capi_11557 + 68] = FUNCTION_TABLE_OFFSET + 36;
      HEAP[_capi_11557 + 72] = FUNCTION_TABLE_OFFSET + 38;
      HEAP[_capi_11557 + 76] = FUNCTION_TABLE_OFFSET + 40;
      var $334 = _PyCapsule_New(_capi_11557, __str166, 0);
      HEAP[$capi_object] = $334;
      
      
      if (HEAP[$capi_object] != 0) {
        __label__ = 35;
        break;
      } else {
        __label__ = 36;
        break;
      }
     case 35:
      var $337 = HEAP[$m];
      var $338 = HEAP[$capi_object];
      var $339 = _PyModule_AddObject($337, __str167, $338);
      __label__ = 36;
      break;
     case 36:
      __label__ = 37;
      break;
     case 37:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  Module["_initpyexpat"] = _initpyexpat;
  function _clear_handlers($self, $initial) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $self_addr = __stackBase__;
      var $initial_addr = __stackBase__ + 4;
      var $i = __stackBase__ + 8;
      var $temp = __stackBase__ + 12;
      
      HEAP[$self_addr] = $self;
      HEAP[$initial_addr] = $initial;
      HEAP[$i] = 0;
      __label__ = 8;
      break;
     case 1:
      
      
      if (HEAP[$initial_addr] != 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      
      
      
      var $6 = HEAP[HEAP[$self_addr] + 48] + 4 * HEAP[$i];
      HEAP[$6] = 0;
      __label__ = 7;
      break;
     case 3:
      
      
      
      
      
      var $12 = HEAP[HEAP[HEAP[$self_addr] + 48] + 4 * HEAP[$i]];
      HEAP[$temp] = $12;
      
      
      
      
      var $17 = HEAP[HEAP[$self_addr] + 48] + 4 * HEAP[$i];
      HEAP[$17] = 0;
      
      
      if (HEAP[$temp] != 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 4:
      
      
      
      var $23 = HEAP[HEAP[$temp]] - 1;
      
      var $25 = HEAP[$temp];
      HEAP[$25] = $23;
      
      
      
      
      if (HEAP[HEAP[$temp]] == 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      
      
      
      
      var $34 = HEAP[HEAP[HEAP[$temp] + 4] + 24];
      var $35 = HEAP[$temp];
      FUNCTION_TABLE[$34]($35);
      __label__ = 6;
      break;
     case 6:
      
      
      
      var $39 = HEAP[_handler_info + HEAP[$i] * 20 + 4];
      
      
      var $42 = HEAP[HEAP[$self_addr] + 8];
      FUNCTION_TABLE[$39]($42, 0);
      __label__ = 7;
      break;
     case 7:
      
      var $44 = HEAP[$i] + 1;
      HEAP[$i] = $44;
      __label__ = 8;
      break;
     case 8:
      
      
      
      
      
      if (HEAP[_handler_info + HEAP[$i] * 20] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 9:
      __label__ = 10;
      break;
     case 10:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_ParserCreate($encodingName) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 12;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $retval = __stackBase__ + 4;
      var $0 = __stackBase__ + 8;
      
      HEAP[__stackBase__] = $encodingName;
      var $1 = HEAP[__stackBase__];
      var $2 = _PyExpat_XML_ParserCreate_MM($1, 0, 0);
      HEAP[$0] = $2;
      var $3 = HEAP[$0];
      HEAP[$retval] = $3;
      __label__ = 1;
      break;
     case 1:
      var $retval1 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval1;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_ParserCreateNS($encodingName, $nsSep) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 15;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 15);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $encodingName_addr = __stackBase__;
      var $nsSep_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 5;
      var $0 = __stackBase__ + 9;
      var $tmp = __stackBase__ + 13;
      
      HEAP[$encodingName_addr] = $encodingName;
      HEAP[$nsSep_addr] = $nsSep;
      
      var $2 = HEAP[$nsSep_addr];
      HEAP[$tmp] = $2;
      var $3 = HEAP[$encodingName_addr];
      var $tmp1 = $tmp;
      var $4 = _PyExpat_XML_ParserCreate_MM($3, 0, $tmp1);
      HEAP[$0] = $4;
      var $5 = HEAP[$0];
      HEAP[$retval] = $5;
      __label__ = 1;
      break;
     case 1:
      var $retval2 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval2;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_ParserCreate_MM($encodingName, $memsuite, $nameSep) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 24;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $encodingName_addr = __stackBase__;
      var $memsuite_addr = __stackBase__ + 4;
      var $nameSep_addr = __stackBase__ + 8;
      var $retval = __stackBase__ + 12;
      var $0 = __stackBase__ + 16;
      var $parser = __stackBase__ + 20;
      
      HEAP[$encodingName_addr] = $encodingName;
      HEAP[$memsuite_addr] = $memsuite;
      HEAP[$nameSep_addr] = $nameSep;
      var $1 = HEAP[$encodingName_addr];
      var $2 = HEAP[$memsuite_addr];
      var $3 = HEAP[$nameSep_addr];
      var $4 = _parserCreate($1, $2, $3, 0);
      HEAP[$parser] = $4;
      
      
      if (HEAP[$parser] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 1:
      
      
      
      
      if (HEAP[HEAP[$parser] + 236] != 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 2:
      var $11 = HEAP[$parser];
      var $12 = _setContext($11, _implicitContext);
      
      if ($12 == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      var $14 = HEAP[$parser];
      _PyExpat_XML_ParserFree($14);
      HEAP[$0] = 0;
      __label__ = 5;
      break;
     case 4:
      var $15 = HEAP[$parser];
      HEAP[$0] = $15;
      __label__ = 5;
      break;
     case 5:
      var $16 = HEAP[$0];
      HEAP[$retval] = $16;
      __label__ = 6;
      break;
     case 6:
      var $retval5 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval5;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _parserCreate($encodingName, $memsuite, $nameSep, $dtd) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 36;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $encodingName_addr = __stackBase__;
      var $memsuite_addr = __stackBase__ + 4;
      var $nameSep_addr = __stackBase__ + 8;
      var $dtd_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $parser = __stackBase__ + 24;
      var $mtemp = __stackBase__ + 28;
      var $mtemp4 = __stackBase__ + 32;
      
      HEAP[$encodingName_addr] = $encodingName;
      HEAP[$memsuite_addr] = $memsuite;
      HEAP[$nameSep_addr] = $nameSep;
      HEAP[$dtd_addr] = $dtd;
      
      
      if (HEAP[$memsuite_addr] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 1:
      
      
      var $5 = HEAP[HEAP[$memsuite_addr]];
      var $6 = FUNCTION_TABLE[$5](496);
      var $7 = $6;
      HEAP[$parser] = $7;
      
      
      if (HEAP[$parser] != 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      var $11 = HEAP[$parser] + 12;
      HEAP[$mtemp] = $11;
      
      
      var $14 = HEAP[HEAP[$memsuite_addr]];
      
      var $16 = HEAP[$mtemp];
      HEAP[$16] = $14;
      
      
      var $19 = HEAP[HEAP[$memsuite_addr] + 4];
      
      var $21 = HEAP[$mtemp] + 4;
      HEAP[$21] = $19;
      
      
      var $24 = HEAP[HEAP[$memsuite_addr] + 8];
      
      var $26 = HEAP[$mtemp] + 8;
      HEAP[$26] = $24;
      __label__ = 3;
      break;
     case 3:
      __label__ = 6;
      break;
     case 4:
      var $27 = _malloc(496);
      
      HEAP[$parser] = $27;
      
      
      if (HEAP[$parser] != 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      
      var $32 = HEAP[$parser] + 12;
      HEAP[$mtemp4] = $32;
      
      var $34 = HEAP[$mtemp4];
      HEAP[$34] = FUNCTION_TABLE_OFFSET + 42;
      
      var $36 = HEAP[$mtemp4] + 4;
      HEAP[$36] = FUNCTION_TABLE_OFFSET + 44;
      
      var $38 = HEAP[$mtemp4] + 8;
      HEAP[$38] = FUNCTION_TABLE_OFFSET + 46;
      __label__ = 6;
      break;
     case 6:
      
      
      if (HEAP[$parser] == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      var $41 = HEAP[$parser];
      HEAP[$0] = $41;
      __label__ = 23;
      break;
     case 8:
      
      var $43 = HEAP[$parser] + 8;
      HEAP[$43] = 0;
      
      var $45 = HEAP[$parser] + 32;
      HEAP[$45] = 0;
      
      var $47 = HEAP[$parser] + 380;
      HEAP[$47] = 16;
      
      
      
      var $51 = HEAP[HEAP[$parser] + 12];
      
      
      
      var $55 = HEAP[HEAP[$parser] + 380] * 16;
      var $56 = FUNCTION_TABLE[$51]($55);
      var $57 = $56;
      
      var $59 = HEAP[$parser] + 392;
      HEAP[$59] = $57;
      
      
      
      
      if (HEAP[HEAP[$parser] + 392] == 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      
      
      
      var $67 = HEAP[HEAP[$parser] + 12 + 8];
      
      var $69 = HEAP[$parser];
      FUNCTION_TABLE[$67]($69);
      HEAP[$0] = 0;
      __label__ = 23;
      break;
     case 10:
      
      
      
      var $73 = HEAP[HEAP[$parser] + 12];
      var $74 = FUNCTION_TABLE[$73](1024);
      
      var $76 = HEAP[$parser] + 44;
      HEAP[$76] = $74;
      
      
      
      
      if (HEAP[HEAP[$parser] + 44] == 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      
      
      
      var $84 = HEAP[HEAP[$parser] + 12 + 8];
      
      
      
      var $88 = HEAP[HEAP[$parser] + 392];
      FUNCTION_TABLE[$84]($88);
      
      
      
      var $92 = HEAP[HEAP[$parser] + 12 + 8];
      
      var $94 = HEAP[$parser];
      FUNCTION_TABLE[$92]($94);
      HEAP[$0] = 0;
      __label__ = 23;
      break;
     case 12:
      
      
      
      var $98 = HEAP[HEAP[$parser] + 44] + 1024;
      
      var $100 = HEAP[$parser] + 48;
      HEAP[$100] = $98;
      
      
      if (HEAP[$dtd_addr] != 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      
      var $104 = HEAP[$parser] + 356;
      var $105 = HEAP[$dtd_addr];
      HEAP[$104] = $105;
      __label__ = 16;
      break;
     case 14:
      
      var $107 = HEAP[$parser] + 12;
      var $108 = _dtdCreate($107);
      
      var $110 = HEAP[$parser] + 356;
      HEAP[$110] = $108;
      
      
      
      
      if (HEAP[HEAP[$parser] + 356] == 0) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      
      
      
      var $118 = HEAP[HEAP[$parser] + 12 + 8];
      
      
      var $121 = HEAP[HEAP[$parser] + 44];
      FUNCTION_TABLE[$118]($121);
      
      
      
      var $125 = HEAP[HEAP[$parser] + 12 + 8];
      
      
      
      var $129 = HEAP[HEAP[$parser] + 392];
      FUNCTION_TABLE[$125]($129);
      
      
      
      var $133 = HEAP[HEAP[$parser] + 12 + 8];
      
      var $135 = HEAP[$parser];
      FUNCTION_TABLE[$133]($135);
      HEAP[$0] = 0;
      __label__ = 23;
      break;
     case 16:
      
      var $137 = HEAP[$parser] + 376;
      HEAP[$137] = 0;
      
      var $139 = HEAP[$parser] + 368;
      HEAP[$139] = 0;
      
      var $141 = HEAP[$parser] + 304;
      HEAP[$141] = 0;
      
      var $143 = HEAP[$parser] + 468;
      HEAP[$143] = 0;
      
      var $145 = HEAP[$parser] + 464;
      HEAP[$145] = 0;
      
      var $147 = HEAP[$parser] + 124;
      HEAP[$147] = 0;
      
      var $149 = HEAP[$parser] + 248;
      HEAP[$149] = 0;
      
      var $151 = HEAP[$parser] + 472;
      HEAP[$151] = 33;
      
      var $153 = HEAP[$parser] + 236;
      HEAP[$153] = 0;
      
      var $155 = HEAP[$parser] + 237;
      HEAP[$155] = 0;
      
      var $157 = HEAP[$parser] + 396;
      HEAP[$157] = 0;
      
      var $159 = HEAP[$parser] + 400;
      HEAP[$159] = 0;
      
      var $161 = HEAP[$parser] + 404;
      HEAP[$161] = 0;
      
      var $163 = HEAP[$parser] + 12;
      
      var $165 = HEAP[$parser] + 416;
      _poolInit($165, $163);
      
      var $167 = HEAP[$parser] + 12;
      
      var $169 = HEAP[$parser] + 440;
      _poolInit($169, $167);
      var $170 = HEAP[$parser];
      var $171 = HEAP[$encodingName_addr];
      _parserInit($170, $171);
      
      
      if (HEAP[$encodingName_addr] != 0) {
        __label__ = 17;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 17:
      
      
      
      
      if (HEAP[HEAP[$parser] + 232] == 0) {
        __label__ = 18;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 18:
      var $178 = HEAP[$parser];
      _PyExpat_XML_ParserFree($178);
      HEAP[$0] = 0;
      __label__ = 23;
      break;
     case 19:
      
      
      if (HEAP[$nameSep_addr] != 0) {
        __label__ = 20;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 20:
      
      var $182 = HEAP[$parser] + 236;
      HEAP[$182] = 1;
      var $183 = _PyExpat_XmlGetUtf8InternalEncodingNS();
      
      var $185 = HEAP[$parser] + 228;
      HEAP[$185] = $183;
      
      var $187 = HEAP[HEAP[$nameSep_addr]];
      
      var $189 = HEAP[$parser] + 472;
      HEAP[$189] = $187;
      __label__ = 22;
      break;
     case 21:
      var $190 = _PyExpat_XmlGetUtf8InternalEncoding();
      
      var $192 = HEAP[$parser] + 228;
      HEAP[$192] = $190;
      __label__ = 22;
      break;
     case 22:
      var $193 = HEAP[$parser];
      HEAP[$0] = $193;
      __label__ = 23;
      break;
     case 23:
      var $194 = HEAP[$0];
      HEAP[$retval] = $194;
      __label__ = 24;
      break;
     case 24:
      var $retval24 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval24;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _parserInit($parser, $encodingName) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 12;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $encodingName_addr = __stackBase__ + 4;
      var $iftmp_0 = __stackBase__ + 8;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$encodingName_addr] = $encodingName;
      
      var $1 = HEAP[$parser_addr] + 280;
      HEAP[$1] = FUNCTION_TABLE_OFFSET + 48;
      
      var $3 = HEAP[$parser_addr] + 256;
      _PyExpat_XmlPrologStateInit($3);
      
      
      if (HEAP[$encodingName_addr] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      
      var $7 = HEAP[$parser_addr] + 416;
      var $8 = HEAP[$encodingName_addr];
      var $9 = _poolCopyString($7, $8);
      HEAP[$iftmp_0] = $9;
      __label__ = 3;
      break;
     case 2:
      HEAP[$iftmp_0] = 0;
      __label__ = 3;
      break;
     case 3:
      
      var $11 = HEAP[$parser_addr] + 232;
      var $12 = HEAP[$iftmp_0];
      HEAP[$11] = $12;
      
      var $14 = HEAP[$parser_addr] + 360;
      HEAP[$14] = 0;
      
      var $16 = HEAP[$parser_addr] + 144;
      
      var $18 = HEAP[$parser_addr] + 148;
      var $19 = _PyExpat_XmlInitEncoding($18, $16, 0);
      
      var $21 = HEAP[$parser_addr];
      HEAP[$21] = 0;
      
      var $23 = HEAP[$parser_addr] + 4;
      HEAP[$23] = 0;
      
      var $25 = HEAP[$parser_addr] + 52;
      HEAP[$25] = 0;
      
      var $27 = HEAP[$parser_addr] + 56;
      HEAP[$27] = 0;
      
      var $29 = HEAP[$parser_addr] + 60;
      HEAP[$29] = 0;
      
      var $31 = HEAP[$parser_addr] + 64;
      HEAP[$31] = 0;
      
      var $33 = HEAP[$parser_addr] + 68;
      HEAP[$33] = 0;
      
      var $35 = HEAP[$parser_addr] + 72;
      HEAP[$35] = 0;
      
      var $37 = HEAP[$parser_addr] + 76;
      HEAP[$37] = 0;
      
      var $39 = HEAP[$parser_addr] + 80;
      HEAP[$39] = 0;
      
      var $41 = HEAP[$parser_addr] + 84;
      HEAP[$41] = 0;
      
      var $43 = HEAP[$parser_addr] + 88;
      HEAP[$43] = 0;
      
      var $45 = HEAP[$parser_addr] + 92;
      HEAP[$45] = 0;
      
      var $47 = HEAP[$parser_addr] + 96;
      HEAP[$47] = 0;
      
      var $49 = HEAP[$parser_addr] + 100;
      HEAP[$49] = 0;
      
      var $51 = HEAP[$parser_addr] + 104;
      HEAP[$51] = 0;
      
      var $53 = HEAP[$parser_addr] + 108;
      HEAP[$53] = 0;
      
      var $55 = HEAP[$parser_addr] + 112;
      HEAP[$55] = 0;
      
      var $57 = HEAP[$parser_addr] + 116;
      var $58 = HEAP[$parser_addr];
      HEAP[$57] = $58;
      
      var $60 = HEAP[$parser_addr] + 120;
      HEAP[$60] = 0;
      
      var $62 = HEAP[$parser_addr] + 128;
      HEAP[$62] = 0;
      
      var $64 = HEAP[$parser_addr] + 132;
      HEAP[$64] = 0;
      
      var $66 = HEAP[$parser_addr] + 136;
      HEAP[$66] = 0;
      
      var $68 = HEAP[$parser_addr] + 140;
      HEAP[$68] = 0;
      
      
      var $71 = HEAP[HEAP[$parser_addr] + 8];
      
      var $73 = HEAP[$parser_addr] + 24;
      HEAP[$73] = $71;
      
      
      var $76 = HEAP[HEAP[$parser_addr] + 8];
      
      var $78 = HEAP[$parser_addr] + 28;
      HEAP[$78] = $76;
      
      var $80 = HEAP[$parser_addr] + 36;
      HEAP[$80] = 0;
      
      var $82 = HEAP[$parser_addr] + 40;
      HEAP[$82] = 0;
      
      var $84 = HEAP[$parser_addr] + 344;
      HEAP[$84] = 0;
      
      var $86 = HEAP[$parser_addr] + 348;
      HEAP[$86] = 0;
      
      var $88 = HEAP[$parser_addr] + 316;
      HEAP[$88] = 0;
      
      var $90 = HEAP[$parser_addr] + 320;
      HEAP[$90] = 0;
      
      var $92 = HEAP[$parser_addr] + 324;
      HEAP[$92] = 0;
      
      var $94 = HEAP[$parser_addr] + 328;
      HEAP[$94] = 0;
      
      var $96 = HEAP[$parser_addr] + 332;
      HEAP[$96] = 0;
      
      var $98 = HEAP[$parser_addr] + 336;
      HEAP[$98] = 0;
      
      var $100 = HEAP[$parser_addr] + 340;
      HEAP[$100] = 0;
      
      var $102 = HEAP[$parser_addr] + 352;
      HEAP[$102] = 0;
      
      var $104 = HEAP[$parser_addr] + 353;
      HEAP[$104] = 0;
      
      
      var $107 = HEAP[$parser_addr] + 408;
      _llvm_memset_p0i8_i32($107, 0, 8, 1, 0);
      
      var $109 = HEAP[$parser_addr] + 284;
      HEAP[$109] = 0;
      
      var $111 = HEAP[$parser_addr] + 288;
      HEAP[$111] = 0;
      
      var $113 = HEAP[$parser_addr] + 292;
      HEAP[$113] = 0;
      
      var $115 = HEAP[$parser_addr] + 296;
      HEAP[$115] = 0;
      
      var $117 = HEAP[$parser_addr] + 300;
      HEAP[$117] = 0;
      
      var $119 = HEAP[$parser_addr] + 308;
      HEAP[$119] = 1;
      
      var $121 = HEAP[$parser_addr] + 312;
      HEAP[$121] = 0;
      
      var $123 = HEAP[$parser_addr] + 364;
      HEAP[$123] = 0;
      
      var $125 = HEAP[$parser_addr] + 372;
      HEAP[$125] = 0;
      
      var $127 = HEAP[$parser_addr] + 384;
      HEAP[$127] = 0;
      
      var $129 = HEAP[$parser_addr] + 240;
      HEAP[$129] = 0;
      
      var $131 = HEAP[$parser_addr] + 252;
      HEAP[$131] = 0;
      
      var $133 = HEAP[$parser_addr] + 244;
      HEAP[$133] = 0;
      
      var $135 = HEAP[$parser_addr] + 476;
      HEAP[$135] = 0;
      
      
      var $138 = HEAP[$parser_addr] + 480;
      HEAP[$138] = 0;
      
      var $140 = HEAP[$parser_addr] + 488;
      HEAP[$140] = 0;
      
      var $142 = HEAP[$parser_addr] + 489;
      HEAP[$142] = 0;
      
      var $144 = HEAP[$parser_addr] + 492;
      HEAP[$144] = 0;
      __label__ = 4;
      break;
     case 4:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _moveToFreeBindingList($parser, $bindings) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 12;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $bindings_addr = __stackBase__ + 4;
      var $b = __stackBase__ + 8;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$bindings_addr] = $bindings;
      __label__ = 2;
      break;
     case 1:
      var $0 = HEAP[$bindings_addr];
      HEAP[$b] = $0;
      
      
      var $3 = HEAP[HEAP[$bindings_addr] + 4];
      HEAP[$bindings_addr] = $3;
      
      
      var $6 = HEAP[HEAP[$parser_addr] + 376];
      
      var $8 = HEAP[$b] + 4;
      HEAP[$8] = $6;
      
      var $10 = HEAP[$parser_addr] + 376;
      var $11 = HEAP[$b];
      HEAP[$10] = $11;
      __label__ = 2;
      break;
     case 2:
      
      
      if (HEAP[$bindings_addr] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 3:
      __label__ = 4;
      break;
     case 4:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_ParserReset($parser, $encodingName) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 32;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $encodingName_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      var $tStk = __stackBase__ + 16;
      var $openEntityList = __stackBase__ + 20;
      var $tag = __stackBase__ + 24;
      var $openEntity = __stackBase__ + 28;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$encodingName_addr] = $encodingName;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 476] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = 0;
      __label__ = 11;
      break;
     case 2:
      
      
      var $7 = HEAP[HEAP[$parser_addr] + 364];
      HEAP[$tStk] = $7;
      __label__ = 4;
      break;
     case 3:
      var $8 = HEAP[$tStk];
      HEAP[$tag] = $8;
      
      
      var $11 = HEAP[HEAP[$tStk]];
      HEAP[$tStk] = $11;
      
      
      var $14 = HEAP[HEAP[$parser_addr] + 368];
      
      var $16 = HEAP[$tag];
      HEAP[$16] = $14;
      
      
      var $19 = HEAP[HEAP[$tag] + 44];
      var $20 = HEAP[$parser_addr];
      _moveToFreeBindingList($20, $19);
      
      var $22 = HEAP[$tag] + 44;
      HEAP[$22] = 0;
      
      var $24 = HEAP[$parser_addr] + 368;
      var $25 = HEAP[$tag];
      HEAP[$24] = $25;
      __label__ = 4;
      break;
     case 4:
      
      
      if (HEAP[$tStk] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 5:
      
      
      var $30 = HEAP[HEAP[$parser_addr] + 300];
      HEAP[$openEntityList] = $30;
      __label__ = 7;
      break;
     case 6:
      var $31 = HEAP[$openEntityList];
      HEAP[$openEntity] = $31;
      
      
      var $34 = HEAP[HEAP[$openEntity] + 8];
      HEAP[$openEntityList] = $34;
      
      
      var $37 = HEAP[HEAP[$parser_addr] + 304];
      
      var $39 = HEAP[$openEntity] + 8;
      HEAP[$39] = $37;
      
      var $41 = HEAP[$parser_addr] + 304;
      var $42 = HEAP[$openEntity];
      HEAP[$41] = $42;
      __label__ = 7;
      break;
     case 7:
      
      
      if (HEAP[$openEntityList] != 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 8:
      
      
      var $47 = HEAP[HEAP[$parser_addr] + 372];
      var $48 = HEAP[$parser_addr];
      _moveToFreeBindingList($48, $47);
      
      
      
      var $52 = HEAP[HEAP[$parser_addr] + 12 + 8];
      
      
      var $55 = HEAP[HEAP[$parser_addr] + 240];
      FUNCTION_TABLE[$52]($55);
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 252] != 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      
      
      var $62 = HEAP[HEAP[$parser_addr] + 252];
      
      
      var $65 = HEAP[HEAP[$parser_addr] + 244];
      FUNCTION_TABLE[$62]($65);
      __label__ = 10;
      break;
     case 10:
      
      var $67 = HEAP[$parser_addr] + 416;
      _poolClear($67);
      
      var $69 = HEAP[$parser_addr] + 440;
      _poolClear($69);
      var $70 = HEAP[$parser_addr];
      var $71 = HEAP[$encodingName_addr];
      _parserInit($70, $71);
      
      var $73 = HEAP[$parser_addr] + 12;
      
      
      var $76 = HEAP[HEAP[$parser_addr] + 356];
      _dtdReset($76, $73);
      var $77 = HEAP[$parser_addr];
      var $78 = _setContext($77, _implicitContext);
      var $79 = $78;
      HEAP[$0] = $79;
      __label__ = 11;
      break;
     case 11:
      var $80 = HEAP[$0];
      HEAP[$retval] = $80;
      __label__ = 12;
      break;
     case 12:
      
      var $retval1112 = HEAP[$retval] & 255;
      STACKTOP = __stackBase__;
      return $retval1112;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_SetEncoding($parser, $encodingName) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $encodingName_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$encodingName_addr] = $encodingName;
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 480] == 1) {
        __label__ = 2;
        break;
      } else {
        __label__ = 1;
        break;
      }
     case 1:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 480] == 3) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      HEAP[$0] = 0;
      __label__ = 8;
      break;
     case 3:
      
      
      if (HEAP[$encodingName_addr] == 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      
      var $14 = HEAP[$parser_addr] + 232;
      HEAP[$14] = 0;
      __label__ = 7;
      break;
     case 5:
      
      var $16 = HEAP[$parser_addr] + 416;
      var $17 = HEAP[$encodingName_addr];
      var $18 = _poolCopyString($16, $17);
      
      var $20 = HEAP[$parser_addr] + 232;
      HEAP[$20] = $18;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 232] == 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      HEAP[$0] = 0;
      __label__ = 8;
      break;
     case 7:
      HEAP[$0] = 1;
      __label__ = 8;
      break;
     case 8:
      var $25 = HEAP[$0];
      HEAP[$retval] = $25;
      __label__ = 9;
      break;
     case 9:
      var $retval8 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval8;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_ExternalEntityParserCreate($oldParser, $context, $encodingName) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 140;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 140);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $oldParser_addr = __stackBase__;
      var $context_addr = __stackBase__ + 4;
      var $encodingName_addr = __stackBase__ + 8;
      var $retval = __stackBase__ + 12;
      var $0 = __stackBase__ + 16;
      var $parser = __stackBase__ + 20;
      var $newDtd = __stackBase__ + 24;
      var $oldDtd = __stackBase__ + 28;
      var $oldStartElementHandler = __stackBase__ + 32;
      var $oldEndElementHandler = __stackBase__ + 36;
      var $oldCharacterDataHandler = __stackBase__ + 40;
      var $oldProcessingInstructionHandler = __stackBase__ + 44;
      var $oldCommentHandler = __stackBase__ + 48;
      var $oldStartCdataSectionHandler = __stackBase__ + 52;
      var $oldEndCdataSectionHandler = __stackBase__ + 56;
      var $oldDefaultHandler = __stackBase__ + 60;
      var $oldUnparsedEntityDeclHandler = __stackBase__ + 64;
      var $oldNotationDeclHandler = __stackBase__ + 68;
      var $oldStartNamespaceDeclHandler = __stackBase__ + 72;
      var $oldEndNamespaceDeclHandler = __stackBase__ + 76;
      var $oldNotStandaloneHandler = __stackBase__ + 80;
      var $oldExternalEntityRefHandler = __stackBase__ + 84;
      var $oldSkippedEntityHandler = __stackBase__ + 88;
      var $oldUnknownEncodingHandler = __stackBase__ + 92;
      var $oldElementDeclHandler = __stackBase__ + 96;
      var $oldAttlistDeclHandler = __stackBase__ + 100;
      var $oldEntityDeclHandler = __stackBase__ + 104;
      var $oldXmlDeclHandler = __stackBase__ + 108;
      var $oldDeclElementType = __stackBase__ + 112;
      var $oldUserData = __stackBase__ + 116;
      var $oldHandlerArg = __stackBase__ + 120;
      var $oldDefaultExpandInternalEntities = __stackBase__ + 124;
      var $oldExternalEntityRefHandlerArg = __stackBase__ + 125;
      var $oldParamEntityParsing = __stackBase__ + 129;
      var $oldInEntityValue = __stackBase__ + 133;
      var $oldns_triplets = __stackBase__ + 137;
      var $tmp = __stackBase__ + 138;
      
      HEAP[$oldParser_addr] = $oldParser;
      HEAP[$context_addr] = $context;
      HEAP[$encodingName_addr] = $encodingName;
      var $1 = HEAP[$oldParser_addr];
      HEAP[$parser] = $1;
      HEAP[$newDtd] = 0;
      
      
      var $4 = HEAP[HEAP[$parser] + 356];
      HEAP[$oldDtd] = $4;
      
      
      var $7 = HEAP[HEAP[$parser] + 52];
      HEAP[$oldStartElementHandler] = $7;
      
      
      var $10 = HEAP[HEAP[$parser] + 56];
      HEAP[$oldEndElementHandler] = $10;
      
      
      var $13 = HEAP[HEAP[$parser] + 60];
      HEAP[$oldCharacterDataHandler] = $13;
      
      
      var $16 = HEAP[HEAP[$parser] + 64];
      HEAP[$oldProcessingInstructionHandler] = $16;
      
      
      var $19 = HEAP[HEAP[$parser] + 68];
      HEAP[$oldCommentHandler] = $19;
      
      
      var $22 = HEAP[HEAP[$parser] + 72];
      HEAP[$oldStartCdataSectionHandler] = $22;
      
      
      var $25 = HEAP[HEAP[$parser] + 76];
      HEAP[$oldEndCdataSectionHandler] = $25;
      
      
      var $28 = HEAP[HEAP[$parser] + 80];
      HEAP[$oldDefaultHandler] = $28;
      
      
      var $31 = HEAP[HEAP[$parser] + 92];
      HEAP[$oldUnparsedEntityDeclHandler] = $31;
      
      
      var $34 = HEAP[HEAP[$parser] + 96];
      HEAP[$oldNotationDeclHandler] = $34;
      
      
      var $37 = HEAP[HEAP[$parser] + 100];
      HEAP[$oldStartNamespaceDeclHandler] = $37;
      
      
      var $40 = HEAP[HEAP[$parser] + 104];
      HEAP[$oldEndNamespaceDeclHandler] = $40;
      
      
      var $43 = HEAP[HEAP[$parser] + 108];
      HEAP[$oldNotStandaloneHandler] = $43;
      
      
      var $46 = HEAP[HEAP[$parser] + 112];
      HEAP[$oldExternalEntityRefHandler] = $46;
      
      
      var $49 = HEAP[HEAP[$parser] + 120];
      HEAP[$oldSkippedEntityHandler] = $49;
      
      
      var $52 = HEAP[HEAP[$parser] + 124];
      HEAP[$oldUnknownEncodingHandler] = $52;
      
      
      var $55 = HEAP[HEAP[$parser] + 128];
      HEAP[$oldElementDeclHandler] = $55;
      
      
      var $58 = HEAP[HEAP[$parser] + 132];
      HEAP[$oldAttlistDeclHandler] = $58;
      
      
      var $61 = HEAP[HEAP[$parser] + 136];
      HEAP[$oldEntityDeclHandler] = $61;
      
      
      var $64 = HEAP[HEAP[$parser] + 140];
      HEAP[$oldXmlDeclHandler] = $64;
      
      
      var $67 = HEAP[HEAP[$parser] + 344];
      HEAP[$oldDeclElementType] = $67;
      
      
      var $70 = HEAP[HEAP[$parser]];
      HEAP[$oldUserData] = $70;
      
      
      var $73 = HEAP[HEAP[$parser] + 4];
      HEAP[$oldHandlerArg] = $73;
      
      
      var $76 = HEAP[HEAP[$parser] + 308];
      HEAP[$oldDefaultExpandInternalEntities] = $76;
      
      
      var $79 = HEAP[HEAP[$parser] + 116];
      HEAP[$oldExternalEntityRefHandlerArg] = $79;
      
      
      var $82 = HEAP[HEAP[$parser] + 492];
      HEAP[$oldParamEntityParsing] = $82;
      
      
      
      var $86 = HEAP[HEAP[$parser] + 256 + 20];
      HEAP[$oldInEntityValue] = $86;
      
      
      var $89 = HEAP[HEAP[$parser] + 237];
      HEAP[$oldns_triplets] = $89;
      
      
      if (HEAP[$context_addr] == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      var $92 = HEAP[$oldDtd];
      HEAP[$newDtd] = $92;
      __label__ = 2;
      break;
     case 2:
      
      
      
      
      if (HEAP[HEAP[$parser] + 236] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      
      var $99 = HEAP[HEAP[$parser] + 472];
      
      HEAP[$tmp] = $99;
      
      var $102 = HEAP[$parser] + 12;
      var $103 = HEAP[$encodingName_addr];
      var $tmp3 = $tmp;
      var $104 = HEAP[$newDtd];
      var $105 = _parserCreate($103, $102, $tmp3, $104);
      HEAP[$parser] = $105;
      __label__ = 5;
      break;
     case 4:
      
      var $107 = HEAP[$parser] + 12;
      var $108 = HEAP[$encodingName_addr];
      var $109 = HEAP[$newDtd];
      var $110 = _parserCreate($108, $107, 0, $109);
      HEAP[$parser] = $110;
      __label__ = 5;
      break;
     case 5:
      
      
      if (HEAP[$parser] == 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      HEAP[$0] = 0;
      __label__ = 19;
      break;
     case 7:
      
      var $114 = HEAP[$parser] + 52;
      var $115 = HEAP[$oldStartElementHandler];
      HEAP[$114] = $115;
      
      var $117 = HEAP[$parser] + 56;
      var $118 = HEAP[$oldEndElementHandler];
      HEAP[$117] = $118;
      
      var $120 = HEAP[$parser] + 60;
      var $121 = HEAP[$oldCharacterDataHandler];
      HEAP[$120] = $121;
      
      var $123 = HEAP[$parser] + 64;
      var $124 = HEAP[$oldProcessingInstructionHandler];
      HEAP[$123] = $124;
      
      var $126 = HEAP[$parser] + 68;
      var $127 = HEAP[$oldCommentHandler];
      HEAP[$126] = $127;
      
      var $129 = HEAP[$parser] + 72;
      var $130 = HEAP[$oldStartCdataSectionHandler];
      HEAP[$129] = $130;
      
      var $132 = HEAP[$parser] + 76;
      var $133 = HEAP[$oldEndCdataSectionHandler];
      HEAP[$132] = $133;
      
      var $135 = HEAP[$parser] + 80;
      var $136 = HEAP[$oldDefaultHandler];
      HEAP[$135] = $136;
      
      var $138 = HEAP[$parser] + 92;
      var $139 = HEAP[$oldUnparsedEntityDeclHandler];
      HEAP[$138] = $139;
      
      var $141 = HEAP[$parser] + 96;
      var $142 = HEAP[$oldNotationDeclHandler];
      HEAP[$141] = $142;
      
      var $144 = HEAP[$parser] + 100;
      var $145 = HEAP[$oldStartNamespaceDeclHandler];
      HEAP[$144] = $145;
      
      var $147 = HEAP[$parser] + 104;
      var $148 = HEAP[$oldEndNamespaceDeclHandler];
      HEAP[$147] = $148;
      
      var $150 = HEAP[$parser] + 108;
      var $151 = HEAP[$oldNotStandaloneHandler];
      HEAP[$150] = $151;
      
      var $153 = HEAP[$parser] + 112;
      var $154 = HEAP[$oldExternalEntityRefHandler];
      HEAP[$153] = $154;
      
      var $156 = HEAP[$parser] + 120;
      var $157 = HEAP[$oldSkippedEntityHandler];
      HEAP[$156] = $157;
      
      var $159 = HEAP[$parser] + 124;
      var $160 = HEAP[$oldUnknownEncodingHandler];
      HEAP[$159] = $160;
      
      var $162 = HEAP[$parser] + 128;
      var $163 = HEAP[$oldElementDeclHandler];
      HEAP[$162] = $163;
      
      var $165 = HEAP[$parser] + 132;
      var $166 = HEAP[$oldAttlistDeclHandler];
      HEAP[$165] = $166;
      
      var $168 = HEAP[$parser] + 136;
      var $169 = HEAP[$oldEntityDeclHandler];
      HEAP[$168] = $169;
      
      var $171 = HEAP[$parser] + 140;
      var $172 = HEAP[$oldXmlDeclHandler];
      HEAP[$171] = $172;
      
      var $174 = HEAP[$parser] + 344;
      var $175 = HEAP[$oldDeclElementType];
      HEAP[$174] = $175;
      
      var $177 = HEAP[$parser];
      var $178 = HEAP[$oldUserData];
      HEAP[$177] = $178;
      
      
      
      if (HEAP[$oldUserData] == HEAP[$oldHandlerArg]) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      
      
      var $184 = HEAP[HEAP[$parser]];
      
      var $186 = HEAP[$parser] + 4;
      HEAP[$186] = $184;
      __label__ = 10;
      break;
     case 9:
      
      var $188 = HEAP[$parser] + 4;
      
      var $190 = HEAP[$parser];
      HEAP[$188] = $190;
      __label__ = 10;
      break;
     case 10:
      
      
      
      if (HEAP[$oldExternalEntityRefHandlerArg] != HEAP[$oldParser_addr]) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      
      var $195 = HEAP[$parser] + 116;
      var $196 = HEAP[$oldExternalEntityRefHandlerArg];
      HEAP[$195] = $196;
      __label__ = 12;
      break;
     case 12:
      
      var $198 = HEAP[$parser] + 308;
      var $199 = HEAP[$oldDefaultExpandInternalEntities];
      HEAP[$198] = $199;
      
      var $201 = HEAP[$parser] + 237;
      var $202 = HEAP[$oldns_triplets];
      HEAP[$201] = $202;
      
      var $204 = HEAP[$parser] + 476;
      var $205 = HEAP[$oldParser_addr];
      HEAP[$204] = $205;
      
      var $207 = HEAP[$parser] + 492;
      var $208 = HEAP[$oldParamEntityParsing];
      HEAP[$207] = $208;
      
      
      var $211 = HEAP[$parser] + 256 + 20;
      var $212 = HEAP[$oldInEntityValue];
      HEAP[$211] = $212;
      
      
      if (HEAP[$context_addr] != 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 13:
      
      var $216 = HEAP[$parser] + 12;
      
      
      var $219 = HEAP[HEAP[$parser] + 356];
      var $220 = HEAP[$oldDtd];
      var $221 = _dtdCopy($219, $220, $216);
      
      if ($221 == 0) {
        __label__ = 15;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 14:
      var $223 = HEAP[$parser];
      var $224 = HEAP[$context_addr];
      var $225 = _setContext($223, $224);
      
      if ($225 == 0) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      var $227 = HEAP[$parser];
      _PyExpat_XML_ParserFree($227);
      HEAP[$0] = 0;
      __label__ = 19;
      break;
     case 16:
      
      var $229 = HEAP[$parser] + 280;
      HEAP[$229] = FUNCTION_TABLE_OFFSET + 50;
      __label__ = 18;
      break;
     case 17:
      
      var $231 = HEAP[$parser] + 488;
      HEAP[$231] = 1;
      
      var $233 = HEAP[$parser] + 256;
      _PyExpat_XmlPrologStateInitExternalEntity($233);
      
      var $235 = HEAP[$parser] + 280;
      HEAP[$235] = FUNCTION_TABLE_OFFSET + 52;
      __label__ = 18;
      break;
     case 18:
      var $236 = HEAP[$parser];
      HEAP[$0] = $236;
      __label__ = 19;
      break;
     case 19:
      var $237 = HEAP[$0];
      HEAP[$retval] = $237;
      __label__ = 20;
      break;
     case 20:
      var $retval20 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval20;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _destroyBindings($bindings, $parser) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 12;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $bindings_addr = __stackBase__;
      var $parser_addr = __stackBase__ + 4;
      var $b = __stackBase__ + 8;
      
      HEAP[$bindings_addr] = $bindings;
      HEAP[$parser_addr] = $parser;
      __label__ = 1;
      break;
     case 1:
      var $0 = HEAP[$bindings_addr];
      HEAP[$b] = $0;
      
      
      if (HEAP[$b] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      
      
      var $5 = HEAP[HEAP[$b] + 4];
      HEAP[$bindings_addr] = $5;
      
      
      
      var $9 = HEAP[HEAP[$parser_addr] + 12 + 8];
      
      
      var $12 = HEAP[HEAP[$b] + 16];
      FUNCTION_TABLE[$9]($12);
      
      
      
      var $16 = HEAP[HEAP[$parser_addr] + 12 + 8];
      
      var $18 = HEAP[$b];
      FUNCTION_TABLE[$16]($18);
      __label__ = 1;
      break;
     case 3:
      __label__ = 4;
      break;
     case 4:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_ParserFree($parser) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 20;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $tagList = __stackBase__ + 4;
      var $entityList = __stackBase__ + 8;
      var $p = __stackBase__ + 12;
      var $openEntity = __stackBase__ + 16;
      
      HEAP[$parser_addr] = $parser;
      
      
      if (HEAP[$parser_addr] == 0) {
        __label__ = 17;
        break;
      } else {
        __label__ = 1;
        break;
      }
     case 1:
      
      
      var $4 = HEAP[HEAP[$parser_addr] + 364];
      HEAP[$tagList] = $4;
      __label__ = 2;
      break;
     case 2:
      
      
      if (HEAP[$tagList] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 3:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 368] == 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 4:
      
      
      var $13 = HEAP[HEAP[$parser_addr] + 368];
      HEAP[$tagList] = $13;
      
      var $15 = HEAP[$parser_addr] + 368;
      HEAP[$15] = 0;
      __label__ = 5;
      break;
     case 5:
      var $16 = HEAP[$tagList];
      HEAP[$p] = $16;
      
      
      var $19 = HEAP[HEAP[$tagList]];
      HEAP[$tagList] = $19;
      
      
      
      var $23 = HEAP[HEAP[$parser_addr] + 12 + 8];
      
      
      var $26 = HEAP[HEAP[$p] + 36];
      FUNCTION_TABLE[$23]($26);
      
      
      var $29 = HEAP[HEAP[$p] + 44];
      var $30 = HEAP[$parser_addr];
      _destroyBindings($29, $30);
      
      
      
      var $34 = HEAP[HEAP[$parser_addr] + 12 + 8];
      
      var $36 = HEAP[$p];
      FUNCTION_TABLE[$34]($36);
      __label__ = 2;
      break;
     case 6:
      
      
      var $39 = HEAP[HEAP[$parser_addr] + 300];
      HEAP[$entityList] = $39;
      __label__ = 7;
      break;
     case 7:
      
      
      if (HEAP[$entityList] == 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 8:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 304] == 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 9:
      
      
      var $48 = HEAP[HEAP[$parser_addr] + 304];
      HEAP[$entityList] = $48;
      
      var $50 = HEAP[$parser_addr] + 304;
      HEAP[$50] = 0;
      __label__ = 10;
      break;
     case 10:
      var $51 = HEAP[$entityList];
      HEAP[$openEntity] = $51;
      
      
      var $54 = HEAP[HEAP[$entityList] + 8];
      HEAP[$entityList] = $54;
      
      
      
      var $58 = HEAP[HEAP[$parser_addr] + 12 + 8];
      
      var $60 = HEAP[$openEntity];
      FUNCTION_TABLE[$58]($60);
      __label__ = 7;
      break;
     case 11:
      
      
      var $63 = HEAP[HEAP[$parser_addr] + 376];
      var $64 = HEAP[$parser_addr];
      _destroyBindings($63, $64);
      
      
      var $67 = HEAP[HEAP[$parser_addr] + 372];
      var $68 = HEAP[$parser_addr];
      _destroyBindings($67, $68);
      
      var $70 = HEAP[$parser_addr] + 416;
      _poolDestroy($70);
      
      var $72 = HEAP[$parser_addr] + 440;
      _poolDestroy($72);
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 488] == 0) {
        __label__ = 12;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 12:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 356] != 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      
      var $82 = HEAP[$parser_addr] + 12;
      
      
      
      
      
      
      
      var $90 = HEAP[HEAP[$parser_addr] + 356];
      var $91 = HEAP[HEAP[$parser_addr] + 476] == 0 & 255;
      _dtdDestroy($90, $91, $82);
      __label__ = 14;
      break;
     case 14:
      
      
      
      var $95 = HEAP[HEAP[$parser_addr] + 12 + 8];
      
      
      
      var $99 = HEAP[HEAP[$parser_addr] + 392];
      FUNCTION_TABLE[$95]($99);
      
      
      
      var $103 = HEAP[HEAP[$parser_addr] + 12 + 8];
      
      
      var $106 = HEAP[HEAP[$parser_addr] + 464];
      FUNCTION_TABLE[$103]($106);
      
      
      
      var $110 = HEAP[HEAP[$parser_addr] + 12 + 8];
      
      
      var $113 = HEAP[HEAP[$parser_addr] + 8];
      FUNCTION_TABLE[$110]($113);
      
      
      
      var $117 = HEAP[HEAP[$parser_addr] + 12 + 8];
      
      
      var $120 = HEAP[HEAP[$parser_addr] + 44];
      FUNCTION_TABLE[$117]($120);
      
      
      
      var $124 = HEAP[HEAP[$parser_addr] + 12 + 8];
      
      
      
      var $128 = HEAP[HEAP[$parser_addr] + 396];
      FUNCTION_TABLE[$124]($128);
      
      
      
      var $132 = HEAP[HEAP[$parser_addr] + 12 + 8];
      
      
      var $135 = HEAP[HEAP[$parser_addr] + 240];
      FUNCTION_TABLE[$132]($135);
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 252] != 0) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      
      
      var $142 = HEAP[HEAP[$parser_addr] + 252];
      
      
      var $145 = HEAP[HEAP[$parser_addr] + 244];
      FUNCTION_TABLE[$142]($145);
      __label__ = 16;
      break;
     case 16:
      
      
      
      var $149 = HEAP[HEAP[$parser_addr] + 12 + 8];
      
      var $151 = HEAP[$parser_addr];
      FUNCTION_TABLE[$149]($151);
      __label__ = 17;
      break;
     case 17:
      __label__ = 18;
      break;
     case 18:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_UseParserAsHandlerArg($parser) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 4;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      
      HEAP[__stackBase__] = $parser;
      
      var $1 = HEAP[__stackBase__] + 4;
      
      var $3 = HEAP[__stackBase__];
      HEAP[$1] = $3;
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_UseForeignDTD($parser, $useDTD) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 13;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 13);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $useDTD_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 5;
      var $0 = __stackBase__ + 9;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$useDTD_addr] = $useDTD;
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 480] == 1) {
        __label__ = 2;
        break;
      } else {
        __label__ = 1;
        break;
      }
     case 1:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 480] == 3) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      HEAP[$0] = 26;
      __label__ = 4;
      break;
     case 3:
      
      var $12 = HEAP[$parser_addr] + 489;
      var $13 = HEAP[$useDTD_addr];
      HEAP[$12] = $13;
      HEAP[$0] = 0;
      __label__ = 4;
      break;
     case 4:
      var $14 = HEAP[$0];
      HEAP[$retval] = $14;
      __label__ = 5;
      break;
     case 5:
      var $retval4 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval4;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_SetReturnNSTriplet($parser, $do_nst) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $do_nst_addr = __stackBase__ + 4;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$do_nst_addr] = $do_nst;
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 480] == 1) {
        __label__ = 2;
        break;
      } else {
        __label__ = 1;
        break;
      }
     case 1:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 480] == 3) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      __label__ = 4;
      break;
     case 3:
      
      
      var $12 = HEAP[$do_nst_addr] != 0;
      
      var $14 = HEAP[$parser_addr] + 237;
      HEAP[$14] = $12;
      __label__ = 4;
      break;
     case 4:
      __label__ = 5;
      break;
     case 5:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_SetUserData($parser, $p) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $p_addr = __stackBase__ + 4;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$p_addr] = $p;
      
      
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 4] == HEAP[HEAP[$parser_addr]]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      
      var $8 = HEAP[$parser_addr];
      var $9 = HEAP[$p_addr];
      HEAP[$8] = $9;
      
      
      var $12 = HEAP[HEAP[$parser_addr]];
      
      var $14 = HEAP[$parser_addr] + 4;
      HEAP[$14] = $12;
      __label__ = 3;
      break;
     case 2:
      
      var $16 = HEAP[$parser_addr];
      var $17 = HEAP[$p_addr];
      HEAP[$16] = $17;
      __label__ = 3;
      break;
     case 3:
      __label__ = 4;
      break;
     case 4:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_SetBase($parser, $p) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $p_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$p_addr] = $p;
      
      
      if (HEAP[$p_addr] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 1:
      
      
      
      var $6 = HEAP[HEAP[$parser_addr] + 356] + 80;
      var $7 = HEAP[$p_addr];
      var $8 = _poolCopyString($6, $7);
      HEAP[$p_addr] = $8;
      
      
      if (HEAP[$p_addr] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      HEAP[$0] = 0;
      __label__ = 6;
      break;
     case 3:
      
      var $12 = HEAP[$parser_addr] + 360;
      var $13 = HEAP[$p_addr];
      HEAP[$12] = $13;
      __label__ = 5;
      break;
     case 4:
      
      var $15 = HEAP[$parser_addr] + 360;
      HEAP[$15] = 0;
      __label__ = 5;
      break;
     case 5:
      HEAP[$0] = 1;
      __label__ = 6;
      break;
     case 6:
      var $16 = HEAP[$0];
      HEAP[$retval] = $16;
      __label__ = 7;
      break;
     case 7:
      var $retval6 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval6;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_GetBase($parser) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 12;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $retval = __stackBase__ + 4;
      var $0 = __stackBase__ + 8;
      
      HEAP[__stackBase__] = $parser;
      
      
      var $3 = HEAP[HEAP[__stackBase__] + 360];
      HEAP[$0] = $3;
      var $4 = HEAP[$0];
      HEAP[$retval] = $4;
      __label__ = 1;
      break;
     case 1:
      var $retval1 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval1;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_GetSpecifiedAttributeCount($parser) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 12;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $retval = __stackBase__ + 4;
      var $0 = __stackBase__ + 8;
      
      HEAP[__stackBase__] = $parser;
      
      
      var $3 = HEAP[HEAP[__stackBase__] + 384];
      HEAP[$0] = $3;
      var $4 = HEAP[$0];
      HEAP[$retval] = $4;
      __label__ = 1;
      break;
     case 1:
      var $retval1 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval1;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_GetIdAttributeIndex($parser) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 12;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $retval = __stackBase__ + 4;
      var $0 = __stackBase__ + 8;
      
      HEAP[__stackBase__] = $parser;
      
      
      var $3 = HEAP[HEAP[__stackBase__] + 388];
      HEAP[$0] = $3;
      var $4 = HEAP[$0];
      HEAP[$retval] = $4;
      __label__ = 1;
      break;
     case 1:
      var $retval1 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval1;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_SetElementHandler($parser, $start, $end) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 12;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $start_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$start_addr] = $start;
      HEAP[$end_addr] = $end;
      
      var $1 = HEAP[$parser_addr] + 52;
      var $2 = HEAP[$start_addr];
      HEAP[$1] = $2;
      
      var $4 = HEAP[$parser_addr] + 56;
      var $5 = HEAP[$end_addr];
      HEAP[$4] = $5;
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_SetStartElementHandler($parser, $start) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $start_addr = __stackBase__ + 4;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$start_addr] = $start;
      
      var $1 = HEAP[$parser_addr] + 52;
      var $2 = HEAP[$start_addr];
      HEAP[$1] = $2;
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_SetEndElementHandler($parser, $end) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $end_addr = __stackBase__ + 4;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$end_addr] = $end;
      
      var $1 = HEAP[$parser_addr] + 56;
      var $2 = HEAP[$end_addr];
      HEAP[$1] = $2;
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_SetCharacterDataHandler($parser, $handler) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $handler_addr = __stackBase__ + 4;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$handler_addr] = $handler;
      
      var $1 = HEAP[$parser_addr] + 60;
      var $2 = HEAP[$handler_addr];
      HEAP[$1] = $2;
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_SetProcessingInstructionHandler($parser, $handler) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $handler_addr = __stackBase__ + 4;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$handler_addr] = $handler;
      
      var $1 = HEAP[$parser_addr] + 64;
      var $2 = HEAP[$handler_addr];
      HEAP[$1] = $2;
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_SetCommentHandler($parser, $handler) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $handler_addr = __stackBase__ + 4;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$handler_addr] = $handler;
      
      var $1 = HEAP[$parser_addr] + 68;
      var $2 = HEAP[$handler_addr];
      HEAP[$1] = $2;
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_SetCdataSectionHandler($parser, $start, $end) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 12;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $start_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$start_addr] = $start;
      HEAP[$end_addr] = $end;
      
      var $1 = HEAP[$parser_addr] + 72;
      var $2 = HEAP[$start_addr];
      HEAP[$1] = $2;
      
      var $4 = HEAP[$parser_addr] + 76;
      var $5 = HEAP[$end_addr];
      HEAP[$4] = $5;
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_SetStartCdataSectionHandler($parser, $start) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $start_addr = __stackBase__ + 4;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$start_addr] = $start;
      
      var $1 = HEAP[$parser_addr] + 72;
      var $2 = HEAP[$start_addr];
      HEAP[$1] = $2;
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_SetEndCdataSectionHandler($parser, $end) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $end_addr = __stackBase__ + 4;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$end_addr] = $end;
      
      var $1 = HEAP[$parser_addr] + 76;
      var $2 = HEAP[$end_addr];
      HEAP[$1] = $2;
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_SetDefaultHandler($parser, $handler) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $handler_addr = __stackBase__ + 4;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$handler_addr] = $handler;
      
      var $1 = HEAP[$parser_addr] + 80;
      var $2 = HEAP[$handler_addr];
      HEAP[$1] = $2;
      
      var $4 = HEAP[$parser_addr] + 308;
      HEAP[$4] = 0;
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_SetDefaultHandlerExpand($parser, $handler) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $handler_addr = __stackBase__ + 4;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$handler_addr] = $handler;
      
      var $1 = HEAP[$parser_addr] + 80;
      var $2 = HEAP[$handler_addr];
      HEAP[$1] = $2;
      
      var $4 = HEAP[$parser_addr] + 308;
      HEAP[$4] = 1;
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_SetDoctypeDeclHandler($parser, $start, $end) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 12;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $start_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$start_addr] = $start;
      HEAP[$end_addr] = $end;
      
      var $1 = HEAP[$parser_addr] + 84;
      var $2 = HEAP[$start_addr];
      HEAP[$1] = $2;
      
      var $4 = HEAP[$parser_addr] + 88;
      var $5 = HEAP[$end_addr];
      HEAP[$4] = $5;
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_SetStartDoctypeDeclHandler($parser, $start) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $start_addr = __stackBase__ + 4;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$start_addr] = $start;
      
      var $1 = HEAP[$parser_addr] + 84;
      var $2 = HEAP[$start_addr];
      HEAP[$1] = $2;
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_SetEndDoctypeDeclHandler($parser, $end) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $end_addr = __stackBase__ + 4;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$end_addr] = $end;
      
      var $1 = HEAP[$parser_addr] + 88;
      var $2 = HEAP[$end_addr];
      HEAP[$1] = $2;
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_SetUnparsedEntityDeclHandler($parser, $handler) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $handler_addr = __stackBase__ + 4;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$handler_addr] = $handler;
      
      var $1 = HEAP[$parser_addr] + 92;
      var $2 = HEAP[$handler_addr];
      HEAP[$1] = $2;
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_SetNotationDeclHandler($parser, $handler) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $handler_addr = __stackBase__ + 4;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$handler_addr] = $handler;
      
      var $1 = HEAP[$parser_addr] + 96;
      var $2 = HEAP[$handler_addr];
      HEAP[$1] = $2;
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_SetNamespaceDeclHandler($parser, $start, $end) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 12;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $start_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$start_addr] = $start;
      HEAP[$end_addr] = $end;
      
      var $1 = HEAP[$parser_addr] + 100;
      var $2 = HEAP[$start_addr];
      HEAP[$1] = $2;
      
      var $4 = HEAP[$parser_addr] + 104;
      var $5 = HEAP[$end_addr];
      HEAP[$4] = $5;
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_SetStartNamespaceDeclHandler($parser, $start) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $start_addr = __stackBase__ + 4;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$start_addr] = $start;
      
      var $1 = HEAP[$parser_addr] + 100;
      var $2 = HEAP[$start_addr];
      HEAP[$1] = $2;
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_SetEndNamespaceDeclHandler($parser, $end) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $end_addr = __stackBase__ + 4;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$end_addr] = $end;
      
      var $1 = HEAP[$parser_addr] + 104;
      var $2 = HEAP[$end_addr];
      HEAP[$1] = $2;
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_SetNotStandaloneHandler($parser, $handler) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $handler_addr = __stackBase__ + 4;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$handler_addr] = $handler;
      
      var $1 = HEAP[$parser_addr] + 108;
      var $2 = HEAP[$handler_addr];
      HEAP[$1] = $2;
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_SetExternalEntityRefHandler($parser, $handler) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $handler_addr = __stackBase__ + 4;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$handler_addr] = $handler;
      
      var $1 = HEAP[$parser_addr] + 112;
      var $2 = HEAP[$handler_addr];
      HEAP[$1] = $2;
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_SetExternalEntityRefHandlerArg($parser, $arg) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $arg_addr = __stackBase__ + 4;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$arg_addr] = $arg;
      
      
      if (HEAP[$arg_addr] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      
      var $3 = HEAP[$arg_addr];
      
      var $5 = HEAP[$parser_addr] + 116;
      HEAP[$5] = $3;
      __label__ = 3;
      break;
     case 2:
      
      var $7 = HEAP[$parser_addr] + 116;
      var $8 = HEAP[$parser_addr];
      HEAP[$7] = $8;
      __label__ = 3;
      break;
     case 3:
      __label__ = 4;
      break;
     case 4:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_SetSkippedEntityHandler($parser, $handler) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $handler_addr = __stackBase__ + 4;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$handler_addr] = $handler;
      
      var $1 = HEAP[$parser_addr] + 120;
      var $2 = HEAP[$handler_addr];
      HEAP[$1] = $2;
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_SetUnknownEncodingHandler($parser, $handler, $data) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 12;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $handler_addr = __stackBase__ + 4;
      var $data_addr = __stackBase__ + 8;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$handler_addr] = $handler;
      HEAP[$data_addr] = $data;
      
      var $1 = HEAP[$parser_addr] + 124;
      var $2 = HEAP[$handler_addr];
      HEAP[$1] = $2;
      
      var $4 = HEAP[$parser_addr] + 248;
      var $5 = HEAP[$data_addr];
      HEAP[$4] = $5;
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_SetElementDeclHandler($parser, $eldecl) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $eldecl_addr = __stackBase__ + 4;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$eldecl_addr] = $eldecl;
      
      var $1 = HEAP[$parser_addr] + 128;
      var $2 = HEAP[$eldecl_addr];
      HEAP[$1] = $2;
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_SetAttlistDeclHandler($parser, $attdecl) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $attdecl_addr = __stackBase__ + 4;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$attdecl_addr] = $attdecl;
      
      var $1 = HEAP[$parser_addr] + 132;
      var $2 = HEAP[$attdecl_addr];
      HEAP[$1] = $2;
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_SetEntityDeclHandler($parser, $handler) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $handler_addr = __stackBase__ + 4;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$handler_addr] = $handler;
      
      var $1 = HEAP[$parser_addr] + 136;
      var $2 = HEAP[$handler_addr];
      HEAP[$1] = $2;
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_SetXmlDeclHandler($parser, $handler) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $handler_addr = __stackBase__ + 4;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$handler_addr] = $handler;
      
      var $1 = HEAP[$parser_addr] + 140;
      var $2 = HEAP[$handler_addr];
      HEAP[$1] = $2;
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_SetParamEntityParsing($parser, $peParsing) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $peParsing_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$peParsing_addr] = $peParsing;
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 480] == 1) {
        __label__ = 2;
        break;
      } else {
        __label__ = 1;
        break;
      }
     case 1:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 480] == 3) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      HEAP[$0] = 0;
      __label__ = 4;
      break;
     case 3:
      
      var $12 = HEAP[$parser_addr] + 492;
      var $13 = HEAP[$peParsing_addr];
      HEAP[$12] = $13;
      HEAP[$0] = 1;
      __label__ = 4;
      break;
     case 4:
      var $14 = HEAP[$0];
      HEAP[$retval] = $14;
      __label__ = 5;
      break;
     case 5:
      var $retval4 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval4;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_Parse($parser, $s, $len, $isFinal) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $s_addr = __stackBase__ + 4;
      var $len_addr = __stackBase__ + 8;
      var $isFinal_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $buff = __stackBase__ + 24;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$s_addr] = $s;
      HEAP[$len_addr] = $len;
      HEAP[$isFinal_addr] = $isFinal;
      
      
      
      var $4 = HEAP[HEAP[$parser_addr] + 480];
      if ($4 == 2) {
        __label__ = 2;
        break;
      } else if ($4 == 3) {
        __label__ = 1;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      
      var $6 = HEAP[$parser_addr] + 284;
      HEAP[$6] = 33;
      HEAP[$0] = 0;
      __label__ = 15;
      break;
     case 2:
      
      var $8 = HEAP[$parser_addr] + 284;
      HEAP[$8] = 36;
      HEAP[$0] = 0;
      __label__ = 15;
      break;
     case 3:
      
      
      var $11 = HEAP[$parser_addr] + 480;
      HEAP[$11] = 1;
      
      
      if (HEAP[$len_addr] == 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 4:
      
      var $15 = HEAP[$isFinal_addr] & 255;
      
      
      var $18 = HEAP[$parser_addr] + 480 + 4;
      HEAP[$18] = $15;
      
      
      if (HEAP[$isFinal_addr] == 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      HEAP[$0] = 1;
      __label__ = 15;
      break;
     case 6:
      
      
      var $23 = HEAP[HEAP[$parser_addr] + 24];
      
      var $25 = HEAP[$parser_addr] + 296;
      HEAP[$25] = $23;
      
      
      var $28 = HEAP[HEAP[$parser_addr] + 28];
      
      var $30 = HEAP[$parser_addr] + 40;
      HEAP[$30] = $28;
      
      
      var $33 = HEAP[HEAP[$parser_addr] + 280];
      
      var $35 = HEAP[$parser_addr] + 24;
      
      
      var $38 = HEAP[HEAP[$parser_addr] + 40];
      
      
      var $41 = HEAP[HEAP[$parser_addr] + 24];
      var $42 = HEAP[$parser_addr];
      var $43 = FUNCTION_TABLE[$33]($42, $41, $38, $35);
      
      var $45 = HEAP[$parser_addr] + 284;
      HEAP[$45] = $43;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 284] == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 7:
      
      
      
      var $53 = HEAP[HEAP[$parser_addr] + 480];
      if ($53 == 0) {
        __label__ = 9;
        break;
      } else if ($53 == 1) {
        __label__ = 9;
        break;
      } else if ($53 == 3) {
        __label__ = 8;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 8:
      
      
      
      
      var $58 = HEAP[HEAP[HEAP[$parser_addr] + 144] + 52];
      
      var $60 = HEAP[$parser_addr] + 408;
      
      
      var $63 = HEAP[HEAP[$parser_addr] + 24];
      
      
      var $66 = HEAP[HEAP[$parser_addr] + 296];
      
      
      var $69 = HEAP[HEAP[$parser_addr] + 144];
      FUNCTION_TABLE[$58]($69, $66, $63, $60);
      
      
      var $72 = HEAP[HEAP[$parser_addr] + 24];
      
      var $74 = HEAP[$parser_addr] + 296;
      HEAP[$74] = $72;
      HEAP[$0] = 2;
      __label__ = 15;
      break;
     case 9:
      
      
      var $77 = HEAP[$parser_addr] + 480;
      HEAP[$77] = 2;
      __label__ = 10;
      break;
     case 10:
      HEAP[$0] = 1;
      __label__ = 15;
      break;
     case 11:
      
      
      var $80 = HEAP[HEAP[$parser_addr] + 288];
      
      var $82 = HEAP[$parser_addr] + 292;
      HEAP[$82] = $80;
      
      var $84 = HEAP[$parser_addr] + 280;
      HEAP[$84] = FUNCTION_TABLE_OFFSET + 54;
      HEAP[$0] = 0;
      __label__ = 15;
      break;
     case 12:
      var $85 = HEAP[$parser_addr];
      var $86 = HEAP[$len_addr];
      var $87 = _PyExpat_XML_GetBuffer($85, $86);
      HEAP[$buff] = $87;
      
      
      if (HEAP[$buff] == 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      HEAP[$0] = 0;
      __label__ = 15;
      break;
     case 14:
      var $90 = HEAP[$len_addr];
      var $91 = HEAP[$buff];
      var $92 = HEAP[$s_addr];
      _llvm_memcpy_p0i8_p0i8_i32($91, $92, $90, 1, 0);
      var $93 = HEAP[$parser_addr];
      var $94 = HEAP[$len_addr];
      var $95 = HEAP[$isFinal_addr];
      var $96 = _PyExpat_XML_ParseBuffer($93, $94, $95);
      HEAP[$0] = $96;
      __label__ = 15;
      break;
     case 15:
      var $97 = HEAP[$0];
      HEAP[$retval] = $97;
      __label__ = 16;
      break;
     case 16:
      var $retval15 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval15;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_ParseBuffer($parser, $len, $isFinal) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $len_addr = __stackBase__ + 4;
      var $isFinal_addr = __stackBase__ + 8;
      var $retval = __stackBase__ + 12;
      var $0 = __stackBase__ + 16;
      var $start = __stackBase__ + 20;
      var $result = __stackBase__ + 24;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$len_addr] = $len;
      HEAP[$isFinal_addr] = $isFinal;
      HEAP[$result] = 1;
      
      
      
      var $4 = HEAP[HEAP[$parser_addr] + 480];
      if ($4 == 2) {
        __label__ = 2;
        break;
      } else if ($4 == 3) {
        __label__ = 1;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      
      var $6 = HEAP[$parser_addr] + 284;
      HEAP[$6] = 33;
      HEAP[$0] = 0;
      __label__ = 10;
      break;
     case 2:
      
      var $8 = HEAP[$parser_addr] + 284;
      HEAP[$8] = 36;
      HEAP[$0] = 0;
      __label__ = 10;
      break;
     case 3:
      
      
      var $11 = HEAP[$parser_addr] + 480;
      HEAP[$11] = 1;
      
      
      var $14 = HEAP[HEAP[$parser_addr] + 24];
      HEAP[$start] = $14;
      
      var $16 = HEAP[$parser_addr] + 296;
      var $17 = HEAP[$start];
      HEAP[$16] = $17;
      
      
      
      
      var $22 = HEAP[HEAP[$parser_addr] + 28] + HEAP[$len_addr];
      
      var $24 = HEAP[$parser_addr] + 28;
      HEAP[$24] = $22;
      
      
      var $27 = HEAP[HEAP[$parser_addr] + 28];
      
      var $29 = HEAP[$parser_addr] + 40;
      HEAP[$29] = $27;
      
      
      
      
      var $34 = HEAP[HEAP[$parser_addr] + 36] + HEAP[$len_addr];
      
      var $36 = HEAP[$parser_addr] + 36;
      HEAP[$36] = $34;
      
      var $38 = HEAP[$isFinal_addr] & 255;
      
      
      var $41 = HEAP[$parser_addr] + 480 + 4;
      HEAP[$41] = $38;
      
      
      var $44 = HEAP[HEAP[$parser_addr] + 280];
      
      var $46 = HEAP[$parser_addr] + 24;
      
      
      var $49 = HEAP[HEAP[$parser_addr] + 40];
      var $50 = HEAP[$parser_addr];
      var $51 = HEAP[$start];
      var $52 = FUNCTION_TABLE[$44]($50, $51, $49, $46);
      
      var $54 = HEAP[$parser_addr] + 284;
      HEAP[$54] = $52;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 284] != 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      
      
      var $61 = HEAP[HEAP[$parser_addr] + 288];
      
      var $63 = HEAP[$parser_addr] + 292;
      HEAP[$63] = $61;
      
      var $65 = HEAP[$parser_addr] + 280;
      HEAP[$65] = FUNCTION_TABLE_OFFSET + 54;
      HEAP[$0] = 0;
      __label__ = 10;
      break;
     case 5:
      
      
      
      var $69 = HEAP[HEAP[$parser_addr] + 480];
      if ($69 == 0) {
        __label__ = 7;
        break;
      } else if ($69 == 1) {
        __label__ = 7;
        break;
      } else if ($69 == 3) {
        __label__ = 6;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 6:
      HEAP[$result] = 2;
      __label__ = 9;
      break;
     case 7:
      
      
      if (HEAP[$isFinal_addr] != 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      
      
      var $74 = HEAP[$parser_addr] + 480;
      HEAP[$74] = 2;
      var $75 = HEAP[$result];
      HEAP[$0] = $75;
      __label__ = 10;
      break;
     case 9:
      
      
      
      
      var $80 = HEAP[HEAP[HEAP[$parser_addr] + 144] + 52];
      
      var $82 = HEAP[$parser_addr] + 408;
      
      
      var $85 = HEAP[HEAP[$parser_addr] + 24];
      
      
      var $88 = HEAP[HEAP[$parser_addr] + 296];
      
      
      var $91 = HEAP[HEAP[$parser_addr] + 144];
      FUNCTION_TABLE[$80]($91, $88, $85, $82);
      
      
      var $94 = HEAP[HEAP[$parser_addr] + 24];
      
      var $96 = HEAP[$parser_addr] + 296;
      HEAP[$96] = $94;
      var $97 = HEAP[$result];
      HEAP[$0] = $97;
      __label__ = 10;
      break;
     case 10:
      var $98 = HEAP[$0];
      HEAP[$retval] = $98;
      __label__ = 11;
      break;
     case 11:
      var $retval10 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval10;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_GetBuffer($parser, $len) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 40;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $len_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      var $neededSize = __stackBase__ + 16;
      var $keep = __stackBase__ + 20;
      var $offset = __stackBase__ + 24;
      var $newBuf = __stackBase__ + 28;
      var $bufferSize = __stackBase__ + 32;
      var $keep16 = __stackBase__ + 36;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$len_addr] = $len;
      
      
      
      var $4 = HEAP[HEAP[$parser_addr] + 480];
      if ($4 == 2) {
        __label__ = 2;
        break;
      } else if ($4 == 3) {
        __label__ = 1;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      
      var $6 = HEAP[$parser_addr] + 284;
      HEAP[$6] = 33;
      HEAP[$0] = 0;
      __label__ = 21;
      break;
     case 2:
      
      var $8 = HEAP[$parser_addr] + 284;
      HEAP[$8] = 36;
      HEAP[$0] = 0;
      __label__ = 21;
      break;
     case 3:
      
      
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 32] - HEAP[HEAP[$parser_addr] + 28] < HEAP[$len_addr]) {
        __label__ = 4;
        break;
      } else {
        __label__ = 20;
        break;
      }
     case 4:
      
      
      
      
      
      
      
      
      
      
      var $30 = HEAP[HEAP[$parser_addr] + 28] - HEAP[HEAP[$parser_addr] + 24] + HEAP[$len_addr];
      HEAP[$neededSize] = $30;
      
      
      
      
      
      
      
      
      var $39 = HEAP[HEAP[$parser_addr] + 24] - HEAP[HEAP[$parser_addr] + 8];
      HEAP[$keep] = $39;
      
      
      if (HEAP[$keep] > 1024) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      HEAP[$keep] = 1024;
      __label__ = 6;
      break;
     case 6:
      
      
      var $44 = HEAP[$neededSize] + HEAP[$keep];
      HEAP[$neededSize] = $44;
      
      
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 32] - HEAP[HEAP[$parser_addr] + 8] >= HEAP[$neededSize]) {
        __label__ = 7;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 7:
      
      
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 24] - HEAP[HEAP[$parser_addr] + 8] > HEAP[$keep]) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      
      
      
      
      
      
      
      
      
      
      var $77 = HEAP[HEAP[$parser_addr] + 24] - HEAP[HEAP[$parser_addr] + 8] - HEAP[$keep];
      HEAP[$offset] = $77;
      
      
      
      
      
      
      
      
      
      
      var $88 = HEAP[HEAP[$parser_addr] + 28] - HEAP[HEAP[$parser_addr] + 24] + HEAP[$keep];
      
      
      
      
      var $93 = HEAP[HEAP[$parser_addr] + 8] + HEAP[$offset];
      
      
      var $96 = HEAP[HEAP[$parser_addr] + 8];
      _llvm_memmove_p0i8_p0i8_i32($96, $93, $88, 1, 0);
      
      
      
      
      
      var $102 = HEAP[HEAP[$parser_addr] + 28] + (0 - HEAP[$offset]);
      
      var $104 = HEAP[$parser_addr] + 28;
      HEAP[$104] = $102;
      
      
      
      
      
      var $110 = HEAP[HEAP[$parser_addr] + 24] + (0 - HEAP[$offset]);
      
      var $112 = HEAP[$parser_addr] + 24;
      HEAP[$112] = $110;
      __label__ = 9;
      break;
     case 9:
      __label__ = 20;
      break;
     case 10:
      
      
      
      
      
      
      
      
      var $121 = HEAP[HEAP[$parser_addr] + 32] - HEAP[HEAP[$parser_addr] + 24];
      HEAP[$bufferSize] = $121;
      
      
      if (HEAP[$bufferSize] == 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      HEAP[$bufferSize] = 1024;
      __label__ = 12;
      break;
     case 12:
      
      var $125 = HEAP[$bufferSize] * 2;
      HEAP[$bufferSize] = $125;
      
      
      
      if (HEAP[$bufferSize] < HEAP[$neededSize]) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 13:
      
      
      
      var $132 = HEAP[HEAP[$parser_addr] + 12];
      var $133 = HEAP[$bufferSize];
      var $134 = FUNCTION_TABLE[$132]($133);
      HEAP[$newBuf] = $134;
      
      
      if (HEAP[$newBuf] == 0) {
        __label__ = 14;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 14:
      
      var $138 = HEAP[$parser_addr] + 284;
      HEAP[$138] = 1;
      HEAP[$0] = 0;
      __label__ = 21;
      break;
     case 15:
      
      
      var $141 = HEAP[$newBuf] + HEAP[$bufferSize];
      
      var $143 = HEAP[$parser_addr] + 32;
      HEAP[$143] = $141;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 24] != 0) {
        __label__ = 16;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 16:
      
      
      
      
      
      
      
      
      var $156 = HEAP[HEAP[$parser_addr] + 24] - HEAP[HEAP[$parser_addr] + 8];
      HEAP[$keep16] = $156;
      
      
      if (HEAP[$keep16] > 1024) {
        __label__ = 17;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 17:
      HEAP[$keep16] = 1024;
      __label__ = 18;
      break;
     case 18:
      
      
      
      
      
      
      
      
      
      
      var $169 = HEAP[HEAP[$parser_addr] + 28] - HEAP[HEAP[$parser_addr] + 24] + HEAP[$keep16];
      
      
      
      
      
      var $175 = HEAP[HEAP[$parser_addr] + 24] + (0 - HEAP[$keep16]);
      var $176 = HEAP[$newBuf];
      _llvm_memcpy_p0i8_p0i8_i32($176, $175, $169, 1, 0);
      
      
      
      var $180 = HEAP[HEAP[$parser_addr] + 12 + 8];
      
      
      var $183 = HEAP[HEAP[$parser_addr] + 8];
      FUNCTION_TABLE[$180]($183);
      
      var $185 = HEAP[$parser_addr] + 8;
      var $186 = HEAP[$newBuf];
      HEAP[$185] = $186;
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      var $201 = HEAP[HEAP[$parser_addr] + 8] + (HEAP[HEAP[$parser_addr] + 28] - HEAP[HEAP[$parser_addr] + 24]) + HEAP[$keep16];
      
      var $203 = HEAP[$parser_addr] + 28;
      HEAP[$203] = $201;
      
      
      
      
      var $208 = HEAP[HEAP[$parser_addr] + 8] + HEAP[$keep16];
      
      var $210 = HEAP[$parser_addr] + 24;
      HEAP[$210] = $208;
      __label__ = 20;
      break;
     case 19:
      
      
      
      
      
      
      
      
      
      
      var $221 = HEAP[$newBuf] + (HEAP[HEAP[$parser_addr] + 28] - HEAP[HEAP[$parser_addr] + 24]);
      
      var $223 = HEAP[$parser_addr] + 28;
      HEAP[$223] = $221;
      
      var $225 = HEAP[$parser_addr] + 8;
      var $226 = HEAP[$newBuf];
      HEAP[$225] = $226;
      
      
      var $229 = HEAP[HEAP[$parser_addr] + 8];
      
      var $231 = HEAP[$parser_addr] + 24;
      HEAP[$231] = $229;
      __label__ = 20;
      break;
     case 20:
      
      
      var $234 = HEAP[HEAP[$parser_addr] + 28];
      HEAP[$0] = $234;
      __label__ = 21;
      break;
     case 21:
      var $235 = HEAP[$0];
      HEAP[$retval] = $235;
      __label__ = 22;
      break;
     case 22:
      var $retval22 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval22;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_StopParser($parser, $resumable) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 13;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 13);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $resumable_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 5;
      var $0 = __stackBase__ + 9;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$resumable_addr] = $resumable;
      
      
      
      var $4 = HEAP[HEAP[$parser_addr] + 480];
      if ($4 == 2) {
        __label__ = 4;
        break;
      } else if ($4 == 3) {
        __label__ = 1;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 1:
      
      
      if (HEAP[$resumable_addr] != 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      var $8 = HEAP[$parser_addr] + 284;
      HEAP[$8] = 33;
      HEAP[$0] = 0;
      __label__ = 11;
      break;
     case 3:
      
      
      var $11 = HEAP[$parser_addr] + 480;
      HEAP[$11] = 2;
      __label__ = 10;
      break;
     case 4:
      
      var $13 = HEAP[$parser_addr] + 284;
      HEAP[$13] = 36;
      HEAP[$0] = 0;
      __label__ = 11;
      break;
     case 5:
      
      
      if (HEAP[$resumable_addr] != 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 6:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 488] != 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      
      var $21 = HEAP[$parser_addr] + 284;
      HEAP[$21] = 37;
      HEAP[$0] = 0;
      __label__ = 11;
      break;
     case 8:
      
      
      var $24 = HEAP[$parser_addr] + 480;
      HEAP[$24] = 3;
      __label__ = 10;
      break;
     case 9:
      
      
      var $27 = HEAP[$parser_addr] + 480;
      HEAP[$27] = 2;
      __label__ = 10;
      break;
     case 10:
      HEAP[$0] = 1;
      __label__ = 11;
      break;
     case 11:
      var $28 = HEAP[$0];
      HEAP[$retval] = $28;
      __label__ = 12;
      break;
     case 12:
      var $retval11 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval11;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_ResumeParser($parser) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $retval = __stackBase__ + 4;
      var $0 = __stackBase__ + 8;
      var $result = __stackBase__ + 12;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$result] = 1;
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 480] != 3) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      
      var $7 = HEAP[$parser_addr] + 284;
      HEAP[$7] = 34;
      HEAP[$0] = 0;
      __label__ = 9;
      break;
     case 2:
      
      
      var $10 = HEAP[$parser_addr] + 480;
      HEAP[$10] = 1;
      
      
      var $13 = HEAP[HEAP[$parser_addr] + 280];
      
      var $15 = HEAP[$parser_addr] + 24;
      
      
      var $18 = HEAP[HEAP[$parser_addr] + 40];
      
      
      var $21 = HEAP[HEAP[$parser_addr] + 24];
      var $22 = HEAP[$parser_addr];
      var $23 = FUNCTION_TABLE[$13]($22, $21, $18, $15);
      
      var $25 = HEAP[$parser_addr] + 284;
      HEAP[$25] = $23;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 284] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      
      var $32 = HEAP[HEAP[$parser_addr] + 288];
      
      var $34 = HEAP[$parser_addr] + 292;
      HEAP[$34] = $32;
      
      var $36 = HEAP[$parser_addr] + 280;
      HEAP[$36] = FUNCTION_TABLE_OFFSET + 54;
      HEAP[$0] = 0;
      __label__ = 9;
      break;
     case 4:
      
      
      
      var $40 = HEAP[HEAP[$parser_addr] + 480];
      if ($40 == 0) {
        __label__ = 6;
        break;
      } else if ($40 == 1) {
        __label__ = 6;
        break;
      } else if ($40 == 3) {
        __label__ = 5;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 5:
      HEAP[$result] = 2;
      __label__ = 8;
      break;
     case 6:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 480 + 4] != 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      
      
      var $48 = HEAP[$parser_addr] + 480;
      HEAP[$48] = 2;
      var $49 = HEAP[$result];
      HEAP[$0] = $49;
      __label__ = 9;
      break;
     case 8:
      
      
      
      
      var $54 = HEAP[HEAP[HEAP[$parser_addr] + 144] + 52];
      
      var $56 = HEAP[$parser_addr] + 408;
      
      
      var $59 = HEAP[HEAP[$parser_addr] + 24];
      
      
      var $62 = HEAP[HEAP[$parser_addr] + 296];
      
      
      var $65 = HEAP[HEAP[$parser_addr] + 144];
      FUNCTION_TABLE[$54]($65, $62, $59, $56);
      
      
      var $68 = HEAP[HEAP[$parser_addr] + 24];
      
      var $70 = HEAP[$parser_addr] + 296;
      HEAP[$70] = $68;
      var $71 = HEAP[$result];
      HEAP[$0] = $71;
      __label__ = 9;
      break;
     case 9:
      var $72 = HEAP[$0];
      HEAP[$retval] = $72;
      __label__ = 10;
      break;
     case 10:
      var $retval9 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval9;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_GetParsingStatus($parser, $status) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $status_addr = __stackBase__ + 4;
      var $0 = __stackBase__ + 8;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$status_addr] = $status;
      
      
      if (HEAP[$status_addr] == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      ___assert_fail(__str188, __str1189, 1744, ___PRETTY_FUNCTION___3804);
      throw "Reached an unreachable!";
     case 2:
      
      var $4 = HEAP[$parser_addr] + 480;
      
      
      var $7 = HEAP[$4];
      HEAP[$0] = $7;
      
      
      var $10 = HEAP[$4 + 4];
      HEAP[$0 + 4] = $10;
      var $11 = HEAP[$status_addr];
      var $12 = $11;
      
      var $14 = HEAP[$0];
      HEAP[$12] = $14;
      var $15 = $11 + 4;
      
      var $17 = HEAP[$0 + 4];
      HEAP[$15] = $17;
      __label__ = 3;
      break;
     case 3:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_GetErrorCode($parser) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 12;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $retval = __stackBase__ + 4;
      var $0 = __stackBase__ + 8;
      
      HEAP[__stackBase__] = $parser;
      
      
      var $3 = HEAP[HEAP[__stackBase__] + 284];
      HEAP[$0] = $3;
      var $4 = HEAP[$0];
      HEAP[$retval] = $4;
      __label__ = 1;
      break;
     case 1:
      var $retval1 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval1;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_GetCurrentByteIndex($parser) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 12;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $retval = __stackBase__ + 4;
      var $0 = __stackBase__ + 8;
      
      HEAP[$parser_addr] = $parser;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 288] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      
      
      
      
      
      
      
      
      
      
      
      
      var $17 = HEAP[HEAP[$parser_addr] + 36] - (HEAP[HEAP[$parser_addr] + 40] - HEAP[HEAP[$parser_addr] + 288]);
      HEAP[$0] = $17;
      __label__ = 3;
      break;
     case 2:
      HEAP[$0] = -1;
      __label__ = 3;
      break;
     case 3:
      var $18 = HEAP[$0];
      HEAP[$retval] = $18;
      __label__ = 4;
      break;
     case 4:
      var $retval3 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval3;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_GetCurrentByteCount($parser) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 12;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $retval = __stackBase__ + 4;
      var $0 = __stackBase__ + 8;
      
      HEAP[$parser_addr] = $parser;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 292] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 288] != 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      
      
      
      
      
      
      
      var $17 = HEAP[HEAP[$parser_addr] + 292] - HEAP[HEAP[$parser_addr] + 288];
      HEAP[$0] = $17;
      __label__ = 4;
      break;
     case 3:
      HEAP[$0] = 0;
      __label__ = 4;
      break;
     case 4:
      var $18 = HEAP[$0];
      HEAP[$retval] = $18;
      __label__ = 5;
      break;
     case 5:
      var $retval4 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval4;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_GetInputContext($parser, $offset, $size) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 20;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $offset_addr = __stackBase__ + 4;
      var $size_addr = __stackBase__ + 8;
      var $retval = __stackBase__ + 12;
      var $0 = __stackBase__ + 16;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$offset_addr] = $offset;
      HEAP[$size_addr] = $size;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 288] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 8] != 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      
      
      
      
      
      
      
      var $17 = HEAP[HEAP[$parser_addr] + 288] - HEAP[HEAP[$parser_addr] + 8];
      var $18 = HEAP[$offset_addr];
      HEAP[$18] = $17;
      
      
      
      
      
      
      
      
      var $27 = HEAP[HEAP[$parser_addr] + 28] - HEAP[HEAP[$parser_addr] + 8];
      var $28 = HEAP[$size_addr];
      HEAP[$28] = $27;
      
      
      var $31 = HEAP[HEAP[$parser_addr] + 8];
      HEAP[$0] = $31;
      __label__ = 4;
      break;
     case 3:
      HEAP[$0] = 0;
      __label__ = 4;
      break;
     case 4:
      var $32 = HEAP[$0];
      HEAP[$retval] = $32;
      __label__ = 5;
      break;
     case 5:
      var $retval4 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval4;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_GetCurrentLineNumber($parser) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 12;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $retval = __stackBase__ + 4;
      var $0 = __stackBase__ + 8;
      
      HEAP[$parser_addr] = $parser;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 288] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      
      
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 288] >= HEAP[HEAP[$parser_addr] + 296]) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      
      
      
      var $16 = HEAP[HEAP[HEAP[$parser_addr] + 144] + 52];
      
      var $18 = HEAP[$parser_addr] + 408;
      
      
      var $21 = HEAP[HEAP[$parser_addr] + 288];
      
      
      var $24 = HEAP[HEAP[$parser_addr] + 296];
      
      
      var $27 = HEAP[HEAP[$parser_addr] + 144];
      FUNCTION_TABLE[$16]($27, $24, $21, $18);
      
      
      var $30 = HEAP[HEAP[$parser_addr] + 288];
      
      var $32 = HEAP[$parser_addr] + 296;
      HEAP[$32] = $30;
      __label__ = 3;
      break;
     case 3:
      
      
      
      
      var $37 = HEAP[HEAP[$parser_addr] + 408] + 1;
      HEAP[$0] = $37;
      var $38 = HEAP[$0];
      HEAP[$retval] = $38;
      __label__ = 4;
      break;
     case 4:
      var $retval3 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval3;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_GetCurrentColumnNumber($parser) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 12;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $retval = __stackBase__ + 4;
      var $0 = __stackBase__ + 8;
      
      HEAP[$parser_addr] = $parser;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 288] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      
      
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 288] >= HEAP[HEAP[$parser_addr] + 296]) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      
      
      
      var $16 = HEAP[HEAP[HEAP[$parser_addr] + 144] + 52];
      
      var $18 = HEAP[$parser_addr] + 408;
      
      
      var $21 = HEAP[HEAP[$parser_addr] + 288];
      
      
      var $24 = HEAP[HEAP[$parser_addr] + 296];
      
      
      var $27 = HEAP[HEAP[$parser_addr] + 144];
      FUNCTION_TABLE[$16]($27, $24, $21, $18);
      
      
      var $30 = HEAP[HEAP[$parser_addr] + 288];
      
      var $32 = HEAP[$parser_addr] + 296;
      HEAP[$32] = $30;
      __label__ = 3;
      break;
     case 3:
      
      
      
      var $36 = HEAP[HEAP[$parser_addr] + 408 + 4];
      HEAP[$0] = $36;
      var $37 = HEAP[$0];
      HEAP[$retval] = $37;
      __label__ = 4;
      break;
     case 4:
      var $retval3 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval3;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_FreeContentModel($parser, $model) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $model_addr = __stackBase__ + 4;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$model_addr] = $model;
      
      
      
      var $3 = HEAP[HEAP[$parser_addr] + 12 + 8];
      
      var $5 = HEAP[$model_addr];
      FUNCTION_TABLE[$3]($5);
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_MemMalloc($parser, $size) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $size_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$size_addr] = $size;
      
      
      
      var $4 = HEAP[HEAP[$parser_addr] + 12];
      var $5 = HEAP[$size_addr];
      var $6 = FUNCTION_TABLE[$4]($5);
      HEAP[$0] = $6;
      var $7 = HEAP[$0];
      HEAP[$retval] = $7;
      __label__ = 1;
      break;
     case 1:
      var $retval1 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval1;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_MemRealloc($parser, $ptr, $size) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 20;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $size_addr = __stackBase__ + 8;
      var $retval = __stackBase__ + 12;
      var $0 = __stackBase__ + 16;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$size_addr] = $size;
      
      
      
      var $4 = HEAP[HEAP[$parser_addr] + 12 + 4];
      var $5 = HEAP[$ptr_addr];
      var $6 = HEAP[$size_addr];
      var $7 = FUNCTION_TABLE[$4]($5, $6);
      HEAP[$0] = $7;
      var $8 = HEAP[$0];
      HEAP[$retval] = $8;
      __label__ = 1;
      break;
     case 1:
      var $retval1 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval1;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_MemFree($parser, $ptr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$ptr_addr] = $ptr;
      
      
      
      var $3 = HEAP[HEAP[$parser_addr] + 12 + 8];
      var $4 = HEAP[$ptr_addr];
      FUNCTION_TABLE[$3]($4);
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_DefaultCurrent($parser) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 4;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      
      HEAP[$parser_addr] = $parser;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 80] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 1:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 300] != 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      
      
      
      var $12 = HEAP[HEAP[HEAP[$parser_addr] + 300] + 4];
      
      
      
      
      var $17 = HEAP[HEAP[HEAP[$parser_addr] + 300]];
      
      
      var $20 = HEAP[HEAP[$parser_addr] + 228];
      var $21 = HEAP[$parser_addr];
      _reportDefault($21, $20, $17, $12);
      __label__ = 4;
      break;
     case 3:
      
      
      var $24 = HEAP[HEAP[$parser_addr] + 292];
      
      
      var $27 = HEAP[HEAP[$parser_addr] + 288];
      
      
      var $30 = HEAP[HEAP[$parser_addr] + 144];
      var $31 = HEAP[$parser_addr];
      _reportDefault($31, $30, $27, $24);
      __label__ = 4;
      break;
     case 4:
      __label__ = 5;
      break;
     case 5:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_ErrorString($code) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 12;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $code_addr = __stackBase__;
      var $retval = __stackBase__ + 4;
      var $0 = __stackBase__ + 8;
      
      HEAP[$code_addr] = $code;
      
      
      if (HEAP[$code_addr] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      
      
      if (HEAP[$code_addr] <= 40) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      
      var $7 = HEAP[_message_3952 + HEAP[$code_addr] * 4];
      HEAP[$0] = $7;
      __label__ = 4;
      break;
     case 3:
      HEAP[$0] = 0;
      __label__ = 4;
      break;
     case 4:
      var $8 = HEAP[$0];
      HEAP[$retval] = $8;
      __label__ = 5;
      break;
     case 5:
      var $retval4 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval4;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_ExpatVersion() {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $retval = __stackBase__;
      
      
      HEAP[__stackBase__ + 4] = __str42230;
      var $1 = HEAP[__stackBase__ + 4];
      HEAP[$retval] = $1;
      __label__ = 1;
      break;
     case 1:
      var $retval1 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval1;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_ExpatVersionInfo($agg_result) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 12;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $version = __stackBase__;
      
      
      HEAP[$version] = 2;
      
      HEAP[$version + 4] = 0;
      
      HEAP[$version + 8] = 0;
      
      
      var $5 = HEAP[$version];
      HEAP[$agg_result] = $5;
      
      
      var $8 = HEAP[$version + 4];
      HEAP[$agg_result + 4] = $8;
      
      
      var $11 = HEAP[$version + 8];
      HEAP[$agg_result + 8] = $11;
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XML_GetFeatureList() {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $retval = __stackBase__;
      
      
      HEAP[__stackBase__ + 4] = _features_3974;
      var $1 = HEAP[__stackBase__ + 4];
      HEAP[$retval] = $1;
      __label__ = 1;
      break;
     case 1:
      var $retval1 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval1;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _storeRawNames($parser) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 32;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $retval = __stackBase__ + 4;
      var $0 = __stackBase__ + 8;
      var $tag = __stackBase__ + 12;
      var $bufSize = __stackBase__ + 16;
      var $nameLen = __stackBase__ + 20;
      var $rawNameBuf = __stackBase__ + 24;
      var $temp = __stackBase__ + 28;
      
      HEAP[$parser_addr] = $parser;
      
      
      var $3 = HEAP[HEAP[$parser_addr] + 364];
      HEAP[$tag] = $3;
      __label__ = 11;
      break;
     case 1:
      
      
      
      
      var $8 = HEAP[HEAP[$tag] + 12 + 12] + 1;
      HEAP[$nameLen] = $8;
      
      
      
      
      var $13 = HEAP[HEAP[$tag] + 36] + HEAP[$nameLen];
      HEAP[$rawNameBuf] = $13;
      
      
      
      
      
      if (HEAP[HEAP[$tag] + 4] == HEAP[$rawNameBuf]) {
        __label__ = 12;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      
      
      
      
      var $23 = HEAP[HEAP[$tag] + 8] + HEAP[$nameLen];
      HEAP[$bufSize] = $23;
      
      
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$tag] + 40] - HEAP[HEAP[$tag] + 36] < HEAP[$bufSize]) {
        __label__ = 3;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 3:
      
      
      
      var $38 = HEAP[HEAP[$parser_addr] + 12 + 4];
      var $39 = HEAP[$bufSize];
      
      
      var $42 = HEAP[HEAP[$tag] + 36];
      var $43 = FUNCTION_TABLE[$38]($42, $39);
      HEAP[$temp] = $43;
      
      
      if (HEAP[$temp] == 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      HEAP[$0] = 0;
      __label__ = 13;
      break;
     case 5:
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$tag] + 12] == HEAP[HEAP[$tag] + 36]) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      
      
      var $56 = HEAP[$tag] + 12;
      var $57 = HEAP[$temp];
      HEAP[$56] = $57;
      __label__ = 7;
      break;
     case 7:
      
      
      
      
      
      if (HEAP[HEAP[$tag] + 12 + 4] != 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      
      
      
      
      
      
      
      
      
      
      
      var $74 = HEAP[$temp] + (HEAP[HEAP[$tag] + 12 + 4] - HEAP[HEAP[$tag] + 36]);
      
      
      var $77 = HEAP[$tag] + 12 + 4;
      HEAP[$77] = $74;
      __label__ = 9;
      break;
     case 9:
      
      var $79 = HEAP[$tag] + 36;
      var $80 = HEAP[$temp];
      HEAP[$79] = $80;
      
      
      var $83 = HEAP[$temp] + HEAP[$bufSize];
      
      var $85 = HEAP[$tag] + 40;
      HEAP[$85] = $83;
      
      
      var $88 = HEAP[$temp] + HEAP[$nameLen];
      HEAP[$rawNameBuf] = $88;
      __label__ = 10;
      break;
     case 10:
      
      
      var $91 = HEAP[HEAP[$tag] + 8];
      
      
      var $94 = HEAP[HEAP[$tag] + 4];
      var $95 = HEAP[$rawNameBuf];
      _llvm_memcpy_p0i8_p0i8_i32($95, $94, $91, 1, 0);
      
      var $97 = HEAP[$tag] + 4;
      var $98 = HEAP[$rawNameBuf];
      HEAP[$97] = $98;
      
      
      var $101 = HEAP[HEAP[$tag]];
      HEAP[$tag] = $101;
      __label__ = 11;
      break;
     case 11:
      
      
      if (HEAP[$tag] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 12:
      HEAP[$0] = 1;
      __label__ = 13;
      break;
     case 13:
      var $104 = HEAP[$0];
      HEAP[$retval] = $104;
      __label__ = 14;
      break;
     case 14:
      
      var $retval1314 = HEAP[$retval] & 255;
      STACKTOP = __stackBase__;
      return $retval1314;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _contentProcessor($parser, $start, $end, $endPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $start_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $endPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $result = __stackBase__ + 24;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$start_addr] = $start;
      HEAP[$end_addr] = $end;
      HEAP[$endPtr_addr] = $endPtr;
      
      
      
      
      
      
      
      
      var $9 = HEAP[HEAP[$parser_addr] + 144];
      var $10 = HEAP[$parser_addr];
      var $11 = HEAP[$start_addr];
      var $12 = HEAP[$end_addr];
      var $13 = HEAP[$endPtr_addr];
      var $14 = HEAP[HEAP[$parser_addr] + 480 + 4] == 0 & 255;
      var $15 = _doContent($10, 0, $9, $11, $12, $13, $14);
      HEAP[$result] = $15;
      
      
      if (HEAP[$result] == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      var $18 = HEAP[$parser_addr];
      var $19 = _storeRawNames($18);
      
      if ($19 == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      HEAP[$0] = 1;
      __label__ = 4;
      break;
     case 3:
      var $21 = HEAP[$result];
      HEAP[$0] = $21;
      __label__ = 4;
      break;
     case 4:
      var $22 = HEAP[$0];
      HEAP[$retval] = $22;
      __label__ = 5;
      break;
     case 5:
      var $retval4 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval4;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _externalEntityInitProcessor($parser, $start, $end, $endPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $start_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $endPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $result = __stackBase__ + 24;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$start_addr] = $start;
      HEAP[$end_addr] = $end;
      HEAP[$endPtr_addr] = $endPtr;
      var $1 = HEAP[$parser_addr];
      var $2 = _initializeEncoding($1);
      HEAP[$result] = $2;
      
      
      if (HEAP[$result] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      var $5 = HEAP[$result];
      HEAP[$0] = $5;
      __label__ = 3;
      break;
     case 2:
      
      var $7 = HEAP[$parser_addr] + 280;
      HEAP[$7] = FUNCTION_TABLE_OFFSET + 56;
      var $8 = HEAP[$parser_addr];
      var $9 = HEAP[$start_addr];
      var $10 = HEAP[$end_addr];
      var $11 = HEAP[$endPtr_addr];
      var $12 = _externalEntityInitProcessor2($8, $9, $10, $11);
      HEAP[$0] = $12;
      __label__ = 3;
      break;
     case 3:
      var $13 = HEAP[$0];
      HEAP[$retval] = $13;
      __label__ = 4;
      break;
     case 4:
      var $retval3 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval3;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _externalEntityInitProcessor2($parser, $start, $end, $endPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 32;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $start_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $endPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $next = __stackBase__ + 24;
      var $tok = __stackBase__ + 28;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$start_addr] = $start;
      HEAP[$end_addr] = $end;
      HEAP[$endPtr_addr] = $endPtr;
      var $1 = HEAP[$start_addr];
      HEAP[$next] = $1;
      
      
      
      
      
      var $7 = HEAP[HEAP[HEAP[$parser_addr] + 144] + 4];
      
      
      var $10 = HEAP[HEAP[$parser_addr] + 144];
      var $11 = HEAP[$start_addr];
      var $12 = HEAP[$end_addr];
      var $13 = FUNCTION_TABLE[$7]($10, $11, $12, $next);
      HEAP[$tok] = $13;
      var $14 = HEAP[$tok];
      if ($14 == -2) {
        __label__ = 8;
        break;
      } else if ($14 == -1) {
        __label__ = 5;
        break;
      } else if ($14 == 14) {
        __label__ = 1;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 1:
      
      
      
      if (HEAP[$next] == HEAP[$end_addr]) {
        __label__ = 2;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 2:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 480 + 4] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      var $23 = HEAP[$next];
      var $24 = HEAP[$endPtr_addr];
      HEAP[$24] = $23;
      HEAP[$0] = 0;
      __label__ = 12;
      break;
     case 4:
      var $25 = HEAP[$next];
      HEAP[$start_addr] = $25;
      __label__ = 11;
      break;
     case 5:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 480 + 4] == 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      var $31 = HEAP[$endPtr_addr];
      var $32 = HEAP[$start_addr];
      HEAP[$31] = $32;
      HEAP[$0] = 0;
      __label__ = 12;
      break;
     case 7:
      
      var $34 = HEAP[$parser_addr] + 288;
      var $35 = HEAP[$start_addr];
      HEAP[$34] = $35;
      HEAP[$0] = 5;
      __label__ = 12;
      break;
     case 8:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 480 + 4] == 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      var $41 = HEAP[$endPtr_addr];
      var $42 = HEAP[$start_addr];
      HEAP[$41] = $42;
      HEAP[$0] = 0;
      __label__ = 12;
      break;
     case 10:
      
      var $44 = HEAP[$parser_addr] + 288;
      var $45 = HEAP[$start_addr];
      HEAP[$44] = $45;
      HEAP[$0] = 6;
      __label__ = 12;
      break;
     case 11:
      
      var $47 = HEAP[$parser_addr] + 280;
      HEAP[$47] = FUNCTION_TABLE_OFFSET + 58;
      var $48 = HEAP[$parser_addr];
      var $49 = HEAP[$start_addr];
      var $50 = HEAP[$end_addr];
      var $51 = HEAP[$endPtr_addr];
      var $52 = _externalEntityInitProcessor3($48, $49, $50, $51);
      HEAP[$0] = $52;
      __label__ = 12;
      break;
     case 12:
      var $53 = HEAP[$0];
      HEAP[$retval] = $53;
      __label__ = 13;
      break;
     case 13:
      var $retval12 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval12;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _externalEntityInitProcessor3($parser, $start, $end, $endPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 36;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $start_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $endPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $tok = __stackBase__ + 24;
      var $next = __stackBase__ + 28;
      var $result = __stackBase__ + 32;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$start_addr] = $start;
      HEAP[$end_addr] = $end;
      HEAP[$endPtr_addr] = $endPtr;
      var $1 = HEAP[$start_addr];
      HEAP[$next] = $1;
      
      var $3 = HEAP[$parser_addr] + 288;
      var $4 = HEAP[$start_addr];
      HEAP[$3] = $4;
      
      
      
      
      
      var $10 = HEAP[HEAP[HEAP[$parser_addr] + 144] + 4];
      
      
      var $13 = HEAP[HEAP[$parser_addr] + 144];
      var $14 = HEAP[$start_addr];
      var $15 = HEAP[$end_addr];
      var $16 = FUNCTION_TABLE[$10]($13, $14, $15, $next);
      HEAP[$tok] = $16;
      var $17 = HEAP[$next];
      
      var $19 = HEAP[$parser_addr] + 292;
      HEAP[$19] = $17;
      var $20 = HEAP[$tok];
      if ($20 == -2) {
        __label__ = 10;
        break;
      } else if ($20 == -1) {
        __label__ = 7;
        break;
      } else if ($20 == 12) {
        __label__ = 1;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 1:
      var $21 = HEAP[$next];
      var $22 = HEAP[$parser_addr];
      var $23 = HEAP[$start_addr];
      var $24 = _processXmlDecl($22, 1, $23, $21);
      HEAP[$result] = $24;
      
      
      if (HEAP[$result] != 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      var $27 = HEAP[$result];
      HEAP[$0] = $27;
      __label__ = 14;
      break;
     case 3:
      
      
      
      var $31 = HEAP[HEAP[$parser_addr] + 480];
      if ($31 == 2) {
        __label__ = 5;
        break;
      } else if ($31 == 3) {
        __label__ = 4;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 4:
      var $32 = HEAP[$next];
      var $33 = HEAP[$endPtr_addr];
      HEAP[$33] = $32;
      HEAP[$0] = 0;
      __label__ = 14;
      break;
     case 5:
      HEAP[$0] = 35;
      __label__ = 14;
      break;
     case 6:
      var $34 = HEAP[$next];
      HEAP[$start_addr] = $34;
      __label__ = 13;
      break;
     case 7:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 480 + 4] == 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      var $40 = HEAP[$endPtr_addr];
      var $41 = HEAP[$start_addr];
      HEAP[$40] = $41;
      HEAP[$0] = 0;
      __label__ = 14;
      break;
     case 9:
      HEAP[$0] = 5;
      __label__ = 14;
      break;
     case 10:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 480 + 4] == 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      var $47 = HEAP[$endPtr_addr];
      var $48 = HEAP[$start_addr];
      HEAP[$47] = $48;
      HEAP[$0] = 0;
      __label__ = 14;
      break;
     case 12:
      HEAP[$0] = 6;
      __label__ = 14;
      break;
     case 13:
      
      var $50 = HEAP[$parser_addr] + 280;
      HEAP[$50] = FUNCTION_TABLE_OFFSET + 60;
      
      var $52 = HEAP[$parser_addr] + 312;
      HEAP[$52] = 1;
      var $53 = HEAP[$parser_addr];
      var $54 = HEAP[$start_addr];
      var $55 = HEAP[$end_addr];
      var $56 = HEAP[$endPtr_addr];
      var $57 = _externalEntityContentProcessor($53, $54, $55, $56);
      HEAP[$0] = $57;
      __label__ = 14;
      break;
     case 14:
      var $58 = HEAP[$0];
      HEAP[$retval] = $58;
      __label__ = 15;
      break;
     case 15:
      var $retval14 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval14;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _externalEntityContentProcessor($parser, $start, $end, $endPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $start_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $endPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $result = __stackBase__ + 24;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$start_addr] = $start;
      HEAP[$end_addr] = $end;
      HEAP[$endPtr_addr] = $endPtr;
      
      
      
      
      
      
      
      
      var $9 = HEAP[HEAP[$parser_addr] + 144];
      var $10 = HEAP[$parser_addr];
      var $11 = HEAP[$start_addr];
      var $12 = HEAP[$end_addr];
      var $13 = HEAP[$endPtr_addr];
      var $14 = HEAP[HEAP[$parser_addr] + 480 + 4] == 0 & 255;
      var $15 = _doContent($10, 1, $9, $11, $12, $13, $14);
      HEAP[$result] = $15;
      
      
      if (HEAP[$result] == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      var $18 = HEAP[$parser_addr];
      var $19 = _storeRawNames($18);
      
      if ($19 == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      HEAP[$0] = 1;
      __label__ = 4;
      break;
     case 3:
      var $21 = HEAP[$result];
      HEAP[$0] = $21;
      __label__ = 4;
      break;
     case 4:
      var $22 = HEAP[$0];
      HEAP[$retval] = $22;
      __label__ = 5;
      break;
     case 5:
      var $retval4 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval4;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _doContent($parser, $startTagLevel, $enc, $s, $end, $nextPtr, $haveMore) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 193;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 193);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $startTagLevel_addr = __stackBase__ + 4;
      var $enc_addr = __stackBase__ + 8;
      var $s_addr = __stackBase__ + 12;
      var $end_addr = __stackBase__ + 16;
      var $nextPtr_addr = __stackBase__ + 20;
      var $haveMore_addr = __stackBase__ + 24;
      var $retval = __stackBase__ + 25;
      var $0 = __stackBase__ + 29;
      var $dtd = __stackBase__ + 33;
      var $eventPP = __stackBase__ + 37;
      var $eventEndPP = __stackBase__ + 41;
      var $next = __stackBase__ + 45;
      var $tok = __stackBase__ + 49;
      var $c = __stackBase__ + 53;
      var $name = __stackBase__ + 54;
      var $entity = __stackBase__ + 58;
      var $ch = __stackBase__ + 62;
      var $result = __stackBase__ + 63;
      var $context = __stackBase__ + 67;
      var $tag = __stackBase__ + 71;
      var $result74 = __stackBase__ + 75;
      var $toPtr = __stackBase__ + 79;
      var $rawNameEnd = __stackBase__ + 83;
      var $fromPtr = __stackBase__ + 87;
      var $bufSize = __stackBase__ + 91;
      var $convLen = __stackBase__ + 95;
      var $temp = __stackBase__ + 99;
      var $rawName = __stackBase__ + 103;
      var $result94 = __stackBase__ + 107;
      var $bindings = __stackBase__ + 111;
      var $noElmHandlers = __stackBase__ + 115;
      var $name95 = __stackBase__ + 116;
      var $b = __stackBase__ + 140;
      var $len = __stackBase__ + 144;
      var $rawName119 = __stackBase__ + 148;
      var $tag120 = __stackBase__ + 152;
      var $localPart = __stackBase__ + 156;
      var $prefix = __stackBase__ + 160;
      var $uri = __stackBase__ + 164;
      var $b140 = __stackBase__ + 168;
      var $n = __stackBase__ + 172;
      var $buf = __stackBase__ + 176;
      var $c159 = __stackBase__ + 180;
      var $result164 = __stackBase__ + 181;
      var $dataPtr = __stackBase__ + 185;
      var $dataPtr190 = __stackBase__ + 189;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$startTagLevel_addr] = $startTagLevel;
      HEAP[$enc_addr] = $enc;
      HEAP[$s_addr] = $s;
      HEAP[$end_addr] = $end;
      HEAP[$nextPtr_addr] = $nextPtr;
      HEAP[$haveMore_addr] = $haveMore;
      
      
      var $3 = HEAP[HEAP[$parser_addr] + 356];
      HEAP[$dtd] = $3;
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 144] == HEAP[$enc_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      
      var $10 = HEAP[$parser_addr] + 288;
      HEAP[$eventPP] = $10;
      
      var $12 = HEAP[$parser_addr] + 292;
      HEAP[$eventEndPP] = $12;
      __label__ = 3;
      break;
     case 2:
      
      
      
      var $16 = HEAP[HEAP[$parser_addr] + 300];
      HEAP[$eventPP] = $16;
      
      
      
      var $20 = HEAP[HEAP[$parser_addr] + 300] + 4;
      HEAP[$eventEndPP] = $20;
      __label__ = 3;
      break;
     case 3:
      var $21 = HEAP[$s_addr];
      var $22 = HEAP[$eventPP];
      HEAP[$22] = $21;
      __label__ = 4;
      break;
     case 4:
      var $23 = HEAP[$s_addr];
      HEAP[$next] = $23;
      
      
      
      var $27 = HEAP[HEAP[$enc_addr] + 4];
      var $28 = HEAP[$s_addr];
      var $29 = HEAP[$enc_addr];
      var $30 = HEAP[$end_addr];
      var $31 = FUNCTION_TABLE[$27]($29, $28, $30, $next);
      HEAP[$tok] = $31;
      var $32 = HEAP[$next];
      var $33 = HEAP[$eventEndPP];
      HEAP[$33] = $32;
      var $34 = HEAP[$tok];
      if ($34 == -5) {
        __label__ = 164;
        break;
      } else if ($34 == -4) {
        __label__ = 16;
        break;
      } else if ($34 == -3) {
        __label__ = 5;
        break;
      } else if ($34 == -2) {
        __label__ = 27;
        break;
      } else if ($34 == -1) {
        __label__ = 24;
        break;
      } else if ($34 == 0) {
        __label__ = 23;
        break;
      } else if ($34 == 1) {
        __label__ = 74;
        break;
      } else if ($34 == 2) {
        __label__ = 74;
        break;
      } else if ($34 == 3) {
        __label__ = 93;
        break;
      } else if ($34 == 4) {
        __label__ = 93;
        break;
      } else if ($34 == 5) {
        __label__ = 114;
        break;
      } else if ($34 == 6) {
        __label__ = 178;
        break;
      } else if ($34 == 7) {
        __label__ = 150;
        break;
      } else if ($34 == 8) {
        __label__ = 155;
        break;
      } else if ($34 == 9) {
        __label__ = 30;
        break;
      } else if ($34 == 10) {
        __label__ = 142;
        break;
      } else if ($34 == 11) {
        __label__ = 188;
        break;
      } else if ($34 == 12) {
        __label__ = 149;
        break;
      } else if ($34 == 13) {
        __label__ = 191;
        break;
      } else {
        __label__ = 194;
        break;
      }
     case 5:
      
      
      if (HEAP[$haveMore_addr] != 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      var $37 = HEAP[$s_addr];
      var $38 = HEAP[$nextPtr_addr];
      HEAP[$38] = $37;
      HEAP[$0] = 0;
      __label__ = 200;
      break;
     case 7:
      var $39 = HEAP[$eventEndPP];
      var $40 = HEAP[$end_addr];
      HEAP[$39] = $40;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 60] != 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      HEAP[$c] = 10;
      
      
      var $47 = HEAP[HEAP[$parser_addr] + 60];
      
      
      var $50 = HEAP[HEAP[$parser_addr] + 4];
      FUNCTION_TABLE[$47]($50, $c, 1);
      __label__ = 11;
      break;
     case 9:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 80] != 0) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      var $55 = HEAP[$s_addr];
      var $56 = HEAP[$parser_addr];
      var $57 = HEAP[$enc_addr];
      var $58 = HEAP[$end_addr];
      _reportDefault($56, $57, $55, $58);
      __label__ = 11;
      break;
     case 11:
      
      
      if (HEAP[$startTagLevel_addr] == 0) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      HEAP[$0] = 3;
      __label__ = 200;
      break;
     case 13:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 312] != HEAP[$startTagLevel_addr]) {
        __label__ = 14;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 14:
      HEAP[$0] = 13;
      __label__ = 200;
      break;
     case 15:
      var $66 = HEAP[$nextPtr_addr];
      var $67 = HEAP[$end_addr];
      HEAP[$66] = $67;
      HEAP[$0] = 0;
      __label__ = 200;
      break;
     case 16:
      
      
      if (HEAP[$haveMore_addr] != 0) {
        __label__ = 17;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 17:
      var $70 = HEAP[$s_addr];
      var $71 = HEAP[$nextPtr_addr];
      HEAP[$71] = $70;
      HEAP[$0] = 0;
      __label__ = 200;
      break;
     case 18:
      
      
      if (HEAP[$startTagLevel_addr] > 0) {
        __label__ = 19;
        break;
      } else {
        __label__ = 22;
        break;
      }
     case 19:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 312] != HEAP[$startTagLevel_addr]) {
        __label__ = 20;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 20:
      HEAP[$0] = 13;
      __label__ = 200;
      break;
     case 21:
      var $79 = HEAP[$s_addr];
      var $80 = HEAP[$nextPtr_addr];
      HEAP[$80] = $79;
      HEAP[$0] = 0;
      __label__ = 200;
      break;
     case 22:
      HEAP[$0] = 3;
      __label__ = 200;
      break;
     case 23:
      var $81 = HEAP[$next];
      var $82 = HEAP[$eventPP];
      HEAP[$82] = $81;
      HEAP[$0] = 4;
      __label__ = 200;
      break;
     case 24:
      
      
      if (HEAP[$haveMore_addr] != 0) {
        __label__ = 25;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 25:
      var $85 = HEAP[$s_addr];
      var $86 = HEAP[$nextPtr_addr];
      HEAP[$86] = $85;
      HEAP[$0] = 0;
      __label__ = 200;
      break;
     case 26:
      HEAP[$0] = 5;
      __label__ = 200;
      break;
     case 27:
      
      
      if (HEAP[$haveMore_addr] != 0) {
        __label__ = 28;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 28:
      var $89 = HEAP[$s_addr];
      var $90 = HEAP[$nextPtr_addr];
      HEAP[$90] = $89;
      HEAP[$0] = 0;
      __label__ = 200;
      break;
     case 29:
      HEAP[$0] = 6;
      __label__ = 200;
      break;
     case 30:
      
      
      var $93 = HEAP[HEAP[$enc_addr] + 48];
      
      
      
      
      
      var $99 = HEAP[$next] + (0 - HEAP[HEAP[$enc_addr] + 68]);
      
      
      
      
      var $104 = HEAP[$s_addr] + HEAP[HEAP[$enc_addr] + 68];
      var $105 = HEAP[$enc_addr];
      var $106 = FUNCTION_TABLE[$93]($105, $104, $99);
      var $107 = $106 & 255;
      HEAP[$ch] = $107;
      
      
      if (HEAP[$ch] != 0) {
        __label__ = 31;
        break;
      } else {
        __label__ = 36;
        break;
      }
     case 31:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 60] != 0) {
        __label__ = 32;
        break;
      } else {
        __label__ = 33;
        break;
      }
     case 32:
      
      
      var $116 = HEAP[HEAP[$parser_addr] + 60];
      
      
      var $119 = HEAP[HEAP[$parser_addr] + 4];
      FUNCTION_TABLE[$116]($119, $ch, 1);
      __label__ = 35;
      break;
     case 33:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 80] != 0) {
        __label__ = 34;
        break;
      } else {
        __label__ = 35;
        break;
      }
     case 34:
      var $124 = HEAP[$next];
      var $125 = HEAP[$s_addr];
      var $126 = HEAP[$parser_addr];
      var $127 = HEAP[$enc_addr];
      _reportDefault($126, $127, $125, $124);
      __label__ = 35;
      break;
     case 35:
      __label__ = 196;
      break;
     case 36:
      
      
      
      
      
      var $133 = HEAP[$next] + (0 - HEAP[HEAP[$enc_addr] + 68]);
      
      
      
      
      var $138 = HEAP[$s_addr] + HEAP[HEAP[$enc_addr] + 68];
      
      var $140 = HEAP[$dtd] + 80;
      var $141 = HEAP[$enc_addr];
      var $142 = _poolStoreString($140, $141, $138, $133);
      HEAP[$name] = $142;
      
      
      if (HEAP[$name] == 0) {
        __label__ = 37;
        break;
      } else {
        __label__ = 38;
        break;
      }
     case 37:
      HEAP[$0] = 1;
      __label__ = 200;
      break;
     case 38:
      
      var $146 = HEAP[$dtd];
      var $147 = HEAP[$name];
      var $148 = _lookup($146, $147, 0);
      var $149 = $148;
      HEAP[$entity] = $149;
      
      
      
      var $153 = HEAP[HEAP[$dtd] + 80 + 16];
      
      
      var $156 = HEAP[$dtd] + 80 + 12;
      HEAP[$156] = $153;
      
      
      
      
      if (HEAP[HEAP[$dtd] + 129] == 0) {
        __label__ = 40;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 39:
      
      
      
      
      if (HEAP[HEAP[$dtd] + 130] != 0) {
        __label__ = 40;
        break;
      } else {
        __label__ = 45;
        break;
      }
     case 40:
      
      
      if (HEAP[$entity] == 0) {
        __label__ = 41;
        break;
      } else {
        __label__ = 42;
        break;
      }
     case 41:
      HEAP[$0] = 11;
      __label__ = 200;
      break;
     case 42:
      
      
      
      
      if (HEAP[HEAP[$entity] + 34] == 0) {
        __label__ = 43;
        break;
      } else {
        __label__ = 44;
        break;
      }
     case 43:
      HEAP[$0] = 24;
      __label__ = 200;
      break;
     case 44:
      __label__ = 51;
      break;
     case 45:
      
      
      if (HEAP[$entity] == 0) {
        __label__ = 46;
        break;
      } else {
        __label__ = 51;
        break;
      }
     case 46:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 120] != 0) {
        __label__ = 47;
        break;
      } else {
        __label__ = 48;
        break;
      }
     case 47:
      
      
      var $179 = HEAP[HEAP[$parser_addr] + 120];
      
      
      var $182 = HEAP[HEAP[$parser_addr] + 4];
      var $183 = HEAP[$name];
      FUNCTION_TABLE[$179]($182, $183, 0);
      __label__ = 50;
      break;
     case 48:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 80] != 0) {
        __label__ = 49;
        break;
      } else {
        __label__ = 50;
        break;
      }
     case 49:
      var $188 = HEAP[$next];
      var $189 = HEAP[$s_addr];
      var $190 = HEAP[$parser_addr];
      var $191 = HEAP[$enc_addr];
      _reportDefault($190, $191, $189, $188);
      __label__ = 50;
      break;
     case 50:
      __label__ = 196;
      break;
     case 51:
      
      
      
      
      if (HEAP[HEAP[$entity] + 32] != 0) {
        __label__ = 52;
        break;
      } else {
        __label__ = 53;
        break;
      }
     case 52:
      HEAP[$0] = 12;
      __label__ = 200;
      break;
     case 53:
      
      
      
      
      if (HEAP[HEAP[$entity] + 28] != 0) {
        __label__ = 54;
        break;
      } else {
        __label__ = 55;
        break;
      }
     case 54:
      HEAP[$0] = 15;
      __label__ = 200;
      break;
     case 55:
      
      
      
      
      if (HEAP[HEAP[$entity] + 4] != 0) {
        __label__ = 56;
        break;
      } else {
        __label__ = 65;
        break;
      }
     case 56:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 308] == 0) {
        __label__ = 57;
        break;
      } else {
        __label__ = 62;
        break;
      }
     case 57:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 120] != 0) {
        __label__ = 58;
        break;
      } else {
        __label__ = 59;
        break;
      }
     case 58:
      
      
      var $214 = HEAP[HEAP[$parser_addr] + 120];
      
      
      var $217 = HEAP[HEAP[$entity]];
      
      
      var $220 = HEAP[HEAP[$parser_addr] + 4];
      FUNCTION_TABLE[$214]($220, $217, 0);
      __label__ = 61;
      break;
     case 59:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 80] != 0) {
        __label__ = 60;
        break;
      } else {
        __label__ = 61;
        break;
      }
     case 60:
      var $225 = HEAP[$next];
      var $226 = HEAP[$s_addr];
      var $227 = HEAP[$parser_addr];
      var $228 = HEAP[$enc_addr];
      _reportDefault($227, $228, $226, $225);
      __label__ = 61;
      break;
     case 61:
      __label__ = 196;
      break;
     case 62:
      var $229 = HEAP[$parser_addr];
      var $230 = HEAP[$entity];
      var $231 = _processInternalEntity($229, $230, 0);
      HEAP[$result] = $231;
      
      
      if (HEAP[$result] != 0) {
        __label__ = 63;
        break;
      } else {
        __label__ = 64;
        break;
      }
     case 63:
      var $234 = HEAP[$result];
      HEAP[$0] = $234;
      __label__ = 200;
      break;
     case 64:
      __label__ = 73;
      break;
     case 65:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 112] != 0) {
        __label__ = 66;
        break;
      } else {
        __label__ = 71;
        break;
      }
     case 66:
      
      var $240 = HEAP[$entity] + 32;
      HEAP[$240] = 1;
      var $241 = HEAP[$parser_addr];
      var $242 = _getContext($241);
      HEAP[$context] = $242;
      
      var $244 = HEAP[$entity] + 32;
      HEAP[$244] = 0;
      
      
      if (HEAP[$context] == 0) {
        __label__ = 67;
        break;
      } else {
        __label__ = 68;
        break;
      }
     case 67:
      HEAP[$0] = 1;
      __label__ = 200;
      break;
     case 68:
      
      
      var $249 = HEAP[HEAP[$parser_addr] + 112];
      
      
      var $252 = HEAP[HEAP[$entity] + 24];
      
      
      var $255 = HEAP[HEAP[$entity] + 16];
      
      
      var $258 = HEAP[HEAP[$entity] + 20];
      
      
      var $261 = HEAP[HEAP[$parser_addr] + 116];
      var $262 = HEAP[$context];
      var $263 = FUNCTION_TABLE[$249]($261, $262, $258, $255, $252);
      
      if ($263 == 0) {
        __label__ = 69;
        break;
      } else {
        __label__ = 70;
        break;
      }
     case 69:
      HEAP[$0] = 21;
      __label__ = 200;
      break;
     case 70:
      
      
      
      var $268 = HEAP[HEAP[$parser_addr] + 416 + 16];
      
      
      var $271 = HEAP[$parser_addr] + 416 + 12;
      HEAP[$271] = $268;
      __label__ = 73;
      break;
     case 71:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 80] != 0) {
        __label__ = 72;
        break;
      } else {
        __label__ = 73;
        break;
      }
     case 72:
      var $276 = HEAP[$next];
      var $277 = HEAP[$s_addr];
      var $278 = HEAP[$parser_addr];
      var $279 = HEAP[$enc_addr];
      _reportDefault($278, $279, $277, $276);
      __label__ = 73;
      break;
     case 73:
      __label__ = 196;
      break;
     case 74:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 368] != 0) {
        __label__ = 75;
        break;
      } else {
        __label__ = 76;
        break;
      }
     case 75:
      
      
      var $286 = HEAP[HEAP[$parser_addr] + 368];
      HEAP[$tag] = $286;
      
      
      
      
      var $291 = HEAP[HEAP[HEAP[$parser_addr] + 368]];
      
      var $293 = HEAP[$parser_addr] + 368;
      HEAP[$293] = $291;
      __label__ = 81;
      break;
     case 76:
      
      
      
      var $297 = HEAP[HEAP[$parser_addr] + 12];
      var $298 = FUNCTION_TABLE[$297](48);
      var $299 = $298;
      HEAP[$tag] = $299;
      
      
      if (HEAP[$tag] == 0) {
        __label__ = 77;
        break;
      } else {
        __label__ = 78;
        break;
      }
     case 77:
      HEAP[$0] = 1;
      __label__ = 200;
      break;
     case 78:
      
      
      
      var $305 = HEAP[HEAP[$parser_addr] + 12];
      var $306 = FUNCTION_TABLE[$305](32);
      
      var $308 = HEAP[$tag] + 36;
      HEAP[$308] = $306;
      
      
      
      
      if (HEAP[HEAP[$tag] + 36] == 0) {
        __label__ = 79;
        break;
      } else {
        __label__ = 80;
        break;
      }
     case 79:
      
      
      
      var $316 = HEAP[HEAP[$parser_addr] + 12 + 8];
      
      var $318 = HEAP[$tag];
      FUNCTION_TABLE[$316]($318);
      HEAP[$0] = 1;
      __label__ = 200;
      break;
     case 80:
      
      
      
      var $322 = HEAP[HEAP[$tag] + 36] + 32;
      
      var $324 = HEAP[$tag] + 40;
      HEAP[$324] = $322;
      __label__ = 81;
      break;
     case 81:
      
      var $326 = HEAP[$tag] + 44;
      HEAP[$326] = 0;
      
      
      var $329 = HEAP[HEAP[$parser_addr] + 364];
      
      var $331 = HEAP[$tag];
      HEAP[$331] = $329;
      
      var $333 = HEAP[$parser_addr] + 364;
      var $334 = HEAP[$tag];
      HEAP[$333] = $334;
      
      
      var $337 = HEAP[$tag] + 12 + 4;
      HEAP[$337] = 0;
      
      
      var $340 = HEAP[$tag] + 12 + 8;
      HEAP[$340] = 0;
      
      
      
      
      var $345 = HEAP[$s_addr] + HEAP[HEAP[$enc_addr] + 68];
      
      var $347 = HEAP[$tag] + 4;
      HEAP[$347] = $345;
      
      
      var $350 = HEAP[HEAP[$enc_addr] + 32];
      
      
      var $353 = HEAP[HEAP[$tag] + 4];
      var $354 = HEAP[$enc_addr];
      var $355 = FUNCTION_TABLE[$350]($354, $353);
      
      var $357 = HEAP[$tag] + 8;
      HEAP[$357] = $355;
      
      
      
      var $361 = HEAP[HEAP[$parser_addr] + 312] + 1;
      
      var $363 = HEAP[$parser_addr] + 312;
      HEAP[$363] = $361;
      
      
      
      
      
      
      var $370 = HEAP[HEAP[$tag] + 4] + HEAP[HEAP[$tag] + 8];
      HEAP[$rawNameEnd] = $370;
      
      
      var $373 = HEAP[HEAP[$tag] + 4];
      HEAP[$fromPtr] = $373;
      
      
      var $376 = HEAP[HEAP[$tag] + 36];
      HEAP[$toPtr] = $376;
      __label__ = 82;
      break;
     case 82:
      
      
      var $379 = HEAP[HEAP[$enc_addr] + 60];
      
      
      
      var $383 = HEAP[HEAP[$tag] + 40] + -1;
      var $384 = HEAP[$enc_addr];
      var $385 = HEAP[$rawNameEnd];
      FUNCTION_TABLE[$379]($384, $fromPtr, $385, $toPtr, $383);
      
      
      
      
      
      
      var $392 = HEAP[$toPtr] - HEAP[HEAP[$tag] + 36];
      HEAP[$convLen] = $392;
      
      
      
      if (HEAP[$fromPtr] == HEAP[$rawNameEnd]) {
        __label__ = 83;
        break;
      } else {
        __label__ = 84;
        break;
      }
     case 83:
      
      
      var $398 = HEAP[$tag] + 12 + 12;
      var $399 = HEAP[$convLen];
      HEAP[$398] = $399;
      
      
      var $402 = HEAP[HEAP[$tag] + 36];
      
      
      var $405 = HEAP[$tag] + 12;
      HEAP[$405] = $402;
      var $406 = HEAP[$toPtr];
      HEAP[$406] = 0;
      
      var $408 = HEAP[$tag] + 44;
      
      var $410 = HEAP[$tag] + 12;
      var $411 = HEAP[$s_addr];
      var $412 = HEAP[$parser_addr];
      var $413 = HEAP[$enc_addr];
      var $414 = _storeAtts($412, $413, $411, $410, $408);
      HEAP[$result74] = $414;
      
      
      if (HEAP[$result74] != 0) {
        __label__ = 87;
        break;
      } else {
        __label__ = 88;
        break;
      }
     case 84:
      
      
      
      
      
      
      
      
      
      var $426 = HEAP[HEAP[$tag] + 40] - HEAP[HEAP[$tag] + 36] << 1;
      HEAP[$bufSize] = $426;
      
      
      
      var $430 = HEAP[HEAP[$parser_addr] + 12 + 4];
      var $431 = HEAP[$bufSize];
      
      
      var $434 = HEAP[HEAP[$tag] + 36];
      var $435 = FUNCTION_TABLE[$430]($434, $431);
      HEAP[$temp] = $435;
      
      
      if (HEAP[$temp] == 0) {
        __label__ = 85;
        break;
      } else {
        __label__ = 86;
        break;
      }
     case 85:
      HEAP[$0] = 1;
      __label__ = 200;
      break;
     case 86:
      
      var $439 = HEAP[$tag] + 36;
      var $440 = HEAP[$temp];
      HEAP[$439] = $440;
      
      
      var $443 = HEAP[$temp] + HEAP[$bufSize];
      
      var $445 = HEAP[$tag] + 40;
      HEAP[$445] = $443;
      
      
      var $448 = HEAP[$temp] + HEAP[$convLen];
      HEAP[$toPtr] = $448;
      __label__ = 82;
      break;
     case 87:
      var $449 = HEAP[$result74];
      HEAP[$0] = $449;
      __label__ = 200;
      break;
     case 88:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 52] != 0) {
        __label__ = 89;
        break;
      } else {
        __label__ = 90;
        break;
      }
     case 89:
      
      
      var $456 = HEAP[HEAP[$parser_addr] + 52];
      
      
      
      var $460 = HEAP[HEAP[$parser_addr] + 392];
      
      
      
      var $464 = HEAP[HEAP[$tag] + 12];
      
      
      var $467 = HEAP[HEAP[$parser_addr] + 4];
      FUNCTION_TABLE[$456]($467, $464, $460);
      __label__ = 92;
      break;
     case 90:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 80] != 0) {
        __label__ = 91;
        break;
      } else {
        __label__ = 92;
        break;
      }
     case 91:
      var $472 = HEAP[$next];
      var $473 = HEAP[$s_addr];
      var $474 = HEAP[$parser_addr];
      var $475 = HEAP[$enc_addr];
      _reportDefault($474, $475, $473, $472);
      __label__ = 92;
      break;
     case 92:
      
      var $477 = HEAP[$parser_addr] + 416;
      _poolClear($477);
      __label__ = 196;
      break;
     case 93:
      
      
      
      
      var $482 = HEAP[$s_addr] + HEAP[HEAP[$enc_addr] + 68];
      HEAP[$rawName] = $482;
      HEAP[$bindings] = 0;
      HEAP[$noElmHandlers] = 1;
      
      
      var $485 = HEAP[HEAP[$enc_addr] + 32];
      var $486 = HEAP[$enc_addr];
      var $487 = HEAP[$rawName];
      var $488 = FUNCTION_TABLE[$485]($486, $487);
      
      var $490 = HEAP[$rawName] + $488;
      
      var $492 = HEAP[$parser_addr] + 416;
      var $493 = HEAP[$enc_addr];
      var $494 = HEAP[$rawName];
      var $495 = _poolStoreString($492, $493, $494, $490);
      
      HEAP[$name95] = $495;
      
      
      
      if (HEAP[$name95] == 0) {
        __label__ = 94;
        break;
      } else {
        __label__ = 95;
        break;
      }
     case 94:
      HEAP[$0] = 1;
      __label__ = 200;
      break;
     case 95:
      
      
      
      var $503 = HEAP[HEAP[$parser_addr] + 416 + 12];
      
      
      var $506 = HEAP[$parser_addr] + 416 + 16;
      HEAP[$506] = $503;
      var $507 = HEAP[$s_addr];
      var $508 = HEAP[$parser_addr];
      var $509 = HEAP[$enc_addr];
      var $510 = _storeAtts($508, $509, $507, $name95, $bindings);
      HEAP[$result94] = $510;
      
      
      if (HEAP[$result94] != 0) {
        __label__ = 96;
        break;
      } else {
        __label__ = 97;
        break;
      }
     case 96:
      var $513 = HEAP[$result94];
      HEAP[$0] = $513;
      __label__ = 200;
      break;
     case 97:
      
      
      
      var $517 = HEAP[HEAP[$parser_addr] + 416 + 12];
      
      
      var $520 = HEAP[$parser_addr] + 416 + 16;
      HEAP[$520] = $517;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 52] != 0) {
        __label__ = 98;
        break;
      } else {
        __label__ = 99;
        break;
      }
     case 98:
      
      
      var $527 = HEAP[HEAP[$parser_addr] + 52];
      
      
      
      var $531 = HEAP[HEAP[$parser_addr] + 392];
      
      var $533 = HEAP[$name95];
      
      
      var $536 = HEAP[HEAP[$parser_addr] + 4];
      FUNCTION_TABLE[$527]($536, $533, $531);
      HEAP[$noElmHandlers] = 0;
      __label__ = 99;
      break;
     case 99:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 56] != 0) {
        __label__ = 100;
        break;
      } else {
        __label__ = 103;
        break;
      }
     case 100:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 52] != 0) {
        __label__ = 101;
        break;
      } else {
        __label__ = 102;
        break;
      }
     case 101:
      
      var $546 = HEAP[HEAP[$eventEndPP]];
      var $547 = HEAP[$eventPP];
      HEAP[$547] = $546;
      __label__ = 102;
      break;
     case 102:
      
      
      var $550 = HEAP[HEAP[$parser_addr] + 56];
      
      var $552 = HEAP[$name95];
      
      
      var $555 = HEAP[HEAP[$parser_addr] + 4];
      FUNCTION_TABLE[$550]($555, $552);
      HEAP[$noElmHandlers] = 0;
      __label__ = 103;
      break;
     case 103:
      
      
      if (HEAP[$noElmHandlers] != 0) {
        __label__ = 104;
        break;
      } else {
        __label__ = 106;
        break;
      }
     case 104:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 80] != 0) {
        __label__ = 105;
        break;
      } else {
        __label__ = 106;
        break;
      }
     case 105:
      var $562 = HEAP[$next];
      var $563 = HEAP[$s_addr];
      var $564 = HEAP[$parser_addr];
      var $565 = HEAP[$enc_addr];
      _reportDefault($564, $565, $563, $562);
      __label__ = 106;
      break;
     case 106:
      
      var $567 = HEAP[$parser_addr] + 416;
      _poolClear($567);
      __label__ = 110;
      break;
     case 107:
      var $568 = HEAP[$bindings];
      HEAP[$b] = $568;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 104] != 0) {
        __label__ = 108;
        break;
      } else {
        __label__ = 109;
        break;
      }
     case 108:
      
      
      var $575 = HEAP[HEAP[$parser_addr] + 104];
      
      
      
      
      var $580 = HEAP[HEAP[HEAP[$b]]];
      
      
      var $583 = HEAP[HEAP[$parser_addr] + 4];
      FUNCTION_TABLE[$575]($583, $580);
      __label__ = 109;
      break;
     case 109:
      
      
      var $586 = HEAP[HEAP[$bindings] + 4];
      HEAP[$bindings] = $586;
      
      
      var $589 = HEAP[HEAP[$parser_addr] + 376];
      
      var $591 = HEAP[$b] + 4;
      HEAP[$591] = $589;
      
      var $593 = HEAP[$parser_addr] + 376;
      var $594 = HEAP[$b];
      HEAP[$593] = $594;
      
      
      
      
      
      var $600 = HEAP[HEAP[$b] + 8];
      var $601 = HEAP[HEAP[$b]] + 4;
      HEAP[$601] = $600;
      __label__ = 110;
      break;
     case 110:
      
      
      if (HEAP[$bindings] != 0) {
        __label__ = 107;
        break;
      } else {
        __label__ = 111;
        break;
      }
     case 111:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 312] == 0) {
        __label__ = 112;
        break;
      } else {
        __label__ = 113;
        break;
      }
     case 112:
      var $608 = HEAP[$next];
      var $609 = HEAP[$parser_addr];
      var $610 = HEAP[$end_addr];
      var $611 = HEAP[$nextPtr_addr];
      var $612 = _epilogProcessor($609, $608, $610, $611);
      HEAP[$0] = $612;
      __label__ = 200;
      break;
     case 113:
      __label__ = 196;
      break;
     case 114:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 312] == HEAP[$startTagLevel_addr]) {
        __label__ = 115;
        break;
      } else {
        __label__ = 116;
        break;
      }
     case 115:
      HEAP[$0] = 13;
      __label__ = 200;
      break;
     case 116:
      
      
      var $620 = HEAP[HEAP[$parser_addr] + 364];
      HEAP[$tag120] = $620;
      
      
      var $623 = HEAP[HEAP[$tag120]];
      
      var $625 = HEAP[$parser_addr] + 364;
      HEAP[$625] = $623;
      
      
      var $628 = HEAP[HEAP[$parser_addr] + 368];
      
      var $630 = HEAP[$tag120];
      HEAP[$630] = $628;
      
      var $632 = HEAP[$parser_addr] + 368;
      var $633 = HEAP[$tag120];
      HEAP[$632] = $633;
      
      
      
      
      
      var $639 = HEAP[$s_addr] + HEAP[HEAP[$enc_addr] + 68] * 2;
      HEAP[$rawName119] = $639;
      
      
      var $642 = HEAP[HEAP[$enc_addr] + 32];
      var $643 = HEAP[$enc_addr];
      var $644 = HEAP[$rawName119];
      var $645 = FUNCTION_TABLE[$642]($643, $644);
      HEAP[$len] = $645;
      
      
      
      
      
      if (HEAP[HEAP[$tag120] + 8] != HEAP[$len]) {
        __label__ = 118;
        break;
      } else {
        __label__ = 117;
        break;
      }
     case 117:
      var $651 = HEAP[$len];
      
      
      var $654 = HEAP[HEAP[$tag120] + 4];
      var $655 = HEAP[$rawName119];
      var $656 = _memcmp($654, $655, $651);
      
      if ($656 != 0) {
        __label__ = 118;
        break;
      } else {
        __label__ = 119;
        break;
      }
     case 118:
      var $658 = HEAP[$eventPP];
      var $659 = HEAP[$rawName119];
      HEAP[$658] = $659;
      HEAP[$0] = 7;
      __label__ = 200;
      break;
     case 119:
      
      
      
      var $663 = HEAP[HEAP[$parser_addr] + 312] - 1;
      
      var $665 = HEAP[$parser_addr] + 312;
      HEAP[$665] = $663;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 56] != 0) {
        __label__ = 120;
        break;
      } else {
        __label__ = 132;
        break;
      }
     case 120:
      
      
      
      var $673 = HEAP[HEAP[$tag120] + 12 + 4];
      HEAP[$localPart] = $673;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 236] != 0) {
        __label__ = 121;
        break;
      } else {
        __label__ = 131;
        break;
      }
     case 121:
      
      
      if (HEAP[$localPart] != 0) {
        __label__ = 122;
        break;
      } else {
        __label__ = 131;
        break;
      }
     case 122:
      
      
      
      
      
      
      
      
      var $688 = HEAP[HEAP[$tag120] + 12] + HEAP[HEAP[$tag120] + 12 + 16];
      HEAP[$uri] = $688;
      __label__ = 124;
      break;
     case 123:
      
      var $690 = HEAP[HEAP[$localPart]];
      var $691 = HEAP[$uri];
      HEAP[$691] = $690;
      
      var $693 = HEAP[$uri] + 1;
      HEAP[$uri] = $693;
      
      var $695 = HEAP[$localPart] + 1;
      HEAP[$localPart] = $695;
      __label__ = 124;
      break;
     case 124:
      
      
      
      if (HEAP[HEAP[$localPart]] != 0) {
        __label__ = 123;
        break;
      } else {
        __label__ = 125;
        break;
      }
     case 125:
      
      
      
      var $702 = HEAP[HEAP[$tag120] + 12 + 8];
      HEAP[$prefix] = $702;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 237] != 0) {
        __label__ = 126;
        break;
      } else {
        __label__ = 130;
        break;
      }
     case 126:
      
      
      if (HEAP[$prefix] != 0) {
        __label__ = 127;
        break;
      } else {
        __label__ = 130;
        break;
      }
     case 127:
      
      
      var $711 = HEAP[HEAP[$parser_addr] + 472];
      var $712 = HEAP[$uri];
      HEAP[$712] = $711;
      
      var $714 = HEAP[$uri] + 1;
      HEAP[$uri] = $714;
      __label__ = 129;
      break;
     case 128:
      
      var $716 = HEAP[HEAP[$prefix]];
      var $717 = HEAP[$uri];
      HEAP[$717] = $716;
      
      var $719 = HEAP[$uri] + 1;
      HEAP[$uri] = $719;
      
      var $721 = HEAP[$prefix] + 1;
      HEAP[$prefix] = $721;
      __label__ = 129;
      break;
     case 129:
      
      
      
      if (HEAP[HEAP[$prefix]] != 0) {
        __label__ = 128;
        break;
      } else {
        __label__ = 130;
        break;
      }
     case 130:
      var $725 = HEAP[$uri];
      HEAP[$725] = 0;
      __label__ = 131;
      break;
     case 131:
      
      
      var $728 = HEAP[HEAP[$parser_addr] + 56];
      
      
      
      var $732 = HEAP[HEAP[$tag120] + 12];
      
      
      var $735 = HEAP[HEAP[$parser_addr] + 4];
      FUNCTION_TABLE[$728]($735, $732);
      __label__ = 134;
      break;
     case 132:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 80] != 0) {
        __label__ = 133;
        break;
      } else {
        __label__ = 134;
        break;
      }
     case 133:
      var $740 = HEAP[$next];
      var $741 = HEAP[$s_addr];
      var $742 = HEAP[$parser_addr];
      var $743 = HEAP[$enc_addr];
      _reportDefault($742, $743, $741, $740);
      __label__ = 134;
      break;
     case 134:
      __label__ = 138;
      break;
     case 135:
      
      
      var $746 = HEAP[HEAP[$tag120] + 44];
      HEAP[$b140] = $746;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 104] != 0) {
        __label__ = 136;
        break;
      } else {
        __label__ = 137;
        break;
      }
     case 136:
      
      
      var $753 = HEAP[HEAP[$parser_addr] + 104];
      
      
      
      
      var $758 = HEAP[HEAP[HEAP[$b140]]];
      
      
      var $761 = HEAP[HEAP[$parser_addr] + 4];
      FUNCTION_TABLE[$753]($761, $758);
      __label__ = 137;
      break;
     case 137:
      
      
      
      
      var $766 = HEAP[HEAP[HEAP[$tag120] + 44] + 4];
      
      var $768 = HEAP[$tag120] + 44;
      HEAP[$768] = $766;
      
      
      var $771 = HEAP[HEAP[$parser_addr] + 376];
      
      var $773 = HEAP[$b140] + 4;
      HEAP[$773] = $771;
      
      var $775 = HEAP[$parser_addr] + 376;
      var $776 = HEAP[$b140];
      HEAP[$775] = $776;
      
      
      
      
      
      var $782 = HEAP[HEAP[$b140] + 8];
      var $783 = HEAP[HEAP[$b140]] + 4;
      HEAP[$783] = $782;
      __label__ = 138;
      break;
     case 138:
      
      
      
      
      if (HEAP[HEAP[$tag120] + 44] != 0) {
        __label__ = 135;
        break;
      } else {
        __label__ = 139;
        break;
      }
     case 139:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 312] == 0) {
        __label__ = 140;
        break;
      } else {
        __label__ = 141;
        break;
      }
     case 140:
      var $792 = HEAP[$next];
      var $793 = HEAP[$parser_addr];
      var $794 = HEAP[$end_addr];
      var $795 = HEAP[$nextPtr_addr];
      var $796 = _epilogProcessor($793, $792, $794, $795);
      HEAP[$0] = $796;
      __label__ = 200;
      break;
     case 141:
      __label__ = 196;
      break;
     case 142:
      
      
      var $799 = HEAP[HEAP[$enc_addr] + 44];
      var $800 = HEAP[$s_addr];
      var $801 = HEAP[$enc_addr];
      var $802 = FUNCTION_TABLE[$799]($801, $800);
      HEAP[$n] = $802;
      
      
      if (HEAP[$n] < 0) {
        __label__ = 143;
        break;
      } else {
        __label__ = 144;
        break;
      }
     case 143:
      HEAP[$0] = 14;
      __label__ = 200;
      break;
     case 144:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 60] != 0) {
        __label__ = 145;
        break;
      } else {
        __label__ = 146;
        break;
      }
     case 145:
      
      
      var $811 = HEAP[HEAP[$parser_addr] + 60];
      var $812 = HEAP[$n];
      var $buf151 = $buf;
      var $813 = _PyExpat_XmlUtf8Encode($812, $buf151);
      
      
      var $816 = HEAP[HEAP[$parser_addr] + 4];
      var $buf152 = $buf;
      FUNCTION_TABLE[$811]($816, $buf152, $813);
      __label__ = 148;
      break;
     case 146:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 80] != 0) {
        __label__ = 147;
        break;
      } else {
        __label__ = 148;
        break;
      }
     case 147:
      var $821 = HEAP[$next];
      var $822 = HEAP[$s_addr];
      var $823 = HEAP[$parser_addr];
      var $824 = HEAP[$enc_addr];
      _reportDefault($823, $824, $822, $821);
      __label__ = 148;
      break;
     case 148:
      __label__ = 196;
      break;
     case 149:
      HEAP[$0] = 17;
      __label__ = 200;
      break;
     case 150:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 60] != 0) {
        __label__ = 151;
        break;
      } else {
        __label__ = 152;
        break;
      }
     case 151:
      HEAP[$c159] = 10;
      
      
      var $831 = HEAP[HEAP[$parser_addr] + 60];
      
      
      var $834 = HEAP[HEAP[$parser_addr] + 4];
      FUNCTION_TABLE[$831]($834, $c159, 1);
      __label__ = 154;
      break;
     case 152:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 80] != 0) {
        __label__ = 153;
        break;
      } else {
        __label__ = 154;
        break;
      }
     case 153:
      var $839 = HEAP[$next];
      var $840 = HEAP[$s_addr];
      var $841 = HEAP[$parser_addr];
      var $842 = HEAP[$enc_addr];
      _reportDefault($841, $842, $840, $839);
      __label__ = 154;
      break;
     case 154:
      __label__ = 196;
      break;
     case 155:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 72] != 0) {
        __label__ = 156;
        break;
      } else {
        __label__ = 157;
        break;
      }
     case 156:
      
      
      var $849 = HEAP[HEAP[$parser_addr] + 72];
      
      
      var $852 = HEAP[HEAP[$parser_addr] + 4];
      FUNCTION_TABLE[$849]($852);
      __label__ = 159;
      break;
     case 157:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 80] != 0) {
        __label__ = 158;
        break;
      } else {
        __label__ = 159;
        break;
      }
     case 158:
      var $857 = HEAP[$next];
      var $858 = HEAP[$s_addr];
      var $859 = HEAP[$parser_addr];
      var $860 = HEAP[$enc_addr];
      _reportDefault($859, $860, $858, $857);
      __label__ = 159;
      break;
     case 159:
      
      
      var $863 = HEAP[$parser_addr];
      var $864 = HEAP[$enc_addr];
      var $865 = HEAP[$end_addr];
      var $866 = HEAP[$nextPtr_addr];
      var $867 = HEAP[$haveMore_addr] & 255;
      var $868 = _doCdataSection($863, $864, $next, $865, $866, $867);
      HEAP[$result164] = $868;
      
      
      if (HEAP[$result164] != 0) {
        __label__ = 160;
        break;
      } else {
        __label__ = 161;
        break;
      }
     case 160:
      var $871 = HEAP[$result164];
      HEAP[$0] = $871;
      __label__ = 200;
      break;
     case 161:
      
      
      if (HEAP[$next] == 0) {
        __label__ = 162;
        break;
      } else {
        __label__ = 163;
        break;
      }
     case 162:
      
      var $875 = HEAP[$parser_addr] + 280;
      HEAP[$875] = FUNCTION_TABLE_OFFSET + 62;
      var $876 = HEAP[$result164];
      HEAP[$0] = $876;
      __label__ = 200;
      break;
     case 163:
      __label__ = 196;
      break;
     case 164:
      
      
      if (HEAP[$haveMore_addr] != 0) {
        __label__ = 165;
        break;
      } else {
        __label__ = 166;
        break;
      }
     case 165:
      var $879 = HEAP[$s_addr];
      var $880 = HEAP[$nextPtr_addr];
      HEAP[$880] = $879;
      HEAP[$0] = 0;
      __label__ = 200;
      break;
     case 166:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 60] != 0) {
        __label__ = 167;
        break;
      } else {
        __label__ = 171;
        break;
      }
     case 167:
      
      
      
      
      if (HEAP[HEAP[$enc_addr] + 72] == 0) {
        __label__ = 168;
        break;
      } else {
        __label__ = 169;
        break;
      }
     case 168:
      
      
      var $891 = HEAP[HEAP[$parser_addr] + 44];
      HEAP[$dataPtr] = $891;
      
      
      var $894 = HEAP[HEAP[$enc_addr] + 60];
      
      
      var $897 = HEAP[HEAP[$parser_addr] + 48];
      var $898 = HEAP[$enc_addr];
      var $899 = HEAP[$end_addr];
      FUNCTION_TABLE[$894]($898, $s_addr, $899, $dataPtr, $897);
      
      
      var $902 = HEAP[HEAP[$parser_addr] + 60];
      
      
      
      
      
      
      var $909 = HEAP[$dataPtr] - HEAP[HEAP[$parser_addr] + 44];
      
      
      var $912 = HEAP[HEAP[$parser_addr] + 44];
      
      
      var $915 = HEAP[HEAP[$parser_addr] + 4];
      FUNCTION_TABLE[$902]($915, $912, $909);
      __label__ = 170;
      break;
     case 169:
      
      
      var $918 = HEAP[HEAP[$parser_addr] + 60];
      
      
      
      
      var $923 = HEAP[$end_addr] - HEAP[$s_addr];
      var $924 = HEAP[$s_addr];
      
      
      var $927 = HEAP[HEAP[$parser_addr] + 4];
      FUNCTION_TABLE[$918]($927, $924, $923);
      __label__ = 170;
      break;
     case 170:
      __label__ = 173;
      break;
     case 171:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 80] != 0) {
        __label__ = 172;
        break;
      } else {
        __label__ = 173;
        break;
      }
     case 172:
      var $932 = HEAP[$s_addr];
      var $933 = HEAP[$parser_addr];
      var $934 = HEAP[$enc_addr];
      var $935 = HEAP[$end_addr];
      _reportDefault($933, $934, $932, $935);
      __label__ = 173;
      break;
     case 173:
      
      
      if (HEAP[$startTagLevel_addr] == 0) {
        __label__ = 174;
        break;
      } else {
        __label__ = 175;
        break;
      }
     case 174:
      var $938 = HEAP[$eventPP];
      var $939 = HEAP[$end_addr];
      HEAP[$938] = $939;
      HEAP[$0] = 3;
      __label__ = 200;
      break;
     case 175:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 312] != HEAP[$startTagLevel_addr]) {
        __label__ = 176;
        break;
      } else {
        __label__ = 177;
        break;
      }
     case 176:
      var $945 = HEAP[$eventPP];
      var $946 = HEAP[$end_addr];
      HEAP[$945] = $946;
      HEAP[$0] = 13;
      __label__ = 200;
      break;
     case 177:
      var $947 = HEAP[$nextPtr_addr];
      var $948 = HEAP[$end_addr];
      HEAP[$947] = $948;
      HEAP[$0] = 0;
      __label__ = 200;
      break;
     case 178:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 60] != 0) {
        __label__ = 179;
        break;
      } else {
        __label__ = 185;
        break;
      }
     case 179:
      
      
      
      
      if (HEAP[HEAP[$enc_addr] + 72] == 0) {
        __label__ = 180;
        break;
      } else {
        __label__ = 183;
        break;
      }
     case 180:
      
      
      var $959 = HEAP[HEAP[$parser_addr] + 44];
      HEAP[$dataPtr190] = $959;
      
      
      var $962 = HEAP[HEAP[$enc_addr] + 60];
      
      
      var $965 = HEAP[HEAP[$parser_addr] + 48];
      var $966 = HEAP[$next];
      var $967 = HEAP[$enc_addr];
      FUNCTION_TABLE[$962]($967, $s_addr, $966, $dataPtr190, $965);
      var $968 = HEAP[$s_addr];
      var $969 = HEAP[$eventEndPP];
      HEAP[$969] = $968;
      
      
      var $972 = HEAP[HEAP[$parser_addr] + 60];
      
      
      
      
      
      
      var $979 = HEAP[$dataPtr190] - HEAP[HEAP[$parser_addr] + 44];
      
      
      var $982 = HEAP[HEAP[$parser_addr] + 44];
      
      
      var $985 = HEAP[HEAP[$parser_addr] + 4];
      FUNCTION_TABLE[$972]($985, $982, $979);
      
      
      
      if (HEAP[$s_addr] == HEAP[$next]) {
        __label__ = 182;
        break;
      } else {
        __label__ = 181;
        break;
      }
     case 181:
      var $989 = HEAP[$s_addr];
      var $990 = HEAP[$eventPP];
      HEAP[$990] = $989;
      __label__ = 180;
      break;
     case 182:
      __label__ = 184;
      break;
     case 183:
      
      
      var $993 = HEAP[HEAP[$parser_addr] + 60];
      
      
      
      
      var $998 = HEAP[$next] - HEAP[$s_addr];
      var $999 = HEAP[$s_addr];
      
      
      var $1002 = HEAP[HEAP[$parser_addr] + 4];
      FUNCTION_TABLE[$993]($1002, $999, $998);
      __label__ = 184;
      break;
     case 184:
      __label__ = 187;
      break;
     case 185:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 80] != 0) {
        __label__ = 186;
        break;
      } else {
        __label__ = 187;
        break;
      }
     case 186:
      var $1007 = HEAP[$next];
      var $1008 = HEAP[$s_addr];
      var $1009 = HEAP[$parser_addr];
      var $1010 = HEAP[$enc_addr];
      _reportDefault($1009, $1010, $1008, $1007);
      __label__ = 187;
      break;
     case 187:
      __label__ = 196;
      break;
     case 188:
      var $1011 = HEAP[$next];
      var $1012 = HEAP[$s_addr];
      var $1013 = HEAP[$parser_addr];
      var $1014 = HEAP[$enc_addr];
      var $1015 = _reportProcessingInstruction($1013, $1014, $1012, $1011);
      
      if ($1015 == 0) {
        __label__ = 189;
        break;
      } else {
        __label__ = 190;
        break;
      }
     case 189:
      HEAP[$0] = 1;
      __label__ = 200;
      break;
     case 190:
      __label__ = 196;
      break;
     case 191:
      var $1017 = HEAP[$next];
      var $1018 = HEAP[$s_addr];
      var $1019 = HEAP[$parser_addr];
      var $1020 = HEAP[$enc_addr];
      var $1021 = _reportComment($1019, $1020, $1018, $1017);
      
      if ($1021 == 0) {
        __label__ = 192;
        break;
      } else {
        __label__ = 193;
        break;
      }
     case 192:
      HEAP[$0] = 1;
      __label__ = 200;
      break;
     case 193:
      __label__ = 196;
      break;
     case 194:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 80] != 0) {
        __label__ = 195;
        break;
      } else {
        __label__ = 196;
        break;
      }
     case 195:
      var $1027 = HEAP[$next];
      var $1028 = HEAP[$s_addr];
      var $1029 = HEAP[$parser_addr];
      var $1030 = HEAP[$enc_addr];
      _reportDefault($1029, $1030, $1028, $1027);
      __label__ = 196;
      break;
     case 196:
      var $1031 = HEAP[$next];
      HEAP[$s_addr] = $1031;
      var $1032 = HEAP[$s_addr];
      var $1033 = HEAP[$eventPP];
      HEAP[$1033] = $1032;
      
      
      
      var $1037 = HEAP[HEAP[$parser_addr] + 480];
      if ($1037 == 2) {
        __label__ = 198;
        break;
      } else if ($1037 == 3) {
        __label__ = 197;
        break;
      } else {
        __label__ = 199;
        break;
      }
     case 197:
      var $1038 = HEAP[$next];
      var $1039 = HEAP[$nextPtr_addr];
      HEAP[$1039] = $1038;
      HEAP[$0] = 0;
      __label__ = 200;
      break;
     case 198:
      HEAP[$0] = 35;
      __label__ = 200;
      break;
     case 199:
      __label__ = 4;
      break;
     case 200:
      var $1040 = HEAP[$0];
      HEAP[$retval] = $1040;
      __label__ = 201;
      break;
     case 201:
      var $retval211 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval211;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _storeAtts($parser, $enc, $attStr, $tagNamePtr, $bindingsPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 171;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 171);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $enc_addr = __stackBase__ + 4;
      var $attStr_addr = __stackBase__ + 8;
      var $tagNamePtr_addr = __stackBase__ + 12;
      var $bindingsPtr_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $iftmp_105 = __stackBase__ + 24;
      var $iftmp_104 = __stackBase__ + 25;
      var $iftmp_102 = __stackBase__ + 29;
      var $iftmp_100 = __stackBase__ + 30;
      var $0 = __stackBase__ + 31;
      var $dtd = __stackBase__ + 35;
      var $elementType = __stackBase__ + 39;
      var $nDefaultAtts = __stackBase__ + 43;
      var $appAtts = __stackBase__ + 47;
      var $attIndex = __stackBase__ + 51;
      var $prefixLen = __stackBase__ + 55;
      var $i = __stackBase__ + 59;
      var $n = __stackBase__ + 63;
      var $uri = __stackBase__ + 67;
      var $nPrefixes = __stackBase__ + 71;
      var $binding = __stackBase__ + 75;
      var $localPart = __stackBase__ + 79;
      var $name = __stackBase__ + 83;
      var $oldAttsSize = __stackBase__ + 87;
      var $temp = __stackBase__ + 91;
      var $attId = __stackBase__ + 95;
      var $result = __stackBase__ + 99;
      var $isCdata = __stackBase__ + 103;
      var $j = __stackBase__ + 104;
      var $result35 = __stackBase__ + 108;
      var $da = __stackBase__ + 112;
      var $result58 = __stackBase__ + 116;
      var $j68 = __stackBase__ + 120;
      var $version = __stackBase__ + 124;
      var $nsAttsSize = __stackBase__ + 128;
      var $temp70 = __stackBase__ + 132;
      var $s = __stackBase__ + 136;
      var $id = __stackBase__ + 140;
      var $b = __stackBase__ + 144;
      var $uriHash = __stackBase__ + 148;
      var $c = __stackBase__ + 152;
      var $c99 = __stackBase__ + 153;
      var $step = __stackBase__ + 154;
      var $mask = __stackBase__ + 155;
      var $s1 = __stackBase__ + 159;
      var $s2 = __stackBase__ + 163;
      var $p = __stackBase__ + 167;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$enc_addr] = $enc;
      HEAP[$attStr_addr] = $attStr;
      HEAP[$tagNamePtr_addr] = $tagNamePtr;
      HEAP[$bindingsPtr_addr] = $bindingsPtr;
      
      
      var $3 = HEAP[HEAP[$parser_addr] + 356];
      HEAP[$dtd] = $3;
      HEAP[$attIndex] = 0;
      HEAP[$nPrefixes] = 0;
      
      
      var $6 = HEAP[HEAP[$tagNamePtr_addr]];
      
      var $8 = HEAP[$dtd] + 20;
      var $9 = _lookup($8, $6, 0);
      var $10 = $9;
      HEAP[$elementType] = $10;
      
      
      if (HEAP[$elementType] == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 1:
      
      
      var $15 = HEAP[HEAP[$tagNamePtr_addr]];
      
      var $17 = HEAP[$dtd] + 80;
      var $18 = _poolCopyString($17, $15);
      HEAP[$name] = $18;
      
      
      if (HEAP[$name] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      HEAP[$0] = 1;
      __label__ = 163;
      break;
     case 3:
      
      var $22 = HEAP[$dtd] + 20;
      var $23 = HEAP[$name];
      var $24 = _lookup($22, $23, 24);
      var $25 = $24;
      HEAP[$elementType] = $25;
      
      
      if (HEAP[$elementType] == 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      HEAP[$0] = 1;
      __label__ = 163;
      break;
     case 5:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 236] != 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 6:
      var $32 = HEAP[$parser_addr];
      var $33 = HEAP[$elementType];
      var $34 = _setElementTypePrefix($32, $33);
      
      if ($34 == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      HEAP[$0] = 1;
      __label__ = 163;
      break;
     case 8:
      
      
      var $38 = HEAP[HEAP[$elementType] + 12];
      HEAP[$nDefaultAtts] = $38;
      
      
      var $41 = HEAP[HEAP[$enc_addr] + 40];
      
      
      var $44 = HEAP[HEAP[$parser_addr] + 392];
      
      
      var $47 = HEAP[HEAP[$parser_addr] + 380];
      var $48 = HEAP[$enc_addr];
      var $49 = HEAP[$attStr_addr];
      var $50 = FUNCTION_TABLE[$41]($48, $49, $47, $44);
      HEAP[$n] = $50;
      
      
      
      
      
      
      
      if (HEAP[$n] + HEAP[$nDefaultAtts] > HEAP[HEAP[$parser_addr] + 380]) {
        __label__ = 9;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 9:
      
      
      var $60 = HEAP[HEAP[$parser_addr] + 380];
      HEAP[$oldAttsSize] = $60;
      
      
      
      var $64 = HEAP[$n] + HEAP[$nDefaultAtts] + 16;
      
      var $66 = HEAP[$parser_addr] + 380;
      HEAP[$66] = $64;
      
      
      
      var $70 = HEAP[HEAP[$parser_addr] + 12 + 4];
      
      
      
      var $74 = HEAP[HEAP[$parser_addr] + 380] * 16;
      
      
      
      var $78 = HEAP[HEAP[$parser_addr] + 392];
      var $79 = FUNCTION_TABLE[$70]($78, $74);
      var $80 = $79;
      HEAP[$temp] = $80;
      
      
      if (HEAP[$temp] == 0) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      HEAP[$0] = 1;
      __label__ = 163;
      break;
     case 11:
      
      var $84 = HEAP[$parser_addr] + 392;
      var $85 = HEAP[$temp];
      HEAP[$84] = $85;
      
      
      
      if (HEAP[$n] > HEAP[$oldAttsSize]) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      
      
      var $91 = HEAP[HEAP[$enc_addr] + 40];
      
      
      var $94 = HEAP[HEAP[$parser_addr] + 392];
      var $95 = HEAP[$enc_addr];
      var $96 = HEAP[$attStr_addr];
      var $97 = HEAP[$n];
      var $98 = FUNCTION_TABLE[$91]($95, $96, $97, $94);
      __label__ = 13;
      break;
     case 13:
      
      
      
      var $102 = HEAP[HEAP[$parser_addr] + 392];
      HEAP[$appAtts] = $102;
      HEAP[$i] = 0;
      __label__ = 42;
      break;
     case 14:
      
      
      
      
      
      
      var $109 = HEAP[HEAP[HEAP[$parser_addr] + 392] + 16 * HEAP[$i]];
      
      
      var $112 = HEAP[HEAP[$enc_addr] + 32];
      
      
      
      
      
      
      var $119 = HEAP[HEAP[HEAP[$parser_addr] + 392] + 16 * HEAP[$i]];
      var $120 = HEAP[$enc_addr];
      var $121 = FUNCTION_TABLE[$112]($120, $119);
      var $122 = $109 + $121;
      
      
      
      
      
      
      var $129 = HEAP[HEAP[HEAP[$parser_addr] + 392] + 16 * HEAP[$i]];
      var $130 = HEAP[$parser_addr];
      var $131 = HEAP[$enc_addr];
      var $132 = _getAttributeId($130, $131, $129, $122);
      HEAP[$attId] = $132;
      
      
      if (HEAP[$attId] == 0) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      HEAP[$0] = 1;
      __label__ = 163;
      break;
     case 16:
      
      
      
      var $138 = HEAP[HEAP[$attId]] + -1;
      
      
      if (HEAP[$138] != 0) {
        __label__ = 17;
        break;
      } else {
        __label__ = 20;
        break;
      }
     case 17:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 144] == HEAP[$enc_addr]) {
        __label__ = 18;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 18:
      
      
      
      
      
      
      var $152 = HEAP[HEAP[HEAP[$parser_addr] + 392] + 16 * HEAP[$i]];
      
      var $154 = HEAP[$parser_addr] + 288;
      HEAP[$154] = $152;
      __label__ = 19;
      break;
     case 19:
      HEAP[$0] = 8;
      __label__ = 163;
      break;
     case 20:
      
      
      
      var $158 = HEAP[HEAP[$attId]] + -1;
      HEAP[$158] = 1;
      
      
      var $161 = HEAP[HEAP[$attId]];
      
      
      var $164 = HEAP[$appAtts] + 4 * HEAP[$attIndex];
      HEAP[$164] = $161;
      
      var $166 = HEAP[$attIndex] + 1;
      HEAP[$attIndex] = $166;
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$parser_addr] + 392] + 16 * HEAP[$i] + 12] == 0) {
        __label__ = 21;
        break;
      } else {
        __label__ = 30;
        break;
      }
     case 21:
      HEAP[$isCdata] = 1;
      
      
      
      
      if (HEAP[HEAP[$attId] + 8] != 0) {
        __label__ = 22;
        break;
      } else {
        __label__ = 27;
        break;
      }
     case 22:
      HEAP[$j] = 0;
      __label__ = 26;
      break;
     case 23:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$elementType] + 20] + 12 * HEAP[$j]] == HEAP[$attId]) {
        __label__ = 24;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 24:
      
      
      
      
      
      
      var $194 = HEAP[HEAP[HEAP[$elementType] + 20] + 12 * HEAP[$j] + 4];
      HEAP[$isCdata] = $194;
      __label__ = 27;
      break;
     case 25:
      
      var $196 = HEAP[$j] + 1;
      HEAP[$j] = $196;
      __label__ = 26;
      break;
     case 26:
      
      
      
      if (HEAP[$j] < HEAP[$nDefaultAtts]) {
        __label__ = 23;
        break;
      } else {
        __label__ = 27;
        break;
      }
     case 27:
      
      var $201 = HEAP[$parser_addr] + 416;
      
      
      
      
      
      
      var $208 = HEAP[HEAP[HEAP[$parser_addr] + 392] + 16 * HEAP[$i] + 8];
      
      
      
      
      
      
      var $215 = HEAP[HEAP[HEAP[$parser_addr] + 392] + 16 * HEAP[$i] + 4];
      
      
      var $218 = HEAP[$parser_addr];
      var $219 = HEAP[$enc_addr];
      var $220 = HEAP[$isCdata] & 255;
      var $221 = _storeAttributeValue($218, $219, $220, $215, $208, $201);
      HEAP[$result] = $221;
      
      
      if (HEAP[$result] != 0) {
        __label__ = 28;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 28:
      var $224 = HEAP[$result];
      HEAP[$0] = $224;
      __label__ = 163;
      break;
     case 29:
      
      
      
      var $228 = HEAP[HEAP[$parser_addr] + 416 + 16];
      
      
      var $231 = HEAP[$appAtts] + 4 * HEAP[$attIndex];
      HEAP[$231] = $228;
      
      
      
      var $235 = HEAP[HEAP[$parser_addr] + 416 + 12];
      
      
      var $238 = HEAP[$parser_addr] + 416 + 16;
      HEAP[$238] = $235;
      __label__ = 33;
      break;
     case 30:
      
      
      
      
      
      
      var $245 = HEAP[HEAP[HEAP[$parser_addr] + 392] + 16 * HEAP[$i] + 8];
      
      
      
      
      
      
      var $252 = HEAP[HEAP[HEAP[$parser_addr] + 392] + 16 * HEAP[$i] + 4];
      
      var $254 = HEAP[$parser_addr] + 416;
      var $255 = HEAP[$enc_addr];
      var $256 = _poolStoreString($254, $255, $252, $245);
      
      
      var $259 = HEAP[$appAtts] + 4 * HEAP[$attIndex];
      HEAP[$259] = $256;
      
      
      
      
      
      if (HEAP[HEAP[$appAtts] + 4 * HEAP[$attIndex]] == 0) {
        __label__ = 31;
        break;
      } else {
        __label__ = 32;
        break;
      }
     case 31:
      HEAP[$0] = 1;
      __label__ = 163;
      break;
     case 32:
      
      
      
      var $268 = HEAP[HEAP[$parser_addr] + 416 + 12];
      
      
      var $271 = HEAP[$parser_addr] + 416 + 16;
      HEAP[$271] = $268;
      __label__ = 33;
      break;
     case 33:
      
      
      
      
      if (HEAP[HEAP[$attId] + 4] != 0) {
        __label__ = 34;
        break;
      } else {
        __label__ = 40;
        break;
      }
     case 34:
      
      
      
      
      if (HEAP[HEAP[$attId] + 9] != 0) {
        __label__ = 35;
        break;
      } else {
        __label__ = 38;
        break;
      }
     case 35:
      
      
      
      var $283 = HEAP[HEAP[$appAtts] + 4 * HEAP[$attIndex]];
      
      
      var $286 = HEAP[HEAP[$attId] + 4];
      var $287 = HEAP[$parser_addr];
      var $288 = HEAP[$attId];
      var $289 = HEAP[$bindingsPtr_addr];
      var $290 = _addBinding($287, $286, $288, $283, $289);
      HEAP[$result35] = $290;
      
      
      if (HEAP[$result35] != 0) {
        __label__ = 36;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 36:
      var $293 = HEAP[$result35];
      HEAP[$0] = $293;
      __label__ = 163;
      break;
     case 37:
      
      var $295 = HEAP[$attIndex] - 1;
      HEAP[$attIndex] = $295;
      __label__ = 39;
      break;
     case 38:
      
      var $297 = HEAP[$attIndex] + 1;
      HEAP[$attIndex] = $297;
      
      var $299 = HEAP[$nPrefixes] + 1;
      HEAP[$nPrefixes] = $299;
      
      
      
      var $303 = HEAP[HEAP[$attId]] + -1;
      HEAP[$303] = 2;
      __label__ = 39;
      break;
     case 39:
      __label__ = 41;
      break;
     case 40:
      
      var $305 = HEAP[$attIndex] + 1;
      HEAP[$attIndex] = $305;
      __label__ = 41;
      break;
     case 41:
      
      var $307 = HEAP[$i] + 1;
      HEAP[$i] = $307;
      __label__ = 42;
      break;
     case 42:
      
      
      
      if (HEAP[$i] < HEAP[$n]) {
        __label__ = 14;
        break;
      } else {
        __label__ = 43;
        break;
      }
     case 43:
      
      var $312 = HEAP[$parser_addr] + 384;
      var $313 = HEAP[$attIndex];
      HEAP[$312] = $313;
      
      
      
      
      if (HEAP[HEAP[$elementType] + 8] == 0) {
        __label__ = 51;
        break;
      } else {
        __label__ = 44;
        break;
      }
     case 44:
      
      
      
      
      
      var $323 = HEAP[HEAP[HEAP[$elementType] + 8]] + -1;
      
      
      if (HEAP[$323] == 0) {
        __label__ = 51;
        break;
      } else {
        __label__ = 45;
        break;
      }
     case 45:
      HEAP[$i] = 0;
      __label__ = 49;
      break;
     case 46:
      
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$appAtts] + 4 * HEAP[$i]] == HEAP[HEAP[HEAP[$elementType] + 8]]) {
        __label__ = 47;
        break;
      } else {
        __label__ = 48;
        break;
      }
     case 47:
      
      var $337 = HEAP[$parser_addr] + 388;
      var $338 = HEAP[$i];
      HEAP[$337] = $338;
      __label__ = 50;
      break;
     case 48:
      
      var $340 = HEAP[$i] + 2;
      HEAP[$i] = $340;
      __label__ = 49;
      break;
     case 49:
      
      
      
      if (HEAP[$i] < HEAP[$attIndex]) {
        __label__ = 46;
        break;
      } else {
        __label__ = 50;
        break;
      }
     case 50:
      __label__ = 52;
      break;
     case 51:
      
      var $345 = HEAP[$parser_addr] + 388;
      HEAP[$345] = -1;
      __label__ = 52;
      break;
     case 52:
      HEAP[$i] = 0;
      __label__ = 64;
      break;
     case 53:
      
      
      
      
      var $350 = HEAP[HEAP[$elementType] + 20] + 12 * HEAP[$i];
      HEAP[$da] = $350;
      
      
      
      
      
      var $356 = HEAP[HEAP[HEAP[$da]]] + -1;
      
      
      if (HEAP[$356] == 0) {
        __label__ = 54;
        break;
      } else {
        __label__ = 63;
        break;
      }
     case 54:
      
      
      
      
      if (HEAP[HEAP[$da] + 8] != 0) {
        __label__ = 55;
        break;
      } else {
        __label__ = 63;
        break;
      }
     case 55:
      
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$da]] + 4] != 0) {
        __label__ = 56;
        break;
      } else {
        __label__ = 62;
        break;
      }
     case 56:
      
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$da]] + 9] != 0) {
        __label__ = 57;
        break;
      } else {
        __label__ = 60;
        break;
      }
     case 57:
      
      
      var $377 = HEAP[HEAP[$da] + 8];
      
      
      var $380 = HEAP[HEAP[$da]];
      
      
      
      
      var $385 = HEAP[HEAP[HEAP[$da]] + 4];
      var $386 = HEAP[$parser_addr];
      var $387 = HEAP[$bindingsPtr_addr];
      var $388 = _addBinding($386, $385, $380, $377, $387);
      HEAP[$result58] = $388;
      
      
      if (HEAP[$result58] != 0) {
        __label__ = 58;
        break;
      } else {
        __label__ = 59;
        break;
      }
     case 58:
      var $391 = HEAP[$result58];
      HEAP[$0] = $391;
      __label__ = 163;
      break;
     case 59:
      __label__ = 61;
      break;
     case 60:
      
      
      
      
      
      var $397 = HEAP[HEAP[HEAP[$da]]] + -1;
      HEAP[$397] = 2;
      
      var $399 = HEAP[$nPrefixes] + 1;
      HEAP[$nPrefixes] = $399;
      
      
      
      
      var $404 = HEAP[HEAP[HEAP[$da]]];
      
      
      var $407 = HEAP[$appAtts] + 4 * HEAP[$attIndex];
      HEAP[$407] = $404;
      
      var $409 = HEAP[$attIndex] + 1;
      HEAP[$attIndex] = $409;
      
      
      var $412 = HEAP[HEAP[$da] + 8];
      
      
      var $415 = HEAP[$appAtts] + 4 * HEAP[$attIndex];
      HEAP[$415] = $412;
      
      var $417 = HEAP[$attIndex] + 1;
      HEAP[$attIndex] = $417;
      __label__ = 61;
      break;
     case 61:
      __label__ = 63;
      break;
     case 62:
      
      
      
      
      
      var $423 = HEAP[HEAP[HEAP[$da]]] + -1;
      HEAP[$423] = 1;
      
      
      
      
      var $428 = HEAP[HEAP[HEAP[$da]]];
      
      
      var $431 = HEAP[$appAtts] + 4 * HEAP[$attIndex];
      HEAP[$431] = $428;
      
      var $433 = HEAP[$attIndex] + 1;
      HEAP[$attIndex] = $433;
      
      
      var $436 = HEAP[HEAP[$da] + 8];
      
      
      var $439 = HEAP[$appAtts] + 4 * HEAP[$attIndex];
      HEAP[$439] = $436;
      
      var $441 = HEAP[$attIndex] + 1;
      HEAP[$attIndex] = $441;
      __label__ = 63;
      break;
     case 63:
      
      var $443 = HEAP[$i] + 1;
      HEAP[$i] = $443;
      __label__ = 64;
      break;
     case 64:
      
      
      
      if (HEAP[$i] < HEAP[$nDefaultAtts]) {
        __label__ = 53;
        break;
      } else {
        __label__ = 65;
        break;
      }
     case 65:
      
      
      var $449 = HEAP[$appAtts] + 4 * HEAP[$attIndex];
      HEAP[$449] = 0;
      HEAP[$i] = 0;
      
      
      if (HEAP[$nPrefixes] != 0) {
        __label__ = 66;
        break;
      } else {
        __label__ = 129;
        break;
      }
     case 66:
      
      
      var $454 = HEAP[HEAP[$parser_addr] + 400];
      HEAP[$version] = $454;
      
      
      
      
      var $459 = 1 << HEAP[HEAP[$parser_addr] + 404];
      HEAP[$nsAttsSize] = $459;
      
      
      
      
      
      
      
      
      if (HEAP[$nPrefixes] << 1 >> HEAP[HEAP[$parser_addr] + 404] != 0) {
        __label__ = 67;
        break;
      } else {
        __label__ = 73;
        break;
      }
     case 67:
      
      
      
      
      
      
      
      var $475 = HEAP[$nPrefixes] >> HEAP[HEAP[$parser_addr] + 404] != 0;
      var $476 = HEAP[HEAP[$parser_addr] + 404] + 1;
      
      var $478 = HEAP[$parser_addr] + 404;
      HEAP[$478] = $476;
      
      if ($475 != 0) {
        __label__ = 67;
        break;
      } else {
        __label__ = 68;
        break;
      }
     case 68:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 404] <= 2) {
        __label__ = 69;
        break;
      } else {
        __label__ = 70;
        break;
      }
     case 69:
      
      var $484 = HEAP[$parser_addr] + 404;
      HEAP[$484] = 3;
      __label__ = 70;
      break;
     case 70:
      
      
      
      
      var $489 = 1 << HEAP[HEAP[$parser_addr] + 404];
      HEAP[$nsAttsSize] = $489;
      
      
      
      var $493 = HEAP[HEAP[$parser_addr] + 12 + 4];
      
      var $495 = HEAP[$nsAttsSize] * 12;
      
      
      
      var $499 = HEAP[HEAP[$parser_addr] + 396];
      var $500 = FUNCTION_TABLE[$493]($499, $495);
      var $501 = $500;
      HEAP[$temp70] = $501;
      
      
      if (HEAP[$temp70] == 0) {
        __label__ = 71;
        break;
      } else {
        __label__ = 72;
        break;
      }
     case 71:
      HEAP[$0] = 1;
      __label__ = 163;
      break;
     case 72:
      
      var $505 = HEAP[$parser_addr] + 396;
      var $506 = HEAP[$temp70];
      HEAP[$505] = $506;
      HEAP[$version] = 0;
      __label__ = 73;
      break;
     case 73:
      
      
      if (HEAP[$version] == 0) {
        __label__ = 74;
        break;
      } else {
        __label__ = 77;
        break;
      }
     case 74:
      HEAP[$version] = -1;
      var $509 = HEAP[$nsAttsSize];
      HEAP[$j68] = $509;
      __label__ = 76;
      break;
     case 75:
      
      
      var $512 = HEAP[HEAP[$parser_addr] + 396];
      
      var $514 = HEAP[$j68] - 1;
      HEAP[$j68] = $514;
      
      
      var $517 = $512 + 12 * HEAP[$j68];
      var $518 = HEAP[$version];
      HEAP[$517] = $518;
      __label__ = 76;
      break;
     case 76:
      
      
      if (HEAP[$j68] != 0) {
        __label__ = 75;
        break;
      } else {
        __label__ = 77;
        break;
      }
     case 77:
      
      var $522 = HEAP[$version] - 1;
      HEAP[$version] = $522;
      
      var $524 = HEAP[$parser_addr] + 400;
      var $525 = HEAP[$version];
      HEAP[$524] = $525;
      __label__ = 128;
      break;
     case 78:
      
      
      
      var $529 = HEAP[HEAP[$appAtts] + 4 * HEAP[$i]];
      HEAP[$s] = $529;
      
      var $531 = HEAP[$s] + -1;
      
      
      if (HEAP[$531] == 2) {
        __label__ = 79;
        break;
      } else {
        __label__ = 126;
        break;
      }
     case 79:
      HEAP[$uriHash] = 0;
      
      var $535 = HEAP[$s] + -1;
      HEAP[$535] = 0;
      
      var $537 = HEAP[$dtd] + 40;
      var $538 = HEAP[$s];
      var $539 = _lookup($537, $538, 0);
      var $540 = $539;
      HEAP[$id] = $540;
      
      
      if (HEAP[$id] == 0) {
        __label__ = 80;
        break;
      } else {
        __label__ = 81;
        break;
      }
     case 80:
      HEAP[$0] = 1;
      __label__ = 163;
      break;
     case 81:
      
      
      
      
      var $547 = HEAP[HEAP[HEAP[$id] + 4] + 4];
      HEAP[$b] = $547;
      
      
      if (HEAP[$b] == 0) {
        __label__ = 82;
        break;
      } else {
        __label__ = 83;
        break;
      }
     case 82:
      HEAP[$0] = 27;
      __label__ = 163;
      break;
     case 83:
      HEAP[$j68] = 0;
      __label__ = 91;
      break;
     case 84:
      
      
      
      
      
      var $555 = HEAP[HEAP[HEAP[$b] + 16] + HEAP[$j68]];
      HEAP[$c] = $555;
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 416 + 12] != HEAP[HEAP[$parser_addr] + 416 + 8]) {
        __label__ = 86;
        break;
      } else {
        __label__ = 85;
        break;
      }
     case 85:
      
      var $566 = HEAP[$parser_addr] + 416;
      var $567 = _poolGrow($566);
      
      if ($567 != 0) {
        __label__ = 86;
        break;
      } else {
        __label__ = 87;
        break;
      }
     case 86:
      
      
      
      var $572 = HEAP[HEAP[$parser_addr] + 416 + 12];
      var $573 = HEAP[$c];
      HEAP[$572] = $573;
      var $574 = $572 + 1;
      
      
      var $577 = HEAP[$parser_addr] + 416 + 12;
      HEAP[$577] = $574;
      HEAP[$iftmp_100] = 0;
      __label__ = 88;
      break;
     case 87:
      HEAP[$iftmp_100] = 1;
      __label__ = 88;
      break;
     case 88:
      
      
      if (HEAP[$iftmp_100] != 0) {
        __label__ = 89;
        break;
      } else {
        __label__ = 90;
        break;
      }
     case 89:
      HEAP[$0] = 1;
      __label__ = 163;
      break;
     case 90:
      
      
      
      
      var $583 = HEAP[$uriHash] * 1000003 ^ HEAP[$c];
      HEAP[$uriHash] = $583;
      
      var $585 = HEAP[$j68] + 1;
      HEAP[$j68] = $585;
      __label__ = 91;
      break;
     case 91:
      
      
      
      
      
      if (HEAP[HEAP[$b] + 20] > HEAP[$j68]) {
        __label__ = 84;
        break;
      } else {
        __label__ = 92;
        break;
      }
     case 92:
      
      
      
      var $594 = HEAP[HEAP[$s]] != 58;
      
      var $596 = HEAP[$s] + 1;
      HEAP[$s] = $596;
      
      if ($594 != 0) {
        __label__ = 92;
        break;
      } else {
        __label__ = 93;
        break;
      }
     case 93:
      
      var $598 = HEAP[HEAP[$s]];
      HEAP[$c99] = $598;
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 416 + 12] != HEAP[HEAP[$parser_addr] + 416 + 8]) {
        __label__ = 95;
        break;
      } else {
        __label__ = 94;
        break;
      }
     case 94:
      
      var $609 = HEAP[$parser_addr] + 416;
      var $610 = _poolGrow($609);
      
      if ($610 != 0) {
        __label__ = 95;
        break;
      } else {
        __label__ = 96;
        break;
      }
     case 95:
      
      
      
      var $615 = HEAP[HEAP[$parser_addr] + 416 + 12];
      
      var $617 = HEAP[HEAP[$s]];
      HEAP[$615] = $617;
      var $618 = $615 + 1;
      
      
      var $621 = HEAP[$parser_addr] + 416 + 12;
      HEAP[$621] = $618;
      HEAP[$iftmp_102] = 0;
      __label__ = 97;
      break;
     case 96:
      HEAP[$iftmp_102] = 1;
      __label__ = 97;
      break;
     case 97:
      
      
      if (HEAP[$iftmp_102] != 0) {
        __label__ = 98;
        break;
      } else {
        __label__ = 99;
        break;
      }
     case 98:
      HEAP[$0] = 1;
      __label__ = 163;
      break;
     case 99:
      
      
      
      
      var $627 = HEAP[$uriHash] * 1000003 ^ HEAP[$c99];
      HEAP[$uriHash] = $627;
      
      
      
      var $631 = HEAP[HEAP[$s]] != 0;
      
      var $633 = HEAP[$s] + 1;
      HEAP[$s] = $633;
      
      if ($631 != 0) {
        __label__ = 93;
        break;
      } else {
        __label__ = 100;
        break;
      }
     case 100:
      HEAP[$step] = 0;
      
      var $635 = HEAP[$nsAttsSize] - 1;
      HEAP[$mask] = $635;
      
      
      var $638 = HEAP[$uriHash] & HEAP[$mask];
      HEAP[$j68] = $638;
      __label__ = 113;
      break;
     case 101:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$parser_addr] + 396] + 12 * HEAP[$j68] + 4] == HEAP[$uriHash]) {
        __label__ = 102;
        break;
      } else {
        __label__ = 108;
        break;
      }
     case 102:
      
      
      
      var $651 = HEAP[HEAP[$parser_addr] + 416 + 16];
      HEAP[$s1] = $651;
      
      
      
      
      
      
      var $658 = HEAP[HEAP[HEAP[$parser_addr] + 396] + 12 * HEAP[$j68] + 8];
      HEAP[$s2] = $658;
      __label__ = 104;
      break;
     case 103:
      
      var $660 = HEAP[$s1] + 1;
      HEAP[$s1] = $660;
      
      var $662 = HEAP[$s2] + 1;
      HEAP[$s2] = $662;
      __label__ = 104;
      break;
     case 104:
      
      
      
      
      
      if (HEAP[HEAP[$s1]] != HEAP[HEAP[$s2]]) {
        __label__ = 106;
        break;
      } else {
        __label__ = 105;
        break;
      }
     case 105:
      
      
      
      if (HEAP[HEAP[$s1]] != 0) {
        __label__ = 103;
        break;
      } else {
        __label__ = 106;
        break;
      }
     case 106:
      
      
      
      if (HEAP[HEAP[$s1]] == 0) {
        __label__ = 107;
        break;
      } else {
        __label__ = 108;
        break;
      }
     case 107:
      HEAP[$0] = 8;
      __label__ = 163;
      break;
     case 108:
      
      
      if (HEAP[$step] == 0) {
        __label__ = 109;
        break;
      } else {
        __label__ = 110;
        break;
      }
     case 109:
      
      var $not = HEAP[$mask] ^ -1;
      
      
      
      
      
      
      
      
      
      
      
      
      
      var $690 = ($not & HEAP[$uriHash]) >>> HEAP[HEAP[$parser_addr] + 404] - 1 & 255 & (HEAP[$mask] >>> 2 & 255) | 1;
      HEAP[$step] = $690;
      __label__ = 110;
      break;
     case 110:
      
      
      
      
      if (HEAP[$step] > HEAP[$j68]) {
        __label__ = 111;
        break;
      } else {
        __label__ = 112;
        break;
      }
     case 111:
      
      
      
      
      
      var $700 = HEAP[$nsAttsSize] - HEAP[$step] + HEAP[$j68];
      HEAP[$j68] = $700;
      var $701 = HEAP[$j68];
      HEAP[$iftmp_104] = $701;
      __label__ = 113;
      break;
     case 112:
      
      
      
      var $705 = HEAP[$j68] - HEAP[$step];
      HEAP[$j68] = $705;
      var $706 = HEAP[$j68];
      HEAP[$iftmp_104] = $706;
      __label__ = 113;
      break;
     case 113:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$parser_addr] + 396] + 12 * HEAP[$j68]] == HEAP[$version]) {
        __label__ = 101;
        break;
      } else {
        __label__ = 114;
        break;
      }
     case 114:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 237] != 0) {
        __label__ = 115;
        break;
      } else {
        __label__ = 123;
        break;
      }
     case 115:
      
      
      
      
      
      
      var $726 = HEAP[HEAP[$parser_addr] + 472];
      var $727 = HEAP[HEAP[$parser_addr] + 416 + 12] + -1;
      HEAP[$727] = $726;
      
      
      
      
      var $732 = HEAP[HEAP[HEAP[$b]]];
      HEAP[$s] = $732;
      __label__ = 116;
      break;
     case 116:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 416 + 12] != HEAP[HEAP[$parser_addr] + 416 + 8]) {
        __label__ = 118;
        break;
      } else {
        __label__ = 117;
        break;
      }
     case 117:
      
      var $743 = HEAP[$parser_addr] + 416;
      var $744 = _poolGrow($743);
      
      if ($744 != 0) {
        __label__ = 118;
        break;
      } else {
        __label__ = 119;
        break;
      }
     case 118:
      
      
      
      var $749 = HEAP[HEAP[$parser_addr] + 416 + 12];
      
      var $751 = HEAP[HEAP[$s]];
      HEAP[$749] = $751;
      var $752 = $749 + 1;
      
      
      var $755 = HEAP[$parser_addr] + 416 + 12;
      HEAP[$755] = $752;
      HEAP[$iftmp_105] = 0;
      __label__ = 120;
      break;
     case 119:
      HEAP[$iftmp_105] = 1;
      __label__ = 120;
      break;
     case 120:
      
      
      if (HEAP[$iftmp_105] != 0) {
        __label__ = 121;
        break;
      } else {
        __label__ = 122;
        break;
      }
     case 121:
      HEAP[$0] = 1;
      __label__ = 163;
      break;
     case 122:
      
      
      
      var $760 = HEAP[HEAP[$s]] != 0;
      
      var $762 = HEAP[$s] + 1;
      HEAP[$s] = $762;
      
      if ($760 != 0) {
        __label__ = 116;
        break;
      } else {
        __label__ = 123;
        break;
      }
     case 123:
      
      
      
      var $766 = HEAP[HEAP[$parser_addr] + 416 + 16];
      HEAP[$s] = $766;
      
      
      
      var $770 = HEAP[HEAP[$parser_addr] + 416 + 12];
      
      
      var $773 = HEAP[$parser_addr] + 416 + 16;
      HEAP[$773] = $770;
      
      
      var $776 = HEAP[$appAtts] + 4 * HEAP[$i];
      var $777 = HEAP[$s];
      HEAP[$776] = $777;
      
      
      
      
      
      var $783 = HEAP[HEAP[$parser_addr] + 396] + 12 * HEAP[$j68];
      var $784 = HEAP[$version];
      HEAP[$783] = $784;
      
      
      
      
      
      var $790 = HEAP[HEAP[$parser_addr] + 396] + 12 * HEAP[$j68] + 4;
      var $791 = HEAP[$uriHash];
      HEAP[$790] = $791;
      
      
      
      
      
      var $797 = HEAP[HEAP[$parser_addr] + 396] + 12 * HEAP[$j68] + 8;
      var $798 = HEAP[$s];
      HEAP[$797] = $798;
      
      var $800 = HEAP[$nPrefixes] - 1;
      HEAP[$nPrefixes] = $800;
      
      
      if (HEAP[$nPrefixes] == 0) {
        __label__ = 124;
        break;
      } else {
        __label__ = 125;
        break;
      }
     case 124:
      
      var $804 = HEAP[$i] + 2;
      HEAP[$i] = $804;
      __label__ = 129;
      break;
     case 125:
      __label__ = 127;
      break;
     case 126:
      
      var $806 = HEAP[$s] + -1;
      HEAP[$806] = 0;
      __label__ = 127;
      break;
     case 127:
      
      var $808 = HEAP[$i] + 2;
      HEAP[$i] = $808;
      __label__ = 128;
      break;
     case 128:
      
      
      
      if (HEAP[$i] < HEAP[$attIndex]) {
        __label__ = 78;
        break;
      } else {
        __label__ = 129;
        break;
      }
     case 129:
      __label__ = 131;
      break;
     case 130:
      
      
      
      
      var $816 = HEAP[HEAP[$appAtts] + 4 * HEAP[$i]] + -1;
      HEAP[$816] = 0;
      
      var $818 = HEAP[$i] + 2;
      HEAP[$i] = $818;
      __label__ = 131;
      break;
     case 131:
      
      
      
      if (HEAP[$i] < HEAP[$attIndex]) {
        __label__ = 130;
        break;
      } else {
        __label__ = 132;
        break;
      }
     case 132:
      
      var $823 = HEAP[HEAP[$bindingsPtr_addr]];
      HEAP[$binding] = $823;
      __label__ = 134;
      break;
     case 133:
      
      
      
      
      
      var $829 = HEAP[HEAP[HEAP[$binding] + 12]] + -1;
      HEAP[$829] = 0;
      
      
      var $832 = HEAP[HEAP[$binding] + 4];
      HEAP[$binding] = $832;
      __label__ = 134;
      break;
     case 134:
      
      
      if (HEAP[$binding] != 0) {
        __label__ = 133;
        break;
      } else {
        __label__ = 135;
        break;
      }
     case 135:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 236] == 0) {
        __label__ = 136;
        break;
      } else {
        __label__ = 137;
        break;
      }
     case 136:
      HEAP[$0] = 0;
      __label__ = 163;
      break;
     case 137:
      
      
      
      
      if (HEAP[HEAP[$elementType] + 4] != 0) {
        __label__ = 138;
        break;
      } else {
        __label__ = 143;
        break;
      }
     case 138:
      
      
      
      
      var $847 = HEAP[HEAP[HEAP[$elementType] + 4] + 4];
      HEAP[$binding] = $847;
      
      
      if (HEAP[$binding] == 0) {
        __label__ = 139;
        break;
      } else {
        __label__ = 140;
        break;
      }
     case 139:
      HEAP[$0] = 27;
      __label__ = 163;
      break;
     case 140:
      
      
      var $852 = HEAP[HEAP[$tagNamePtr_addr]];
      HEAP[$localPart] = $852;
      __label__ = 141;
      break;
     case 141:
      
      
      
      var $856 = HEAP[HEAP[$localPart]] != 58;
      
      var $858 = HEAP[$localPart] + 1;
      HEAP[$localPart] = $858;
      
      if ($856 != 0) {
        __label__ = 141;
        break;
      } else {
        __label__ = 142;
        break;
      }
     case 142:
      __label__ = 146;
      break;
     case 143:
      
      
      
      
      
      if (HEAP[HEAP[$dtd] + 152 + 4] != 0) {
        __label__ = 144;
        break;
      } else {
        __label__ = 145;
        break;
      }
     case 144:
      
      
      
      var $867 = HEAP[HEAP[$dtd] + 152 + 4];
      HEAP[$binding] = $867;
      
      
      var $870 = HEAP[HEAP[$tagNamePtr_addr]];
      HEAP[$localPart] = $870;
      __label__ = 146;
      break;
     case 145:
      HEAP[$0] = 0;
      __label__ = 163;
      break;
     case 146:
      HEAP[$prefixLen] = 0;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 237] != 0) {
        __label__ = 147;
        break;
      } else {
        __label__ = 149;
        break;
      }
     case 147:
      
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$binding]]] != 0) {
        __label__ = 148;
        break;
      } else {
        __label__ = 149;
        break;
      }
     case 148:
      
      
      
      
      
      
      
      
      
      var $890 = HEAP[HEAP[HEAP[HEAP[$binding]]] + HEAP[$prefixLen]] != 0;
      
      var $892 = HEAP[$prefixLen] + 1;
      HEAP[$prefixLen] = $892;
      
      if ($890 != 0) {
        __label__ = 148;
        break;
      } else {
        __label__ = 149;
        break;
      }
     case 149:
      
      var $894 = HEAP[$tagNamePtr_addr] + 4;
      var $895 = HEAP[$localPart];
      HEAP[$894] = $895;
      
      
      var $898 = HEAP[HEAP[$binding] + 20];
      
      var $900 = HEAP[$tagNamePtr_addr] + 16;
      HEAP[$900] = $898;
      
      
      
      
      var $905 = HEAP[HEAP[HEAP[$binding]]];
      
      var $907 = HEAP[$tagNamePtr_addr] + 8;
      HEAP[$907] = $905;
      
      var $909 = HEAP[$tagNamePtr_addr] + 20;
      var $910 = HEAP[$prefixLen];
      HEAP[$909] = $910;
      HEAP[$i] = 0;
      __label__ = 150;
      break;
     case 150:
      
      
      
      
      
      var $916 = HEAP[HEAP[$localPart] + HEAP[$i]] != 0;
      
      var $918 = HEAP[$i] + 1;
      HEAP[$i] = $918;
      
      if ($916 != 0) {
        __label__ = 150;
        break;
      } else {
        __label__ = 151;
        break;
      }
     case 151:
      
      
      
      
      
      
      var $925 = HEAP[HEAP[$binding] + 20] + HEAP[$i] + HEAP[$prefixLen];
      HEAP[$n] = $925;
      
      
      
      
      
      if (HEAP[HEAP[$binding] + 24] < HEAP[$n]) {
        __label__ = 152;
        break;
      } else {
        __label__ = 160;
        break;
      }
     case 152:
      
      
      
      var $934 = HEAP[HEAP[$parser_addr] + 12];
      
      var $936 = HEAP[$n] + 24;
      var $937 = FUNCTION_TABLE[$934]($936);
      HEAP[$uri] = $937;
      
      
      if (HEAP[$uri] == 0) {
        __label__ = 153;
        break;
      } else {
        __label__ = 154;
        break;
      }
     case 153:
      HEAP[$0] = 1;
      __label__ = 163;
      break;
     case 154:
      
      var $941 = HEAP[$n] + 24;
      
      var $943 = HEAP[$binding] + 24;
      HEAP[$943] = $941;
      
      
      var $946 = HEAP[HEAP[$binding] + 20];
      
      
      var $949 = HEAP[HEAP[$binding] + 16];
      var $950 = HEAP[$uri];
      _llvm_memcpy_p0i8_p0i8_i32($950, $949, $946, 1, 0);
      
      
      var $953 = HEAP[HEAP[$parser_addr] + 364];
      HEAP[$p] = $953;
      __label__ = 158;
      break;
     case 155:
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$p] + 12] == HEAP[HEAP[$binding] + 16]) {
        __label__ = 156;
        break;
      } else {
        __label__ = 157;
        break;
      }
     case 156:
      
      
      var $964 = HEAP[$p] + 12;
      var $965 = HEAP[$uri];
      HEAP[$964] = $965;
      __label__ = 157;
      break;
     case 157:
      
      
      var $968 = HEAP[HEAP[$p]];
      HEAP[$p] = $968;
      __label__ = 158;
      break;
     case 158:
      
      
      if (HEAP[$p] != 0) {
        __label__ = 155;
        break;
      } else {
        __label__ = 159;
        break;
      }
     case 159:
      
      
      
      var $974 = HEAP[HEAP[$parser_addr] + 12 + 8];
      
      
      var $977 = HEAP[HEAP[$binding] + 16];
      FUNCTION_TABLE[$974]($977);
      
      var $979 = HEAP[$binding] + 16;
      var $980 = HEAP[$uri];
      HEAP[$979] = $980;
      __label__ = 160;
      break;
     case 160:
      
      
      
      
      
      
      var $987 = HEAP[HEAP[$binding] + 16] + HEAP[HEAP[$binding] + 20];
      HEAP[$uri] = $987;
      var $988 = HEAP[$i];
      var $989 = HEAP[$uri];
      var $990 = HEAP[$localPart];
      _llvm_memcpy_p0i8_p0i8_i32($989, $990, $988, 1, 0);
      
      
      if (HEAP[$prefixLen] != 0) {
        __label__ = 161;
        break;
      } else {
        __label__ = 162;
        break;
      }
     case 161:
      
      
      
      var $996 = HEAP[$uri] + (HEAP[$i] - 1);
      HEAP[$uri] = $996;
      
      
      var $999 = HEAP[HEAP[$parser_addr] + 472];
      var $1000 = HEAP[$uri];
      HEAP[$1000] = $999;
      var $1001 = HEAP[$prefixLen];
      
      
      
      
      var $1006 = HEAP[HEAP[HEAP[$binding]]];
      
      var $1008 = HEAP[$uri] + 1;
      _llvm_memcpy_p0i8_p0i8_i32($1008, $1006, $1001, 1, 0);
      __label__ = 162;
      break;
     case 162:
      
      
      var $1011 = HEAP[HEAP[$binding] + 16];
      
      var $1013 = HEAP[$tagNamePtr_addr];
      HEAP[$1013] = $1011;
      HEAP[$0] = 0;
      __label__ = 163;
      break;
     case 163:
      var $1014 = HEAP[$0];
      HEAP[$retval] = $1014;
      __label__ = 164;
      break;
     case 164:
      var $retval178 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval178;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _addBinding($parser, $prefix, $attId, $uri, $bindingsPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 59;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 59);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $prefix_addr = __stackBase__ + 4;
      var $attId_addr = __stackBase__ + 8;
      var $uri_addr = __stackBase__ + 12;
      var $bindingsPtr_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $iftmp_119 = __stackBase__ + 24;
      var $iftmp_117 = __stackBase__ + 28;
      var $iftmp_115 = __stackBase__ + 32;
      var $iftmp_113 = __stackBase__ + 36;
      var $0 = __stackBase__ + 40;
      var $mustBeXML = __stackBase__ + 44;
      var $isXML = __stackBase__ + 45;
      var $isXMLNS = __stackBase__ + 46;
      var $b = __stackBase__ + 47;
      var $len = __stackBase__ + 51;
      var $temp = __stackBase__ + 55;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$prefix_addr] = $prefix;
      HEAP[$attId_addr] = $attId;
      HEAP[$uri_addr] = $uri;
      HEAP[$bindingsPtr_addr] = $bindingsPtr;
      HEAP[$mustBeXML] = 0;
      HEAP[$isXML] = 1;
      HEAP[$isXMLNS] = 1;
      
      
      
      if (HEAP[HEAP[$uri_addr]] == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      
      
      
      
      if (HEAP[HEAP[$prefix_addr]] != 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      HEAP[$0] = 28;
      __label__ = 66;
      break;
     case 3:
      
      
      
      
      if (HEAP[HEAP[$prefix_addr]] != 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 4:
      
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$prefix_addr]]] == 120) {
        __label__ = 5;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 5:
      
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$prefix_addr]] + 1] == 109) {
        __label__ = 6;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 6:
      
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$prefix_addr]] + 2] == 108) {
        __label__ = 7;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 7:
      
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$prefix_addr]] + 3] == 110) {
        __label__ = 8;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 8:
      
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$prefix_addr]] + 4] == 115) {
        __label__ = 9;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 9:
      
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$prefix_addr]] + 5] == 0) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      HEAP[$0] = 39;
      __label__ = 66;
      break;
     case 11:
      
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$prefix_addr]] + 3] == 0) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      HEAP[$mustBeXML] = 1;
      __label__ = 13;
      break;
     case 13:
      HEAP[$len] = 0;
      __label__ = 24;
      break;
     case 14:
      
      
      if (HEAP[$isXML] != 0) {
        __label__ = 15;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 15:
      
      
      
      if (HEAP[$len] > HEAP[_xmlLen_5245]) {
        __label__ = 17;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 16:
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$uri_addr] + HEAP[$len]] != HEAP[_xmlNamespace_5244 + HEAP[$len]]) {
        __label__ = 17;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 17:
      HEAP[$isXML] = 0;
      __label__ = 18;
      break;
     case 18:
      
      
      if (HEAP[$mustBeXML] == 0) {
        __label__ = 19;
        break;
      } else {
        __label__ = 23;
        break;
      }
     case 19:
      
      
      if (HEAP[$isXMLNS] != 0) {
        __label__ = 20;
        break;
      } else {
        __label__ = 23;
        break;
      }
     case 20:
      
      
      
      if (HEAP[$len] > HEAP[_xmlnsLen_5247]) {
        __label__ = 22;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 21:
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$uri_addr] + HEAP[$len]] != HEAP[_xmlnsNamespace_5246 + HEAP[$len]]) {
        __label__ = 22;
        break;
      } else {
        __label__ = 23;
        break;
      }
     case 22:
      HEAP[$isXMLNS] = 0;
      __label__ = 23;
      break;
     case 23:
      
      var $83 = HEAP[$len] + 1;
      HEAP[$len] = $83;
      __label__ = 24;
      break;
     case 24:
      
      
      
      
      
      if (HEAP[HEAP[$uri_addr] + HEAP[$len]] != 0) {
        __label__ = 14;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 25:
      
      
      if (HEAP[$isXML] == 0) {
        __label__ = 28;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 26:
      
      
      
      if (HEAP[$len] != HEAP[_xmlLen_5245]) {
        __label__ = 28;
        break;
      } else {
        __label__ = 27;
        break;
      }
     case 27:
      HEAP[$iftmp_113] = 1;
      __label__ = 29;
      break;
     case 28:
      HEAP[$iftmp_113] = 0;
      __label__ = 29;
      break;
     case 29:
      
      var $95 = HEAP[$iftmp_113] & 255;
      HEAP[$isXML] = $95;
      
      
      if (HEAP[$isXMLNS] == 0) {
        __label__ = 32;
        break;
      } else {
        __label__ = 30;
        break;
      }
     case 30:
      
      
      
      if (HEAP[$len] != HEAP[_xmlnsLen_5247]) {
        __label__ = 32;
        break;
      } else {
        __label__ = 31;
        break;
      }
     case 31:
      HEAP[$iftmp_115] = 1;
      __label__ = 33;
      break;
     case 32:
      HEAP[$iftmp_115] = 0;
      __label__ = 33;
      break;
     case 33:
      
      var $102 = HEAP[$iftmp_115] & 255;
      HEAP[$isXMLNS] = $102;
      
      
      
      if (HEAP[$mustBeXML] != HEAP[$isXML]) {
        __label__ = 34;
        break;
      } else {
        __label__ = 38;
        break;
      }
     case 34:
      
      
      if (HEAP[$mustBeXML] != 0) {
        __label__ = 35;
        break;
      } else {
        __label__ = 36;
        break;
      }
     case 35:
      HEAP[$iftmp_117] = 38;
      __label__ = 37;
      break;
     case 36:
      HEAP[$iftmp_117] = 40;
      __label__ = 37;
      break;
     case 37:
      var $108 = HEAP[$iftmp_117];
      HEAP[$0] = $108;
      __label__ = 66;
      break;
     case 38:
      
      
      if (HEAP[$isXMLNS] != 0) {
        __label__ = 39;
        break;
      } else {
        __label__ = 40;
        break;
      }
     case 39:
      HEAP[$0] = 40;
      __label__ = 66;
      break;
     case 40:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 472] != 0) {
        __label__ = 41;
        break;
      } else {
        __label__ = 42;
        break;
      }
     case 41:
      
      var $116 = HEAP[$len] + 1;
      HEAP[$len] = $116;
      __label__ = 42;
      break;
     case 42:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 376] != 0) {
        __label__ = 43;
        break;
      } else {
        __label__ = 48;
        break;
      }
     case 43:
      
      
      var $123 = HEAP[HEAP[$parser_addr] + 376];
      HEAP[$b] = $123;
      
      
      
      
      
      if (HEAP[HEAP[$b] + 24] < HEAP[$len]) {
        __label__ = 44;
        break;
      } else {
        __label__ = 47;
        break;
      }
     case 44:
      
      
      
      var $132 = HEAP[HEAP[$parser_addr] + 12 + 4];
      
      var $134 = HEAP[$len] + 24;
      
      
      var $137 = HEAP[HEAP[$b] + 16];
      var $138 = FUNCTION_TABLE[$132]($137, $134);
      HEAP[$temp] = $138;
      
      
      if (HEAP[$temp] == 0) {
        __label__ = 45;
        break;
      } else {
        __label__ = 46;
        break;
      }
     case 45:
      HEAP[$0] = 1;
      __label__ = 66;
      break;
     case 46:
      
      var $142 = HEAP[$b] + 16;
      var $143 = HEAP[$temp];
      HEAP[$142] = $143;
      
      var $145 = HEAP[$len] + 24;
      
      var $147 = HEAP[$b] + 24;
      HEAP[$147] = $145;
      __label__ = 47;
      break;
     case 47:
      
      
      var $150 = HEAP[HEAP[$b] + 4];
      
      var $152 = HEAP[$parser_addr] + 376;
      HEAP[$152] = $150;
      __label__ = 53;
      break;
     case 48:
      
      
      
      var $156 = HEAP[HEAP[$parser_addr] + 12];
      var $157 = FUNCTION_TABLE[$156](28);
      var $158 = $157;
      HEAP[$b] = $158;
      
      
      if (HEAP[$b] == 0) {
        __label__ = 49;
        break;
      } else {
        __label__ = 50;
        break;
      }
     case 49:
      HEAP[$0] = 1;
      __label__ = 66;
      break;
     case 50:
      
      
      
      var $164 = HEAP[HEAP[$parser_addr] + 12];
      
      var $166 = HEAP[$len] + 24;
      var $167 = FUNCTION_TABLE[$164]($166);
      
      var $169 = HEAP[$b] + 16;
      HEAP[$169] = $167;
      
      
      
      
      if (HEAP[HEAP[$b] + 16] == 0) {
        __label__ = 51;
        break;
      } else {
        __label__ = 52;
        break;
      }
     case 51:
      
      
      
      var $177 = HEAP[HEAP[$parser_addr] + 12 + 8];
      
      var $179 = HEAP[$b];
      FUNCTION_TABLE[$177]($179);
      HEAP[$0] = 1;
      __label__ = 66;
      break;
     case 52:
      
      var $181 = HEAP[$len] + 24;
      
      var $183 = HEAP[$b] + 24;
      HEAP[$183] = $181;
      __label__ = 53;
      break;
     case 53:
      
      var $185 = HEAP[$b] + 20;
      var $186 = HEAP[$len];
      HEAP[$185] = $186;
      var $187 = HEAP[$len];
      
      
      var $190 = HEAP[HEAP[$b] + 16];
      var $191 = HEAP[$uri_addr];
      _llvm_memcpy_p0i8_p0i8_i32($190, $191, $187, 1, 0);
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 472] != 0) {
        __label__ = 54;
        break;
      } else {
        __label__ = 55;
        break;
      }
     case 54:
      
      
      
      
      
      
      
      var $203 = HEAP[HEAP[$parser_addr] + 472];
      var $204 = HEAP[HEAP[$b] + 16] + (HEAP[$len] - 1);
      HEAP[$204] = $203;
      __label__ = 55;
      break;
     case 55:
      
      var $206 = HEAP[$b];
      var $207 = HEAP[$prefix_addr];
      HEAP[$206] = $207;
      
      var $209 = HEAP[$b] + 12;
      var $210 = HEAP[$attId_addr];
      HEAP[$209] = $210;
      
      
      var $213 = HEAP[HEAP[$prefix_addr] + 4];
      
      var $215 = HEAP[$b] + 8;
      HEAP[$215] = $213;
      
      
      
      if (HEAP[HEAP[$uri_addr]] != 0) {
        __label__ = 58;
        break;
      } else {
        __label__ = 56;
        break;
      }
     case 56:
      
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 356] + 152 != HEAP[$prefix_addr]) {
        __label__ = 58;
        break;
      } else {
        __label__ = 57;
        break;
      }
     case 57:
      
      var $226 = HEAP[$prefix_addr] + 4;
      HEAP[$226] = 0;
      __label__ = 59;
      break;
     case 58:
      
      var $228 = HEAP[$prefix_addr] + 4;
      var $229 = HEAP[$b];
      HEAP[$228] = $229;
      __label__ = 59;
      break;
     case 59:
      
      var $231 = HEAP[HEAP[$bindingsPtr_addr]];
      
      var $233 = HEAP[$b] + 4;
      HEAP[$233] = $231;
      var $234 = HEAP[$bindingsPtr_addr];
      var $235 = HEAP[$b];
      HEAP[$234] = $235;
      
      
      if (HEAP[$attId_addr] != 0) {
        __label__ = 60;
        break;
      } else {
        __label__ = 65;
        break;
      }
     case 60:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 100] != 0) {
        __label__ = 61;
        break;
      } else {
        __label__ = 65;
        break;
      }
     case 61:
      
      
      var $244 = HEAP[HEAP[$parser_addr] + 100];
      
      
      
      
      if (HEAP[HEAP[$prefix_addr] + 4] != 0) {
        __label__ = 62;
        break;
      } else {
        __label__ = 63;
        break;
      }
     case 62:
      var $249 = HEAP[$uri_addr];
      HEAP[$iftmp_119] = $249;
      __label__ = 64;
      break;
     case 63:
      HEAP[$iftmp_119] = 0;
      __label__ = 64;
      break;
     case 64:
      
      
      var $252 = HEAP[HEAP[$prefix_addr]];
      
      
      var $255 = HEAP[HEAP[$parser_addr] + 4];
      var $256 = HEAP[$iftmp_119];
      FUNCTION_TABLE[$244]($255, $252, $256);
      __label__ = 65;
      break;
     case 65:
      HEAP[$0] = 0;
      __label__ = 66;
      break;
     case 66:
      var $257 = HEAP[$0];
      HEAP[$retval] = $257;
      __label__ = 67;
      break;
     case 67:
      var $retval66 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval66;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _cdataSectionProcessor($parser, $start, $end, $endPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $start_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $endPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $result = __stackBase__ + 24;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$start_addr] = $start;
      HEAP[$end_addr] = $end;
      HEAP[$endPtr_addr] = $endPtr;
      
      
      
      
      
      
      
      
      var $9 = HEAP[HEAP[$parser_addr] + 144];
      var $10 = HEAP[$parser_addr];
      var $11 = HEAP[$end_addr];
      var $12 = HEAP[$endPtr_addr];
      var $13 = HEAP[HEAP[$parser_addr] + 480 + 4] == 0 & 255;
      var $14 = _doCdataSection($10, $9, $start_addr, $11, $12, $13);
      HEAP[$result] = $14;
      
      
      if (HEAP[$result] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      var $17 = HEAP[$result];
      HEAP[$0] = $17;
      __label__ = 7;
      break;
     case 2:
      
      
      if (HEAP[$start_addr] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 3:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 476] != 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      
      var $25 = HEAP[$parser_addr] + 280;
      HEAP[$25] = FUNCTION_TABLE_OFFSET + 60;
      var $26 = HEAP[$start_addr];
      var $27 = HEAP[$parser_addr];
      var $28 = HEAP[$end_addr];
      var $29 = HEAP[$endPtr_addr];
      var $30 = _externalEntityContentProcessor($27, $26, $28, $29);
      HEAP[$0] = $30;
      __label__ = 7;
      break;
     case 5:
      
      var $32 = HEAP[$parser_addr] + 280;
      HEAP[$32] = FUNCTION_TABLE_OFFSET + 64;
      var $33 = HEAP[$start_addr];
      var $34 = HEAP[$parser_addr];
      var $35 = HEAP[$end_addr];
      var $36 = HEAP[$endPtr_addr];
      var $37 = _contentProcessor($34, $33, $35, $36);
      HEAP[$0] = $37;
      __label__ = 7;
      break;
     case 6:
      var $38 = HEAP[$result];
      HEAP[$0] = $38;
      __label__ = 7;
      break;
     case 7:
      var $39 = HEAP[$0];
      HEAP[$retval] = $39;
      __label__ = 8;
      break;
     case 8:
      var $retval7 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval7;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _doCdataSection($parser, $enc, $startPtr, $end, $nextPtr, $haveMore) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 54;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 54);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $enc_addr = __stackBase__ + 4;
      var $startPtr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $nextPtr_addr = __stackBase__ + 16;
      var $haveMore_addr = __stackBase__ + 20;
      var $retval = __stackBase__ + 21;
      var $0 = __stackBase__ + 25;
      var $s = __stackBase__ + 29;
      var $eventPP = __stackBase__ + 33;
      var $eventEndPP = __stackBase__ + 37;
      var $next = __stackBase__ + 41;
      var $tok = __stackBase__ + 45;
      var $c = __stackBase__ + 49;
      var $dataPtr = __stackBase__ + 50;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$enc_addr] = $enc;
      HEAP[$startPtr_addr] = $startPtr;
      HEAP[$end_addr] = $end;
      HEAP[$nextPtr_addr] = $nextPtr;
      HEAP[$haveMore_addr] = $haveMore;
      
      var $2 = HEAP[HEAP[$startPtr_addr]];
      HEAP[$s] = $2;
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 144] == HEAP[$enc_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      
      var $9 = HEAP[$parser_addr] + 288;
      HEAP[$eventPP] = $9;
      var $10 = HEAP[$s];
      var $11 = HEAP[$eventPP];
      HEAP[$11] = $10;
      
      var $13 = HEAP[$parser_addr] + 292;
      HEAP[$eventEndPP] = $13;
      __label__ = 3;
      break;
     case 2:
      
      
      
      var $17 = HEAP[HEAP[$parser_addr] + 300];
      HEAP[$eventPP] = $17;
      
      
      
      var $21 = HEAP[HEAP[$parser_addr] + 300] + 4;
      HEAP[$eventEndPP] = $21;
      __label__ = 3;
      break;
     case 3:
      var $22 = HEAP[$s];
      var $23 = HEAP[$eventPP];
      HEAP[$23] = $22;
      var $24 = HEAP[$startPtr_addr];
      HEAP[$24] = 0;
      __label__ = 4;
      break;
     case 4:
      
      
      
      var $28 = HEAP[HEAP[$enc_addr] + 8];
      var $29 = HEAP[$s];
      var $30 = HEAP[$enc_addr];
      var $31 = HEAP[$end_addr];
      var $32 = FUNCTION_TABLE[$28]($30, $29, $31, $next);
      HEAP[$tok] = $32;
      var $33 = HEAP[$next];
      var $34 = HEAP[$eventEndPP];
      HEAP[$34] = $33;
      var $35 = HEAP[$tok];
      if ($35 == -4) {
        __label__ = 31;
        break;
      } else if ($35 == -2) {
        __label__ = 28;
        break;
      } else if ($35 == -1) {
        __label__ = 31;
        break;
      } else if ($35 == 0) {
        __label__ = 27;
        break;
      } else if ($35 == 6) {
        __label__ = 17;
        break;
      } else if ($35 == 7) {
        __label__ = 12;
        break;
      } else if ($35 == 40) {
        __label__ = 5;
        break;
      } else {
        __label__ = 34;
        break;
      }
     case 5:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 76] != 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      
      
      var $42 = HEAP[HEAP[$parser_addr] + 76];
      
      
      var $45 = HEAP[HEAP[$parser_addr] + 4];
      FUNCTION_TABLE[$42]($45);
      __label__ = 9;
      break;
     case 7:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 80] != 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      var $50 = HEAP[$next];
      var $51 = HEAP[$s];
      var $52 = HEAP[$parser_addr];
      var $53 = HEAP[$enc_addr];
      _reportDefault($52, $53, $51, $50);
      __label__ = 9;
      break;
     case 9:
      var $54 = HEAP[$next];
      var $55 = HEAP[$startPtr_addr];
      HEAP[$55] = $54;
      var $56 = HEAP[$next];
      var $57 = HEAP[$nextPtr_addr];
      HEAP[$57] = $56;
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 480] == 2) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      HEAP[$0] = 35;
      __label__ = 39;
      break;
     case 11:
      HEAP[$0] = 0;
      __label__ = 39;
      break;
     case 12:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 60] != 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      HEAP[$c] = 10;
      
      
      var $69 = HEAP[HEAP[$parser_addr] + 60];
      
      
      var $72 = HEAP[HEAP[$parser_addr] + 4];
      FUNCTION_TABLE[$69]($72, $c, 1);
      __label__ = 16;
      break;
     case 14:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 80] != 0) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      var $77 = HEAP[$next];
      var $78 = HEAP[$s];
      var $79 = HEAP[$parser_addr];
      var $80 = HEAP[$enc_addr];
      _reportDefault($79, $80, $78, $77);
      __label__ = 16;
      break;
     case 16:
      __label__ = 35;
      break;
     case 17:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 60] != 0) {
        __label__ = 18;
        break;
      } else {
        __label__ = 24;
        break;
      }
     case 18:
      
      
      
      
      if (HEAP[HEAP[$enc_addr] + 72] == 0) {
        __label__ = 19;
        break;
      } else {
        __label__ = 22;
        break;
      }
     case 19:
      
      
      var $91 = HEAP[HEAP[$parser_addr] + 44];
      HEAP[$dataPtr] = $91;
      
      
      var $94 = HEAP[HEAP[$enc_addr] + 60];
      
      
      var $97 = HEAP[HEAP[$parser_addr] + 48];
      var $98 = HEAP[$next];
      var $99 = HEAP[$enc_addr];
      FUNCTION_TABLE[$94]($99, $s, $98, $dataPtr, $97);
      var $100 = HEAP[$next];
      var $101 = HEAP[$eventEndPP];
      HEAP[$101] = $100;
      
      
      var $104 = HEAP[HEAP[$parser_addr] + 60];
      
      
      
      
      
      
      var $111 = HEAP[$dataPtr] - HEAP[HEAP[$parser_addr] + 44];
      
      
      var $114 = HEAP[HEAP[$parser_addr] + 44];
      
      
      var $117 = HEAP[HEAP[$parser_addr] + 4];
      FUNCTION_TABLE[$104]($117, $114, $111);
      
      
      
      if (HEAP[$s] == HEAP[$next]) {
        __label__ = 21;
        break;
      } else {
        __label__ = 20;
        break;
      }
     case 20:
      var $121 = HEAP[$s];
      var $122 = HEAP[$eventPP];
      HEAP[$122] = $121;
      __label__ = 19;
      break;
     case 21:
      __label__ = 23;
      break;
     case 22:
      
      
      var $125 = HEAP[HEAP[$parser_addr] + 60];
      
      
      
      
      var $130 = HEAP[$next] - HEAP[$s];
      var $131 = HEAP[$s];
      
      
      var $134 = HEAP[HEAP[$parser_addr] + 4];
      FUNCTION_TABLE[$125]($134, $131, $130);
      __label__ = 23;
      break;
     case 23:
      __label__ = 26;
      break;
     case 24:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 80] != 0) {
        __label__ = 25;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 25:
      var $139 = HEAP[$next];
      var $140 = HEAP[$s];
      var $141 = HEAP[$parser_addr];
      var $142 = HEAP[$enc_addr];
      _reportDefault($141, $142, $140, $139);
      __label__ = 26;
      break;
     case 26:
      __label__ = 35;
      break;
     case 27:
      var $143 = HEAP[$next];
      var $144 = HEAP[$eventPP];
      HEAP[$144] = $143;
      HEAP[$0] = 4;
      __label__ = 39;
      break;
     case 28:
      
      
      if (HEAP[$haveMore_addr] != 0) {
        __label__ = 29;
        break;
      } else {
        __label__ = 30;
        break;
      }
     case 29:
      var $147 = HEAP[$s];
      var $148 = HEAP[$nextPtr_addr];
      HEAP[$148] = $147;
      HEAP[$0] = 0;
      __label__ = 39;
      break;
     case 30:
      HEAP[$0] = 6;
      __label__ = 39;
      break;
     case 31:
      
      
      if (HEAP[$haveMore_addr] != 0) {
        __label__ = 32;
        break;
      } else {
        __label__ = 33;
        break;
      }
     case 32:
      var $151 = HEAP[$s];
      var $152 = HEAP[$nextPtr_addr];
      HEAP[$152] = $151;
      HEAP[$0] = 0;
      __label__ = 39;
      break;
     case 33:
      HEAP[$0] = 20;
      __label__ = 39;
      break;
     case 34:
      var $153 = HEAP[$next];
      var $154 = HEAP[$eventPP];
      HEAP[$154] = $153;
      HEAP[$0] = 23;
      __label__ = 39;
      break;
     case 35:
      var $155 = HEAP[$next];
      HEAP[$s] = $155;
      var $156 = HEAP[$s];
      var $157 = HEAP[$eventPP];
      HEAP[$157] = $156;
      
      
      
      var $161 = HEAP[HEAP[$parser_addr] + 480];
      if ($161 == 2) {
        __label__ = 37;
        break;
      } else if ($161 == 3) {
        __label__ = 36;
        break;
      } else {
        __label__ = 38;
        break;
      }
     case 36:
      var $162 = HEAP[$next];
      var $163 = HEAP[$nextPtr_addr];
      HEAP[$163] = $162;
      HEAP[$0] = 0;
      __label__ = 39;
      break;
     case 37:
      HEAP[$0] = 35;
      __label__ = 39;
      break;
     case 38:
      __label__ = 4;
      break;
     case 39:
      var $164 = HEAP[$0];
      HEAP[$retval] = $164;
      __label__ = 40;
      break;
     case 40:
      var $retval39 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval39;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _ignoreSectionProcessor($parser, $start, $end, $endPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $start_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $endPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $result = __stackBase__ + 24;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$start_addr] = $start;
      HEAP[$end_addr] = $end;
      HEAP[$endPtr_addr] = $endPtr;
      
      
      
      
      
      
      
      
      var $9 = HEAP[HEAP[$parser_addr] + 144];
      var $10 = HEAP[$parser_addr];
      var $11 = HEAP[$end_addr];
      var $12 = HEAP[$endPtr_addr];
      var $13 = HEAP[HEAP[$parser_addr] + 480 + 4] == 0 & 255;
      var $14 = _doIgnoreSection($10, $9, $start_addr, $11, $12, $13);
      HEAP[$result] = $14;
      
      
      if (HEAP[$result] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      var $17 = HEAP[$result];
      HEAP[$0] = $17;
      __label__ = 5;
      break;
     case 2:
      
      
      if (HEAP[$start_addr] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      var $21 = HEAP[$parser_addr] + 280;
      HEAP[$21] = FUNCTION_TABLE_OFFSET + 66;
      var $22 = HEAP[$start_addr];
      var $23 = HEAP[$parser_addr];
      var $24 = HEAP[$end_addr];
      var $25 = HEAP[$endPtr_addr];
      var $26 = _prologProcessor($23, $22, $24, $25);
      HEAP[$0] = $26;
      __label__ = 5;
      break;
     case 4:
      var $27 = HEAP[$result];
      HEAP[$0] = $27;
      __label__ = 5;
      break;
     case 5:
      var $28 = HEAP[$0];
      HEAP[$retval] = $28;
      __label__ = 6;
      break;
     case 6:
      var $retval5 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval5;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _doIgnoreSection($parser, $enc, $startPtr, $end, $nextPtr, $haveMore) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 49;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 49);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $enc_addr = __stackBase__ + 4;
      var $startPtr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $nextPtr_addr = __stackBase__ + 16;
      var $haveMore_addr = __stackBase__ + 20;
      var $retval = __stackBase__ + 21;
      var $0 = __stackBase__ + 25;
      var $next = __stackBase__ + 29;
      var $tok = __stackBase__ + 33;
      var $s = __stackBase__ + 37;
      var $eventPP = __stackBase__ + 41;
      var $eventEndPP = __stackBase__ + 45;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$enc_addr] = $enc;
      HEAP[$startPtr_addr] = $startPtr;
      HEAP[$end_addr] = $end;
      HEAP[$nextPtr_addr] = $nextPtr;
      HEAP[$haveMore_addr] = $haveMore;
      
      var $2 = HEAP[HEAP[$startPtr_addr]];
      HEAP[$s] = $2;
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 144] == HEAP[$enc_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      
      var $9 = HEAP[$parser_addr] + 288;
      HEAP[$eventPP] = $9;
      var $10 = HEAP[$eventPP];
      var $11 = HEAP[$s];
      HEAP[$10] = $11;
      
      var $13 = HEAP[$parser_addr] + 292;
      HEAP[$eventEndPP] = $13;
      __label__ = 3;
      break;
     case 2:
      
      
      
      var $17 = HEAP[HEAP[$parser_addr] + 300];
      HEAP[$eventPP] = $17;
      
      
      
      var $21 = HEAP[HEAP[$parser_addr] + 300] + 4;
      HEAP[$eventEndPP] = $21;
      __label__ = 3;
      break;
     case 3:
      var $22 = HEAP[$eventPP];
      var $23 = HEAP[$s];
      HEAP[$22] = $23;
      var $24 = HEAP[$startPtr_addr];
      HEAP[$24] = 0;
      
      
      
      var $28 = HEAP[HEAP[$enc_addr] + 12];
      var $29 = HEAP[$enc_addr];
      var $30 = HEAP[$s];
      var $31 = HEAP[$end_addr];
      var $32 = FUNCTION_TABLE[$28]($29, $30, $31, $next);
      HEAP[$tok] = $32;
      var $33 = HEAP[$next];
      var $34 = HEAP[$eventEndPP];
      HEAP[$34] = $33;
      var $35 = HEAP[$tok];
      if ($35 == -4) {
        __label__ = 13;
        break;
      } else if ($35 == -2) {
        __label__ = 10;
        break;
      } else if ($35 == -1) {
        __label__ = 13;
        break;
      } else if ($35 == 0) {
        __label__ = 9;
        break;
      } else if ($35 == 42) {
        __label__ = 4;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 4:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 80] != 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      var $40 = HEAP[$next];
      var $41 = HEAP[$parser_addr];
      var $42 = HEAP[$enc_addr];
      var $43 = HEAP[$s];
      _reportDefault($41, $42, $43, $40);
      __label__ = 6;
      break;
     case 6:
      var $44 = HEAP[$next];
      var $45 = HEAP[$startPtr_addr];
      HEAP[$45] = $44;
      var $46 = HEAP[$next];
      var $47 = HEAP[$nextPtr_addr];
      HEAP[$47] = $46;
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 480] == 2) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      HEAP[$0] = 35;
      __label__ = 17;
      break;
     case 8:
      HEAP[$0] = 0;
      __label__ = 17;
      break;
     case 9:
      var $53 = HEAP[$next];
      var $54 = HEAP[$eventPP];
      HEAP[$54] = $53;
      HEAP[$0] = 4;
      __label__ = 17;
      break;
     case 10:
      
      
      if (HEAP[$haveMore_addr] != 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      var $57 = HEAP[$nextPtr_addr];
      var $58 = HEAP[$s];
      HEAP[$57] = $58;
      HEAP[$0] = 0;
      __label__ = 17;
      break;
     case 12:
      HEAP[$0] = 6;
      __label__ = 17;
      break;
     case 13:
      
      
      if (HEAP[$haveMore_addr] != 0) {
        __label__ = 14;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 14:
      var $61 = HEAP[$nextPtr_addr];
      var $62 = HEAP[$s];
      HEAP[$61] = $62;
      HEAP[$0] = 0;
      __label__ = 17;
      break;
     case 15:
      HEAP[$0] = 2;
      __label__ = 17;
      break;
     case 16:
      var $63 = HEAP[$next];
      var $64 = HEAP[$eventPP];
      HEAP[$64] = $63;
      HEAP[$0] = 23;
      __label__ = 17;
      break;
     case 17:
      var $65 = HEAP[$0];
      HEAP[$retval] = $65;
      __label__ = 18;
      break;
     case 18:
      var $retval17 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval17;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _initializeEncoding($parser) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 20;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $retval = __stackBase__ + 4;
      var $0 = __stackBase__ + 8;
      var $iftmp_162 = __stackBase__ + 12;
      var $s = __stackBase__ + 16;
      
      HEAP[$parser_addr] = $parser;
      
      
      var $3 = HEAP[HEAP[$parser_addr] + 232];
      HEAP[$s] = $3;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 236] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$iftmp_162] = FUNCTION_TABLE_OFFSET + 68;
      __label__ = 3;
      break;
     case 2:
      HEAP[$iftmp_162] = FUNCTION_TABLE_OFFSET + 70;
      __label__ = 3;
      break;
     case 3:
      
      var $9 = HEAP[$parser_addr] + 144;
      
      var $11 = HEAP[$parser_addr] + 148;
      var $12 = HEAP[$iftmp_162];
      var $13 = HEAP[$s];
      var $14 = FUNCTION_TABLE[$12]($11, $9, $13);
      
      if ($14 != 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      HEAP[$0] = 0;
      __label__ = 6;
      break;
     case 5:
      
      
      var $18 = HEAP[HEAP[$parser_addr] + 232];
      var $19 = HEAP[$parser_addr];
      var $20 = _handleUnknownEncoding($19, $18);
      HEAP[$0] = $20;
      __label__ = 6;
      break;
     case 6:
      var $21 = HEAP[$0];
      HEAP[$retval] = $21;
      __label__ = 7;
      break;
     case 7:
      var $retval6 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval6;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _processXmlDecl($parser, $isGeneralTextEntity, $s, $next) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 60;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 60);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $isGeneralTextEntity_addr = __stackBase__ + 4;
      var $s_addr = __stackBase__ + 8;
      var $next_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $iftmp_163 = __stackBase__ + 24;
      var $encodingName = __stackBase__ + 28;
      var $storedEncName = __stackBase__ + 32;
      var $newEncoding = __stackBase__ + 36;
      var $version = __stackBase__ + 40;
      var $versionend = __stackBase__ + 44;
      var $storedversion = __stackBase__ + 48;
      var $standalone = __stackBase__ + 52;
      var $result = __stackBase__ + 56;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$isGeneralTextEntity_addr] = $isGeneralTextEntity;
      HEAP[$s_addr] = $s;
      HEAP[$next_addr] = $next;
      HEAP[$encodingName] = 0;
      HEAP[$storedEncName] = 0;
      HEAP[$newEncoding] = 0;
      HEAP[$version] = 0;
      HEAP[$storedversion] = 0;
      HEAP[$standalone] = -1;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 236] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$iftmp_163] = FUNCTION_TABLE_OFFSET + 72;
      __label__ = 3;
      break;
     case 2:
      HEAP[$iftmp_163] = FUNCTION_TABLE_OFFSET + 74;
      __label__ = 3;
      break;
     case 3:
      
      var $6 = HEAP[$parser_addr] + 288;
      
      
      var $9 = HEAP[HEAP[$parser_addr] + 144];
      var $10 = HEAP[$iftmp_163];
      var $11 = HEAP[$isGeneralTextEntity_addr];
      var $12 = HEAP[$s_addr];
      var $13 = HEAP[$next_addr];
      var $14 = FUNCTION_TABLE[$10]($11, $9, $12, $13, $6, $version, $versionend, $encodingName, $newEncoding, $standalone);
      
      if ($14 == 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 4:
      
      
      if (HEAP[$isGeneralTextEntity_addr] != 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      HEAP[$0] = 31;
      __label__ = 38;
      break;
     case 6:
      HEAP[$0] = 30;
      __label__ = 38;
      break;
     case 7:
      
      
      if (HEAP[$isGeneralTextEntity_addr] == 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 8:
      
      
      if (HEAP[$standalone] == 1) {
        __label__ = 9;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 9:
      
      
      
      var $25 = HEAP[HEAP[$parser_addr] + 356] + 130;
      HEAP[$25] = 1;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 492] == 1) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      
      var $31 = HEAP[$parser_addr] + 492;
      HEAP[$31] = 0;
      __label__ = 11;
      break;
     case 11:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 140] != 0) {
        __label__ = 12;
        break;
      } else {
        __label__ = 20;
        break;
      }
     case 12:
      
      
      if (HEAP[$encodingName] != 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 13:
      var $38 = HEAP[$encodingName];
      
      
      
      
      var $43 = HEAP[HEAP[HEAP[$parser_addr] + 144] + 32];
      var $44 = HEAP[$encodingName];
      
      
      var $47 = HEAP[HEAP[$parser_addr] + 144];
      var $48 = FUNCTION_TABLE[$43]($47, $44);
      var $49 = $38 + $48;
      var $50 = HEAP[$encodingName];
      
      
      var $53 = HEAP[HEAP[$parser_addr] + 144];
      
      var $55 = HEAP[$parser_addr] + 440;
      var $56 = _poolStoreString($55, $53, $50, $49);
      HEAP[$storedEncName] = $56;
      
      
      if (HEAP[$storedEncName] == 0) {
        __label__ = 14;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 14:
      HEAP[$0] = 1;
      __label__ = 38;
      break;
     case 15:
      
      
      
      var $62 = HEAP[HEAP[$parser_addr] + 440 + 12];
      
      
      var $65 = HEAP[$parser_addr] + 440 + 16;
      HEAP[$65] = $62;
      __label__ = 16;
      break;
     case 16:
      
      
      if (HEAP[$version] != 0) {
        __label__ = 17;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 17:
      
      
      
      
      
      
      
      var $75 = HEAP[$versionend] + (0 - HEAP[HEAP[HEAP[$parser_addr] + 144] + 68]);
      var $76 = HEAP[$version];
      
      
      var $79 = HEAP[HEAP[$parser_addr] + 144];
      
      var $81 = HEAP[$parser_addr] + 440;
      var $82 = _poolStoreString($81, $79, $76, $75);
      HEAP[$storedversion] = $82;
      
      
      if (HEAP[$storedversion] == 0) {
        __label__ = 18;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 18:
      HEAP[$0] = 1;
      __label__ = 38;
      break;
     case 19:
      
      
      var $87 = HEAP[HEAP[$parser_addr] + 140];
      var $88 = HEAP[$standalone];
      
      
      var $91 = HEAP[HEAP[$parser_addr] + 4];
      var $92 = HEAP[$storedversion];
      var $93 = HEAP[$storedEncName];
      FUNCTION_TABLE[$87]($91, $92, $93, $88);
      __label__ = 22;
      break;
     case 20:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 80] != 0) {
        __label__ = 21;
        break;
      } else {
        __label__ = 22;
        break;
      }
     case 21:
      
      
      var $100 = HEAP[HEAP[$parser_addr] + 144];
      var $101 = HEAP[$parser_addr];
      var $102 = HEAP[$s_addr];
      var $103 = HEAP[$next_addr];
      _reportDefault($101, $100, $102, $103);
      __label__ = 22;
      break;
     case 22:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 232] == 0) {
        __label__ = 23;
        break;
      } else {
        __label__ = 34;
        break;
      }
     case 23:
      
      
      if (HEAP[$newEncoding] != 0) {
        __label__ = 24;
        break;
      } else {
        __label__ = 27;
        break;
      }
     case 24:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$newEncoding] + 68] != HEAP[HEAP[HEAP[$parser_addr] + 144] + 68]) {
        __label__ = 25;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 25:
      var $119 = HEAP[$encodingName];
      
      var $121 = HEAP[$parser_addr] + 288;
      HEAP[$121] = $119;
      HEAP[$0] = 19;
      __label__ = 38;
      break;
     case 26:
      var $122 = HEAP[$newEncoding];
      
      var $124 = HEAP[$parser_addr] + 144;
      HEAP[$124] = $122;
      __label__ = 34;
      break;
     case 27:
      
      
      if (HEAP[$encodingName] != 0) {
        __label__ = 28;
        break;
      } else {
        __label__ = 34;
        break;
      }
     case 28:
      
      
      if (HEAP[$storedEncName] == 0) {
        __label__ = 29;
        break;
      } else {
        __label__ = 31;
        break;
      }
     case 29:
      var $129 = HEAP[$encodingName];
      
      
      
      
      var $134 = HEAP[HEAP[HEAP[$parser_addr] + 144] + 32];
      var $135 = HEAP[$encodingName];
      
      
      var $138 = HEAP[HEAP[$parser_addr] + 144];
      var $139 = FUNCTION_TABLE[$134]($138, $135);
      var $140 = $129 + $139;
      var $141 = HEAP[$encodingName];
      
      
      var $144 = HEAP[HEAP[$parser_addr] + 144];
      
      var $146 = HEAP[$parser_addr] + 440;
      var $147 = _poolStoreString($146, $144, $141, $140);
      HEAP[$storedEncName] = $147;
      
      
      if (HEAP[$storedEncName] == 0) {
        __label__ = 30;
        break;
      } else {
        __label__ = 31;
        break;
      }
     case 30:
      HEAP[$0] = 1;
      __label__ = 38;
      break;
     case 31:
      var $150 = HEAP[$parser_addr];
      var $151 = HEAP[$storedEncName];
      var $152 = _handleUnknownEncoding($150, $151);
      HEAP[$result] = $152;
      
      var $154 = HEAP[$parser_addr] + 440;
      _poolClear($154);
      
      
      if (HEAP[$result] == 18) {
        __label__ = 32;
        break;
      } else {
        __label__ = 33;
        break;
      }
     case 32:
      var $157 = HEAP[$encodingName];
      
      var $159 = HEAP[$parser_addr] + 288;
      HEAP[$159] = $157;
      __label__ = 33;
      break;
     case 33:
      var $160 = HEAP[$result];
      HEAP[$0] = $160;
      __label__ = 38;
      break;
     case 34:
      
      
      if (HEAP[$storedEncName] != 0) {
        __label__ = 36;
        break;
      } else {
        __label__ = 35;
        break;
      }
     case 35:
      
      
      if (HEAP[$storedversion] != 0) {
        __label__ = 36;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 36:
      
      var $166 = HEAP[$parser_addr] + 440;
      _poolClear($166);
      __label__ = 37;
      break;
     case 37:
      HEAP[$0] = 0;
      __label__ = 38;
      break;
     case 38:
      var $167 = HEAP[$0];
      HEAP[$retval] = $167;
      __label__ = 39;
      break;
     case 39:
      var $retval38 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval38;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _handleUnknownEncoding($parser, $encodingName) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 1064;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 1064);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $encodingName_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $iftmp_184 = __stackBase__ + 12;
      var $0 = __stackBase__ + 16;
      var $info = __stackBase__ + 20;
      var $i = __stackBase__ + 1056;
      var $enc = __stackBase__ + 1060;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$encodingName_addr] = $encodingName;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 124] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 1:
      HEAP[$i] = 0;
      __label__ = 3;
      break;
     case 2:
      
      
      var $7 = $info + HEAP[$i] * 4;
      HEAP[$7] = -1;
      
      var $9 = HEAP[$i] + 1;
      HEAP[$i] = $9;
      __label__ = 3;
      break;
     case 3:
      
      
      if (HEAP[$i] <= 255) {
        __label__ = 2;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 4:
      
      HEAP[$info + 1028] = 0;
      
      HEAP[$info + 1024] = 0;
      
      HEAP[$info + 1032] = 0;
      
      
      var $17 = HEAP[HEAP[$parser_addr] + 124];
      
      
      var $20 = HEAP[HEAP[$parser_addr] + 248];
      var $21 = HEAP[$encodingName_addr];
      var $22 = FUNCTION_TABLE[$17]($20, $21, $info);
      
      if ($22 != 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 5:
      
      
      
      var $27 = HEAP[HEAP[$parser_addr] + 12];
      var $28 = _PyExpat_XmlSizeOfUnknownEncoding();
      var $29 = FUNCTION_TABLE[$27]($28);
      
      var $31 = HEAP[$parser_addr] + 240;
      HEAP[$31] = $29;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 240] == 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 6:
      
      
      
      if (HEAP[$info + 1032] != 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      
      var $40 = HEAP[$info + 1032];
      
      var $42 = HEAP[$info + 1024];
      FUNCTION_TABLE[$40]($42);
      __label__ = 8;
      break;
     case 8:
      HEAP[$0] = 1;
      __label__ = 17;
      break;
     case 9:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 236] != 0) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      HEAP[$iftmp_184] = FUNCTION_TABLE_OFFSET + 76;
      __label__ = 12;
      break;
     case 11:
      HEAP[$iftmp_184] = FUNCTION_TABLE_OFFSET + 78;
      __label__ = 12;
      break;
     case 12:
      
      var $48 = HEAP[$info + 1024];
      
      var $50 = HEAP[$info + 1028];
      
      
      var $53 = HEAP[HEAP[$parser_addr] + 240];
      var $54 = HEAP[$iftmp_184];
      
      var $56 = $info;
      var $57 = FUNCTION_TABLE[$54]($53, $56, $50, $48);
      HEAP[$enc] = $57;
      
      
      if (HEAP[$enc] != 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      
      var $61 = HEAP[$info + 1024];
      
      var $63 = HEAP[$parser_addr] + 244;
      HEAP[$63] = $61;
      
      var $65 = HEAP[$info + 1032];
      
      var $67 = HEAP[$parser_addr] + 252;
      HEAP[$67] = $65;
      
      var $69 = HEAP[$parser_addr] + 144;
      var $70 = HEAP[$enc];
      HEAP[$69] = $70;
      HEAP[$0] = 0;
      __label__ = 17;
      break;
     case 14:
      
      
      
      if (HEAP[$info + 1032] != 0) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      
      var $75 = HEAP[$info + 1032];
      
      var $77 = HEAP[$info + 1024];
      FUNCTION_TABLE[$75]($77);
      __label__ = 16;
      break;
     case 16:
      HEAP[$0] = 18;
      __label__ = 17;
      break;
     case 17:
      var $78 = HEAP[$0];
      HEAP[$retval] = $78;
      __label__ = 18;
      break;
     case 18:
      var $retval17 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval17;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _prologInitProcessor($parser, $s, $end, $nextPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $s_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $result = __stackBase__ + 24;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$s_addr] = $s;
      HEAP[$end_addr] = $end;
      HEAP[$nextPtr_addr] = $nextPtr;
      var $1 = HEAP[$parser_addr];
      var $2 = _initializeEncoding($1);
      HEAP[$result] = $2;
      
      
      if (HEAP[$result] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      var $5 = HEAP[$result];
      HEAP[$0] = $5;
      __label__ = 3;
      break;
     case 2:
      
      var $7 = HEAP[$parser_addr] + 280;
      HEAP[$7] = FUNCTION_TABLE_OFFSET + 66;
      var $8 = HEAP[$parser_addr];
      var $9 = HEAP[$s_addr];
      var $10 = HEAP[$end_addr];
      var $11 = HEAP[$nextPtr_addr];
      var $12 = _prologProcessor($8, $9, $10, $11);
      HEAP[$0] = $12;
      __label__ = 3;
      break;
     case 3:
      var $13 = HEAP[$0];
      HEAP[$retval] = $13;
      __label__ = 4;
      break;
     case 4:
      var $retval3 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval3;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _externalParEntInitProcessor($parser, $s, $end, $nextPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $s_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $result = __stackBase__ + 24;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$s_addr] = $s;
      HEAP[$end_addr] = $end;
      HEAP[$nextPtr_addr] = $nextPtr;
      var $1 = HEAP[$parser_addr];
      var $2 = _initializeEncoding($1);
      HEAP[$result] = $2;
      
      
      if (HEAP[$result] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      var $5 = HEAP[$result];
      HEAP[$0] = $5;
      __label__ = 5;
      break;
     case 2:
      
      
      
      var $9 = HEAP[HEAP[$parser_addr] + 356] + 131;
      HEAP[$9] = 1;
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 256 + 20] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      var $16 = HEAP[$parser_addr] + 280;
      HEAP[$16] = FUNCTION_TABLE_OFFSET + 80;
      var $17 = HEAP[$parser_addr];
      var $18 = HEAP[$s_addr];
      var $19 = HEAP[$end_addr];
      var $20 = HEAP[$nextPtr_addr];
      var $21 = _entityValueInitProcessor($17, $18, $19, $20);
      HEAP[$0] = $21;
      __label__ = 5;
      break;
     case 4:
      
      var $23 = HEAP[$parser_addr] + 280;
      HEAP[$23] = FUNCTION_TABLE_OFFSET + 82;
      var $24 = HEAP[$parser_addr];
      var $25 = HEAP[$s_addr];
      var $26 = HEAP[$end_addr];
      var $27 = HEAP[$nextPtr_addr];
      var $28 = _externalParEntProcessor($24, $25, $26, $27);
      HEAP[$0] = $28;
      __label__ = 5;
      break;
     case 5:
      var $29 = HEAP[$0];
      HEAP[$retval] = $29;
      __label__ = 6;
      break;
     case 6:
      var $retval5 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval5;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _entityValueInitProcessor($parser, $s, $end, $nextPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 40;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $s_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $tok = __stackBase__ + 24;
      var $start = __stackBase__ + 28;
      var $next = __stackBase__ + 32;
      var $result = __stackBase__ + 36;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$s_addr] = $s;
      HEAP[$end_addr] = $end;
      HEAP[$nextPtr_addr] = $nextPtr;
      var $1 = HEAP[$s_addr];
      HEAP[$start] = $1;
      var $2 = HEAP[$start];
      HEAP[$next] = $2;
      
      var $4 = HEAP[$parser_addr] + 288;
      var $5 = HEAP[$start];
      HEAP[$4] = $5;
      __label__ = 1;
      break;
     case 1:
      
      
      
      
      
      var $11 = HEAP[HEAP[HEAP[$parser_addr] + 144]];
      
      
      var $14 = HEAP[HEAP[$parser_addr] + 144];
      var $15 = HEAP[$start];
      var $16 = HEAP[$end_addr];
      var $17 = FUNCTION_TABLE[$11]($14, $15, $16, $next);
      HEAP[$tok] = $17;
      var $18 = HEAP[$next];
      
      var $20 = HEAP[$parser_addr] + 292;
      HEAP[$20] = $18;
      
      
      if (HEAP[$tok] <= 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 2:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 480 + 4] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 3:
      
      
      if (HEAP[$tok] != 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      var $30 = HEAP[$nextPtr_addr];
      var $31 = HEAP[$s_addr];
      HEAP[$30] = $31;
      HEAP[$0] = 0;
      __label__ = 22;
      break;
     case 5:
      var $32 = HEAP[$tok];
      if ($32 == -2) {
        __label__ = 8;
        break;
      } else if ($32 == -1) {
        __label__ = 7;
        break;
      } else if ($32 == 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 6:
      HEAP[$0] = 4;
      __label__ = 22;
      break;
     case 7:
      HEAP[$0] = 5;
      __label__ = 22;
      break;
     case 8:
      HEAP[$0] = 6;
      __label__ = 22;
      break;
     case 9:
      
      
      var $35 = HEAP[HEAP[$parser_addr] + 144];
      var $36 = HEAP[$parser_addr];
      var $37 = HEAP[$s_addr];
      var $38 = HEAP[$end_addr];
      var $39 = _storeEntityValue($36, $35, $37, $38);
      HEAP[$0] = $39;
      __label__ = 22;
      break;
     case 10:
      
      
      if (HEAP[$tok] == 12) {
        __label__ = 11;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 11:
      var $42 = HEAP[$next];
      var $43 = HEAP[$parser_addr];
      var $44 = HEAP[$start];
      var $45 = _processXmlDecl($43, 0, $44, $42);
      HEAP[$result] = $45;
      
      
      if (HEAP[$result] != 0) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      var $48 = HEAP[$result];
      HEAP[$0] = $48;
      __label__ = 22;
      break;
     case 13:
      
      
      
      var $52 = HEAP[HEAP[$parser_addr] + 480];
      if ($52 == 2) {
        __label__ = 15;
        break;
      } else if ($52 == 3) {
        __label__ = 14;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 14:
      var $53 = HEAP[$next];
      var $54 = HEAP[$nextPtr_addr];
      HEAP[$54] = $53;
      HEAP[$0] = 0;
      __label__ = 22;
      break;
     case 15:
      HEAP[$0] = 35;
      __label__ = 22;
      break;
     case 16:
      var $55 = HEAP[$next];
      var $56 = HEAP[$nextPtr_addr];
      HEAP[$56] = $55;
      
      var $58 = HEAP[$parser_addr] + 280;
      HEAP[$58] = FUNCTION_TABLE_OFFSET + 84;
      var $59 = HEAP[$next];
      var $60 = HEAP[$parser_addr];
      var $61 = HEAP[$end_addr];
      var $62 = HEAP[$nextPtr_addr];
      var $63 = _entityValueProcessor($60, $59, $61, $62);
      HEAP[$0] = $63;
      __label__ = 22;
      break;
     case 17:
      
      
      if (HEAP[$tok] == 14) {
        __label__ = 18;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 18:
      
      
      
      if (HEAP[$next] == HEAP[$end_addr]) {
        __label__ = 19;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 19:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 480 + 4] == 0) {
        __label__ = 20;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 20:
      var $74 = HEAP[$next];
      var $75 = HEAP[$nextPtr_addr];
      HEAP[$75] = $74;
      HEAP[$0] = 0;
      __label__ = 22;
      break;
     case 21:
      var $76 = HEAP[$next];
      HEAP[$start] = $76;
      
      var $78 = HEAP[$parser_addr] + 288;
      var $79 = HEAP[$start];
      HEAP[$78] = $79;
      __label__ = 1;
      break;
     case 22:
      var $80 = HEAP[$0];
      HEAP[$retval] = $80;
      __label__ = 23;
      break;
     case 23:
      var $retval22 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval22;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _externalParEntProcessor($parser, $s, $end, $nextPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 32;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $s_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $next = __stackBase__ + 24;
      var $tok = __stackBase__ + 28;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$s_addr] = $s;
      HEAP[$end_addr] = $end;
      HEAP[$nextPtr_addr] = $nextPtr;
      var $1 = HEAP[$s_addr];
      HEAP[$next] = $1;
      
      
      
      
      
      var $7 = HEAP[HEAP[HEAP[$parser_addr] + 144]];
      
      
      var $10 = HEAP[HEAP[$parser_addr] + 144];
      var $11 = HEAP[$s_addr];
      var $12 = HEAP[$end_addr];
      var $13 = FUNCTION_TABLE[$7]($10, $11, $12, $next);
      HEAP[$tok] = $13;
      
      
      if (HEAP[$tok] <= 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 1:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 480 + 4] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 2:
      
      
      if (HEAP[$tok] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      var $23 = HEAP[$nextPtr_addr];
      var $24 = HEAP[$s_addr];
      HEAP[$23] = $24;
      HEAP[$0] = 0;
      __label__ = 12;
      break;
     case 4:
      var $25 = HEAP[$tok];
      if ($25 == -2) {
        __label__ = 7;
        break;
      } else if ($25 == -1) {
        __label__ = 6;
        break;
      } else if ($25 == 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 5:
      HEAP[$0] = 4;
      __label__ = 12;
      break;
     case 6:
      HEAP[$0] = 5;
      __label__ = 12;
      break;
     case 7:
      HEAP[$0] = 6;
      __label__ = 12;
      break;
     case 8:
      __label__ = 11;
      break;
     case 9:
      
      
      if (HEAP[$tok] == 14) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      var $28 = HEAP[$next];
      HEAP[$s_addr] = $28;
      
      
      
      
      
      var $34 = HEAP[HEAP[HEAP[$parser_addr] + 144]];
      
      
      var $37 = HEAP[HEAP[$parser_addr] + 144];
      var $38 = HEAP[$s_addr];
      var $39 = HEAP[$end_addr];
      var $40 = FUNCTION_TABLE[$34]($37, $38, $39, $next);
      HEAP[$tok] = $40;
      __label__ = 11;
      break;
     case 11:
      
      var $42 = HEAP[$parser_addr] + 280;
      HEAP[$42] = FUNCTION_TABLE_OFFSET + 66;
      
      
      
      
      
      
      var $49 = HEAP[$next];
      
      
      var $52 = HEAP[HEAP[$parser_addr] + 144];
      var $53 = HEAP[$parser_addr];
      var $54 = HEAP[$s_addr];
      var $55 = HEAP[$end_addr];
      var $56 = HEAP[$tok];
      var $57 = HEAP[$nextPtr_addr];
      var $58 = HEAP[HEAP[$parser_addr] + 480 + 4] == 0 & 255;
      var $59 = _doProlog($53, $52, $54, $55, $56, $49, $57, $58);
      HEAP[$0] = $59;
      __label__ = 12;
      break;
     case 12:
      var $60 = HEAP[$0];
      HEAP[$retval] = $60;
      __label__ = 13;
      break;
     case 13:
      var $retval12 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval12;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _entityValueProcessor($parser, $s, $end, $nextPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 40;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $s_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $start = __stackBase__ + 24;
      var $next = __stackBase__ + 28;
      var $enc = __stackBase__ + 32;
      var $tok = __stackBase__ + 36;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$s_addr] = $s;
      HEAP[$end_addr] = $end;
      HEAP[$nextPtr_addr] = $nextPtr;
      var $1 = HEAP[$s_addr];
      HEAP[$start] = $1;
      var $2 = HEAP[$s_addr];
      HEAP[$next] = $2;
      
      
      var $5 = HEAP[HEAP[$parser_addr] + 144];
      HEAP[$enc] = $5;
      __label__ = 1;
      break;
     case 1:
      
      
      
      var $9 = HEAP[HEAP[$enc]];
      var $10 = HEAP[$enc];
      var $11 = HEAP[$start];
      var $12 = HEAP[$end_addr];
      var $13 = FUNCTION_TABLE[$9]($10, $11, $12, $next);
      HEAP[$tok] = $13;
      
      
      if (HEAP[$tok] <= 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 2:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 480 + 4] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 3:
      
      
      if (HEAP[$tok] != 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      var $23 = HEAP[$nextPtr_addr];
      var $24 = HEAP[$s_addr];
      HEAP[$23] = $24;
      HEAP[$0] = 0;
      __label__ = 11;
      break;
     case 5:
      var $25 = HEAP[$tok];
      if ($25 == -2) {
        __label__ = 8;
        break;
      } else if ($25 == -1) {
        __label__ = 7;
        break;
      } else if ($25 == 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 6:
      HEAP[$0] = 4;
      __label__ = 11;
      break;
     case 7:
      HEAP[$0] = 5;
      __label__ = 11;
      break;
     case 8:
      HEAP[$0] = 6;
      __label__ = 11;
      break;
     case 9:
      var $26 = HEAP[$parser_addr];
      var $27 = HEAP[$enc];
      var $28 = HEAP[$s_addr];
      var $29 = HEAP[$end_addr];
      var $30 = _storeEntityValue($26, $27, $28, $29);
      HEAP[$0] = $30;
      __label__ = 11;
      break;
     case 10:
      var $31 = HEAP[$next];
      HEAP[$start] = $31;
      __label__ = 1;
      break;
     case 11:
      var $32 = HEAP[$0];
      HEAP[$retval] = $32;
      __label__ = 12;
      break;
     case 12:
      var $retval11 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval11;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _prologProcessor($parser, $s, $end, $nextPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 32;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $s_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $next = __stackBase__ + 24;
      var $tok = __stackBase__ + 28;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$s_addr] = $s;
      HEAP[$end_addr] = $end;
      HEAP[$nextPtr_addr] = $nextPtr;
      var $1 = HEAP[$s_addr];
      HEAP[$next] = $1;
      
      
      
      
      
      var $7 = HEAP[HEAP[HEAP[$parser_addr] + 144]];
      
      
      var $10 = HEAP[HEAP[$parser_addr] + 144];
      var $11 = HEAP[$s_addr];
      var $12 = HEAP[$end_addr];
      var $13 = FUNCTION_TABLE[$7]($10, $11, $12, $next);
      HEAP[$tok] = $13;
      
      
      
      
      
      
      var $20 = HEAP[$next];
      
      
      var $23 = HEAP[HEAP[$parser_addr] + 144];
      var $24 = HEAP[$parser_addr];
      var $25 = HEAP[$s_addr];
      var $26 = HEAP[$end_addr];
      var $27 = HEAP[$tok];
      var $28 = HEAP[$nextPtr_addr];
      var $29 = HEAP[HEAP[$parser_addr] + 480 + 4] == 0 & 255;
      var $30 = _doProlog($24, $23, $25, $26, $27, $20, $28, $29);
      HEAP[$0] = $30;
      var $31 = HEAP[$0];
      HEAP[$retval] = $31;
      __label__ = 1;
      break;
     case 1:
      var $retval1 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval1;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _doProlog($parser, $enc, $s, $end, $tok, $next, $nextPtr, $haveMore) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 189;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 189);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $enc_addr = __stackBase__ + 4;
      var $s_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $tok_addr = __stackBase__ + 16;
      var $next_addr = __stackBase__ + 20;
      var $nextPtr_addr = __stackBase__ + 24;
      var $haveMore_addr = __stackBase__ + 28;
      var $retval = __stackBase__ + 29;
      var $iftmp_227 = __stackBase__ + 33;
      var $iftmp_226 = __stackBase__ + 37;
      var $iftmp_217 = __stackBase__ + 41;
      var $iftmp_215 = __stackBase__ + 45;
      var $iftmp_206 = __stackBase__ + 49;
      var $0 = __stackBase__ + 53;
      var $dtd = __stackBase__ + 57;
      var $eventPP = __stackBase__ + 61;
      var $eventEndPP = __stackBase__ + 65;
      var $quant = __stackBase__ + 69;
      var $role = __stackBase__ + 73;
      var $handleDefault = __stackBase__ + 77;
      var $result = __stackBase__ + 78;
      var $result34 = __stackBase__ + 82;
      var $tem = __stackBase__ + 86;
      var $hadParamEntityRefs = __stackBase__ + 90;
      var $entity = __stackBase__ + 91;
      var $hadParamEntityRefs79 = __stackBase__ + 95;
      var $entity82 = __stackBase__ + 96;
      var $prefix = __stackBase__ + 100;
      var $attVal = __stackBase__ + 104;
      var $result144 = __stackBase__ + 108;
      var $result164 = __stackBase__ + 112;
      var $name = __stackBase__ + 116;
      var $name227 = __stackBase__ + 120;
      var $tem251 = __stackBase__ + 124;
      var $systemId = __stackBase__ + 128;
      var $result270 = __stackBase__ + 132;
      var $temp = __stackBase__ + 136;
      var $temp283 = __stackBase__ + 140;
      var $myindex = __stackBase__ + 144;
      var $name312 = __stackBase__ + 148;
      var $entity313 = __stackBase__ + 152;
      var $result334 = __stackBase__ + 156;
      var $betweenDecl = __stackBase__ + 160;
      var $content = __stackBase__ + 161;
      var $el = __stackBase__ + 165;
      var $name373 = __stackBase__ + 169;
      var $nameLen = __stackBase__ + 173;
      var $nxt = __stackBase__ + 177;
      var $myindex374 = __stackBase__ + 181;
      var $model = __stackBase__ + 185;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$enc_addr] = $enc;
      HEAP[$s_addr] = $s;
      HEAP[$end_addr] = $end;
      HEAP[$tok_addr] = $tok;
      HEAP[$next_addr] = $next;
      HEAP[$nextPtr_addr] = $nextPtr;
      HEAP[$haveMore_addr] = $haveMore;
      
      
      var $3 = HEAP[HEAP[$parser_addr] + 356];
      HEAP[$dtd] = $3;
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 144] == HEAP[$enc_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      
      var $10 = HEAP[$parser_addr] + 288;
      HEAP[$eventPP] = $10;
      
      var $12 = HEAP[$parser_addr] + 292;
      HEAP[$eventEndPP] = $12;
      __label__ = 3;
      break;
     case 2:
      
      
      
      var $16 = HEAP[HEAP[$parser_addr] + 300];
      HEAP[$eventPP] = $16;
      
      
      
      var $20 = HEAP[HEAP[$parser_addr] + 300] + 4;
      HEAP[$eventEndPP] = $20;
      __label__ = 3;
      break;
     case 3:
      HEAP[$handleDefault] = 1;
      var $21 = HEAP[$eventPP];
      var $22 = HEAP[$s_addr];
      HEAP[$21] = $22;
      var $23 = HEAP[$next_addr];
      var $24 = HEAP[$eventEndPP];
      HEAP[$24] = $23;
      
      
      if (HEAP[$tok_addr] <= 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 22;
        break;
      }
     case 4:
      
      
      if (HEAP[$haveMore_addr] != 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 5:
      
      
      if (HEAP[$tok_addr] != 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      var $31 = HEAP[$nextPtr_addr];
      var $32 = HEAP[$s_addr];
      HEAP[$31] = $32;
      HEAP[$0] = 0;
      __label__ = 422;
      break;
     case 7:
      var $33 = HEAP[$tok_addr];
      if ($33 == -15) {
        __label__ = 11;
        break;
      } else if ($33 == -4) {
        __label__ = 12;
        break;
      } else if ($33 == -2) {
        __label__ = 10;
        break;
      } else if ($33 == -1) {
        __label__ = 9;
        break;
      } else if ($33 == 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 8:
      var $34 = HEAP[$next_addr];
      var $35 = HEAP[$eventPP];
      HEAP[$35] = $34;
      HEAP[$0] = 4;
      __label__ = 422;
      break;
     case 9:
      HEAP[$0] = 5;
      __label__ = 422;
      break;
     case 10:
      HEAP[$0] = 6;
      __label__ = 422;
      break;
     case 11:
      
      var $37 = 0 - HEAP[$tok_addr];
      HEAP[$tok_addr] = $37;
      __label__ = 22;
      break;
     case 12:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 144] != HEAP[$enc_addr]) {
        __label__ = 13;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 13:
      
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$parser_addr] + 300] + 20] == 0) {
        __label__ = 14;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 14:
      var $49 = HEAP[$nextPtr_addr];
      var $50 = HEAP[$s_addr];
      HEAP[$49] = $50;
      HEAP[$0] = 0;
      __label__ = 422;
      break;
     case 15:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 488] != 0) {
        __label__ = 17;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 16:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 144] != HEAP[$enc_addr]) {
        __label__ = 17;
        break;
      } else {
        __label__ = 20;
        break;
      }
     case 17:
      
      
      
      var $63 = HEAP[HEAP[$parser_addr] + 256];
      
      var $65 = HEAP[$parser_addr] + 256;
      var $66 = HEAP[$end_addr];
      var $67 = HEAP[$end_addr];
      var $68 = HEAP[$enc_addr];
      var $69 = FUNCTION_TABLE[$63]($65, -4, $66, $67, $68);
      var $70 = $69 == -1;
      if ($70) {
        __label__ = 18;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 18:
      HEAP[$0] = 29;
      __label__ = 422;
      break;
     case 19:
      var $71 = HEAP[$nextPtr_addr];
      var $72 = HEAP[$s_addr];
      HEAP[$71] = $72;
      HEAP[$0] = 0;
      __label__ = 422;
      break;
     case 20:
      HEAP[$0] = 3;
      __label__ = 422;
      break;
     case 21:
      
      var $74 = 0 - HEAP[$tok_addr];
      HEAP[$tok_addr] = $74;
      var $75 = HEAP[$end_addr];
      HEAP[$next_addr] = $75;
      __label__ = 22;
      break;
     case 22:
      
      
      
      var $79 = HEAP[HEAP[$parser_addr] + 256];
      var $80 = HEAP[$next_addr];
      
      var $82 = HEAP[$parser_addr] + 256;
      var $83 = HEAP[$tok_addr];
      var $84 = HEAP[$s_addr];
      var $85 = HEAP[$enc_addr];
      var $86 = FUNCTION_TABLE[$79]($82, $83, $84, $80, $85);
      HEAP[$role] = $86;
      var $87 = HEAP[$role];
      if ($87 == -1) {
        __label__ = 261;
        break;
      } else if ($87 == 0) {
        __label__ = 396;
        break;
      } else if ($87 == 1) {
        __label__ = 23;
        break;
      } else if ($87 == 2) {
        __label__ = 78;
        break;
      } else if ($87 == 3) {
        __label__ = 399;
        break;
      } else if ($87 == 4) {
        __label__ = 26;
        break;
      } else if ($87 == 5) {
        __label__ = 170;
        break;
      } else if ($87 == 6) {
        __label__ = 37;
        break;
      } else if ($87 == 7) {
        __label__ = 31;
        break;
      } else if ($87 == 8) {
        __label__ = 54;
        break;
      } else if ($87 == 9) {
        __label__ = 205;
        break;
      } else if ($87 == 10) {
        __label__ = 223;
        break;
      } else if ($87 == 11) {
        __label__ = 402;
        break;
      } else if ($87 == 12) {
        __label__ = 161;
        break;
      } else if ($87 == 13) {
        __label__ = 184;
        break;
      } else if ($87 == 14) {
        __label__ = 45;
        break;
      } else if ($87 == 15) {
        __label__ = 191;
        break;
      } else if ($87 == 16) {
        __label__ = 196;
        break;
      } else if ($87 == 17) {
        __label__ = 406;
        break;
      } else if ($87 == 18) {
        __label__ = 239;
        break;
      } else if ($87 == 19) {
        __label__ = 251;
        break;
      } else if ($87 == 20) {
        __label__ = 257;
        break;
      } else if ($87 == 21) {
        __label__ = 244;
        break;
      } else if ($87 == 22) {
        __label__ = 96;
        break;
      } else if ($87 == 23) {
        __label__ = 99;
        break;
      } else if ($87 == 24) {
        __label__ = 100;
        break;
      } else if ($87 == 25) {
        __label__ = 101;
        break;
      } else if ($87 == 26) {
        __label__ = 102;
        break;
      } else if ($87 == 27) {
        __label__ = 103;
        break;
      } else if ($87 == 28) {
        __label__ = 104;
        break;
      } else if ($87 == 29) {
        __label__ = 105;
        break;
      } else if ($87 == 30) {
        __label__ = 106;
        break;
      } else if ($87 == 31) {
        __label__ = 111;
        break;
      } else if ($87 == 32) {
        __label__ = 111;
        break;
      } else if ($87 == 33) {
        __label__ = 409;
        break;
      } else if ($87 == 34) {
        __label__ = 93;
        break;
      } else if ($87 == 35) {
        __label__ = 125;
        break;
      } else if ($87 == 36) {
        __label__ = 125;
        break;
      } else if ($87 == 37) {
        __label__ = 142;
        break;
      } else if ($87 == 38) {
        __label__ = 142;
        break;
      } else if ($87 == 39) {
        __label__ = 413;
        break;
      } else if ($87 == 40) {
        __label__ = 340;
        break;
      } else if ($87 == 41) {
        __label__ = 345;
        break;
      } else if ($87 == 42) {
        __label__ = 345;
        break;
      } else if ($87 == 43) {
        __label__ = 355;
        break;
      } else if ($87 == 44) {
        __label__ = 272;
        break;
      } else if ($87 == 45) {
        __label__ = 376;
        break;
      } else if ($87 == 46) {
        __label__ = 378;
        break;
      } else if ($87 == 47) {
        __label__ = 377;
        break;
      } else if ($87 == 48) {
        __label__ = 379;
        break;
      } else if ($87 == 49) {
        __label__ = 295;
        break;
      } else if ($87 == 50) {
        __label__ = 289;
        break;
      } else if ($87 == 51) {
        __label__ = 359;
        break;
      } else if ($87 == 52) {
        __label__ = 361;
        break;
      } else if ($87 == 53) {
        __label__ = 360;
        break;
      } else if ($87 == 54) {
        __label__ = 362;
        break;
      } else if ($87 == 55) {
        __label__ = 390;
        break;
      } else if ($87 == 56) {
        __label__ = 393;
        break;
      } else if ($87 == 57) {
        __label__ = 34;
        break;
      } else if ($87 == 58) {
        __label__ = 265;
        break;
      } else if ($87 == 59) {
        __label__ = 303;
        break;
      } else if ($87 == 60) {
        __label__ = 303;
        break;
      } else {
        __label__ = 415;
        break;
      }
     case 23:
      var $88 = HEAP[$next_addr];
      var $89 = HEAP[$parser_addr];
      var $90 = HEAP[$s_addr];
      var $91 = _processXmlDecl($89, 0, $90, $88);
      HEAP[$result] = $91;
      
      
      if (HEAP[$result] != 0) {
        __label__ = 24;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 24:
      var $94 = HEAP[$result];
      HEAP[$0] = $94;
      __label__ = 422;
      break;
     case 25:
      
      
      var $97 = HEAP[HEAP[$parser_addr] + 144];
      HEAP[$enc_addr] = $97;
      HEAP[$handleDefault] = 0;
      __label__ = 415;
      break;
     case 26:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 84] != 0) {
        __label__ = 27;
        break;
      } else {
        __label__ = 30;
        break;
      }
     case 27:
      var $102 = HEAP[$next_addr];
      
      var $104 = HEAP[$parser_addr] + 416;
      var $105 = HEAP[$enc_addr];
      var $106 = HEAP[$s_addr];
      var $107 = _poolStoreString($104, $105, $106, $102);
      
      var $109 = HEAP[$parser_addr] + 320;
      HEAP[$109] = $107;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 320] == 0) {
        __label__ = 28;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 28:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 29:
      
      
      
      var $117 = HEAP[HEAP[$parser_addr] + 416 + 12];
      
      
      var $120 = HEAP[$parser_addr] + 416 + 16;
      HEAP[$120] = $117;
      
      var $122 = HEAP[$parser_addr] + 328;
      HEAP[$122] = 0;
      HEAP[$handleDefault] = 0;
      __label__ = 30;
      break;
     case 30:
      
      var $124 = HEAP[$parser_addr] + 324;
      HEAP[$124] = 0;
      __label__ = 415;
      break;
     case 31:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 84] != 0) {
        __label__ = 32;
        break;
      } else {
        __label__ = 33;
        break;
      }
     case 32:
      
      
      var $131 = HEAP[HEAP[$parser_addr] + 84];
      
      
      var $134 = HEAP[HEAP[$parser_addr] + 328];
      
      
      var $137 = HEAP[HEAP[$parser_addr] + 324];
      
      
      var $140 = HEAP[HEAP[$parser_addr] + 320];
      
      
      var $143 = HEAP[HEAP[$parser_addr] + 4];
      FUNCTION_TABLE[$131]($143, $140, $137, $134, 1);
      
      var $145 = HEAP[$parser_addr] + 320;
      HEAP[$145] = 0;
      
      var $147 = HEAP[$parser_addr] + 416;
      _poolClear($147);
      HEAP[$handleDefault] = 0;
      __label__ = 33;
      break;
     case 33:
      __label__ = 415;
      break;
     case 34:
      var $148 = HEAP[$next_addr];
      var $149 = HEAP[$parser_addr];
      var $150 = HEAP[$s_addr];
      var $151 = _processXmlDecl($149, 1, $150, $148);
      HEAP[$result34] = $151;
      
      
      if (HEAP[$result34] != 0) {
        __label__ = 35;
        break;
      } else {
        __label__ = 36;
        break;
      }
     case 35:
      var $154 = HEAP[$result34];
      HEAP[$0] = $154;
      __label__ = 422;
      break;
     case 36:
      
      
      var $157 = HEAP[HEAP[$parser_addr] + 144];
      HEAP[$enc_addr] = $157;
      HEAP[$handleDefault] = 0;
      __label__ = 415;
      break;
     case 37:
      
      var $159 = HEAP[$parser_addr] + 489;
      HEAP[$159] = 0;
      
      var $161 = HEAP[$dtd] + 132;
      var $162 = _lookup($161, _externalSubsetName_5988, 36);
      var $163 = $162;
      
      var $165 = HEAP[$parser_addr] + 316;
      HEAP[$165] = $163;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 316] == 0) {
        __label__ = 38;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 38:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 39:
      
      var $171 = HEAP[$dtd] + 129;
      HEAP[$171] = 1;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 84] != 0) {
        __label__ = 40;
        break;
      } else {
        __label__ = 45;
        break;
      }
     case 40:
      
      
      var $178 = HEAP[HEAP[$enc_addr] + 56];
      var $179 = HEAP[$next_addr];
      var $180 = HEAP[$enc_addr];
      var $181 = HEAP[$s_addr];
      var $182 = HEAP[$eventPP];
      var $183 = FUNCTION_TABLE[$178]($180, $181, $179, $182);
      
      if ($183 == 0) {
        __label__ = 41;
        break;
      } else {
        __label__ = 42;
        break;
      }
     case 41:
      HEAP[$0] = 32;
      __label__ = 422;
      break;
     case 42:
      
      
      
      
      
      var $190 = HEAP[$next_addr] + (0 - HEAP[HEAP[$enc_addr] + 68]);
      
      
      
      
      var $195 = HEAP[$s_addr] + HEAP[HEAP[$enc_addr] + 68];
      
      var $197 = HEAP[$parser_addr] + 416;
      var $198 = HEAP[$enc_addr];
      var $199 = _poolStoreString($197, $198, $195, $190);
      
      var $201 = HEAP[$parser_addr] + 328;
      HEAP[$201] = $199;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 328] == 0) {
        __label__ = 43;
        break;
      } else {
        __label__ = 44;
        break;
      }
     case 43:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 44:
      
      
      var $208 = HEAP[HEAP[$parser_addr] + 328];
      _normalizePublicId($208);
      
      
      
      var $212 = HEAP[HEAP[$parser_addr] + 416 + 12];
      
      
      var $215 = HEAP[$parser_addr] + 416 + 16;
      HEAP[$215] = $212;
      HEAP[$handleDefault] = 0;
      __label__ = 47;
      break;
     case 45:
      
      
      var $218 = HEAP[HEAP[$enc_addr] + 56];
      var $219 = HEAP[$next_addr];
      var $220 = HEAP[$enc_addr];
      var $221 = HEAP[$s_addr];
      var $222 = HEAP[$eventPP];
      var $223 = FUNCTION_TABLE[$218]($220, $221, $219, $222);
      
      if ($223 == 0) {
        __label__ = 46;
        break;
      } else {
        __label__ = 47;
        break;
      }
     case 46:
      HEAP[$0] = 32;
      __label__ = 422;
      break;
     case 47:
      
      
      
      
      if (HEAP[HEAP[$dtd] + 128] != 0) {
        __label__ = 48;
        break;
      } else {
        __label__ = 53;
        break;
      }
     case 48:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 316] != 0) {
        __label__ = 49;
        break;
      } else {
        __label__ = 53;
        break;
      }
     case 49:
      
      
      
      
      
      var $238 = HEAP[$next_addr] + (0 - HEAP[HEAP[$enc_addr] + 68]);
      
      
      
      
      var $243 = HEAP[$s_addr] + HEAP[HEAP[$enc_addr] + 68];
      
      var $245 = HEAP[$dtd] + 80;
      var $246 = HEAP[$enc_addr];
      var $247 = _poolStoreString($245, $246, $243, $238);
      HEAP[$tem] = $247;
      
      
      if (HEAP[$tem] == 0) {
        __label__ = 50;
        break;
      } else {
        __label__ = 51;
        break;
      }
     case 50:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 51:
      var $250 = HEAP[$tem];
      _normalizePublicId($250);
      
      
      
      var $254 = HEAP[HEAP[$parser_addr] + 316] + 24;
      var $255 = HEAP[$tem];
      HEAP[$254] = $255;
      
      
      
      var $259 = HEAP[HEAP[$dtd] + 80 + 12];
      
      
      var $262 = HEAP[$dtd] + 80 + 16;
      HEAP[$262] = $259;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 136] != 0) {
        __label__ = 52;
        break;
      } else {
        __label__ = 53;
        break;
      }
     case 52:
      HEAP[$handleDefault] = 0;
      __label__ = 53;
      break;
     case 53:
      __label__ = 415;
      break;
     case 54:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 320] != 0) {
        __label__ = 55;
        break;
      } else {
        __label__ = 56;
        break;
      }
     case 55:
      
      
      var $273 = HEAP[HEAP[$parser_addr] + 84];
      
      
      var $276 = HEAP[HEAP[$parser_addr] + 328];
      
      
      var $279 = HEAP[HEAP[$parser_addr] + 324];
      
      
      var $282 = HEAP[HEAP[$parser_addr] + 320];
      
      
      var $285 = HEAP[HEAP[$parser_addr] + 4];
      FUNCTION_TABLE[$273]($285, $282, $279, $276, 0);
      
      var $287 = HEAP[$parser_addr] + 416;
      _poolClear($287);
      HEAP[$handleDefault] = 0;
      __label__ = 56;
      break;
     case 56:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 324] != 0) {
        __label__ = 58;
        break;
      } else {
        __label__ = 57;
        break;
      }
     case 57:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 489] != 0) {
        __label__ = 58;
        break;
      } else {
        __label__ = 75;
        break;
      }
     case 58:
      
      
      var $298 = HEAP[HEAP[$dtd] + 129];
      HEAP[$hadParamEntityRefs] = $298;
      
      var $300 = HEAP[$dtd] + 129;
      HEAP[$300] = 1;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 492] != 0) {
        __label__ = 59;
        break;
      } else {
        __label__ = 74;
        break;
      }
     case 59:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 112] != 0) {
        __label__ = 60;
        break;
      } else {
        __label__ = 74;
        break;
      }
     case 60:
      
      var $310 = HEAP[$dtd] + 132;
      var $311 = _lookup($310, _externalSubsetName_5988, 36);
      var $312 = $311;
      HEAP[$entity] = $312;
      
      
      if (HEAP[$entity] == 0) {
        __label__ = 61;
        break;
      } else {
        __label__ = 62;
        break;
      }
     case 61:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 62:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 489] != 0) {
        __label__ = 63;
        break;
      } else {
        __label__ = 64;
        break;
      }
     case 63:
      
      
      var $321 = HEAP[HEAP[$parser_addr] + 360];
      
      var $323 = HEAP[$entity] + 20;
      HEAP[$323] = $321;
      __label__ = 64;
      break;
     case 64:
      
      var $325 = HEAP[$dtd] + 131;
      HEAP[$325] = 0;
      
      
      var $328 = HEAP[HEAP[$parser_addr] + 112];
      
      
      var $331 = HEAP[HEAP[$entity] + 24];
      
      
      var $334 = HEAP[HEAP[$entity] + 16];
      
      
      var $337 = HEAP[HEAP[$entity] + 20];
      
      
      var $340 = HEAP[HEAP[$parser_addr] + 116];
      var $341 = FUNCTION_TABLE[$328]($340, 0, $337, $334, $331);
      
      if ($341 == 0) {
        __label__ = 65;
        break;
      } else {
        __label__ = 66;
        break;
      }
     case 65:
      HEAP[$0] = 21;
      __label__ = 422;
      break;
     case 66:
      
      
      
      
      if (HEAP[HEAP[$dtd] + 131] != 0) {
        __label__ = 67;
        break;
      } else {
        __label__ = 72;
        break;
      }
     case 67:
      
      
      
      
      if (HEAP[HEAP[$dtd] + 130] == 0) {
        __label__ = 68;
        break;
      } else {
        __label__ = 71;
        break;
      }
     case 68:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 108] != 0) {
        __label__ = 69;
        break;
      } else {
        __label__ = 71;
        break;
      }
     case 69:
      
      
      var $357 = HEAP[HEAP[$parser_addr] + 108];
      
      
      var $360 = HEAP[HEAP[$parser_addr] + 4];
      var $361 = FUNCTION_TABLE[$357]($360);
      
      if ($361 == 0) {
        __label__ = 70;
        break;
      } else {
        __label__ = 71;
        break;
      }
     case 70:
      HEAP[$0] = 22;
      __label__ = 422;
      break;
     case 71:
      __label__ = 74;
      break;
     case 72:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 324] == 0) {
        __label__ = 73;
        break;
      } else {
        __label__ = 74;
        break;
      }
     case 73:
      
      var $368 = HEAP[$dtd] + 129;
      var $369 = HEAP[$hadParamEntityRefs];
      HEAP[$368] = $369;
      __label__ = 74;
      break;
     case 74:
      
      var $371 = HEAP[$parser_addr] + 489;
      HEAP[$371] = 0;
      __label__ = 75;
      break;
     case 75:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 88] != 0) {
        __label__ = 76;
        break;
      } else {
        __label__ = 77;
        break;
      }
     case 76:
      
      
      var $378 = HEAP[HEAP[$parser_addr] + 88];
      
      
      var $381 = HEAP[HEAP[$parser_addr] + 4];
      FUNCTION_TABLE[$378]($381);
      HEAP[$handleDefault] = 0;
      __label__ = 77;
      break;
     case 77:
      __label__ = 415;
      break;
     case 78:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 489] != 0) {
        __label__ = 79;
        break;
      } else {
        __label__ = 92;
        break;
      }
     case 79:
      
      
      var $388 = HEAP[HEAP[$dtd] + 129];
      HEAP[$hadParamEntityRefs79] = $388;
      
      var $390 = HEAP[$dtd] + 129;
      HEAP[$390] = 1;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 492] != 0) {
        __label__ = 80;
        break;
      } else {
        __label__ = 92;
        break;
      }
     case 80:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 112] != 0) {
        __label__ = 81;
        break;
      } else {
        __label__ = 92;
        break;
      }
     case 81:
      
      var $400 = HEAP[$dtd] + 132;
      var $401 = _lookup($400, _externalSubsetName_5988, 36);
      var $402 = $401;
      HEAP[$entity82] = $402;
      
      
      if (HEAP[$entity82] == 0) {
        __label__ = 82;
        break;
      } else {
        __label__ = 83;
        break;
      }
     case 82:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 83:
      
      
      var $407 = HEAP[HEAP[$parser_addr] + 360];
      
      var $409 = HEAP[$entity82] + 20;
      HEAP[$409] = $407;
      
      var $411 = HEAP[$dtd] + 131;
      HEAP[$411] = 0;
      
      
      var $414 = HEAP[HEAP[$parser_addr] + 112];
      
      
      var $417 = HEAP[HEAP[$entity82] + 24];
      
      
      var $420 = HEAP[HEAP[$entity82] + 16];
      
      
      var $423 = HEAP[HEAP[$entity82] + 20];
      
      
      var $426 = HEAP[HEAP[$parser_addr] + 116];
      var $427 = FUNCTION_TABLE[$414]($426, 0, $423, $420, $417);
      
      if ($427 == 0) {
        __label__ = 84;
        break;
      } else {
        __label__ = 85;
        break;
      }
     case 84:
      HEAP[$0] = 21;
      __label__ = 422;
      break;
     case 85:
      
      
      
      
      if (HEAP[HEAP[$dtd] + 131] != 0) {
        __label__ = 86;
        break;
      } else {
        __label__ = 91;
        break;
      }
     case 86:
      
      
      
      
      if (HEAP[HEAP[$dtd] + 130] == 0) {
        __label__ = 87;
        break;
      } else {
        __label__ = 90;
        break;
      }
     case 87:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 108] != 0) {
        __label__ = 88;
        break;
      } else {
        __label__ = 90;
        break;
      }
     case 88:
      
      
      var $443 = HEAP[HEAP[$parser_addr] + 108];
      
      
      var $446 = HEAP[HEAP[$parser_addr] + 4];
      var $447 = FUNCTION_TABLE[$443]($446);
      
      if ($447 == 0) {
        __label__ = 89;
        break;
      } else {
        __label__ = 90;
        break;
      }
     case 89:
      HEAP[$0] = 22;
      __label__ = 422;
      break;
     case 90:
      __label__ = 92;
      break;
     case 91:
      
      var $450 = HEAP[$dtd] + 129;
      var $451 = HEAP[$hadParamEntityRefs79];
      HEAP[$450] = $451;
      __label__ = 92;
      break;
     case 92:
      
      var $453 = HEAP[$parser_addr] + 280;
      HEAP[$453] = FUNCTION_TABLE_OFFSET + 64;
      var $454 = HEAP[$parser_addr];
      var $455 = HEAP[$s_addr];
      var $456 = HEAP[$end_addr];
      var $457 = HEAP[$nextPtr_addr];
      var $458 = _contentProcessor($454, $455, $456, $457);
      HEAP[$0] = $458;
      __label__ = 422;
      break;
     case 93:
      var $459 = HEAP[$next_addr];
      var $460 = HEAP[$parser_addr];
      var $461 = HEAP[$enc_addr];
      var $462 = HEAP[$s_addr];
      var $463 = _getElementType($460, $461, $462, $459);
      
      var $465 = HEAP[$parser_addr] + 344;
      HEAP[$465] = $463;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 344] == 0) {
        __label__ = 94;
        break;
      } else {
        __label__ = 95;
        break;
      }
     case 94:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 95:
      __label__ = 107;
      break;
     case 96:
      var $470 = HEAP[$next_addr];
      var $471 = HEAP[$parser_addr];
      var $472 = HEAP[$enc_addr];
      var $473 = HEAP[$s_addr];
      var $474 = _getAttributeId($471, $472, $473, $470);
      
      var $476 = HEAP[$parser_addr] + 348;
      HEAP[$476] = $474;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 348] == 0) {
        __label__ = 97;
        break;
      } else {
        __label__ = 98;
        break;
      }
     case 97:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 98:
      
      var $482 = HEAP[$parser_addr] + 352;
      HEAP[$482] = 0;
      
      var $484 = HEAP[$parser_addr] + 332;
      HEAP[$484] = 0;
      
      var $486 = HEAP[$parser_addr] + 353;
      HEAP[$486] = 0;
      __label__ = 107;
      break;
     case 99:
      
      var $488 = HEAP[$parser_addr] + 352;
      HEAP[$488] = 1;
      
      var $490 = HEAP[$parser_addr] + 332;
      HEAP[$490] = _atypeCDATA_5989;
      __label__ = 107;
      break;
     case 100:
      
      var $492 = HEAP[$parser_addr] + 353;
      HEAP[$492] = 1;
      
      var $494 = HEAP[$parser_addr] + 332;
      HEAP[$494] = _atypeID_5990;
      __label__ = 107;
      break;
     case 101:
      
      var $496 = HEAP[$parser_addr] + 332;
      HEAP[$496] = _atypeIDREF_5991;
      __label__ = 107;
      break;
     case 102:
      
      var $498 = HEAP[$parser_addr] + 332;
      HEAP[$498] = _atypeIDREFS_5992;
      __label__ = 107;
      break;
     case 103:
      
      var $500 = HEAP[$parser_addr] + 332;
      HEAP[$500] = _atypeENTITY_5993;
      __label__ = 107;
      break;
     case 104:
      
      var $502 = HEAP[$parser_addr] + 332;
      HEAP[$502] = _atypeENTITIES_5994;
      __label__ = 107;
      break;
     case 105:
      
      var $504 = HEAP[$parser_addr] + 332;
      HEAP[$504] = _atypeNMTOKEN_5995;
      __label__ = 107;
      break;
     case 106:
      
      var $506 = HEAP[$parser_addr] + 332;
      HEAP[$506] = _atypeNMTOKENS_5996;
      __label__ = 107;
      break;
     case 107:
      
      
      
      
      if (HEAP[HEAP[$dtd] + 128] != 0) {
        __label__ = 108;
        break;
      } else {
        __label__ = 110;
        break;
      }
     case 108:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 132] != 0) {
        __label__ = 109;
        break;
      } else {
        __label__ = 110;
        break;
      }
     case 109:
      HEAP[$handleDefault] = 0;
      __label__ = 110;
      break;
     case 110:
      __label__ = 415;
      break;
     case 111:
      
      
      
      
      if (HEAP[HEAP[$dtd] + 128] != 0) {
        __label__ = 112;
        break;
      } else {
        __label__ = 124;
        break;
      }
     case 112:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 132] != 0) {
        __label__ = 113;
        break;
      } else {
        __label__ = 124;
        break;
      }
     case 113:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 332] != 0) {
        __label__ = 114;
        break;
      } else {
        __label__ = 115;
        break;
      }
     case 114:
      HEAP[$prefix] = _enumValueSep_5998;
      __label__ = 119;
      break;
     case 115:
      
      
      if (HEAP[$role] == 32) {
        __label__ = 116;
        break;
      } else {
        __label__ = 117;
        break;
      }
     case 116:
      HEAP[$iftmp_206] = _notationPrefix_5997;
      __label__ = 118;
      break;
     case 117:
      HEAP[$iftmp_206] = _enumValueStart_5999;
      __label__ = 118;
      break;
     case 118:
      var $529 = HEAP[$iftmp_206];
      HEAP[$prefix] = $529;
      __label__ = 119;
      break;
     case 119:
      
      var $531 = HEAP[$parser_addr] + 416;
      var $532 = HEAP[$prefix];
      var $533 = _poolAppendString($531, $532);
      
      if ($533 == 0) {
        __label__ = 120;
        break;
      } else {
        __label__ = 121;
        break;
      }
     case 120:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 121:
      var $535 = HEAP[$next_addr];
      
      var $537 = HEAP[$parser_addr] + 416;
      var $538 = HEAP[$enc_addr];
      var $539 = HEAP[$s_addr];
      var $540 = _poolAppend($537, $538, $539, $535);
      
      if ($540 == 0) {
        __label__ = 122;
        break;
      } else {
        __label__ = 123;
        break;
      }
     case 122:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 123:
      
      
      
      var $545 = HEAP[HEAP[$parser_addr] + 416 + 16];
      
      var $547 = HEAP[$parser_addr] + 332;
      HEAP[$547] = $545;
      HEAP[$handleDefault] = 0;
      __label__ = 124;
      break;
     case 124:
      __label__ = 415;
      break;
     case 125:
      
      
      
      
      if (HEAP[HEAP[$dtd] + 128] != 0) {
        __label__ = 126;
        break;
      } else {
        __label__ = 141;
        break;
      }
     case 126:
      
      
      
      
      
      
      
      
      
      
      var $562 = HEAP[HEAP[$parser_addr] + 348];
      
      
      var $565 = HEAP[HEAP[$parser_addr] + 344];
      var $566 = HEAP[HEAP[$parser_addr] + 352] & 255;
      var $567 = HEAP[HEAP[$parser_addr] + 353] & 255;
      var $568 = HEAP[$parser_addr];
      var $569 = _defineAttribute($565, $562, $566, $567, 0, $568);
      
      if ($569 == 0) {
        __label__ = 127;
        break;
      } else {
        __label__ = 128;
        break;
      }
     case 127:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 128:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 132] != 0) {
        __label__ = 129;
        break;
      } else {
        __label__ = 141;
        break;
      }
     case 129:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 332] != 0) {
        __label__ = 130;
        break;
      } else {
        __label__ = 141;
        break;
      }
     case 130:
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$parser_addr] + 332]] == 40) {
        __label__ = 133;
        break;
      } else {
        __label__ = 131;
        break;
      }
     case 131:
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$parser_addr] + 332]] != 78) {
        __label__ = 140;
        break;
      } else {
        __label__ = 132;
        break;
      }
     case 132:
      
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$parser_addr] + 332] + 1] == 79) {
        __label__ = 133;
        break;
      } else {
        __label__ = 140;
        break;
      }
     case 133:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 416 + 12] != HEAP[HEAP[$parser_addr] + 416 + 8]) {
        __label__ = 135;
        break;
      } else {
        __label__ = 134;
        break;
      }
     case 134:
      
      var $605 = HEAP[$parser_addr] + 416;
      var $606 = _poolGrow($605);
      
      if ($606 != 0) {
        __label__ = 135;
        break;
      } else {
        __label__ = 136;
        break;
      }
     case 135:
      
      
      
      var $611 = HEAP[HEAP[$parser_addr] + 416 + 12];
      HEAP[$611] = 41;
      var $612 = $611 + 1;
      
      
      var $615 = HEAP[$parser_addr] + 416 + 12;
      HEAP[$615] = $612;
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 416 + 12] != HEAP[HEAP[$parser_addr] + 416 + 8]) {
        __label__ = 138;
        break;
      } else {
        __label__ = 137;
        break;
      }
     case 136:
      __label__ = 139;
      break;
     case 137:
      
      var $626 = HEAP[$parser_addr] + 416;
      var $627 = _poolGrow($626);
      
      if ($627 != 0) {
        __label__ = 138;
        break;
      } else {
        __label__ = 139;
        break;
      }
     case 138:
      
      
      
      var $632 = HEAP[HEAP[$parser_addr] + 416 + 12];
      HEAP[$632] = 0;
      var $633 = $632 + 1;
      
      
      var $636 = HEAP[$parser_addr] + 416 + 12;
      HEAP[$636] = $633;
      
      
      
      var $640 = HEAP[HEAP[$parser_addr] + 416 + 16];
      
      var $642 = HEAP[$parser_addr] + 332;
      HEAP[$642] = $640;
      
      
      
      var $646 = HEAP[HEAP[$parser_addr] + 416 + 12];
      
      
      var $649 = HEAP[$parser_addr] + 416 + 16;
      HEAP[$649] = $646;
      __label__ = 140;
      break;
     case 139:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 140:
      var $650 = HEAP[$eventEndPP];
      var $651 = HEAP[$s_addr];
      HEAP[$650] = $651;
      
      
      var $654 = HEAP[HEAP[$parser_addr] + 132];
      
      
      var $657 = HEAP[$role] == 36;
      
      
      var $660 = HEAP[HEAP[$parser_addr] + 332];
      
      
      
      
      var $665 = HEAP[HEAP[HEAP[$parser_addr] + 348]];
      
      
      
      
      var $670 = HEAP[HEAP[HEAP[$parser_addr] + 344]];
      
      
      var $673 = HEAP[HEAP[$parser_addr] + 4];
      FUNCTION_TABLE[$654]($673, $670, $665, $660, 0, $657);
      
      var $675 = HEAP[$parser_addr] + 416;
      _poolClear($675);
      HEAP[$handleDefault] = 0;
      __label__ = 141;
      break;
     case 141:
      __label__ = 415;
      break;
     case 142:
      
      
      
      
      if (HEAP[HEAP[$dtd] + 128] != 0) {
        __label__ = 143;
        break;
      } else {
        __label__ = 160;
        break;
      }
     case 143:
      
      var $681 = HEAP[$dtd] + 80;
      
      
      
      
      
      var $687 = HEAP[$next_addr] + (0 - HEAP[HEAP[$enc_addr] + 68]);
      
      
      
      
      var $692 = HEAP[$s_addr] + HEAP[HEAP[$enc_addr] + 68];
      
      
      
      
      var $697 = HEAP[$parser_addr];
      var $698 = HEAP[$enc_addr];
      var $699 = HEAP[HEAP[$parser_addr] + 352] & 255;
      var $700 = _storeAttributeValue($697, $698, $699, $692, $687, $681);
      HEAP[$result144] = $700;
      
      
      if (HEAP[$result144] != 0) {
        __label__ = 144;
        break;
      } else {
        __label__ = 145;
        break;
      }
     case 144:
      var $703 = HEAP[$result144];
      HEAP[$0] = $703;
      __label__ = 422;
      break;
     case 145:
      
      
      
      var $707 = HEAP[HEAP[$dtd] + 80 + 16];
      HEAP[$attVal] = $707;
      
      
      
      var $711 = HEAP[HEAP[$dtd] + 80 + 12];
      
      
      var $714 = HEAP[$dtd] + 80 + 16;
      HEAP[$714] = $711;
      
      
      
      
      
      
      var $721 = HEAP[HEAP[$parser_addr] + 348];
      
      
      var $724 = HEAP[HEAP[$parser_addr] + 344];
      var $725 = HEAP[HEAP[$parser_addr] + 352] & 255;
      var $726 = HEAP[$attVal];
      var $727 = HEAP[$parser_addr];
      var $728 = _defineAttribute($724, $721, $725, 0, $726, $727);
      
      if ($728 == 0) {
        __label__ = 146;
        break;
      } else {
        __label__ = 147;
        break;
      }
     case 146:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 147:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 132] != 0) {
        __label__ = 148;
        break;
      } else {
        __label__ = 160;
        break;
      }
     case 148:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 332] != 0) {
        __label__ = 149;
        break;
      } else {
        __label__ = 160;
        break;
      }
     case 149:
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$parser_addr] + 332]] == 40) {
        __label__ = 152;
        break;
      } else {
        __label__ = 150;
        break;
      }
     case 150:
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$parser_addr] + 332]] != 78) {
        __label__ = 159;
        break;
      } else {
        __label__ = 151;
        break;
      }
     case 151:
      
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$parser_addr] + 332] + 1] == 79) {
        __label__ = 152;
        break;
      } else {
        __label__ = 159;
        break;
      }
     case 152:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 416 + 12] != HEAP[HEAP[$parser_addr] + 416 + 8]) {
        __label__ = 154;
        break;
      } else {
        __label__ = 153;
        break;
      }
     case 153:
      
      var $764 = HEAP[$parser_addr] + 416;
      var $765 = _poolGrow($764);
      
      if ($765 != 0) {
        __label__ = 154;
        break;
      } else {
        __label__ = 155;
        break;
      }
     case 154:
      
      
      
      var $770 = HEAP[HEAP[$parser_addr] + 416 + 12];
      HEAP[$770] = 41;
      var $771 = $770 + 1;
      
      
      var $774 = HEAP[$parser_addr] + 416 + 12;
      HEAP[$774] = $771;
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 416 + 12] != HEAP[HEAP[$parser_addr] + 416 + 8]) {
        __label__ = 157;
        break;
      } else {
        __label__ = 156;
        break;
      }
     case 155:
      __label__ = 158;
      break;
     case 156:
      
      var $785 = HEAP[$parser_addr] + 416;
      var $786 = _poolGrow($785);
      
      if ($786 != 0) {
        __label__ = 157;
        break;
      } else {
        __label__ = 158;
        break;
      }
     case 157:
      
      
      
      var $791 = HEAP[HEAP[$parser_addr] + 416 + 12];
      HEAP[$791] = 0;
      var $792 = $791 + 1;
      
      
      var $795 = HEAP[$parser_addr] + 416 + 12;
      HEAP[$795] = $792;
      
      
      
      var $799 = HEAP[HEAP[$parser_addr] + 416 + 16];
      
      var $801 = HEAP[$parser_addr] + 332;
      HEAP[$801] = $799;
      
      
      
      var $805 = HEAP[HEAP[$parser_addr] + 416 + 12];
      
      
      var $808 = HEAP[$parser_addr] + 416 + 16;
      HEAP[$808] = $805;
      __label__ = 159;
      break;
     case 158:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 159:
      var $809 = HEAP[$eventEndPP];
      var $810 = HEAP[$s_addr];
      HEAP[$809] = $810;
      
      
      var $813 = HEAP[HEAP[$parser_addr] + 132];
      
      
      var $816 = HEAP[$role] == 38;
      
      
      var $819 = HEAP[HEAP[$parser_addr] + 332];
      
      
      
      
      var $824 = HEAP[HEAP[HEAP[$parser_addr] + 348]];
      
      
      
      
      var $829 = HEAP[HEAP[HEAP[$parser_addr] + 344]];
      
      
      var $832 = HEAP[HEAP[$parser_addr] + 4];
      var $833 = HEAP[$attVal];
      FUNCTION_TABLE[$813]($832, $829, $824, $819, $833, $816);
      
      var $835 = HEAP[$parser_addr] + 416;
      _poolClear($835);
      HEAP[$handleDefault] = 0;
      __label__ = 160;
      break;
     case 160:
      __label__ = 415;
      break;
     case 161:
      
      
      
      
      if (HEAP[HEAP[$dtd] + 128] != 0) {
        __label__ = 162;
        break;
      } else {
        __label__ = 169;
        break;
      }
     case 162:
      
      
      
      
      
      var $845 = HEAP[$next_addr] + (0 - HEAP[HEAP[$enc_addr] + 68]);
      
      
      
      
      var $850 = HEAP[$s_addr] + HEAP[HEAP[$enc_addr] + 68];
      var $851 = HEAP[$parser_addr];
      var $852 = HEAP[$enc_addr];
      var $853 = _storeEntityValue($851, $852, $850, $845);
      HEAP[$result164] = $853;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 316] != 0) {
        __label__ = 163;
        break;
      } else {
        __label__ = 166;
        break;
      }
     case 163:
      
      
      
      
      
      
      var $864 = HEAP[HEAP[$dtd] + 104 + 16];
      var $865 = HEAP[HEAP[$parser_addr] + 316] + 4;
      HEAP[$865] = $864;
      
      
      
      
      
      
      
      
      
      
      
      
      
      var $879 = HEAP[HEAP[$dtd] + 104 + 12] - HEAP[HEAP[$dtd] + 104 + 16];
      var $880 = HEAP[HEAP[$parser_addr] + 316] + 8;
      HEAP[$880] = $879;
      
      
      
      var $884 = HEAP[HEAP[$dtd] + 104 + 12];
      
      
      var $887 = HEAP[$dtd] + 104 + 16;
      HEAP[$887] = $884;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 136] != 0) {
        __label__ = 164;
        break;
      } else {
        __label__ = 165;
        break;
      }
     case 164:
      var $892 = HEAP[$eventEndPP];
      var $893 = HEAP[$s_addr];
      HEAP[$892] = $893;
      
      
      var $896 = HEAP[HEAP[$parser_addr] + 136];
      
      
      var $899 = HEAP[HEAP[$parser_addr] + 360];
      
      
      
      
      var $904 = HEAP[HEAP[HEAP[$parser_addr] + 316] + 8];
      
      
      
      
      var $909 = HEAP[HEAP[HEAP[$parser_addr] + 316] + 4];
      
      
      
      
      
      var $915 = HEAP[HEAP[HEAP[$parser_addr] + 316] + 33];
      
      
      
      
      var $920 = HEAP[HEAP[HEAP[$parser_addr] + 316]];
      
      
      var $923 = HEAP[HEAP[$parser_addr] + 4];
      FUNCTION_TABLE[$896]($923, $920, $915, $909, $904, $899, 0, 0, 0);
      HEAP[$handleDefault] = 0;
      __label__ = 165;
      break;
     case 165:
      __label__ = 167;
      break;
     case 166:
      
      
      
      var $927 = HEAP[HEAP[$dtd] + 104 + 16];
      
      
      var $930 = HEAP[$dtd] + 104 + 12;
      HEAP[$930] = $927;
      __label__ = 167;
      break;
     case 167:
      
      
      if (HEAP[$result164] != 0) {
        __label__ = 168;
        break;
      } else {
        __label__ = 169;
        break;
      }
     case 168:
      var $933 = HEAP[$result164];
      HEAP[$0] = $933;
      __label__ = 422;
      break;
     case 169:
      __label__ = 415;
      break;
     case 170:
      
      var $935 = HEAP[$parser_addr] + 489;
      HEAP[$935] = 0;
      
      var $937 = HEAP[$dtd] + 129;
      HEAP[$937] = 1;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 84] != 0) {
        __label__ = 171;
        break;
      } else {
        __label__ = 174;
        break;
      }
     case 171:
      
      
      
      
      
      var $947 = HEAP[$next_addr] + (0 - HEAP[HEAP[$enc_addr] + 68]);
      
      
      
      
      var $952 = HEAP[$s_addr] + HEAP[HEAP[$enc_addr] + 68];
      
      var $954 = HEAP[$parser_addr] + 416;
      var $955 = HEAP[$enc_addr];
      var $956 = _poolStoreString($954, $955, $952, $947);
      
      var $958 = HEAP[$parser_addr] + 324;
      HEAP[$958] = $956;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 324] == 0) {
        __label__ = 172;
        break;
      } else {
        __label__ = 173;
        break;
      }
     case 172:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 173:
      
      
      
      var $966 = HEAP[HEAP[$parser_addr] + 416 + 12];
      
      
      var $969 = HEAP[$parser_addr] + 416 + 16;
      HEAP[$969] = $966;
      HEAP[$handleDefault] = 0;
      __label__ = 175;
      break;
     case 174:
      
      var $971 = HEAP[$parser_addr] + 324;
      HEAP[$971] = _externalSubsetName_5988;
      __label__ = 175;
      break;
     case 175:
      
      
      
      
      if (HEAP[HEAP[$dtd] + 130] == 0) {
        __label__ = 176;
        break;
      } else {
        __label__ = 180;
        break;
      }
     case 176:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 492] == 0) {
        __label__ = 177;
        break;
      } else {
        __label__ = 180;
        break;
      }
     case 177:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 108] != 0) {
        __label__ = 178;
        break;
      } else {
        __label__ = 180;
        break;
      }
     case 178:
      
      
      var $986 = HEAP[HEAP[$parser_addr] + 108];
      
      
      var $989 = HEAP[HEAP[$parser_addr] + 4];
      var $990 = FUNCTION_TABLE[$986]($989);
      
      if ($990 == 0) {
        __label__ = 179;
        break;
      } else {
        __label__ = 180;
        break;
      }
     case 179:
      HEAP[$0] = 22;
      __label__ = 422;
      break;
     case 180:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 316] == 0) {
        __label__ = 181;
        break;
      } else {
        __label__ = 184;
        break;
      }
     case 181:
      
      var $997 = HEAP[$dtd] + 132;
      var $998 = _lookup($997, _externalSubsetName_5988, 36);
      var $999 = $998;
      
      var $1001 = HEAP[$parser_addr] + 316;
      HEAP[$1001] = $999;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 316] == 0) {
        __label__ = 182;
        break;
      } else {
        __label__ = 183;
        break;
      }
     case 182:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 183:
      
      
      
      var $1009 = HEAP[HEAP[$parser_addr] + 316] + 24;
      HEAP[$1009] = 0;
      __label__ = 184;
      break;
     case 184:
      
      
      
      
      if (HEAP[HEAP[$dtd] + 128] != 0) {
        __label__ = 185;
        break;
      } else {
        __label__ = 190;
        break;
      }
     case 185:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 316] != 0) {
        __label__ = 186;
        break;
      } else {
        __label__ = 190;
        break;
      }
     case 186:
      
      
      var $1020 = HEAP[HEAP[$parser_addr] + 316];
      
      
      
      
      
      var $1026 = HEAP[$next_addr] + (0 - HEAP[HEAP[$enc_addr] + 68]);
      
      
      
      
      var $1031 = HEAP[$s_addr] + HEAP[HEAP[$enc_addr] + 68];
      
      var $1033 = HEAP[$dtd] + 80;
      var $1034 = HEAP[$enc_addr];
      var $1035 = _poolStoreString($1033, $1034, $1031, $1026);
      var $1036 = $1020 + 16;
      HEAP[$1036] = $1035;
      
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$parser_addr] + 316] + 16] == 0) {
        __label__ = 187;
        break;
      } else {
        __label__ = 188;
        break;
      }
     case 187:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 188:
      
      
      
      
      
      var $1048 = HEAP[HEAP[$parser_addr] + 360];
      var $1049 = HEAP[HEAP[$parser_addr] + 316] + 20;
      HEAP[$1049] = $1048;
      
      
      
      var $1053 = HEAP[HEAP[$dtd] + 80 + 12];
      
      
      var $1056 = HEAP[$dtd] + 80 + 16;
      HEAP[$1056] = $1053;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 136] != 0) {
        __label__ = 189;
        break;
      } else {
        __label__ = 190;
        break;
      }
     case 189:
      HEAP[$handleDefault] = 0;
      __label__ = 190;
      break;
     case 190:
      __label__ = 415;
      break;
     case 191:
      
      
      
      
      if (HEAP[HEAP[$dtd] + 128] != 0) {
        __label__ = 192;
        break;
      } else {
        __label__ = 195;
        break;
      }
     case 192:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 316] != 0) {
        __label__ = 193;
        break;
      } else {
        __label__ = 195;
        break;
      }
     case 193:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 136] != 0) {
        __label__ = 194;
        break;
      } else {
        __label__ = 195;
        break;
      }
     case 194:
      var $1073 = HEAP[$eventEndPP];
      var $1074 = HEAP[$s_addr];
      HEAP[$1073] = $1074;
      
      
      var $1077 = HEAP[HEAP[$parser_addr] + 136];
      
      
      
      
      var $1082 = HEAP[HEAP[HEAP[$parser_addr] + 316] + 24];
      
      
      
      
      var $1087 = HEAP[HEAP[HEAP[$parser_addr] + 316] + 16];
      
      
      
      
      var $1092 = HEAP[HEAP[HEAP[$parser_addr] + 316] + 20];
      
      
      
      
      
      var $1098 = HEAP[HEAP[HEAP[$parser_addr] + 316] + 33];
      
      
      
      
      var $1103 = HEAP[HEAP[HEAP[$parser_addr] + 316]];
      
      
      var $1106 = HEAP[HEAP[$parser_addr] + 4];
      FUNCTION_TABLE[$1077]($1106, $1103, $1098, 0, 0, $1092, $1087, $1082, 0);
      HEAP[$handleDefault] = 0;
      __label__ = 195;
      break;
     case 195:
      __label__ = 415;
      break;
     case 196:
      
      
      
      
      if (HEAP[HEAP[$dtd] + 128] != 0) {
        __label__ = 197;
        break;
      } else {
        __label__ = 204;
        break;
      }
     case 197:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 316] != 0) {
        __label__ = 198;
        break;
      } else {
        __label__ = 204;
        break;
      }
     case 198:
      
      
      var $1117 = HEAP[HEAP[$parser_addr] + 316];
      var $1118 = HEAP[$next_addr];
      
      var $1120 = HEAP[$dtd] + 80;
      var $1121 = HEAP[$enc_addr];
      var $1122 = HEAP[$s_addr];
      var $1123 = _poolStoreString($1120, $1121, $1122, $1118);
      var $1124 = $1117 + 28;
      HEAP[$1124] = $1123;
      
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$parser_addr] + 316] + 28] == 0) {
        __label__ = 199;
        break;
      } else {
        __label__ = 200;
        break;
      }
     case 199:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 200:
      
      
      
      var $1134 = HEAP[HEAP[$dtd] + 80 + 12];
      
      
      var $1137 = HEAP[$dtd] + 80 + 16;
      HEAP[$1137] = $1134;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 92] != 0) {
        __label__ = 201;
        break;
      } else {
        __label__ = 202;
        break;
      }
     case 201:
      var $1142 = HEAP[$eventEndPP];
      var $1143 = HEAP[$s_addr];
      HEAP[$1142] = $1143;
      
      
      var $1146 = HEAP[HEAP[$parser_addr] + 92];
      
      
      
      
      var $1151 = HEAP[HEAP[HEAP[$parser_addr] + 316] + 28];
      
      
      
      
      var $1156 = HEAP[HEAP[HEAP[$parser_addr] + 316] + 24];
      
      
      
      
      var $1161 = HEAP[HEAP[HEAP[$parser_addr] + 316] + 16];
      
      
      
      
      var $1166 = HEAP[HEAP[HEAP[$parser_addr] + 316] + 20];
      
      
      
      
      var $1171 = HEAP[HEAP[HEAP[$parser_addr] + 316]];
      
      
      var $1174 = HEAP[HEAP[$parser_addr] + 4];
      FUNCTION_TABLE[$1146]($1174, $1171, $1166, $1161, $1156, $1151);
      HEAP[$handleDefault] = 0;
      __label__ = 204;
      break;
     case 202:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 136] != 0) {
        __label__ = 203;
        break;
      } else {
        __label__ = 204;
        break;
      }
     case 203:
      var $1179 = HEAP[$eventEndPP];
      var $1180 = HEAP[$s_addr];
      HEAP[$1179] = $1180;
      
      
      var $1183 = HEAP[HEAP[$parser_addr] + 136];
      
      
      
      
      var $1188 = HEAP[HEAP[HEAP[$parser_addr] + 316] + 28];
      
      
      
      
      var $1193 = HEAP[HEAP[HEAP[$parser_addr] + 316] + 24];
      
      
      
      
      var $1198 = HEAP[HEAP[HEAP[$parser_addr] + 316] + 16];
      
      
      
      
      var $1203 = HEAP[HEAP[HEAP[$parser_addr] + 316] + 20];
      
      
      
      
      var $1208 = HEAP[HEAP[HEAP[$parser_addr] + 316]];
      
      
      var $1211 = HEAP[HEAP[$parser_addr] + 4];
      FUNCTION_TABLE[$1183]($1211, $1208, 0, 0, 0, $1203, $1198, $1193, $1188);
      HEAP[$handleDefault] = 0;
      __label__ = 204;
      break;
     case 204:
      __label__ = 415;
      break;
     case 205:
      
      
      var $1214 = HEAP[HEAP[$enc_addr] + 48];
      var $1215 = HEAP[$next_addr];
      var $1216 = HEAP[$enc_addr];
      var $1217 = HEAP[$s_addr];
      var $1218 = FUNCTION_TABLE[$1214]($1216, $1217, $1215);
      
      if ($1218 != 0) {
        __label__ = 206;
        break;
      } else {
        __label__ = 207;
        break;
      }
     case 206:
      
      var $1221 = HEAP[$parser_addr] + 316;
      HEAP[$1221] = 0;
      __label__ = 415;
      break;
     case 207:
      
      
      
      
      if (HEAP[HEAP[$dtd] + 128] != 0) {
        __label__ = 208;
        break;
      } else {
        __label__ = 221;
        break;
      }
     case 208:
      var $1226 = HEAP[$next_addr];
      
      var $1228 = HEAP[$dtd] + 80;
      var $1229 = HEAP[$enc_addr];
      var $1230 = HEAP[$s_addr];
      var $1231 = _poolStoreString($1228, $1229, $1230, $1226);
      HEAP[$name] = $1231;
      
      
      if (HEAP[$name] == 0) {
        __label__ = 209;
        break;
      } else {
        __label__ = 210;
        break;
      }
     case 209:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 210:
      
      var $1235 = HEAP[$dtd];
      var $1236 = HEAP[$name];
      var $1237 = _lookup($1235, $1236, 36);
      var $1238 = $1237;
      
      var $1240 = HEAP[$parser_addr] + 316;
      HEAP[$1240] = $1238;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 316] == 0) {
        __label__ = 211;
        break;
      } else {
        __label__ = 212;
        break;
      }
     case 211:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 212:
      
      
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$parser_addr] + 316]] != HEAP[$name]) {
        __label__ = 213;
        break;
      } else {
        __label__ = 214;
        break;
      }
     case 213:
      
      
      
      var $1255 = HEAP[HEAP[$dtd] + 80 + 16];
      
      
      var $1258 = HEAP[$dtd] + 80 + 12;
      HEAP[$1258] = $1255;
      
      var $1260 = HEAP[$parser_addr] + 316;
      HEAP[$1260] = 0;
      __label__ = 220;
      break;
     case 214:
      
      
      
      var $1264 = HEAP[HEAP[$dtd] + 80 + 12];
      
      
      var $1267 = HEAP[$dtd] + 80 + 16;
      HEAP[$1267] = $1264;
      
      
      
      var $1271 = HEAP[HEAP[$parser_addr] + 316] + 24;
      HEAP[$1271] = 0;
      
      
      
      var $1275 = HEAP[HEAP[$parser_addr] + 316] + 33;
      HEAP[$1275] = 0;
      
      
      var $1278 = HEAP[HEAP[$parser_addr] + 316];
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 476] != 0) {
        __label__ = 217;
        break;
      } else {
        __label__ = 215;
        break;
      }
     case 215:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 300] != 0) {
        __label__ = 217;
        break;
      } else {
        __label__ = 216;
        break;
      }
     case 216:
      HEAP[$iftmp_215] = 1;
      __label__ = 218;
      break;
     case 217:
      HEAP[$iftmp_215] = 0;
      __label__ = 218;
      break;
     case 218:
      
      var $1288 = HEAP[$iftmp_215] & 255;
      var $1289 = $1278 + 34;
      HEAP[$1289] = $1288;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 136] != 0) {
        __label__ = 219;
        break;
      } else {
        __label__ = 220;
        break;
      }
     case 219:
      HEAP[$handleDefault] = 0;
      __label__ = 220;
      break;
     case 220:
      __label__ = 222;
      break;
     case 221:
      
      
      
      var $1297 = HEAP[HEAP[$dtd] + 80 + 16];
      
      
      var $1300 = HEAP[$dtd] + 80 + 12;
      HEAP[$1300] = $1297;
      
      var $1302 = HEAP[$parser_addr] + 316;
      HEAP[$1302] = 0;
      __label__ = 222;
      break;
     case 222:
      __label__ = 415;
      break;
     case 223:
      
      
      
      
      if (HEAP[HEAP[$dtd] + 128] != 0) {
        __label__ = 224;
        break;
      } else {
        __label__ = 237;
        break;
      }
     case 224:
      var $1307 = HEAP[$next_addr];
      
      var $1309 = HEAP[$dtd] + 80;
      var $1310 = HEAP[$enc_addr];
      var $1311 = HEAP[$s_addr];
      var $1312 = _poolStoreString($1309, $1310, $1311, $1307);
      HEAP[$name227] = $1312;
      
      
      if (HEAP[$name227] == 0) {
        __label__ = 225;
        break;
      } else {
        __label__ = 226;
        break;
      }
     case 225:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 226:
      
      var $1316 = HEAP[$dtd] + 132;
      var $1317 = HEAP[$name227];
      var $1318 = _lookup($1316, $1317, 36);
      var $1319 = $1318;
      
      var $1321 = HEAP[$parser_addr] + 316;
      HEAP[$1321] = $1319;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 316] == 0) {
        __label__ = 227;
        break;
      } else {
        __label__ = 228;
        break;
      }
     case 227:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 228:
      
      
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$parser_addr] + 316]] != HEAP[$name227]) {
        __label__ = 229;
        break;
      } else {
        __label__ = 230;
        break;
      }
     case 229:
      
      
      
      var $1336 = HEAP[HEAP[$dtd] + 80 + 16];
      
      
      var $1339 = HEAP[$dtd] + 80 + 12;
      HEAP[$1339] = $1336;
      
      var $1341 = HEAP[$parser_addr] + 316;
      HEAP[$1341] = 0;
      __label__ = 236;
      break;
     case 230:
      
      
      
      var $1345 = HEAP[HEAP[$dtd] + 80 + 12];
      
      
      var $1348 = HEAP[$dtd] + 80 + 16;
      HEAP[$1348] = $1345;
      
      
      
      var $1352 = HEAP[HEAP[$parser_addr] + 316] + 24;
      HEAP[$1352] = 0;
      
      
      
      var $1356 = HEAP[HEAP[$parser_addr] + 316] + 33;
      HEAP[$1356] = 1;
      
      
      var $1359 = HEAP[HEAP[$parser_addr] + 316];
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 476] != 0) {
        __label__ = 233;
        break;
      } else {
        __label__ = 231;
        break;
      }
     case 231:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 300] != 0) {
        __label__ = 233;
        break;
      } else {
        __label__ = 232;
        break;
      }
     case 232:
      HEAP[$iftmp_217] = 1;
      __label__ = 234;
      break;
     case 233:
      HEAP[$iftmp_217] = 0;
      __label__ = 234;
      break;
     case 234:
      
      var $1369 = HEAP[$iftmp_217] & 255;
      var $1370 = $1359 + 34;
      HEAP[$1370] = $1369;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 136] != 0) {
        __label__ = 235;
        break;
      } else {
        __label__ = 236;
        break;
      }
     case 235:
      HEAP[$handleDefault] = 0;
      __label__ = 236;
      break;
     case 236:
      __label__ = 238;
      break;
     case 237:
      
      
      
      var $1378 = HEAP[HEAP[$dtd] + 80 + 16];
      
      
      var $1381 = HEAP[$dtd] + 80 + 12;
      HEAP[$1381] = $1378;
      
      var $1383 = HEAP[$parser_addr] + 316;
      HEAP[$1383] = 0;
      __label__ = 238;
      break;
     case 238:
      __label__ = 415;
      break;
     case 239:
      
      var $1385 = HEAP[$parser_addr] + 340;
      HEAP[$1385] = 0;
      
      var $1387 = HEAP[$parser_addr] + 336;
      HEAP[$1387] = 0;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 96] != 0) {
        __label__ = 240;
        break;
      } else {
        __label__ = 243;
        break;
      }
     case 240:
      var $1392 = HEAP[$next_addr];
      
      var $1394 = HEAP[$parser_addr] + 416;
      var $1395 = HEAP[$enc_addr];
      var $1396 = HEAP[$s_addr];
      var $1397 = _poolStoreString($1394, $1395, $1396, $1392);
      
      var $1399 = HEAP[$parser_addr] + 336;
      HEAP[$1399] = $1397;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 336] == 0) {
        __label__ = 241;
        break;
      } else {
        __label__ = 242;
        break;
      }
     case 241:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 242:
      
      
      
      var $1407 = HEAP[HEAP[$parser_addr] + 416 + 12];
      
      
      var $1410 = HEAP[$parser_addr] + 416 + 16;
      HEAP[$1410] = $1407;
      HEAP[$handleDefault] = 0;
      __label__ = 243;
      break;
     case 243:
      __label__ = 415;
      break;
     case 244:
      
      
      var $1413 = HEAP[HEAP[$enc_addr] + 56];
      var $1414 = HEAP[$next_addr];
      var $1415 = HEAP[$enc_addr];
      var $1416 = HEAP[$s_addr];
      var $1417 = HEAP[$eventPP];
      var $1418 = FUNCTION_TABLE[$1413]($1415, $1416, $1414, $1417);
      
      if ($1418 == 0) {
        __label__ = 245;
        break;
      } else {
        __label__ = 246;
        break;
      }
     case 245:
      HEAP[$0] = 32;
      __label__ = 422;
      break;
     case 246:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 336] != 0) {
        __label__ = 247;
        break;
      } else {
        __label__ = 250;
        break;
      }
     case 247:
      
      
      
      
      
      var $1429 = HEAP[$next_addr] + (0 - HEAP[HEAP[$enc_addr] + 68]);
      
      
      
      
      var $1434 = HEAP[$s_addr] + HEAP[HEAP[$enc_addr] + 68];
      
      var $1436 = HEAP[$parser_addr] + 416;
      var $1437 = HEAP[$enc_addr];
      var $1438 = _poolStoreString($1436, $1437, $1434, $1429);
      HEAP[$tem251] = $1438;
      
      
      if (HEAP[$tem251] == 0) {
        __label__ = 248;
        break;
      } else {
        __label__ = 249;
        break;
      }
     case 248:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 249:
      var $1441 = HEAP[$tem251];
      _normalizePublicId($1441);
      
      var $1443 = HEAP[$parser_addr] + 340;
      var $1444 = HEAP[$tem251];
      HEAP[$1443] = $1444;
      
      
      
      var $1448 = HEAP[HEAP[$parser_addr] + 416 + 12];
      
      
      var $1451 = HEAP[$parser_addr] + 416 + 16;
      HEAP[$1451] = $1448;
      HEAP[$handleDefault] = 0;
      __label__ = 250;
      break;
     case 250:
      __label__ = 415;
      break;
     case 251:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 336] != 0) {
        __label__ = 252;
        break;
      } else {
        __label__ = 256;
        break;
      }
     case 252:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 96] != 0) {
        __label__ = 253;
        break;
      } else {
        __label__ = 256;
        break;
      }
     case 253:
      
      
      
      
      
      var $1465 = HEAP[$next_addr] + (0 - HEAP[HEAP[$enc_addr] + 68]);
      
      
      
      
      var $1470 = HEAP[$s_addr] + HEAP[HEAP[$enc_addr] + 68];
      
      var $1472 = HEAP[$parser_addr] + 416;
      var $1473 = HEAP[$enc_addr];
      var $1474 = _poolStoreString($1472, $1473, $1470, $1465);
      HEAP[$systemId] = $1474;
      
      
      if (HEAP[$systemId] == 0) {
        __label__ = 254;
        break;
      } else {
        __label__ = 255;
        break;
      }
     case 254:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 255:
      var $1477 = HEAP[$eventEndPP];
      var $1478 = HEAP[$s_addr];
      HEAP[$1477] = $1478;
      
      
      var $1481 = HEAP[HEAP[$parser_addr] + 96];
      
      
      var $1484 = HEAP[HEAP[$parser_addr] + 340];
      
      
      var $1487 = HEAP[HEAP[$parser_addr] + 360];
      
      
      var $1490 = HEAP[HEAP[$parser_addr] + 336];
      
      
      var $1493 = HEAP[HEAP[$parser_addr] + 4];
      var $1494 = HEAP[$systemId];
      FUNCTION_TABLE[$1481]($1493, $1490, $1487, $1494, $1484);
      HEAP[$handleDefault] = 0;
      __label__ = 256;
      break;
     case 256:
      
      var $1496 = HEAP[$parser_addr] + 416;
      _poolClear($1496);
      __label__ = 415;
      break;
     case 257:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 340] != 0) {
        __label__ = 258;
        break;
      } else {
        __label__ = 260;
        break;
      }
     case 258:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 96] != 0) {
        __label__ = 259;
        break;
      } else {
        __label__ = 260;
        break;
      }
     case 259:
      var $1505 = HEAP[$eventEndPP];
      var $1506 = HEAP[$s_addr];
      HEAP[$1505] = $1506;
      
      
      var $1509 = HEAP[HEAP[$parser_addr] + 96];
      
      
      var $1512 = HEAP[HEAP[$parser_addr] + 340];
      
      
      var $1515 = HEAP[HEAP[$parser_addr] + 360];
      
      
      var $1518 = HEAP[HEAP[$parser_addr] + 336];
      
      
      var $1521 = HEAP[HEAP[$parser_addr] + 4];
      FUNCTION_TABLE[$1509]($1521, $1518, $1515, 0, $1512);
      HEAP[$handleDefault] = 0;
      __label__ = 260;
      break;
     case 260:
      
      var $1523 = HEAP[$parser_addr] + 416;
      _poolClear($1523);
      __label__ = 415;
      break;
     case 261:
      var $1524 = HEAP[$tok_addr];
      if ($1524 == 12) {
        __label__ = 263;
        break;
      } else if ($1524 == 28) {
        __label__ = 262;
        break;
      } else {
        __label__ = 264;
        break;
      }
     case 262:
      HEAP[$0] = 10;
      __label__ = 422;
      break;
     case 263:
      HEAP[$0] = 17;
      __label__ = 422;
      break;
     case 264:
      HEAP[$0] = 2;
      __label__ = 422;
      break;
     case 265:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 80] != 0) {
        __label__ = 266;
        break;
      } else {
        __label__ = 267;
        break;
      }
     case 266:
      var $1529 = HEAP[$next_addr];
      var $1530 = HEAP[$parser_addr];
      var $1531 = HEAP[$enc_addr];
      var $1532 = HEAP[$s_addr];
      _reportDefault($1530, $1531, $1532, $1529);
      __label__ = 267;
      break;
     case 267:
      HEAP[$handleDefault] = 0;
      
      
      var $1535 = HEAP[$parser_addr];
      var $1536 = HEAP[$enc_addr];
      var $1537 = HEAP[$end_addr];
      var $1538 = HEAP[$nextPtr_addr];
      var $1539 = HEAP[$haveMore_addr] & 255;
      var $1540 = _doIgnoreSection($1535, $1536, $next_addr, $1537, $1538, $1539);
      HEAP[$result270] = $1540;
      
      
      if (HEAP[$result270] != 0) {
        __label__ = 268;
        break;
      } else {
        __label__ = 269;
        break;
      }
     case 268:
      var $1543 = HEAP[$result270];
      HEAP[$0] = $1543;
      __label__ = 422;
      break;
     case 269:
      
      
      if (HEAP[$next_addr] == 0) {
        __label__ = 270;
        break;
      } else {
        __label__ = 271;
        break;
      }
     case 270:
      
      var $1547 = HEAP[$parser_addr] + 280;
      HEAP[$1547] = FUNCTION_TABLE_OFFSET + 86;
      var $1548 = HEAP[$result270];
      HEAP[$0] = $1548;
      __label__ = 422;
      break;
     case 271:
      __label__ = 415;
      break;
     case 272:
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 256 + 4] >= HEAP[HEAP[$parser_addr] + 468]) {
        __label__ = 273;
        break;
      } else {
        __label__ = 283;
        break;
      }
     case 273:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 468] != 0) {
        __label__ = 274;
        break;
      } else {
        __label__ = 281;
        break;
      }
     case 274:
      
      
      
      var $1564 = HEAP[HEAP[$parser_addr] + 12 + 4];
      
      
      
      var $1568 = HEAP[HEAP[$parser_addr] + 468] * 2;
      
      var $1570 = HEAP[$parser_addr] + 468;
      HEAP[$1570] = $1568;
      
      
      var $1573 = HEAP[HEAP[$parser_addr] + 468];
      
      
      var $1576 = HEAP[HEAP[$parser_addr] + 464];
      var $1577 = FUNCTION_TABLE[$1564]($1576, $1573);
      HEAP[$temp] = $1577;
      
      
      if (HEAP[$temp] == 0) {
        __label__ = 275;
        break;
      } else {
        __label__ = 276;
        break;
      }
     case 275:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 276:
      
      var $1581 = HEAP[$parser_addr] + 464;
      var $1582 = HEAP[$temp];
      HEAP[$1581] = $1582;
      
      
      
      
      if (HEAP[HEAP[$dtd] + 184] != 0) {
        __label__ = 277;
        break;
      } else {
        __label__ = 280;
        break;
      }
     case 277:
      
      
      
      var $1590 = HEAP[HEAP[$parser_addr] + 12 + 4];
      
      
      
      var $1594 = HEAP[HEAP[$parser_addr] + 468] * 4;
      
      
      
      var $1598 = HEAP[HEAP[$dtd] + 184];
      var $1599 = FUNCTION_TABLE[$1590]($1598, $1594);
      var $1600 = $1599;
      HEAP[$temp283] = $1600;
      
      
      if (HEAP[$temp283] == 0) {
        __label__ = 278;
        break;
      } else {
        __label__ = 279;
        break;
      }
     case 278:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 279:
      
      var $1604 = HEAP[$dtd] + 184;
      var $1605 = HEAP[$temp283];
      HEAP[$1604] = $1605;
      __label__ = 280;
      break;
     case 280:
      __label__ = 283;
      break;
     case 281:
      
      
      
      var $1609 = HEAP[HEAP[$parser_addr] + 12];
      
      var $1611 = HEAP[$parser_addr] + 468;
      HEAP[$1611] = 32;
      
      
      var $1614 = HEAP[HEAP[$parser_addr] + 468];
      var $1615 = FUNCTION_TABLE[$1609]($1614);
      
      var $1617 = HEAP[$parser_addr] + 464;
      HEAP[$1617] = $1615;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 464] == 0) {
        __label__ = 282;
        break;
      } else {
        __label__ = 283;
        break;
      }
     case 282:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 283:
      
      
      
      
      
      
      
      var $1629 = HEAP[HEAP[$parser_addr] + 464] + HEAP[HEAP[$parser_addr] + 256 + 4];
      HEAP[$1629] = 0;
      
      
      
      
      if (HEAP[HEAP[$dtd] + 160] != 0) {
        __label__ = 284;
        break;
      } else {
        __label__ = 288;
        break;
      }
     case 284:
      var $1634 = HEAP[$parser_addr];
      var $1635 = _nextScaffoldPart($1634);
      HEAP[$myindex] = $1635;
      
      
      if (HEAP[$myindex] < 0) {
        __label__ = 285;
        break;
      } else {
        __label__ = 286;
        break;
      }
     case 285:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 286:
      
      
      
      
      
      
      var $1644 = HEAP[HEAP[$dtd] + 184] + 4 * HEAP[HEAP[$dtd] + 180];
      var $1645 = HEAP[$myindex];
      HEAP[$1644] = $1645;
      
      
      
      var $1649 = HEAP[HEAP[$dtd] + 180] + 1;
      
      var $1651 = HEAP[$dtd] + 180;
      HEAP[$1651] = $1649;
      
      
      
      
      
      var $1657 = HEAP[HEAP[$dtd] + 164] + 28 * HEAP[$myindex];
      HEAP[$1657] = 6;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 128] != 0) {
        __label__ = 287;
        break;
      } else {
        __label__ = 288;
        break;
      }
     case 287:
      HEAP[$handleDefault] = 0;
      __label__ = 288;
      break;
     case 288:
      __label__ = 415;
      break;
     case 289:
      
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$parser_addr] + 464] + HEAP[HEAP[$parser_addr] + 256 + 4]] == 124) {
        __label__ = 290;
        break;
      } else {
        __label__ = 291;
        break;
      }
     case 290:
      HEAP[$0] = 2;
      __label__ = 422;
      break;
     case 291:
      
      
      
      
      
      
      
      var $1679 = HEAP[HEAP[$parser_addr] + 464] + HEAP[HEAP[$parser_addr] + 256 + 4];
      HEAP[$1679] = 44;
      
      
      
      
      if (HEAP[HEAP[$dtd] + 160] != 0) {
        __label__ = 292;
        break;
      } else {
        __label__ = 294;
        break;
      }
     case 292:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 128] != 0) {
        __label__ = 293;
        break;
      } else {
        __label__ = 294;
        break;
      }
     case 293:
      HEAP[$handleDefault] = 0;
      __label__ = 294;
      break;
     case 294:
      __label__ = 415;
      break;
     case 295:
      
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$parser_addr] + 464] + HEAP[HEAP[$parser_addr] + 256 + 4]] == 44) {
        __label__ = 296;
        break;
      } else {
        __label__ = 297;
        break;
      }
     case 296:
      HEAP[$0] = 2;
      __label__ = 422;
      break;
     case 297:
      
      
      
      
      if (HEAP[HEAP[$dtd] + 160] != 0) {
        __label__ = 298;
        break;
      } else {
        __label__ = 302;
        break;
      }
     case 298:
      
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$parser_addr] + 464] + HEAP[HEAP[$parser_addr] + 256 + 4]] == 0) {
        __label__ = 299;
        break;
      } else {
        __label__ = 302;
        break;
      }
     case 299:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$dtd] + 164] + 28 * HEAP[HEAP[HEAP[$dtd] + 184] + 4 * (HEAP[HEAP[$dtd] + 180] - 1)]] != 3) {
        __label__ = 300;
        break;
      } else {
        __label__ = 302;
        break;
      }
     case 300:
      
      
      
      
      
      
      
      
      
      
      
      
      
      var $1741 = HEAP[HEAP[$dtd] + 164] + 28 * HEAP[HEAP[HEAP[$dtd] + 184] + 4 * (HEAP[HEAP[$dtd] + 180] - 1)];
      HEAP[$1741] = 5;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 128] != 0) {
        __label__ = 301;
        break;
      } else {
        __label__ = 302;
        break;
      }
     case 301:
      HEAP[$handleDefault] = 0;
      __label__ = 302;
      break;
     case 302:
      
      
      
      
      
      
      
      var $1753 = HEAP[HEAP[$parser_addr] + 464] + HEAP[HEAP[$parser_addr] + 256 + 4];
      HEAP[$1753] = 124;
      __label__ = 415;
      break;
     case 303:
      
      var $1755 = HEAP[$dtd] + 129;
      HEAP[$1755] = 1;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 492] == 0) {
        __label__ = 304;
        break;
      } else {
        __label__ = 305;
        break;
      }
     case 304:
      
      
      var $1762 = HEAP[HEAP[$dtd] + 130];
      
      var $1764 = HEAP[$dtd] + 128;
      HEAP[$1764] = $1762;
      __label__ = 335;
      break;
     case 305:
      
      
      
      
      
      var $1770 = HEAP[$next_addr] + (0 - HEAP[HEAP[$enc_addr] + 68]);
      
      
      
      
      var $1775 = HEAP[$s_addr] + HEAP[HEAP[$enc_addr] + 68];
      
      var $1777 = HEAP[$dtd] + 80;
      var $1778 = HEAP[$enc_addr];
      var $1779 = _poolStoreString($1777, $1778, $1775, $1770);
      HEAP[$name312] = $1779;
      
      
      if (HEAP[$name312] == 0) {
        __label__ = 306;
        break;
      } else {
        __label__ = 307;
        break;
      }
     case 306:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 307:
      
      var $1783 = HEAP[$dtd] + 132;
      var $1784 = HEAP[$name312];
      var $1785 = _lookup($1783, $1784, 0);
      var $1786 = $1785;
      HEAP[$entity313] = $1786;
      
      
      
      var $1790 = HEAP[HEAP[$dtd] + 80 + 16];
      
      
      var $1793 = HEAP[$dtd] + 80 + 12;
      HEAP[$1793] = $1790;
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 256 + 16] == 0) {
        __label__ = 317;
        break;
      } else {
        __label__ = 308;
        break;
      }
     case 308:
      
      
      
      
      if (HEAP[HEAP[$dtd] + 130] != 0) {
        __label__ = 309;
        break;
      } else {
        __label__ = 311;
        break;
      }
     case 309:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 300] != 0) {
        __label__ = 317;
        break;
      } else {
        __label__ = 310;
        break;
      }
     case 310:
      __label__ = 312;
      break;
     case 311:
      
      
      
      
      if (HEAP[HEAP[$dtd] + 129] != 0) {
        __label__ = 317;
        break;
      } else {
        __label__ = 312;
        break;
      }
     case 312:
      
      
      if (HEAP[$entity313] == 0) {
        __label__ = 313;
        break;
      } else {
        __label__ = 314;
        break;
      }
     case 313:
      HEAP[$0] = 11;
      __label__ = 422;
      break;
     case 314:
      
      
      
      
      if (HEAP[HEAP[$entity313] + 34] == 0) {
        __label__ = 315;
        break;
      } else {
        __label__ = 316;
        break;
      }
     case 315:
      HEAP[$0] = 24;
      __label__ = 422;
      break;
     case 316:
      __label__ = 322;
      break;
     case 317:
      
      
      if (HEAP[$entity313] == 0) {
        __label__ = 318;
        break;
      } else {
        __label__ = 322;
        break;
      }
     case 318:
      
      
      var $1821 = HEAP[HEAP[$dtd] + 130];
      
      var $1823 = HEAP[$dtd] + 128;
      HEAP[$1823] = $1821;
      
      
      if (HEAP[$role] == 60) {
        __label__ = 319;
        break;
      } else {
        __label__ = 321;
        break;
      }
     case 319:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 120] != 0) {
        __label__ = 320;
        break;
      } else {
        __label__ = 321;
        break;
      }
     case 320:
      
      
      var $1832 = HEAP[HEAP[$parser_addr] + 120];
      
      
      var $1835 = HEAP[HEAP[$parser_addr] + 4];
      var $1836 = HEAP[$name312];
      FUNCTION_TABLE[$1832]($1835, $1836, 1);
      HEAP[$handleDefault] = 0;
      __label__ = 321;
      break;
     case 321:
      __label__ = 415;
      break;
     case 322:
      
      
      
      
      if (HEAP[HEAP[$entity313] + 32] != 0) {
        __label__ = 323;
        break;
      } else {
        __label__ = 324;
        break;
      }
     case 323:
      HEAP[$0] = 12;
      __label__ = 422;
      break;
     case 324:
      
      
      
      
      if (HEAP[HEAP[$entity313] + 4] != 0) {
        __label__ = 325;
        break;
      } else {
        __label__ = 328;
        break;
      }
     case 325:
      
      
      var $1847 = HEAP[$role] == 60;
      HEAP[$betweenDecl] = $1847;
      
      
      var $1850 = HEAP[$parser_addr];
      var $1851 = HEAP[$entity313];
      var $1852 = HEAP[$betweenDecl] & 255;
      var $1853 = _processInternalEntity($1850, $1851, $1852);
      HEAP[$result334] = $1853;
      
      
      if (HEAP[$result334] != 0) {
        __label__ = 326;
        break;
      } else {
        __label__ = 327;
        break;
      }
     case 326:
      var $1856 = HEAP[$result334];
      HEAP[$0] = $1856;
      __label__ = 422;
      break;
     case 327:
      HEAP[$handleDefault] = 0;
      __label__ = 415;
      break;
     case 328:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 112] != 0) {
        __label__ = 329;
        break;
      } else {
        __label__ = 334;
        break;
      }
     case 329:
      
      var $1862 = HEAP[$dtd] + 131;
      HEAP[$1862] = 0;
      
      var $1864 = HEAP[$entity313] + 32;
      HEAP[$1864] = 1;
      
      
      var $1867 = HEAP[HEAP[$parser_addr] + 112];
      
      
      var $1870 = HEAP[HEAP[$entity313] + 24];
      
      
      var $1873 = HEAP[HEAP[$entity313] + 16];
      
      
      var $1876 = HEAP[HEAP[$entity313] + 20];
      
      
      var $1879 = HEAP[HEAP[$parser_addr] + 116];
      var $1880 = FUNCTION_TABLE[$1867]($1879, 0, $1876, $1873, $1870);
      
      if ($1880 == 0) {
        __label__ = 330;
        break;
      } else {
        __label__ = 331;
        break;
      }
     case 330:
      
      var $1883 = HEAP[$entity313] + 32;
      HEAP[$1883] = 0;
      HEAP[$0] = 21;
      __label__ = 422;
      break;
     case 331:
      
      var $1885 = HEAP[$entity313] + 32;
      HEAP[$1885] = 0;
      HEAP[$handleDefault] = 0;
      
      
      
      
      if (HEAP[HEAP[$dtd] + 131] == 0) {
        __label__ = 332;
        break;
      } else {
        __label__ = 333;
        break;
      }
     case 332:
      
      
      var $1892 = HEAP[HEAP[$dtd] + 130];
      
      var $1894 = HEAP[$dtd] + 128;
      HEAP[$1894] = $1892;
      __label__ = 415;
      break;
     case 333:
      __label__ = 335;
      break;
     case 334:
      
      
      var $1897 = HEAP[HEAP[$dtd] + 130];
      
      var $1899 = HEAP[$dtd] + 128;
      HEAP[$1899] = $1897;
      __label__ = 415;
      break;
     case 335:
      
      
      
      
      if (HEAP[HEAP[$dtd] + 130] == 0) {
        __label__ = 336;
        break;
      } else {
        __label__ = 339;
        break;
      }
     case 336:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 108] != 0) {
        __label__ = 337;
        break;
      } else {
        __label__ = 339;
        break;
      }
     case 337:
      
      
      var $1910 = HEAP[HEAP[$parser_addr] + 108];
      
      
      var $1913 = HEAP[HEAP[$parser_addr] + 4];
      var $1914 = FUNCTION_TABLE[$1910]($1913);
      
      if ($1914 == 0) {
        __label__ = 338;
        break;
      } else {
        __label__ = 339;
        break;
      }
     case 338:
      HEAP[$0] = 22;
      __label__ = 422;
      break;
     case 339:
      __label__ = 415;
      break;
     case 340:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 128] != 0) {
        __label__ = 341;
        break;
      } else {
        __label__ = 344;
        break;
      }
     case 341:
      var $1920 = HEAP[$next_addr];
      var $1921 = HEAP[$parser_addr];
      var $1922 = HEAP[$enc_addr];
      var $1923 = HEAP[$s_addr];
      var $1924 = _getElementType($1921, $1922, $1923, $1920);
      
      var $1926 = HEAP[$parser_addr] + 344;
      HEAP[$1926] = $1924;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 344] == 0) {
        __label__ = 342;
        break;
      } else {
        __label__ = 343;
        break;
      }
     case 342:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 343:
      
      var $1932 = HEAP[$dtd] + 180;
      HEAP[$1932] = 0;
      
      var $1934 = HEAP[$dtd] + 176;
      HEAP[$1934] = 0;
      
      var $1936 = HEAP[$dtd] + 160;
      HEAP[$1936] = 1;
      HEAP[$handleDefault] = 0;
      __label__ = 344;
      break;
     case 344:
      __label__ = 415;
      break;
     case 345:
      
      
      
      
      if (HEAP[HEAP[$dtd] + 160] != 0) {
        __label__ = 346;
        break;
      } else {
        __label__ = 354;
        break;
      }
     case 346:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 128] != 0) {
        __label__ = 347;
        break;
      } else {
        __label__ = 353;
        break;
      }
     case 347:
      
      
      
      var $1948 = HEAP[HEAP[$parser_addr] + 12];
      var $1949 = FUNCTION_TABLE[$1948](20);
      var $1950 = $1949;
      HEAP[$content] = $1950;
      
      
      if (HEAP[$content] == 0) {
        __label__ = 348;
        break;
      } else {
        __label__ = 349;
        break;
      }
     case 348:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 349:
      
      var $1954 = HEAP[$content] + 4;
      HEAP[$1954] = 0;
      
      var $1956 = HEAP[$content] + 8;
      HEAP[$1956] = 0;
      
      var $1958 = HEAP[$content] + 12;
      HEAP[$1958] = 0;
      
      var $1960 = HEAP[$content] + 16;
      HEAP[$1960] = 0;
      
      
      if (HEAP[$role] == 41) {
        __label__ = 350;
        break;
      } else {
        __label__ = 351;
        break;
      }
     case 350:
      HEAP[$iftmp_226] = 2;
      __label__ = 352;
      break;
     case 351:
      HEAP[$iftmp_226] = 1;
      __label__ = 352;
      break;
     case 352:
      
      var $1964 = HEAP[$content];
      var $1965 = HEAP[$iftmp_226];
      HEAP[$1964] = $1965;
      var $1966 = HEAP[$eventEndPP];
      var $1967 = HEAP[$s_addr];
      HEAP[$1966] = $1967;
      
      
      var $1970 = HEAP[HEAP[$parser_addr] + 128];
      
      
      
      
      var $1975 = HEAP[HEAP[HEAP[$parser_addr] + 344]];
      
      
      var $1978 = HEAP[HEAP[$parser_addr] + 4];
      var $1979 = HEAP[$content];
      FUNCTION_TABLE[$1970]($1978, $1975, $1979);
      HEAP[$handleDefault] = 0;
      __label__ = 353;
      break;
     case 353:
      
      var $1981 = HEAP[$dtd] + 160;
      HEAP[$1981] = 0;
      __label__ = 354;
      break;
     case 354:
      __label__ = 415;
      break;
     case 355:
      
      
      
      
      if (HEAP[HEAP[$dtd] + 160] != 0) {
        __label__ = 356;
        break;
      } else {
        __label__ = 358;
        break;
      }
     case 356:
      
      
      
      
      
      
      
      
      
      
      
      
      
      var $1999 = HEAP[HEAP[$dtd] + 164] + 28 * HEAP[HEAP[HEAP[$dtd] + 184] + 4 * (HEAP[HEAP[$dtd] + 180] - 1)];
      HEAP[$1999] = 3;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 128] != 0) {
        __label__ = 357;
        break;
      } else {
        __label__ = 358;
        break;
      }
     case 357:
      HEAP[$handleDefault] = 0;
      __label__ = 358;
      break;
     case 358:
      __label__ = 415;
      break;
     case 359:
      HEAP[$quant] = 0;
      __label__ = 363;
      break;
     case 360:
      HEAP[$quant] = 1;
      __label__ = 363;
      break;
     case 361:
      HEAP[$quant] = 2;
      __label__ = 363;
      break;
     case 362:
      HEAP[$quant] = 3;
      __label__ = 363;
      break;
     case 363:
      
      
      
      
      if (HEAP[HEAP[$dtd] + 160] != 0) {
        __label__ = 364;
        break;
      } else {
        __label__ = 375;
        break;
      }
     case 364:
      
      
      if (HEAP[$quant] != 0) {
        __label__ = 365;
        break;
      } else {
        __label__ = 366;
        break;
      }
     case 365:
      
      
      
      
      
      var $2015 = HEAP[$next_addr] + (0 - HEAP[HEAP[$enc_addr] + 68]);
      HEAP[$iftmp_227] = $2015;
      __label__ = 367;
      break;
     case 366:
      var $2016 = HEAP[$next_addr];
      HEAP[$iftmp_227] = $2016;
      __label__ = 367;
      break;
     case 367:
      var $2017 = HEAP[$iftmp_227];
      HEAP[$nxt] = $2017;
      var $2018 = HEAP[$parser_addr];
      var $2019 = _nextScaffoldPart($2018);
      HEAP[$myindex374] = $2019;
      
      
      if (HEAP[$myindex374] < 0) {
        __label__ = 368;
        break;
      } else {
        __label__ = 369;
        break;
      }
     case 368:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 369:
      
      
      
      
      
      var $2027 = HEAP[HEAP[$dtd] + 164] + 28 * HEAP[$myindex374];
      HEAP[$2027] = 4;
      
      
      
      
      
      var $2033 = HEAP[HEAP[$dtd] + 164] + 28 * HEAP[$myindex374] + 4;
      var $2034 = HEAP[$quant];
      HEAP[$2033] = $2034;
      var $2035 = HEAP[$parser_addr];
      var $2036 = HEAP[$enc_addr];
      var $2037 = HEAP[$s_addr];
      var $2038 = HEAP[$nxt];
      var $2039 = _getElementType($2035, $2036, $2037, $2038);
      HEAP[$el] = $2039;
      
      
      if (HEAP[$el] == 0) {
        __label__ = 370;
        break;
      } else {
        __label__ = 371;
        break;
      }
     case 370:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 371:
      
      
      var $2044 = HEAP[HEAP[$el]];
      HEAP[$name373] = $2044;
      
      
      
      
      
      var $2050 = HEAP[HEAP[$dtd] + 164] + 28 * HEAP[$myindex374] + 8;
      var $2051 = HEAP[$name373];
      HEAP[$2050] = $2051;
      HEAP[$nameLen] = 0;
      __label__ = 372;
      break;
     case 372:
      
      
      
      
      
      var $2057 = HEAP[HEAP[$name373] + HEAP[$nameLen]] != 0;
      
      var $2059 = HEAP[$nameLen] + 1;
      HEAP[$nameLen] = $2059;
      
      if ($2057 != 0) {
        __label__ = 372;
        break;
      } else {
        __label__ = 373;
        break;
      }
     case 373:
      
      
      
      
      var $2064 = HEAP[HEAP[$dtd] + 168] + HEAP[$nameLen];
      
      var $2066 = HEAP[$dtd] + 168;
      HEAP[$2066] = $2064;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 128] != 0) {
        __label__ = 374;
        break;
      } else {
        __label__ = 375;
        break;
      }
     case 374:
      HEAP[$handleDefault] = 0;
      __label__ = 375;
      break;
     case 375:
      __label__ = 415;
      break;
     case 376:
      HEAP[$quant] = 0;
      __label__ = 380;
      break;
     case 377:
      HEAP[$quant] = 1;
      __label__ = 380;
      break;
     case 378:
      HEAP[$quant] = 2;
      __label__ = 380;
      break;
     case 379:
      HEAP[$quant] = 3;
      __label__ = 380;
      break;
     case 380:
      
      
      
      
      if (HEAP[HEAP[$dtd] + 160] != 0) {
        __label__ = 381;
        break;
      } else {
        __label__ = 389;
        break;
      }
     case 381:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 128] != 0) {
        __label__ = 382;
        break;
      } else {
        __label__ = 383;
        break;
      }
     case 382:
      HEAP[$handleDefault] = 0;
      __label__ = 383;
      break;
     case 383:
      
      
      
      var $2082 = HEAP[HEAP[$dtd] + 180] - 1;
      
      var $2084 = HEAP[$dtd] + 180;
      HEAP[$2084] = $2082;
      
      
      
      
      
      
      
      
      
      
      
      
      var $2097 = HEAP[HEAP[$dtd] + 164] + 28 * HEAP[HEAP[HEAP[$dtd] + 184] + 4 * HEAP[HEAP[$dtd] + 180]] + 4;
      var $2098 = HEAP[$quant];
      HEAP[$2097] = $2098;
      
      
      
      
      if (HEAP[HEAP[$dtd] + 180] == 0) {
        __label__ = 384;
        break;
      } else {
        __label__ = 389;
        break;
      }
     case 384:
      
      
      if (HEAP[$handleDefault] == 0) {
        __label__ = 385;
        break;
      } else {
        __label__ = 388;
        break;
      }
     case 385:
      var $2105 = HEAP[$parser_addr];
      var $2106 = _build_model($2105);
      HEAP[$model] = $2106;
      
      
      if (HEAP[$model] == 0) {
        __label__ = 386;
        break;
      } else {
        __label__ = 387;
        break;
      }
     case 386:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 387:
      var $2109 = HEAP[$eventEndPP];
      var $2110 = HEAP[$s_addr];
      HEAP[$2109] = $2110;
      
      
      var $2113 = HEAP[HEAP[$parser_addr] + 128];
      
      
      
      
      var $2118 = HEAP[HEAP[HEAP[$parser_addr] + 344]];
      
      
      var $2121 = HEAP[HEAP[$parser_addr] + 4];
      var $2122 = HEAP[$model];
      FUNCTION_TABLE[$2113]($2121, $2118, $2122);
      __label__ = 388;
      break;
     case 388:
      
      var $2124 = HEAP[$dtd] + 160;
      HEAP[$2124] = 0;
      
      var $2126 = HEAP[$dtd] + 168;
      HEAP[$2126] = 0;
      __label__ = 389;
      break;
     case 389:
      __label__ = 415;
      break;
     case 390:
      var $2127 = HEAP[$next_addr];
      var $2128 = HEAP[$parser_addr];
      var $2129 = HEAP[$enc_addr];
      var $2130 = HEAP[$s_addr];
      var $2131 = _reportProcessingInstruction($2128, $2129, $2130, $2127);
      
      if ($2131 == 0) {
        __label__ = 391;
        break;
      } else {
        __label__ = 392;
        break;
      }
     case 391:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 392:
      HEAP[$handleDefault] = 0;
      __label__ = 415;
      break;
     case 393:
      var $2133 = HEAP[$next_addr];
      var $2134 = HEAP[$parser_addr];
      var $2135 = HEAP[$enc_addr];
      var $2136 = HEAP[$s_addr];
      var $2137 = _reportComment($2134, $2135, $2136, $2133);
      
      if ($2137 == 0) {
        __label__ = 394;
        break;
      } else {
        __label__ = 395;
        break;
      }
     case 394:
      HEAP[$0] = 1;
      __label__ = 422;
      break;
     case 395:
      HEAP[$handleDefault] = 0;
      __label__ = 415;
      break;
     case 396:
      
      if (HEAP[$tok_addr] == 14) {
        __label__ = 397;
        break;
      } else {
        __label__ = 398;
        break;
      }
     case 397:
      HEAP[$handleDefault] = 0;
      __label__ = 398;
      break;
     case 398:
      __label__ = 415;
      break;
     case 399:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 84] != 0) {
        __label__ = 400;
        break;
      } else {
        __label__ = 401;
        break;
      }
     case 400:
      HEAP[$handleDefault] = 0;
      __label__ = 401;
      break;
     case 401:
      __label__ = 415;
      break;
     case 402:
      
      
      
      
      if (HEAP[HEAP[$dtd] + 128] != 0) {
        __label__ = 403;
        break;
      } else {
        __label__ = 405;
        break;
      }
     case 403:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 136] != 0) {
        __label__ = 404;
        break;
      } else {
        __label__ = 405;
        break;
      }
     case 404:
      HEAP[$handleDefault] = 0;
      __label__ = 405;
      break;
     case 405:
      __label__ = 415;
      break;
     case 406:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 96] != 0) {
        __label__ = 407;
        break;
      } else {
        __label__ = 408;
        break;
      }
     case 407:
      HEAP[$handleDefault] = 0;
      __label__ = 408;
      break;
     case 408:
      __label__ = 415;
      break;
     case 409:
      
      
      
      
      if (HEAP[HEAP[$dtd] + 128] != 0) {
        __label__ = 410;
        break;
      } else {
        __label__ = 412;
        break;
      }
     case 410:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 132] != 0) {
        __label__ = 411;
        break;
      } else {
        __label__ = 412;
        break;
      }
     case 411:
      HEAP[$handleDefault] = 0;
      __label__ = 412;
      break;
     case 412:
      __label__ = 415;
      break;
     case 413:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 128] != 0) {
        __label__ = 414;
        break;
      } else {
        __label__ = 415;
        break;
      }
     case 414:
      HEAP[$handleDefault] = 0;
      __label__ = 415;
      break;
     case 415:
      
      
      if (HEAP[$handleDefault] != 0) {
        __label__ = 416;
        break;
      } else {
        __label__ = 418;
        break;
      }
     case 416:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 80] != 0) {
        __label__ = 417;
        break;
      } else {
        __label__ = 418;
        break;
      }
     case 417:
      var $2174 = HEAP[$next_addr];
      var $2175 = HEAP[$parser_addr];
      var $2176 = HEAP[$enc_addr];
      var $2177 = HEAP[$s_addr];
      _reportDefault($2175, $2176, $2177, $2174);
      __label__ = 418;
      break;
     case 418:
      
      
      
      var $2181 = HEAP[HEAP[$parser_addr] + 480];
      if ($2181 == 2) {
        __label__ = 420;
        break;
      } else if ($2181 == 3) {
        __label__ = 419;
        break;
      } else {
        __label__ = 421;
        break;
      }
     case 419:
      var $2182 = HEAP[$next_addr];
      var $2183 = HEAP[$nextPtr_addr];
      HEAP[$2183] = $2182;
      HEAP[$0] = 0;
      __label__ = 422;
      break;
     case 420:
      HEAP[$0] = 35;
      __label__ = 422;
      break;
     case 421:
      var $2184 = HEAP[$next_addr];
      HEAP[$s_addr] = $2184;
      
      
      
      var $2188 = HEAP[HEAP[$enc_addr]];
      var $2189 = HEAP[$enc_addr];
      var $2190 = HEAP[$s_addr];
      var $2191 = HEAP[$end_addr];
      var $2192 = FUNCTION_TABLE[$2188]($2189, $2190, $2191, $next_addr);
      HEAP[$tok_addr] = $2192;
      __label__ = 3;
      break;
     case 422:
      var $2193 = HEAP[$0];
      HEAP[$retval] = $2193;
      __label__ = 423;
      break;
     case 423:
      var $retval432 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval432;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _epilogProcessor($parser, $s, $end, $nextPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 32;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $s_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $next = __stackBase__ + 24;
      var $tok = __stackBase__ + 28;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$s_addr] = $s;
      HEAP[$end_addr] = $end;
      HEAP[$nextPtr_addr] = $nextPtr;
      
      var $2 = HEAP[$parser_addr] + 280;
      HEAP[$2] = FUNCTION_TABLE_OFFSET + 88;
      
      var $4 = HEAP[$parser_addr] + 288;
      var $5 = HEAP[$s_addr];
      HEAP[$4] = $5;
      __label__ = 1;
      break;
     case 1:
      HEAP[$next] = 0;
      
      
      
      
      
      var $11 = HEAP[HEAP[HEAP[$parser_addr] + 144]];
      
      
      var $14 = HEAP[HEAP[$parser_addr] + 144];
      var $15 = HEAP[$s_addr];
      var $16 = HEAP[$end_addr];
      var $17 = FUNCTION_TABLE[$11]($14, $15, $16, $next);
      HEAP[$tok] = $17;
      var $18 = HEAP[$next];
      
      var $20 = HEAP[$parser_addr] + 292;
      HEAP[$20] = $18;
      var $21 = HEAP[$tok];
      if ($21 == -15) {
        __label__ = 2;
        break;
      } else if ($21 == -4) {
        __label__ = 6;
        break;
      } else if ($21 == -2) {
        __label__ = 20;
        break;
      } else if ($21 == -1) {
        __label__ = 17;
        break;
      } else if ($21 == 0) {
        __label__ = 16;
        break;
      } else if ($21 == 11) {
        __label__ = 10;
        break;
      } else if ($21 == 13) {
        __label__ = 13;
        break;
      } else if ($21 == 15) {
        __label__ = 7;
        break;
      } else {
        __label__ = 23;
        break;
      }
     case 2:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 80] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 3:
      var $26 = HEAP[$next];
      
      
      var $29 = HEAP[HEAP[$parser_addr] + 144];
      var $30 = HEAP[$parser_addr];
      var $31 = HEAP[$s_addr];
      _reportDefault($30, $29, $31, $26);
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 480] == 2) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      HEAP[$0] = 35;
      __label__ = 28;
      break;
     case 5:
      var $37 = HEAP[$next];
      var $38 = HEAP[$nextPtr_addr];
      HEAP[$38] = $37;
      HEAP[$0] = 0;
      __label__ = 28;
      break;
     case 6:
      var $39 = HEAP[$nextPtr_addr];
      var $40 = HEAP[$s_addr];
      HEAP[$39] = $40;
      HEAP[$0] = 0;
      __label__ = 28;
      break;
     case 7:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 80] != 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      var $45 = HEAP[$next];
      
      
      var $48 = HEAP[HEAP[$parser_addr] + 144];
      var $49 = HEAP[$parser_addr];
      var $50 = HEAP[$s_addr];
      _reportDefault($49, $48, $50, $45);
      __label__ = 9;
      break;
     case 9:
      __label__ = 24;
      break;
     case 10:
      var $51 = HEAP[$next];
      
      
      var $54 = HEAP[HEAP[$parser_addr] + 144];
      var $55 = HEAP[$parser_addr];
      var $56 = HEAP[$s_addr];
      var $57 = _reportProcessingInstruction($55, $54, $56, $51);
      
      if ($57 == 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      HEAP[$0] = 1;
      __label__ = 28;
      break;
     case 12:
      __label__ = 24;
      break;
     case 13:
      var $59 = HEAP[$next];
      
      
      var $62 = HEAP[HEAP[$parser_addr] + 144];
      var $63 = HEAP[$parser_addr];
      var $64 = HEAP[$s_addr];
      var $65 = _reportComment($63, $62, $64, $59);
      
      if ($65 == 0) {
        __label__ = 14;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 14:
      HEAP[$0] = 1;
      __label__ = 28;
      break;
     case 15:
      __label__ = 24;
      break;
     case 16:
      var $67 = HEAP[$next];
      
      var $69 = HEAP[$parser_addr] + 288;
      HEAP[$69] = $67;
      HEAP[$0] = 4;
      __label__ = 28;
      break;
     case 17:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 480 + 4] == 0) {
        __label__ = 18;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 18:
      var $75 = HEAP[$nextPtr_addr];
      var $76 = HEAP[$s_addr];
      HEAP[$75] = $76;
      HEAP[$0] = 0;
      __label__ = 28;
      break;
     case 19:
      HEAP[$0] = 5;
      __label__ = 28;
      break;
     case 20:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 480 + 4] == 0) {
        __label__ = 21;
        break;
      } else {
        __label__ = 22;
        break;
      }
     case 21:
      var $82 = HEAP[$nextPtr_addr];
      var $83 = HEAP[$s_addr];
      HEAP[$82] = $83;
      HEAP[$0] = 0;
      __label__ = 28;
      break;
     case 22:
      HEAP[$0] = 6;
      __label__ = 28;
      break;
     case 23:
      HEAP[$0] = 9;
      __label__ = 28;
      break;
     case 24:
      var $84 = HEAP[$next];
      HEAP[$s_addr] = $84;
      
      var $86 = HEAP[$parser_addr] + 288;
      var $87 = HEAP[$s_addr];
      HEAP[$86] = $87;
      
      
      
      var $91 = HEAP[HEAP[$parser_addr] + 480];
      if ($91 == 2) {
        __label__ = 26;
        break;
      } else if ($91 == 3) {
        __label__ = 25;
        break;
      } else {
        __label__ = 27;
        break;
      }
     case 25:
      var $92 = HEAP[$next];
      var $93 = HEAP[$nextPtr_addr];
      HEAP[$93] = $92;
      HEAP[$0] = 0;
      __label__ = 28;
      break;
     case 26:
      HEAP[$0] = 35;
      __label__ = 28;
      break;
     case 27:
      __label__ = 1;
      break;
     case 28:
      var $94 = HEAP[$0];
      HEAP[$retval] = $94;
      __label__ = 29;
      break;
     case 29:
      var $retval28 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval28;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _processInternalEntity($parser, $entity, $betweenDecl) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 41;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 41);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $entity_addr = __stackBase__ + 4;
      var $betweenDecl_addr = __stackBase__ + 8;
      var $retval = __stackBase__ + 9;
      var $0 = __stackBase__ + 13;
      var $textStart = __stackBase__ + 17;
      var $textEnd = __stackBase__ + 21;
      var $next = __stackBase__ + 25;
      var $result = __stackBase__ + 29;
      var $openEntity = __stackBase__ + 33;
      var $tok = __stackBase__ + 37;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$entity_addr] = $entity;
      HEAP[$betweenDecl_addr] = $betweenDecl;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 304] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      
      
      var $7 = HEAP[HEAP[$parser_addr] + 304];
      HEAP[$openEntity] = $7;
      
      
      var $10 = HEAP[HEAP[$openEntity] + 8];
      
      var $12 = HEAP[$parser_addr] + 304;
      HEAP[$12] = $10;
      __label__ = 4;
      break;
     case 2:
      
      
      
      var $16 = HEAP[HEAP[$parser_addr] + 12];
      var $17 = FUNCTION_TABLE[$16](24);
      var $18 = $17;
      HEAP[$openEntity] = $18;
      
      
      if (HEAP[$openEntity] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      HEAP[$0] = 1;
      __label__ = 13;
      break;
     case 4:
      
      var $22 = HEAP[$entity_addr] + 32;
      HEAP[$22] = 1;
      
      var $24 = HEAP[$entity_addr] + 12;
      HEAP[$24] = 0;
      
      
      var $27 = HEAP[HEAP[$parser_addr] + 300];
      
      var $29 = HEAP[$openEntity] + 8;
      HEAP[$29] = $27;
      
      var $31 = HEAP[$parser_addr] + 300;
      var $32 = HEAP[$openEntity];
      HEAP[$31] = $32;
      
      var $34 = HEAP[$openEntity] + 12;
      var $35 = HEAP[$entity_addr];
      HEAP[$34] = $35;
      
      
      var $38 = HEAP[HEAP[$parser_addr] + 312];
      
      var $40 = HEAP[$openEntity] + 16;
      HEAP[$40] = $38;
      
      var $42 = HEAP[$openEntity] + 20;
      var $43 = HEAP[$betweenDecl_addr];
      HEAP[$42] = $43;
      
      var $45 = HEAP[$openEntity];
      HEAP[$45] = 0;
      
      var $47 = HEAP[$openEntity] + 4;
      HEAP[$47] = 0;
      
      
      var $50 = HEAP[HEAP[$entity_addr] + 4];
      HEAP[$textStart] = $50;
      
      
      
      
      
      
      var $57 = HEAP[HEAP[$entity_addr] + 4] + HEAP[HEAP[$entity_addr] + 8];
      HEAP[$textEnd] = $57;
      
      
      
      
      if (HEAP[HEAP[$entity_addr] + 33] != 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      
      
      
      
      
      var $67 = HEAP[HEAP[HEAP[$parser_addr] + 228]];
      
      
      var $70 = HEAP[HEAP[$parser_addr] + 228];
      var $71 = HEAP[$textStart];
      var $72 = HEAP[$textEnd];
      var $73 = FUNCTION_TABLE[$67]($70, $71, $72, $next);
      HEAP[$tok] = $73;
      var $74 = HEAP[$next];
      
      
      var $77 = HEAP[HEAP[$parser_addr] + 228];
      var $78 = HEAP[$parser_addr];
      var $79 = HEAP[$textStart];
      var $80 = HEAP[$textEnd];
      var $81 = HEAP[$tok];
      var $82 = _doProlog($78, $77, $79, $80, $81, $74, $next, 0);
      HEAP[$result] = $82;
      __label__ = 7;
      break;
     case 6:
      
      
      var $85 = HEAP[HEAP[$parser_addr] + 228];
      
      
      var $88 = HEAP[HEAP[$parser_addr] + 312];
      var $89 = HEAP[$parser_addr];
      var $90 = HEAP[$textStart];
      var $91 = HEAP[$textEnd];
      var $92 = _doContent($89, $88, $85, $90, $91, $next, 0);
      HEAP[$result] = $92;
      __label__ = 7;
      break;
     case 7:
      
      
      if (HEAP[$result] == 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 8:
      
      
      
      if (HEAP[$textEnd] == HEAP[$next]) {
        __label__ = 11;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 9:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 480] != 3) {
        __label__ = 11;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 10:
      
      
      
      
      var $107 = HEAP[$next] - HEAP[$textStart];
      
      var $109 = HEAP[$entity_addr] + 12;
      HEAP[$109] = $107;
      
      var $111 = HEAP[$parser_addr] + 280;
      HEAP[$111] = FUNCTION_TABLE_OFFSET + 90;
      __label__ = 12;
      break;
     case 11:
      
      var $113 = HEAP[$entity_addr] + 32;
      HEAP[$113] = 0;
      
      
      var $116 = HEAP[HEAP[$openEntity] + 8];
      
      var $118 = HEAP[$parser_addr] + 300;
      HEAP[$118] = $116;
      
      
      var $121 = HEAP[HEAP[$parser_addr] + 304];
      
      var $123 = HEAP[$openEntity] + 8;
      HEAP[$123] = $121;
      
      var $125 = HEAP[$parser_addr] + 304;
      var $126 = HEAP[$openEntity];
      HEAP[$125] = $126;
      __label__ = 12;
      break;
     case 12:
      var $127 = HEAP[$result];
      HEAP[$0] = $127;
      __label__ = 13;
      break;
     case 13:
      var $128 = HEAP[$0];
      HEAP[$retval] = $128;
      __label__ = 14;
      break;
     case 14:
      var $retval13 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval13;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _internalEntityProcessor($parser, $s, $end, $nextPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 56;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 56);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $s_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $entity = __stackBase__ + 24;
      var $textStart = __stackBase__ + 28;
      var $textEnd = __stackBase__ + 32;
      var $next = __stackBase__ + 36;
      var $result = __stackBase__ + 40;
      var $openEntity = __stackBase__ + 44;
      var $tok = __stackBase__ + 48;
      var $tok11 = __stackBase__ + 52;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$s_addr] = $s;
      HEAP[$end_addr] = $end;
      HEAP[$nextPtr_addr] = $nextPtr;
      
      
      var $3 = HEAP[HEAP[$parser_addr] + 300];
      HEAP[$openEntity] = $3;
      
      
      if (HEAP[$openEntity] == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = 23;
      __label__ = 13;
      break;
     case 2:
      
      
      var $8 = HEAP[HEAP[$openEntity] + 12];
      HEAP[$entity] = $8;
      
      
      
      
      
      
      var $15 = HEAP[HEAP[$entity] + 4] + HEAP[HEAP[$entity] + 12];
      HEAP[$textStart] = $15;
      
      
      
      
      
      
      var $22 = HEAP[HEAP[$entity] + 4] + HEAP[HEAP[$entity] + 8];
      HEAP[$textEnd] = $22;
      
      
      
      
      if (HEAP[HEAP[$entity] + 33] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      
      
      
      
      var $32 = HEAP[HEAP[HEAP[$parser_addr] + 228]];
      
      
      var $35 = HEAP[HEAP[$parser_addr] + 228];
      var $36 = HEAP[$textStart];
      var $37 = HEAP[$textEnd];
      var $38 = FUNCTION_TABLE[$32]($35, $36, $37, $next);
      HEAP[$tok] = $38;
      var $39 = HEAP[$next];
      
      
      var $42 = HEAP[HEAP[$parser_addr] + 228];
      var $43 = HEAP[$parser_addr];
      var $44 = HEAP[$textStart];
      var $45 = HEAP[$textEnd];
      var $46 = HEAP[$tok];
      var $47 = _doProlog($43, $42, $44, $45, $46, $39, $next, 0);
      HEAP[$result] = $47;
      __label__ = 5;
      break;
     case 4:
      
      
      var $50 = HEAP[HEAP[$parser_addr] + 228];
      
      
      var $53 = HEAP[HEAP[$openEntity] + 16];
      var $54 = HEAP[$parser_addr];
      var $55 = HEAP[$textStart];
      var $56 = HEAP[$textEnd];
      var $57 = _doContent($54, $53, $50, $55, $56, $next, 0);
      HEAP[$result] = $57;
      __label__ = 5;
      break;
     case 5:
      
      
      if (HEAP[$result] != 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      var $60 = HEAP[$result];
      HEAP[$0] = $60;
      __label__ = 13;
      break;
     case 7:
      
      
      
      if (HEAP[$textEnd] == HEAP[$next]) {
        __label__ = 10;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 8:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 480] != 3) {
        __label__ = 10;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 9:
      
      
      
      
      
      
      var $75 = HEAP[$next] - HEAP[HEAP[$entity] + 4];
      
      var $77 = HEAP[$entity] + 12;
      HEAP[$77] = $75;
      var $78 = HEAP[$result];
      HEAP[$0] = $78;
      __label__ = 13;
      break;
     case 10:
      
      var $80 = HEAP[$entity] + 32;
      HEAP[$80] = 0;
      
      
      var $83 = HEAP[HEAP[$openEntity] + 8];
      
      var $85 = HEAP[$parser_addr] + 300;
      HEAP[$85] = $83;
      
      
      var $88 = HEAP[HEAP[$parser_addr] + 304];
      
      var $90 = HEAP[$openEntity] + 8;
      HEAP[$90] = $88;
      
      var $92 = HEAP[$parser_addr] + 304;
      var $93 = HEAP[$openEntity];
      HEAP[$92] = $93;
      
      
      
      
      if (HEAP[HEAP[$entity] + 33] != 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      
      var $99 = HEAP[$parser_addr] + 280;
      HEAP[$99] = FUNCTION_TABLE_OFFSET + 66;
      
      
      
      
      
      var $105 = HEAP[HEAP[HEAP[$parser_addr] + 144]];
      
      
      var $108 = HEAP[HEAP[$parser_addr] + 144];
      var $109 = HEAP[$s_addr];
      var $110 = HEAP[$end_addr];
      var $111 = FUNCTION_TABLE[$105]($108, $109, $110, $next);
      HEAP[$tok11] = $111;
      
      
      
      
      
      
      var $118 = HEAP[$next];
      
      
      var $121 = HEAP[HEAP[$parser_addr] + 144];
      var $122 = HEAP[$parser_addr];
      var $123 = HEAP[$s_addr];
      var $124 = HEAP[$end_addr];
      var $125 = HEAP[$tok11];
      var $126 = HEAP[$nextPtr_addr];
      var $127 = HEAP[HEAP[$parser_addr] + 480 + 4] == 0 & 255;
      var $128 = _doProlog($122, $121, $123, $124, $125, $118, $126, $127);
      HEAP[$0] = $128;
      __label__ = 13;
      break;
     case 12:
      
      var $130 = HEAP[$parser_addr] + 280;
      HEAP[$130] = FUNCTION_TABLE_OFFSET + 64;
      
      
      
      
      
      
      
      
      var $139 = HEAP[HEAP[$parser_addr] + 144];
      
      
      
      
      var $144 = HEAP[HEAP[$parser_addr] + 476] != 0;
      var $145 = HEAP[$parser_addr];
      var $146 = HEAP[$s_addr];
      var $147 = HEAP[$end_addr];
      var $148 = HEAP[$nextPtr_addr];
      var $149 = HEAP[HEAP[$parser_addr] + 480 + 4] == 0 & 255;
      var $150 = _doContent($145, $144, $139, $146, $147, $148, $149);
      HEAP[$0] = $150;
      __label__ = 13;
      break;
     case 13:
      var $151 = HEAP[$0];
      HEAP[$retval] = $151;
      __label__ = 14;
      break;
     case 14:
      var $retval14 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval14;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _errorProcessor($parser, $s, $end, $nextPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 24;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $s_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$s_addr] = $s;
      HEAP[$end_addr] = $end;
      HEAP[$nextPtr_addr] = $nextPtr;
      
      
      var $3 = HEAP[HEAP[$parser_addr] + 284];
      HEAP[$0] = $3;
      var $4 = HEAP[$0];
      HEAP[$retval] = $4;
      __label__ = 1;
      break;
     case 1:
      var $retval1 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval1;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _storeAttributeValue($parser, $enc, $isCdata, $ptr, $end, $pool) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 34;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 34);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $enc_addr = __stackBase__ + 4;
      var $isCdata_addr = __stackBase__ + 8;
      var $ptr_addr = __stackBase__ + 9;
      var $end_addr = __stackBase__ + 13;
      var $pool_addr = __stackBase__ + 17;
      var $retval = __stackBase__ + 21;
      var $iftmp_252 = __stackBase__ + 25;
      var $0 = __stackBase__ + 26;
      var $result = __stackBase__ + 30;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$enc_addr] = $enc;
      HEAP[$isCdata_addr] = $isCdata;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$pool_addr] = $pool;
      
      
      var $3 = HEAP[$parser_addr];
      var $4 = HEAP[$enc_addr];
      var $5 = HEAP[$isCdata_addr] & 255;
      var $6 = HEAP[$ptr_addr];
      var $7 = HEAP[$end_addr];
      var $8 = HEAP[$pool_addr];
      var $9 = _appendAttributeValue($3, $4, $5, $6, $7, $8);
      HEAP[$result] = $9;
      
      
      if (HEAP[$result] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      var $12 = HEAP[$result];
      HEAP[$0] = $12;
      __label__ = 13;
      break;
     case 2:
      
      
      if (HEAP[$isCdata_addr] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 3:
      
      
      
      
      
      
      
      if (HEAP[HEAP[$pool_addr] + 12] != HEAP[HEAP[$pool_addr] + 16]) {
        __label__ = 4;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 4:
      
      
      
      var $25 = HEAP[HEAP[$pool_addr] + 12] + -1;
      
      
      if (HEAP[$25] == 32) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      
      
      
      var $31 = HEAP[HEAP[$pool_addr] + 12] + -1;
      
      var $33 = HEAP[$pool_addr] + 12;
      HEAP[$33] = $31;
      __label__ = 6;
      break;
     case 6:
      
      
      
      
      
      
      
      if (HEAP[HEAP[$pool_addr] + 12] != HEAP[HEAP[$pool_addr] + 8]) {
        __label__ = 8;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 7:
      var $41 = HEAP[$pool_addr];
      var $42 = _poolGrow($41);
      
      if ($42 != 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      
      
      var $46 = HEAP[HEAP[$pool_addr] + 12];
      HEAP[$46] = 0;
      var $47 = $46 + 1;
      
      var $49 = HEAP[$pool_addr] + 12;
      HEAP[$49] = $47;
      HEAP[$iftmp_252] = 0;
      __label__ = 10;
      break;
     case 9:
      HEAP[$iftmp_252] = 1;
      __label__ = 10;
      break;
     case 10:
      
      
      if (HEAP[$iftmp_252] != 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      HEAP[$0] = 1;
      __label__ = 13;
      break;
     case 12:
      HEAP[$0] = 0;
      __label__ = 13;
      break;
     case 13:
      var $51 = HEAP[$0];
      HEAP[$retval] = $51;
      __label__ = 14;
      break;
     case 14:
      var $retval13 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval13;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _appendAttributeValue($parser, $enc, $isCdata, $ptr, $end, $pool) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 82;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 82);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $enc_addr = __stackBase__ + 4;
      var $isCdata_addr = __stackBase__ + 8;
      var $ptr_addr = __stackBase__ + 9;
      var $end_addr = __stackBase__ + 13;
      var $pool_addr = __stackBase__ + 17;
      var $retval = __stackBase__ + 21;
      var $iftmp_262 = __stackBase__ + 25;
      var $iftmp_261 = __stackBase__ + 29;
      var $iftmp_259 = __stackBase__ + 33;
      var $iftmp_257 = __stackBase__ + 34;
      var $iftmp_254 = __stackBase__ + 35;
      var $0 = __stackBase__ + 36;
      var $dtd = __stackBase__ + 40;
      var $next = __stackBase__ + 44;
      var $tok = __stackBase__ + 48;
      var $buf = __stackBase__ + 52;
      var $i = __stackBase__ + 56;
      var $n = __stackBase__ + 60;
      var $name = __stackBase__ + 64;
      var $entity = __stackBase__ + 68;
      var $checkEntityDecl = __stackBase__ + 72;
      var $ch = __stackBase__ + 73;
      var $result = __stackBase__ + 74;
      var $textEnd = __stackBase__ + 78;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$enc_addr] = $enc;
      HEAP[$isCdata_addr] = $isCdata;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$pool_addr] = $pool;
      
      
      var $3 = HEAP[HEAP[$parser_addr] + 356];
      HEAP[$dtd] = $3;
      __label__ = 1;
      break;
     case 1:
      
      
      
      var $7 = HEAP[HEAP[$enc_addr] + 16];
      var $8 = HEAP[$enc_addr];
      var $9 = HEAP[$ptr_addr];
      var $10 = HEAP[$end_addr];
      var $11 = FUNCTION_TABLE[$7]($8, $9, $10, $next);
      HEAP[$tok] = $11;
      var $12 = HEAP[$tok];
      if ($12 == -4) {
        __label__ = 2;
        break;
      } else if ($12 == -3) {
        __label__ = 34;
        break;
      } else if ($12 == -1) {
        __label__ = 6;
        break;
      } else if ($12 == 0) {
        __label__ = 3;
        break;
      } else if ($12 == 6) {
        __label__ = 31;
        break;
      } else if ($12 == 7) {
        __label__ = 35;
        break;
      } else if ($12 == 9) {
        __label__ = 45;
        break;
      } else if ($12 == 10) {
        __label__ = 9;
        break;
      } else if ($12 == 39) {
        __label__ = 35;
        break;
      } else {
        __label__ = 91;
        break;
      }
     case 2:
      HEAP[$0] = 0;
      __label__ = 95;
      break;
     case 3:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 144] == HEAP[$enc_addr]) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      var $18 = HEAP[$next];
      
      var $20 = HEAP[$parser_addr] + 288;
      HEAP[$20] = $18;
      __label__ = 5;
      break;
     case 5:
      HEAP[$0] = 4;
      __label__ = 95;
      break;
     case 6:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 144] == HEAP[$enc_addr]) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      
      var $27 = HEAP[$parser_addr] + 288;
      var $28 = HEAP[$ptr_addr];
      HEAP[$27] = $28;
      __label__ = 8;
      break;
     case 8:
      HEAP[$0] = 4;
      __label__ = 95;
      break;
     case 9:
      
      
      var $31 = HEAP[HEAP[$enc_addr] + 44];
      var $32 = HEAP[$enc_addr];
      var $33 = HEAP[$ptr_addr];
      var $34 = FUNCTION_TABLE[$31]($32, $33);
      HEAP[$n] = $34;
      
      
      if (HEAP[$n] < 0) {
        __label__ = 10;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 10:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 144] == HEAP[$enc_addr]) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      
      var $43 = HEAP[$parser_addr] + 288;
      var $44 = HEAP[$ptr_addr];
      HEAP[$43] = $44;
      __label__ = 12;
      break;
     case 12:
      HEAP[$0] = 14;
      __label__ = 95;
      break;
     case 13:
      
      
      if (HEAP[$isCdata_addr] == 0) {
        __label__ = 14;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 14:
      
      
      if (HEAP[$n] == 32) {
        __label__ = 15;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 15:
      
      
      
      
      
      
      
      if (HEAP[HEAP[$pool_addr] + 12] == HEAP[HEAP[$pool_addr] + 16]) {
        __label__ = 94;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 16:
      
      
      
      var $59 = HEAP[HEAP[$pool_addr] + 12] + -1;
      
      
      if (HEAP[$59] == 32) {
        __label__ = 94;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 17:
      var $62 = HEAP[$n];
      var $buf17 = $buf;
      var $63 = _PyExpat_XmlUtf8Encode($62, $buf17);
      HEAP[$n] = $63;
      
      
      if (HEAP[$n] == 0) {
        __label__ = 18;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 18:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 144] == HEAP[$enc_addr]) {
        __label__ = 19;
        break;
      } else {
        __label__ = 20;
        break;
      }
     case 19:
      
      var $72 = HEAP[$parser_addr] + 288;
      var $73 = HEAP[$ptr_addr];
      HEAP[$72] = $73;
      __label__ = 20;
      break;
     case 20:
      HEAP[$0] = 14;
      __label__ = 95;
      break;
     case 21:
      HEAP[$i] = 0;
      __label__ = 29;
      break;
     case 22:
      
      
      
      
      
      
      
      if (HEAP[HEAP[$pool_addr] + 12] != HEAP[HEAP[$pool_addr] + 8]) {
        __label__ = 24;
        break;
      } else {
        __label__ = 23;
        break;
      }
     case 23:
      var $81 = HEAP[$pool_addr];
      var $82 = _poolGrow($81);
      
      if ($82 != 0) {
        __label__ = 24;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 24:
      
      
      var $86 = HEAP[HEAP[$pool_addr] + 12];
      
      
      var $89 = HEAP[$buf + HEAP[$i]];
      HEAP[$86] = $89;
      var $90 = $86 + 1;
      
      var $92 = HEAP[$pool_addr] + 12;
      HEAP[$92] = $90;
      HEAP[$iftmp_254] = 0;
      __label__ = 26;
      break;
     case 25:
      HEAP[$iftmp_254] = 1;
      __label__ = 26;
      break;
     case 26:
      
      
      if (HEAP[$iftmp_254] != 0) {
        __label__ = 27;
        break;
      } else {
        __label__ = 28;
        break;
      }
     case 27:
      HEAP[$0] = 1;
      __label__ = 95;
      break;
     case 28:
      
      var $95 = HEAP[$i] + 1;
      HEAP[$i] = $95;
      __label__ = 29;
      break;
     case 29:
      
      
      
      if (HEAP[$i] < HEAP[$n]) {
        __label__ = 22;
        break;
      } else {
        __label__ = 30;
        break;
      }
     case 30:
      __label__ = 94;
      break;
     case 31:
      var $99 = HEAP[$next];
      var $100 = HEAP[$pool_addr];
      var $101 = HEAP[$enc_addr];
      var $102 = HEAP[$ptr_addr];
      var $103 = _poolAppend($100, $101, $102, $99);
      
      if ($103 == 0) {
        __label__ = 32;
        break;
      } else {
        __label__ = 33;
        break;
      }
     case 32:
      HEAP[$0] = 1;
      __label__ = 95;
      break;
     case 33:
      __label__ = 94;
      break;
     case 34:
      
      
      
      
      var $109 = HEAP[$ptr_addr] + HEAP[HEAP[$enc_addr] + 68];
      HEAP[$next] = $109;
      __label__ = 35;
      break;
     case 35:
      
      
      if (HEAP[$isCdata_addr] == 0) {
        __label__ = 36;
        break;
      } else {
        __label__ = 38;
        break;
      }
     case 36:
      
      
      
      
      
      
      
      if (HEAP[HEAP[$pool_addr] + 12] == HEAP[HEAP[$pool_addr] + 16]) {
        __label__ = 94;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 37:
      
      
      
      var $122 = HEAP[HEAP[$pool_addr] + 12] + -1;
      
      
      if (HEAP[$122] == 32) {
        __label__ = 94;
        break;
      } else {
        __label__ = 38;
        break;
      }
     case 38:
      
      
      
      
      
      
      
      if (HEAP[HEAP[$pool_addr] + 12] != HEAP[HEAP[$pool_addr] + 8]) {
        __label__ = 40;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 39:
      var $132 = HEAP[$pool_addr];
      var $133 = _poolGrow($132);
      
      if ($133 != 0) {
        __label__ = 40;
        break;
      } else {
        __label__ = 41;
        break;
      }
     case 40:
      
      
      var $137 = HEAP[HEAP[$pool_addr] + 12];
      HEAP[$137] = 32;
      var $138 = $137 + 1;
      
      var $140 = HEAP[$pool_addr] + 12;
      HEAP[$140] = $138;
      HEAP[$iftmp_257] = 0;
      __label__ = 42;
      break;
     case 41:
      HEAP[$iftmp_257] = 1;
      __label__ = 42;
      break;
     case 42:
      
      
      if (HEAP[$iftmp_257] != 0) {
        __label__ = 43;
        break;
      } else {
        __label__ = 44;
        break;
      }
     case 43:
      HEAP[$0] = 1;
      __label__ = 95;
      break;
     case 44:
      __label__ = 94;
      break;
     case 45:
      
      
      var $144 = HEAP[HEAP[$enc_addr] + 48];
      
      
      
      
      
      var $150 = HEAP[$next] + (0 - HEAP[HEAP[$enc_addr] + 68]);
      
      
      
      
      var $155 = HEAP[$ptr_addr] + HEAP[HEAP[$enc_addr] + 68];
      var $156 = HEAP[$enc_addr];
      var $157 = FUNCTION_TABLE[$144]($156, $155, $150);
      var $158 = $157 & 255;
      HEAP[$ch] = $158;
      
      
      if (HEAP[$ch] != 0) {
        __label__ = 46;
        break;
      } else {
        __label__ = 53;
        break;
      }
     case 46:
      
      
      
      
      
      
      
      if (HEAP[HEAP[$pool_addr] + 12] != HEAP[HEAP[$pool_addr] + 8]) {
        __label__ = 48;
        break;
      } else {
        __label__ = 47;
        break;
      }
     case 47:
      var $168 = HEAP[$pool_addr];
      var $169 = _poolGrow($168);
      
      if ($169 != 0) {
        __label__ = 48;
        break;
      } else {
        __label__ = 49;
        break;
      }
     case 48:
      
      
      var $173 = HEAP[HEAP[$pool_addr] + 12];
      var $174 = HEAP[$ch];
      HEAP[$173] = $174;
      var $175 = $173 + 1;
      
      var $177 = HEAP[$pool_addr] + 12;
      HEAP[$177] = $175;
      HEAP[$iftmp_259] = 0;
      __label__ = 50;
      break;
     case 49:
      HEAP[$iftmp_259] = 1;
      __label__ = 50;
      break;
     case 50:
      
      
      if (HEAP[$iftmp_259] != 0) {
        __label__ = 51;
        break;
      } else {
        __label__ = 52;
        break;
      }
     case 51:
      HEAP[$0] = 1;
      __label__ = 95;
      break;
     case 52:
      __label__ = 94;
      break;
     case 53:
      
      
      
      
      
      var $184 = HEAP[$next] + (0 - HEAP[HEAP[$enc_addr] + 68]);
      
      
      
      
      var $189 = HEAP[$ptr_addr] + HEAP[HEAP[$enc_addr] + 68];
      
      var $191 = HEAP[$parser_addr] + 440;
      var $192 = HEAP[$enc_addr];
      var $193 = _poolStoreString($191, $192, $189, $184);
      HEAP[$name] = $193;
      
      
      if (HEAP[$name] == 0) {
        __label__ = 54;
        break;
      } else {
        __label__ = 55;
        break;
      }
     case 54:
      HEAP[$0] = 1;
      __label__ = 95;
      break;
     case 55:
      
      var $197 = HEAP[$dtd];
      var $198 = HEAP[$name];
      var $199 = _lookup($197, $198, 0);
      var $200 = $199;
      HEAP[$entity] = $200;
      
      
      
      var $204 = HEAP[HEAP[$parser_addr] + 440 + 16];
      
      
      var $207 = HEAP[$parser_addr] + 440 + 12;
      HEAP[$207] = $204;
      
      
      
      
      if (HEAP[$dtd] + 80 == HEAP[$pool_addr]) {
        __label__ = 56;
        break;
      } else {
        __label__ = 64;
        break;
      }
     case 56:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 256 + 16] == 0) {
        __label__ = 62;
        break;
      } else {
        __label__ = 57;
        break;
      }
     case 57:
      
      
      
      
      if (HEAP[HEAP[$dtd] + 130] != 0) {
        __label__ = 58;
        break;
      } else {
        __label__ = 60;
        break;
      }
     case 58:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 300] != 0) {
        __label__ = 62;
        break;
      } else {
        __label__ = 59;
        break;
      }
     case 59:
      __label__ = 61;
      break;
     case 60:
      
      
      
      
      if (HEAP[HEAP[$dtd] + 129] != 0) {
        __label__ = 62;
        break;
      } else {
        __label__ = 61;
        break;
      }
     case 61:
      HEAP[$iftmp_261] = 1;
      __label__ = 63;
      break;
     case 62:
      HEAP[$iftmp_261] = 0;
      __label__ = 63;
      break;
     case 63:
      
      var $230 = HEAP[$iftmp_261] & 255;
      HEAP[$checkEntityDecl] = $230;
      __label__ = 69;
      break;
     case 64:
      
      
      
      
      if (HEAP[HEAP[$dtd] + 129] == 0) {
        __label__ = 66;
        break;
      } else {
        __label__ = 65;
        break;
      }
     case 65:
      
      
      
      
      if (HEAP[HEAP[$dtd] + 130] != 0) {
        __label__ = 66;
        break;
      } else {
        __label__ = 67;
        break;
      }
     case 66:
      HEAP[$iftmp_262] = 1;
      __label__ = 68;
      break;
     case 67:
      HEAP[$iftmp_262] = 0;
      __label__ = 68;
      break;
     case 68:
      
      var $240 = HEAP[$iftmp_262] & 255;
      HEAP[$checkEntityDecl] = $240;
      __label__ = 69;
      break;
     case 69:
      
      
      if (HEAP[$checkEntityDecl] != 0) {
        __label__ = 70;
        break;
      } else {
        __label__ = 75;
        break;
      }
     case 70:
      
      
      if (HEAP[$entity] == 0) {
        __label__ = 71;
        break;
      } else {
        __label__ = 72;
        break;
      }
     case 71:
      HEAP[$0] = 11;
      __label__ = 95;
      break;
     case 72:
      
      
      
      
      if (HEAP[HEAP[$entity] + 34] == 0) {
        __label__ = 73;
        break;
      } else {
        __label__ = 74;
        break;
      }
     case 73:
      HEAP[$0] = 24;
      __label__ = 95;
      break;
     case 74:
      __label__ = 76;
      break;
     case 75:
      
      
      if (HEAP[$entity] == 0) {
        __label__ = 94;
        break;
      } else {
        __label__ = 76;
        break;
      }
     case 76:
      
      
      
      
      if (HEAP[HEAP[$entity] + 32] != 0) {
        __label__ = 77;
        break;
      } else {
        __label__ = 80;
        break;
      }
     case 77:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 144] == HEAP[$enc_addr]) {
        __label__ = 78;
        break;
      } else {
        __label__ = 79;
        break;
      }
     case 78:
      
      var $261 = HEAP[$parser_addr] + 288;
      var $262 = HEAP[$ptr_addr];
      HEAP[$261] = $262;
      __label__ = 79;
      break;
     case 79:
      HEAP[$0] = 12;
      __label__ = 95;
      break;
     case 80:
      
      
      
      
      if (HEAP[HEAP[$entity] + 28] != 0) {
        __label__ = 81;
        break;
      } else {
        __label__ = 84;
        break;
      }
     case 81:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 144] == HEAP[$enc_addr]) {
        __label__ = 82;
        break;
      } else {
        __label__ = 83;
        break;
      }
     case 82:
      
      var $273 = HEAP[$parser_addr] + 288;
      var $274 = HEAP[$ptr_addr];
      HEAP[$273] = $274;
      __label__ = 83;
      break;
     case 83:
      HEAP[$0] = 15;
      __label__ = 95;
      break;
     case 84:
      
      
      
      
      if (HEAP[HEAP[$entity] + 4] == 0) {
        __label__ = 85;
        break;
      } else {
        __label__ = 88;
        break;
      }
     case 85:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 144] == HEAP[$enc_addr]) {
        __label__ = 86;
        break;
      } else {
        __label__ = 87;
        break;
      }
     case 86:
      
      var $285 = HEAP[$parser_addr] + 288;
      var $286 = HEAP[$ptr_addr];
      HEAP[$285] = $286;
      __label__ = 87;
      break;
     case 87:
      HEAP[$0] = 16;
      __label__ = 95;
      break;
     case 88:
      
      
      
      
      
      
      var $293 = HEAP[HEAP[$entity] + 4] + HEAP[HEAP[$entity] + 8];
      HEAP[$textEnd] = $293;
      
      var $295 = HEAP[$entity] + 32;
      HEAP[$295] = 1;
      
      
      var $298 = HEAP[HEAP[$entity] + 4];
      
      
      
      
      var $303 = HEAP[HEAP[$parser_addr] + 228];
      var $304 = HEAP[$parser_addr];
      var $305 = HEAP[$isCdata_addr] & 255;
      var $306 = HEAP[$textEnd];
      var $307 = HEAP[$pool_addr];
      var $308 = _appendAttributeValue($304, $303, $305, $298, $306, $307);
      HEAP[$result] = $308;
      
      var $310 = HEAP[$entity] + 32;
      HEAP[$310] = 0;
      
      
      if (HEAP[$result] != 0) {
        __label__ = 89;
        break;
      } else {
        __label__ = 90;
        break;
      }
     case 89:
      var $313 = HEAP[$result];
      HEAP[$0] = $313;
      __label__ = 95;
      break;
     case 90:
      __label__ = 94;
      break;
     case 91:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 144] == HEAP[$enc_addr]) {
        __label__ = 92;
        break;
      } else {
        __label__ = 93;
        break;
      }
     case 92:
      
      var $320 = HEAP[$parser_addr] + 288;
      var $321 = HEAP[$ptr_addr];
      HEAP[$320] = $321;
      __label__ = 93;
      break;
     case 93:
      HEAP[$0] = 23;
      __label__ = 95;
      break;
     case 94:
      var $322 = HEAP[$next];
      HEAP[$ptr_addr] = $322;
      __label__ = 1;
      break;
     case 95:
      var $323 = HEAP[$0];
      HEAP[$retval] = $323;
      __label__ = 96;
      break;
     case 96:
      var $retval98 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval98;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _storeEntityValue($parser, $enc, $entityTextPtr, $entityTextEnd) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 68;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 68);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $enc_addr = __stackBase__ + 4;
      var $entityTextPtr_addr = __stackBase__ + 8;
      var $entityTextEnd_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $dtd = __stackBase__ + 24;
      var $pool = __stackBase__ + 28;
      var $result = __stackBase__ + 32;
      var $oldInEntityValue = __stackBase__ + 36;
      var $next = __stackBase__ + 40;
      var $tok = __stackBase__ + 44;
      var $name = __stackBase__ + 48;
      var $entity = __stackBase__ + 52;
      var $buf = __stackBase__ + 56;
      var $i = __stackBase__ + 60;
      var $n = __stackBase__ + 64;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$enc_addr] = $enc;
      HEAP[$entityTextPtr_addr] = $entityTextPtr;
      HEAP[$entityTextEnd_addr] = $entityTextEnd;
      
      
      var $3 = HEAP[HEAP[$parser_addr] + 356];
      HEAP[$dtd] = $3;
      
      var $5 = HEAP[$dtd] + 104;
      HEAP[$pool] = $5;
      HEAP[$result] = 0;
      
      
      
      var $9 = HEAP[HEAP[$parser_addr] + 256 + 20];
      HEAP[$oldInEntityValue] = $9;
      
      
      var $12 = HEAP[$parser_addr] + 256 + 20;
      HEAP[$12] = 1;
      
      
      
      
      if (HEAP[HEAP[$pool]] == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      var $17 = HEAP[$pool];
      var $18 = _poolGrow($17);
      
      if ($18 == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      HEAP[$0] = 1;
      __label__ = 61;
      break;
     case 3:
      
      
      
      var $23 = HEAP[HEAP[$enc_addr] + 16 + 4];
      var $24 = HEAP[$enc_addr];
      var $25 = HEAP[$entityTextPtr_addr];
      var $26 = HEAP[$entityTextEnd_addr];
      var $27 = FUNCTION_TABLE[$23]($24, $25, $26, $next);
      HEAP[$tok] = $27;
      var $28 = HEAP[$tok];
      if ($28 == -4) {
        __label__ = 26;
        break;
      } else if ($28 == -3) {
        __label__ = 30;
        break;
      } else if ($28 == -1) {
        __label__ = 50;
        break;
      } else if ($28 == 0) {
        __label__ = 53;
        break;
      } else if ($28 == 6) {
        __label__ = 27;
        break;
      } else if ($28 == 7) {
        __label__ = 31;
        break;
      } else if ($28 == 9) {
        __label__ = 27;
        break;
      } else if ($28 == 10) {
        __label__ = 35;
        break;
      } else if ($28 == 28) {
        __label__ = 4;
        break;
      } else {
        __label__ = 56;
        break;
      }
     case 4:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 488] != 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 5:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 144] != HEAP[$enc_addr]) {
        __label__ = 6;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 6:
      
      
      
      
      
      var $43 = HEAP[$next] + (0 - HEAP[HEAP[$enc_addr] + 68]);
      
      
      
      
      var $48 = HEAP[$entityTextPtr_addr] + HEAP[HEAP[$enc_addr] + 68];
      
      var $50 = HEAP[$parser_addr] + 416;
      var $51 = HEAP[$enc_addr];
      var $52 = _poolStoreString($50, $51, $48, $43);
      HEAP[$name] = $52;
      
      
      if (HEAP[$name] == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      HEAP[$result] = 1;
      __label__ = 60;
      break;
     case 8:
      
      var $56 = HEAP[$dtd] + 132;
      var $57 = HEAP[$name];
      var $58 = _lookup($56, $57, 0);
      var $59 = $58;
      HEAP[$entity] = $59;
      
      
      
      var $63 = HEAP[HEAP[$parser_addr] + 416 + 16];
      
      
      var $66 = HEAP[$parser_addr] + 416 + 12;
      HEAP[$66] = $63;
      
      
      if (HEAP[$entity] == 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      
      
      var $71 = HEAP[HEAP[$dtd] + 130];
      
      var $73 = HEAP[$dtd] + 128;
      HEAP[$73] = $71;
      __label__ = 60;
      break;
     case 10:
      
      
      
      
      if (HEAP[HEAP[$entity] + 32] != 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 11:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 144] == HEAP[$enc_addr]) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      
      var $84 = HEAP[$parser_addr] + 288;
      var $85 = HEAP[$entityTextPtr_addr];
      HEAP[$84] = $85;
      __label__ = 13;
      break;
     case 13:
      HEAP[$result] = 12;
      __label__ = 60;
      break;
     case 14:
      
      
      
      
      if (HEAP[HEAP[$entity] + 16] != 0) {
        __label__ = 15;
        break;
      } else {
        __label__ = 23;
        break;
      }
     case 15:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 112] != 0) {
        __label__ = 16;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 16:
      
      var $95 = HEAP[$dtd] + 131;
      HEAP[$95] = 0;
      
      var $97 = HEAP[$entity] + 32;
      HEAP[$97] = 1;
      
      
      var $100 = HEAP[HEAP[$parser_addr] + 112];
      
      
      var $103 = HEAP[HEAP[$entity] + 24];
      
      
      var $106 = HEAP[HEAP[$entity] + 16];
      
      
      var $109 = HEAP[HEAP[$entity] + 20];
      
      
      var $112 = HEAP[HEAP[$parser_addr] + 116];
      var $113 = FUNCTION_TABLE[$100]($112, 0, $109, $106, $103);
      
      if ($113 == 0) {
        __label__ = 17;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 17:
      
      var $116 = HEAP[$entity] + 32;
      HEAP[$116] = 0;
      HEAP[$result] = 21;
      __label__ = 60;
      break;
     case 18:
      
      var $118 = HEAP[$entity] + 32;
      HEAP[$118] = 0;
      
      
      
      
      if (HEAP[HEAP[$dtd] + 131] == 0) {
        __label__ = 19;
        break;
      } else {
        __label__ = 20;
        break;
      }
     case 19:
      
      
      var $125 = HEAP[HEAP[$dtd] + 130];
      
      var $127 = HEAP[$dtd] + 128;
      HEAP[$127] = $125;
      __label__ = 20;
      break;
     case 20:
      __label__ = 22;
      break;
     case 21:
      
      
      var $130 = HEAP[HEAP[$dtd] + 130];
      
      var $132 = HEAP[$dtd] + 128;
      HEAP[$132] = $130;
      __label__ = 22;
      break;
     case 22:
      __label__ = 24;
      break;
     case 23:
      
      var $134 = HEAP[$entity] + 32;
      HEAP[$134] = 1;
      
      
      
      
      
      
      var $141 = HEAP[HEAP[$entity] + 4] + HEAP[HEAP[$entity] + 8];
      
      
      var $144 = HEAP[HEAP[$entity] + 4];
      
      
      var $147 = HEAP[HEAP[$parser_addr] + 228];
      var $148 = HEAP[$parser_addr];
      var $149 = _storeEntityValue($148, $147, $144, $141);
      HEAP[$result] = $149;
      
      var $151 = HEAP[$entity] + 32;
      HEAP[$151] = 0;
      
      
      if (HEAP[$result] != 0) {
        __label__ = 60;
        break;
      } else {
        __label__ = 24;
        break;
      }
     case 24:
      __label__ = 59;
      break;
     case 25:
      
      var $155 = HEAP[$parser_addr] + 288;
      var $156 = HEAP[$entityTextPtr_addr];
      HEAP[$155] = $156;
      HEAP[$result] = 10;
      __label__ = 60;
      break;
     case 26:
      HEAP[$result] = 0;
      __label__ = 60;
      break;
     case 27:
      var $157 = HEAP[$next];
      var $158 = HEAP[$pool];
      var $159 = HEAP[$enc_addr];
      var $160 = HEAP[$entityTextPtr_addr];
      var $161 = _poolAppend($158, $159, $160, $157);
      
      if ($161 == 0) {
        __label__ = 28;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 28:
      HEAP[$result] = 1;
      __label__ = 60;
      break;
     case 29:
      __label__ = 59;
      break;
     case 30:
      
      
      
      
      var $167 = HEAP[$entityTextPtr_addr] + HEAP[HEAP[$enc_addr] + 68];
      HEAP[$next] = $167;
      __label__ = 31;
      break;
     case 31:
      
      
      
      
      
      
      
      if (HEAP[HEAP[$pool] + 8] == HEAP[HEAP[$pool] + 12]) {
        __label__ = 32;
        break;
      } else {
        __label__ = 34;
        break;
      }
     case 32:
      var $175 = HEAP[$pool];
      var $176 = _poolGrow($175);
      
      if ($176 == 0) {
        __label__ = 33;
        break;
      } else {
        __label__ = 34;
        break;
      }
     case 33:
      HEAP[$result] = 1;
      __label__ = 60;
      break;
     case 34:
      
      
      var $180 = HEAP[HEAP[$pool] + 12];
      HEAP[$180] = 10;
      var $181 = $180 + 1;
      
      var $183 = HEAP[$pool] + 12;
      HEAP[$183] = $181;
      __label__ = 59;
      break;
     case 35:
      
      
      var $186 = HEAP[HEAP[$enc_addr] + 44];
      var $187 = HEAP[$enc_addr];
      var $188 = HEAP[$entityTextPtr_addr];
      var $189 = FUNCTION_TABLE[$186]($187, $188);
      HEAP[$n] = $189;
      
      
      if (HEAP[$n] < 0) {
        __label__ = 36;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 36:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 144] == HEAP[$enc_addr]) {
        __label__ = 37;
        break;
      } else {
        __label__ = 38;
        break;
      }
     case 37:
      
      var $198 = HEAP[$parser_addr] + 288;
      var $199 = HEAP[$entityTextPtr_addr];
      HEAP[$198] = $199;
      __label__ = 38;
      break;
     case 38:
      HEAP[$result] = 14;
      __label__ = 60;
      break;
     case 39:
      var $200 = HEAP[$n];
      var $buf39 = $buf;
      var $201 = _PyExpat_XmlUtf8Encode($200, $buf39);
      HEAP[$n] = $201;
      
      
      if (HEAP[$n] == 0) {
        __label__ = 40;
        break;
      } else {
        __label__ = 43;
        break;
      }
     case 40:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 144] == HEAP[$enc_addr]) {
        __label__ = 41;
        break;
      } else {
        __label__ = 42;
        break;
      }
     case 41:
      
      var $210 = HEAP[$parser_addr] + 288;
      var $211 = HEAP[$entityTextPtr_addr];
      HEAP[$210] = $211;
      __label__ = 42;
      break;
     case 42:
      HEAP[$result] = 14;
      __label__ = 60;
      break;
     case 43:
      HEAP[$i] = 0;
      __label__ = 48;
      break;
     case 44:
      
      
      
      
      
      
      
      if (HEAP[HEAP[$pool] + 8] == HEAP[HEAP[$pool] + 12]) {
        __label__ = 45;
        break;
      } else {
        __label__ = 47;
        break;
      }
     case 45:
      var $219 = HEAP[$pool];
      var $220 = _poolGrow($219);
      
      if ($220 == 0) {
        __label__ = 46;
        break;
      } else {
        __label__ = 47;
        break;
      }
     case 46:
      HEAP[$result] = 1;
      __label__ = 60;
      break;
     case 47:
      
      
      var $224 = HEAP[HEAP[$pool] + 12];
      
      
      var $227 = HEAP[$buf + HEAP[$i]];
      HEAP[$224] = $227;
      var $228 = $224 + 1;
      
      var $230 = HEAP[$pool] + 12;
      HEAP[$230] = $228;
      
      var $232 = HEAP[$i] + 1;
      HEAP[$i] = $232;
      __label__ = 48;
      break;
     case 48:
      
      
      
      if (HEAP[$i] < HEAP[$n]) {
        __label__ = 44;
        break;
      } else {
        __label__ = 49;
        break;
      }
     case 49:
      __label__ = 59;
      break;
     case 50:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 144] == HEAP[$enc_addr]) {
        __label__ = 51;
        break;
      } else {
        __label__ = 52;
        break;
      }
     case 51:
      
      var $242 = HEAP[$parser_addr] + 288;
      var $243 = HEAP[$entityTextPtr_addr];
      HEAP[$242] = $243;
      __label__ = 52;
      break;
     case 52:
      HEAP[$result] = 4;
      __label__ = 60;
      break;
     case 53:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 144] == HEAP[$enc_addr]) {
        __label__ = 54;
        break;
      } else {
        __label__ = 55;
        break;
      }
     case 54:
      var $249 = HEAP[$next];
      
      var $251 = HEAP[$parser_addr] + 288;
      HEAP[$251] = $249;
      __label__ = 55;
      break;
     case 55:
      HEAP[$result] = 4;
      __label__ = 60;
      break;
     case 56:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 144] == HEAP[$enc_addr]) {
        __label__ = 57;
        break;
      } else {
        __label__ = 58;
        break;
      }
     case 57:
      
      var $258 = HEAP[$parser_addr] + 288;
      var $259 = HEAP[$entityTextPtr_addr];
      HEAP[$258] = $259;
      __label__ = 58;
      break;
     case 58:
      HEAP[$result] = 23;
      __label__ = 60;
      break;
     case 59:
      var $260 = HEAP[$next];
      HEAP[$entityTextPtr_addr] = $260;
      __label__ = 3;
      break;
     case 60:
      
      
      var $263 = HEAP[$parser_addr] + 256 + 20;
      var $264 = HEAP[$oldInEntityValue];
      HEAP[$263] = $264;
      var $265 = HEAP[$result];
      HEAP[$0] = $265;
      __label__ = 61;
      break;
     case 61:
      var $266 = HEAP[$0];
      HEAP[$retval] = $266;
      __label__ = 62;
      break;
     case 62:
      var $retval61 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval61;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _normalizeLines($s) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $s_addr = __stackBase__;
      var $p = __stackBase__ + 4;
      
      HEAP[$s_addr] = $s;
      __label__ = 1;
      break;
     case 1:
      
      
      
      if (HEAP[HEAP[$s_addr]] == 0) {
        __label__ = 12;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      
      
      
      if (HEAP[HEAP[$s_addr]] == 13) {
        __label__ = 4;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 3:
      
      var $7 = HEAP[$s_addr] + 1;
      HEAP[$s_addr] = $7;
      __label__ = 1;
      break;
     case 4:
      var $8 = HEAP[$s_addr];
      HEAP[$p] = $8;
      __label__ = 5;
      break;
     case 5:
      
      
      
      if (HEAP[HEAP[$s_addr]] == 13) {
        __label__ = 6;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 6:
      var $12 = HEAP[$p];
      HEAP[$12] = 10;
      
      var $14 = HEAP[$p] + 1;
      HEAP[$p] = $14;
      
      var $16 = HEAP[$s_addr] + 1;
      HEAP[$s_addr] = $16;
      
      
      
      if (HEAP[HEAP[$s_addr]] == 10) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      
      var $21 = HEAP[$s_addr] + 1;
      HEAP[$s_addr] = $21;
      __label__ = 8;
      break;
     case 8:
      __label__ = 10;
      break;
     case 9:
      
      var $23 = HEAP[HEAP[$s_addr]];
      var $24 = HEAP[$p];
      HEAP[$24] = $23;
      
      var $26 = HEAP[$p] + 1;
      HEAP[$p] = $26;
      
      var $28 = HEAP[$s_addr] + 1;
      HEAP[$s_addr] = $28;
      __label__ = 10;
      break;
     case 10:
      
      
      
      if (HEAP[HEAP[$s_addr]] != 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 11:
      var $32 = HEAP[$p];
      HEAP[$32] = 0;
      __label__ = 12;
      break;
     case 12:
      __label__ = 13;
      break;
     case 13:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _reportProcessingInstruction($parser, $enc, $start, $end) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 36;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $enc_addr = __stackBase__ + 4;
      var $start_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $target = __stackBase__ + 24;
      var $data = __stackBase__ + 28;
      var $tem = __stackBase__ + 32;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$enc_addr] = $enc;
      HEAP[$start_addr] = $start;
      HEAP[$end_addr] = $end;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 64] == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 1:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 80] != 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      var $9 = HEAP[$parser_addr];
      var $10 = HEAP[$enc_addr];
      var $11 = HEAP[$start_addr];
      var $12 = HEAP[$end_addr];
      _reportDefault($9, $10, $11, $12);
      __label__ = 3;
      break;
     case 3:
      HEAP[$0] = 1;
      __label__ = 9;
      break;
     case 4:
      
      
      
      
      
      var $18 = HEAP[$start_addr] + HEAP[HEAP[$enc_addr] + 68] * 2;
      HEAP[$start_addr] = $18;
      
      
      var $21 = HEAP[HEAP[$enc_addr] + 32];
      var $22 = HEAP[$enc_addr];
      var $23 = HEAP[$start_addr];
      var $24 = FUNCTION_TABLE[$21]($22, $23);
      
      var $26 = HEAP[$start_addr] + $24;
      HEAP[$tem] = $26;
      
      var $28 = HEAP[$parser_addr] + 416;
      var $29 = HEAP[$enc_addr];
      var $30 = HEAP[$start_addr];
      var $31 = HEAP[$tem];
      var $32 = _poolStoreString($28, $29, $30, $31);
      HEAP[$target] = $32;
      
      
      if (HEAP[$target] == 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      HEAP[$0] = 0;
      __label__ = 9;
      break;
     case 6:
      
      
      
      var $38 = HEAP[HEAP[$parser_addr] + 416 + 12];
      
      
      var $41 = HEAP[$parser_addr] + 416 + 16;
      HEAP[$41] = $38;
      
      
      
      var $45 = HEAP[HEAP[$enc_addr] + 68] * -2;
      
      var $47 = HEAP[$end_addr] + $45;
      
      
      var $50 = HEAP[HEAP[$enc_addr] + 36];
      var $51 = HEAP[$enc_addr];
      var $52 = HEAP[$tem];
      var $53 = FUNCTION_TABLE[$50]($51, $52);
      
      var $55 = HEAP[$parser_addr] + 416;
      var $56 = HEAP[$enc_addr];
      var $57 = _poolStoreString($55, $56, $53, $47);
      HEAP[$data] = $57;
      
      
      if (HEAP[$data] == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      HEAP[$0] = 0;
      __label__ = 9;
      break;
     case 8:
      var $60 = HEAP[$data];
      _normalizeLines($60);
      
      
      var $63 = HEAP[HEAP[$parser_addr] + 64];
      
      
      var $66 = HEAP[HEAP[$parser_addr] + 4];
      var $67 = HEAP[$target];
      var $68 = HEAP[$data];
      FUNCTION_TABLE[$63]($66, $67, $68);
      
      var $70 = HEAP[$parser_addr] + 416;
      _poolClear($70);
      HEAP[$0] = 1;
      __label__ = 9;
      break;
     case 9:
      var $71 = HEAP[$0];
      HEAP[$retval] = $71;
      __label__ = 10;
      break;
     case 10:
      var $retval9 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval9;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _reportComment($parser, $enc, $start, $end) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $enc_addr = __stackBase__ + 4;
      var $start_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $data = __stackBase__ + 24;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$enc_addr] = $enc;
      HEAP[$start_addr] = $start;
      HEAP[$end_addr] = $end;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 68] == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 1:
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 80] != 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      var $9 = HEAP[$parser_addr];
      var $10 = HEAP[$enc_addr];
      var $11 = HEAP[$start_addr];
      var $12 = HEAP[$end_addr];
      _reportDefault($9, $10, $11, $12);
      __label__ = 3;
      break;
     case 3:
      HEAP[$0] = 1;
      __label__ = 7;
      break;
     case 4:
      
      
      
      var $16 = HEAP[HEAP[$enc_addr] + 68] * -3;
      
      var $18 = HEAP[$end_addr] + $16;
      
      
      
      
      
      var $24 = HEAP[$start_addr] + HEAP[HEAP[$enc_addr] + 68] * 4;
      
      var $26 = HEAP[$parser_addr] + 416;
      var $27 = HEAP[$enc_addr];
      var $28 = _poolStoreString($26, $27, $24, $18);
      HEAP[$data] = $28;
      
      
      if (HEAP[$data] == 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      HEAP[$0] = 0;
      __label__ = 7;
      break;
     case 6:
      var $31 = HEAP[$data];
      _normalizeLines($31);
      
      
      var $34 = HEAP[HEAP[$parser_addr] + 68];
      
      
      var $37 = HEAP[HEAP[$parser_addr] + 4];
      var $38 = HEAP[$data];
      FUNCTION_TABLE[$34]($37, $38);
      
      var $40 = HEAP[$parser_addr] + 416;
      _poolClear($40);
      HEAP[$0] = 1;
      __label__ = 7;
      break;
     case 7:
      var $41 = HEAP[$0];
      HEAP[$retval] = $41;
      __label__ = 8;
      break;
     case 8:
      var $retval7 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval7;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _reportDefault($parser, $enc, $s, $end) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $enc_addr = __stackBase__ + 4;
      var $s_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $eventPP = __stackBase__ + 16;
      var $eventEndPP = __stackBase__ + 20;
      var $dataPtr = __stackBase__ + 24;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$enc_addr] = $enc;
      HEAP[$s_addr] = $s;
      HEAP[$end_addr] = $end;
      
      
      
      
      if (HEAP[HEAP[$enc_addr] + 72] == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 1:
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 144] == HEAP[$enc_addr]) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      var $10 = HEAP[$parser_addr] + 288;
      HEAP[$eventPP] = $10;
      
      var $12 = HEAP[$parser_addr] + 292;
      HEAP[$eventEndPP] = $12;
      __label__ = 4;
      break;
     case 3:
      
      
      
      var $16 = HEAP[HEAP[$parser_addr] + 300];
      HEAP[$eventPP] = $16;
      
      
      
      var $20 = HEAP[HEAP[$parser_addr] + 300] + 4;
      HEAP[$eventEndPP] = $20;
      __label__ = 4;
      break;
     case 4:
      
      
      var $23 = HEAP[HEAP[$parser_addr] + 44];
      HEAP[$dataPtr] = $23;
      
      
      var $26 = HEAP[HEAP[$enc_addr] + 60];
      
      
      var $29 = HEAP[HEAP[$parser_addr] + 48];
      var $30 = HEAP[$enc_addr];
      var $31 = HEAP[$end_addr];
      FUNCTION_TABLE[$26]($30, $s_addr, $31, $dataPtr, $29);
      var $32 = HEAP[$s_addr];
      var $33 = HEAP[$eventEndPP];
      HEAP[$33] = $32;
      
      
      var $36 = HEAP[HEAP[$parser_addr] + 80];
      
      
      
      
      
      
      var $43 = HEAP[$dataPtr] - HEAP[HEAP[$parser_addr] + 44];
      
      
      var $46 = HEAP[HEAP[$parser_addr] + 44];
      
      
      var $49 = HEAP[HEAP[$parser_addr] + 4];
      FUNCTION_TABLE[$36]($49, $46, $43);
      var $50 = HEAP[$s_addr];
      var $51 = HEAP[$eventPP];
      HEAP[$51] = $50;
      
      
      
      if (HEAP[$s_addr] != HEAP[$end_addr]) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 5:
      __label__ = 7;
      break;
     case 6:
      
      
      var $57 = HEAP[HEAP[$parser_addr] + 80];
      
      
      
      
      var $62 = HEAP[$end_addr] - HEAP[$s_addr];
      var $63 = HEAP[$s_addr];
      
      
      var $66 = HEAP[HEAP[$parser_addr] + 4];
      FUNCTION_TABLE[$57]($66, $63, $62);
      __label__ = 7;
      break;
     case 7:
      __label__ = 8;
      break;
     case 8:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _defineAttribute($type, $attId, $isCdata, $isId, $value, $parser) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 42;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 42);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $type_addr = __stackBase__;
      var $attId_addr = __stackBase__ + 4;
      var $isCdata_addr = __stackBase__ + 8;
      var $isId_addr = __stackBase__ + 9;
      var $value_addr = __stackBase__ + 10;
      var $parser_addr = __stackBase__ + 14;
      var $retval = __stackBase__ + 18;
      var $0 = __stackBase__ + 22;
      var $att = __stackBase__ + 26;
      var $i = __stackBase__ + 30;
      var $temp = __stackBase__ + 34;
      var $count = __stackBase__ + 38;
      
      HEAP[$type_addr] = $type;
      HEAP[$attId_addr] = $attId;
      HEAP[$isCdata_addr] = $isCdata;
      HEAP[$isId_addr] = $isId;
      HEAP[$value_addr] = $value;
      HEAP[$parser_addr] = $parser;
      
      
      if (HEAP[$value_addr] != 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 1;
        break;
      }
     case 1:
      
      
      if (HEAP[$isId_addr] != 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 2:
      HEAP[$i] = 0;
      __label__ = 6;
      break;
     case 3:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$type_addr] + 20] + 12 * HEAP[$i]] == HEAP[$attId_addr]) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      HEAP[$0] = 1;
      __label__ = 22;
      break;
     case 5:
      
      var $15 = HEAP[$i] + 1;
      HEAP[$i] = $15;
      __label__ = 6;
      break;
     case 6:
      
      
      
      
      
      if (HEAP[HEAP[$type_addr] + 12] > HEAP[$i]) {
        __label__ = 3;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 7:
      
      
      if (HEAP[$isId_addr] != 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 8:
      
      
      
      
      if (HEAP[HEAP[$type_addr] + 8] == 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 9:
      
      
      
      
      if (HEAP[HEAP[$attId_addr] + 9] == 0) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      
      var $32 = HEAP[$type_addr] + 8;
      var $33 = HEAP[$attId_addr];
      HEAP[$32] = $33;
      __label__ = 11;
      break;
     case 11:
      
      
      
      
      
      
      
      if (HEAP[HEAP[$type_addr] + 12] == HEAP[HEAP[$type_addr] + 16]) {
        __label__ = 12;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 12:
      
      
      
      
      if (HEAP[HEAP[$type_addr] + 16] == 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 13:
      
      var $46 = HEAP[$type_addr] + 16;
      HEAP[$46] = 8;
      
      
      
      var $50 = HEAP[HEAP[$parser_addr] + 12];
      
      
      
      var $54 = HEAP[HEAP[$type_addr] + 16] * 12;
      var $55 = FUNCTION_TABLE[$50]($54);
      var $56 = $55;
      
      var $58 = HEAP[$type_addr] + 20;
      HEAP[$58] = $56;
      
      
      
      
      if (HEAP[HEAP[$type_addr] + 20] == 0) {
        __label__ = 14;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 14:
      HEAP[$0] = 0;
      __label__ = 22;
      break;
     case 15:
      __label__ = 19;
      break;
     case 16:
      
      
      
      var $66 = HEAP[HEAP[$type_addr] + 16] * 2;
      HEAP[$count] = $66;
      
      
      
      var $70 = HEAP[HEAP[$parser_addr] + 12 + 4];
      
      var $72 = HEAP[$count] * 12;
      
      
      
      var $76 = HEAP[HEAP[$type_addr] + 20];
      var $77 = FUNCTION_TABLE[$70]($76, $72);
      var $78 = $77;
      HEAP[$temp] = $78;
      
      
      if (HEAP[$temp] == 0) {
        __label__ = 17;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 17:
      HEAP[$0] = 0;
      __label__ = 22;
      break;
     case 18:
      
      var $82 = HEAP[$type_addr] + 16;
      var $83 = HEAP[$count];
      HEAP[$82] = $83;
      
      var $85 = HEAP[$type_addr] + 20;
      var $86 = HEAP[$temp];
      HEAP[$85] = $86;
      __label__ = 19;
      break;
     case 19:
      
      
      
      
      
      
      var $93 = HEAP[HEAP[$type_addr] + 20] + 12 * HEAP[HEAP[$type_addr] + 12];
      HEAP[$att] = $93;
      
      var $95 = HEAP[$att];
      var $96 = HEAP[$attId_addr];
      HEAP[$95] = $96;
      
      var $98 = HEAP[$att] + 8;
      var $99 = HEAP[$value_addr];
      HEAP[$98] = $99;
      
      var $101 = HEAP[$att] + 4;
      var $102 = HEAP[$isCdata_addr];
      HEAP[$101] = $102;
      
      
      if (HEAP[$isCdata_addr] == 0) {
        __label__ = 20;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 20:
      
      var $106 = HEAP[$attId_addr] + 8;
      HEAP[$106] = 1;
      __label__ = 21;
      break;
     case 21:
      
      
      
      var $110 = HEAP[HEAP[$type_addr] + 12] + 1;
      
      var $112 = HEAP[$type_addr] + 12;
      HEAP[$112] = $110;
      HEAP[$0] = 1;
      __label__ = 22;
      break;
     case 22:
      var $113 = HEAP[$0];
      HEAP[$retval] = $113;
      __label__ = 23;
      break;
     case 23:
      var $retval22 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval22;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _setElementTypePrefix($parser, $elementType) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 34;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 34);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $elementType_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $iftmp_278 = __stackBase__ + 12;
      var $0 = __stackBase__ + 13;
      var $iftmp_277 = __stackBase__ + 17;
      var $dtd = __stackBase__ + 18;
      var $name = __stackBase__ + 22;
      var $prefix = __stackBase__ + 26;
      var $s = __stackBase__ + 30;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$elementType_addr] = $elementType;
      
      
      var $3 = HEAP[HEAP[$parser_addr] + 356];
      HEAP[$dtd] = $3;
      
      
      var $6 = HEAP[HEAP[$elementType_addr]];
      HEAP[$name] = $6;
      __label__ = 24;
      break;
     case 1:
      
      
      
      if (HEAP[HEAP[$name]] == 58) {
        __label__ = 2;
        break;
      } else {
        __label__ = 23;
        break;
      }
     case 2:
      
      
      var $12 = HEAP[HEAP[$elementType_addr]];
      HEAP[$s] = $12;
      __label__ = 10;
      break;
     case 3:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$dtd] + 80 + 12] != HEAP[HEAP[$dtd] + 80 + 8]) {
        __label__ = 5;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 4:
      
      var $23 = HEAP[$dtd] + 80;
      var $24 = _poolGrow($23);
      
      if ($24 != 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      
      
      
      var $29 = HEAP[HEAP[$dtd] + 80 + 12];
      
      var $31 = HEAP[HEAP[$s]];
      HEAP[$29] = $31;
      var $32 = $29 + 1;
      
      
      var $35 = HEAP[$dtd] + 80 + 12;
      HEAP[$35] = $32;
      HEAP[$iftmp_277] = 0;
      __label__ = 7;
      break;
     case 6:
      HEAP[$iftmp_277] = 1;
      __label__ = 7;
      break;
     case 7:
      
      
      if (HEAP[$iftmp_277] != 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      HEAP[$0] = 0;
      __label__ = 26;
      break;
     case 9:
      
      var $38 = HEAP[$s] + 1;
      HEAP[$s] = $38;
      __label__ = 10;
      break;
     case 10:
      
      
      
      if (HEAP[$s] != HEAP[$name]) {
        __label__ = 3;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 11:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$dtd] + 80 + 12] != HEAP[HEAP[$dtd] + 80 + 8]) {
        __label__ = 13;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 12:
      
      var $52 = HEAP[$dtd] + 80;
      var $53 = _poolGrow($52);
      
      if ($53 != 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      
      
      
      var $58 = HEAP[HEAP[$dtd] + 80 + 12];
      HEAP[$58] = 0;
      var $59 = $58 + 1;
      
      
      var $62 = HEAP[$dtd] + 80 + 12;
      HEAP[$62] = $59;
      HEAP[$iftmp_278] = 0;
      __label__ = 15;
      break;
     case 14:
      HEAP[$iftmp_278] = 1;
      __label__ = 15;
      break;
     case 15:
      
      
      if (HEAP[$iftmp_278] != 0) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      HEAP[$0] = 0;
      __label__ = 26;
      break;
     case 17:
      
      
      
      var $67 = HEAP[HEAP[$dtd] + 80 + 16];
      
      var $69 = HEAP[$dtd] + 60;
      var $70 = _lookup($69, $67, 8);
      var $71 = $70;
      HEAP[$prefix] = $71;
      
      
      if (HEAP[$prefix] == 0) {
        __label__ = 18;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 18:
      HEAP[$0] = 0;
      __label__ = 26;
      break;
     case 19:
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$prefix]] == HEAP[HEAP[$dtd] + 80 + 16]) {
        __label__ = 20;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 20:
      
      
      
      var $85 = HEAP[HEAP[$dtd] + 80 + 12];
      
      
      var $88 = HEAP[$dtd] + 80 + 16;
      HEAP[$88] = $85;
      __label__ = 22;
      break;
     case 21:
      
      
      
      var $92 = HEAP[HEAP[$dtd] + 80 + 16];
      
      
      var $95 = HEAP[$dtd] + 80 + 12;
      HEAP[$95] = $92;
      __label__ = 22;
      break;
     case 22:
      
      var $97 = HEAP[$elementType_addr] + 4;
      var $98 = HEAP[$prefix];
      HEAP[$97] = $98;
      __label__ = 23;
      break;
     case 23:
      
      var $100 = HEAP[$name] + 1;
      HEAP[$name] = $100;
      __label__ = 24;
      break;
     case 24:
      
      
      
      if (HEAP[HEAP[$name]] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 25:
      HEAP[$0] = 1;
      __label__ = 26;
      break;
     case 26:
      var $104 = HEAP[$0];
      HEAP[$retval] = $104;
      __label__ = 27;
      break;
     case 27:
      var $retval27 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval27;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _getAttributeId($parser, $enc, $start, $end) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 47;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 47);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $enc_addr = __stackBase__ + 4;
      var $start_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_281 = __stackBase__ + 20;
      var $iftmp_280 = __stackBase__ + 21;
      var $0 = __stackBase__ + 22;
      var $iftmp_279 = __stackBase__ + 26;
      var $dtd = __stackBase__ + 27;
      var $id = __stackBase__ + 31;
      var $name = __stackBase__ + 35;
      var $i = __stackBase__ + 39;
      var $j = __stackBase__ + 43;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$enc_addr] = $enc;
      HEAP[$start_addr] = $start;
      HEAP[$end_addr] = $end;
      
      
      var $3 = HEAP[HEAP[$parser_addr] + 356];
      HEAP[$dtd] = $3;
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$dtd] + 80 + 12] != HEAP[HEAP[$dtd] + 80 + 8]) {
        __label__ = 2;
        break;
      } else {
        __label__ = 1;
        break;
      }
     case 1:
      
      var $14 = HEAP[$dtd] + 80;
      var $15 = _poolGrow($14);
      
      if ($15 != 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      
      
      var $20 = HEAP[HEAP[$dtd] + 80 + 12];
      HEAP[$20] = 0;
      var $21 = $20 + 1;
      
      
      var $24 = HEAP[$dtd] + 80 + 12;
      HEAP[$24] = $21;
      HEAP[$iftmp_279] = 0;
      __label__ = 4;
      break;
     case 3:
      HEAP[$iftmp_279] = 1;
      __label__ = 4;
      break;
     case 4:
      
      
      if (HEAP[$iftmp_279] != 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      HEAP[$0] = 0;
      __label__ = 50;
      break;
     case 6:
      
      var $27 = HEAP[$dtd] + 80;
      var $28 = HEAP[$enc_addr];
      var $29 = HEAP[$start_addr];
      var $30 = HEAP[$end_addr];
      var $31 = _poolStoreString($27, $28, $29, $30);
      HEAP[$name] = $31;
      
      
      if (HEAP[$name] == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      HEAP[$0] = 0;
      __label__ = 50;
      break;
     case 8:
      
      var $35 = HEAP[$name] + 1;
      HEAP[$name] = $35;
      
      var $37 = HEAP[$dtd] + 40;
      var $38 = HEAP[$name];
      var $39 = _lookup($37, $38, 12);
      var $40 = $39;
      HEAP[$id] = $40;
      
      
      if (HEAP[$id] == 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      HEAP[$0] = 0;
      __label__ = 50;
      break;
     case 10:
      
      
      
      
      
      if (HEAP[HEAP[$id]] != HEAP[$name]) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      
      
      
      var $51 = HEAP[HEAP[$dtd] + 80 + 16];
      
      
      var $54 = HEAP[$dtd] + 80 + 12;
      HEAP[$54] = $51;
      __label__ = 49;
      break;
     case 12:
      
      
      
      var $58 = HEAP[HEAP[$dtd] + 80 + 12];
      
      
      var $61 = HEAP[$dtd] + 80 + 16;
      HEAP[$61] = $58;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 236] != 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 49;
        break;
      }
     case 13:
      
      
      
      
      if (HEAP[HEAP[$name]] != 120) {
        __label__ = 24;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 14:
      
      
      
      
      if (HEAP[HEAP[$name] + 1] != 109) {
        __label__ = 24;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 15:
      
      
      
      
      if (HEAP[HEAP[$name] + 2] != 108) {
        __label__ = 24;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 16:
      
      
      
      
      if (HEAP[HEAP[$name] + 3] != 110) {
        __label__ = 24;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 17:
      
      
      
      
      if (HEAP[HEAP[$name] + 4] != 115) {
        __label__ = 24;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 18:
      
      
      
      
      if (HEAP[HEAP[$name] + 5] == 0) {
        __label__ = 20;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 19:
      
      
      
      
      if (HEAP[HEAP[$name] + 5] == 58) {
        __label__ = 20;
        break;
      } else {
        __label__ = 24;
        break;
      }
     case 20:
      
      
      
      
      if (HEAP[HEAP[$name] + 5] == 0) {
        __label__ = 21;
        break;
      } else {
        __label__ = 22;
        break;
      }
     case 21:
      
      var $99 = HEAP[$dtd] + 152;
      
      var $101 = HEAP[$id] + 4;
      HEAP[$101] = $99;
      __label__ = 23;
      break;
     case 22:
      
      var $103 = HEAP[$name] + 6;
      
      var $105 = HEAP[$dtd] + 60;
      var $106 = _lookup($105, $103, 8);
      var $107 = $106;
      
      var $109 = HEAP[$id] + 4;
      HEAP[$109] = $107;
      __label__ = 23;
      break;
     case 23:
      
      var $111 = HEAP[$id] + 9;
      HEAP[$111] = 1;
      __label__ = 49;
      break;
     case 24:
      HEAP[$i] = 0;
      __label__ = 48;
      break;
     case 25:
      
      
      
      
      
      if (HEAP[HEAP[$name] + HEAP[$i]] == 58) {
        __label__ = 26;
        break;
      } else {
        __label__ = 47;
        break;
      }
     case 26:
      HEAP[$j] = 0;
      __label__ = 34;
      break;
     case 27:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$dtd] + 80 + 12] != HEAP[HEAP[$dtd] + 80 + 8]) {
        __label__ = 29;
        break;
      } else {
        __label__ = 28;
        break;
      }
     case 28:
      
      var $127 = HEAP[$dtd] + 80;
      var $128 = _poolGrow($127);
      
      if ($128 != 0) {
        __label__ = 29;
        break;
      } else {
        __label__ = 30;
        break;
      }
     case 29:
      
      
      
      var $133 = HEAP[HEAP[$dtd] + 80 + 12];
      
      
      
      var $137 = HEAP[HEAP[$name] + HEAP[$j]];
      HEAP[$133] = $137;
      var $138 = $133 + 1;
      
      
      var $141 = HEAP[$dtd] + 80 + 12;
      HEAP[$141] = $138;
      HEAP[$iftmp_280] = 0;
      __label__ = 31;
      break;
     case 30:
      HEAP[$iftmp_280] = 1;
      __label__ = 31;
      break;
     case 31:
      
      
      if (HEAP[$iftmp_280] != 0) {
        __label__ = 32;
        break;
      } else {
        __label__ = 33;
        break;
      }
     case 32:
      HEAP[$0] = 0;
      __label__ = 50;
      break;
     case 33:
      
      var $144 = HEAP[$j] + 1;
      HEAP[$j] = $144;
      __label__ = 34;
      break;
     case 34:
      
      
      
      if (HEAP[$j] < HEAP[$i]) {
        __label__ = 27;
        break;
      } else {
        __label__ = 35;
        break;
      }
     case 35:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$dtd] + 80 + 12] != HEAP[HEAP[$dtd] + 80 + 8]) {
        __label__ = 37;
        break;
      } else {
        __label__ = 36;
        break;
      }
     case 36:
      
      var $158 = HEAP[$dtd] + 80;
      var $159 = _poolGrow($158);
      
      if ($159 != 0) {
        __label__ = 37;
        break;
      } else {
        __label__ = 38;
        break;
      }
     case 37:
      
      
      
      var $164 = HEAP[HEAP[$dtd] + 80 + 12];
      HEAP[$164] = 0;
      var $165 = $164 + 1;
      
      
      var $168 = HEAP[$dtd] + 80 + 12;
      HEAP[$168] = $165;
      HEAP[$iftmp_281] = 0;
      __label__ = 39;
      break;
     case 38:
      HEAP[$iftmp_281] = 1;
      __label__ = 39;
      break;
     case 39:
      
      
      if (HEAP[$iftmp_281] != 0) {
        __label__ = 40;
        break;
      } else {
        __label__ = 41;
        break;
      }
     case 40:
      HEAP[$0] = 0;
      __label__ = 50;
      break;
     case 41:
      
      
      
      var $173 = HEAP[HEAP[$dtd] + 80 + 16];
      
      var $175 = HEAP[$dtd] + 60;
      var $176 = _lookup($175, $173, 8);
      var $177 = $176;
      
      var $179 = HEAP[$id] + 4;
      HEAP[$179] = $177;
      
      
      
      
      if (HEAP[HEAP[$id] + 4] == 0) {
        __label__ = 42;
        break;
      } else {
        __label__ = 43;
        break;
      }
     case 42:
      HEAP[$0] = 0;
      __label__ = 50;
      break;
     case 43:
      
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$id] + 4]] == HEAP[HEAP[$dtd] + 80 + 16]) {
        __label__ = 44;
        break;
      } else {
        __label__ = 45;
        break;
      }
     case 44:
      
      
      
      var $197 = HEAP[HEAP[$dtd] + 80 + 12];
      
      
      var $200 = HEAP[$dtd] + 80 + 16;
      HEAP[$200] = $197;
      __label__ = 46;
      break;
     case 45:
      
      
      
      var $204 = HEAP[HEAP[$dtd] + 80 + 16];
      
      
      var $207 = HEAP[$dtd] + 80 + 12;
      HEAP[$207] = $204;
      __label__ = 46;
      break;
     case 46:
      __label__ = 49;
      break;
     case 47:
      
      var $209 = HEAP[$i] + 1;
      HEAP[$i] = $209;
      __label__ = 48;
      break;
     case 48:
      
      
      
      
      
      if (HEAP[HEAP[$name] + HEAP[$i]] != 0) {
        __label__ = 25;
        break;
      } else {
        __label__ = 49;
        break;
      }
     case 49:
      var $215 = HEAP[$id];
      HEAP[$0] = $215;
      __label__ = 50;
      break;
     case 50:
      var $216 = HEAP[$0];
      HEAP[$retval] = $216;
      __label__ = 51;
      break;
     case 51:
      var $retval52 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval52;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _getContext($parser) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 66;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 66);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $retval = __stackBase__ + 4;
      var $iftmp_290 = __stackBase__ + 8;
      var $iftmp_289 = __stackBase__ + 9;
      var $iftmp_288 = __stackBase__ + 10;
      var $iftmp_287 = __stackBase__ + 11;
      var $iftmp_286 = __stackBase__ + 12;
      var $iftmp_285 = __stackBase__ + 13;
      var $iftmp_284 = __stackBase__ + 14;
      var $iftmp_283 = __stackBase__ + 15;
      var $0 = __stackBase__ + 16;
      var $iftmp_282 = __stackBase__ + 20;
      var $dtd = __stackBase__ + 21;
      var $iter = __stackBase__ + 25;
      var $needSep = __stackBase__ + 33;
      var $i = __stackBase__ + 34;
      var $len = __stackBase__ + 38;
      var $i21 = __stackBase__ + 42;
      var $len22 = __stackBase__ + 46;
      var $s = __stackBase__ + 50;
      var $prefix = __stackBase__ + 54;
      var $s65 = __stackBase__ + 58;
      var $e = __stackBase__ + 62;
      
      HEAP[$parser_addr] = $parser;
      
      
      var $3 = HEAP[HEAP[$parser_addr] + 356];
      HEAP[$dtd] = $3;
      HEAP[$needSep] = 0;
      
      
      
      
      
      if (HEAP[HEAP[$dtd] + 152 + 4] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 1:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 416 + 12] != HEAP[HEAP[$parser_addr] + 416 + 8]) {
        __label__ = 3;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      
      var $19 = HEAP[$parser_addr] + 416;
      var $20 = _poolGrow($19);
      
      if ($20 != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      
      
      var $25 = HEAP[HEAP[$parser_addr] + 416 + 12];
      HEAP[$25] = 61;
      var $26 = $25 + 1;
      
      
      var $29 = HEAP[$parser_addr] + 416 + 12;
      HEAP[$29] = $26;
      HEAP[$iftmp_282] = 0;
      __label__ = 5;
      break;
     case 4:
      HEAP[$iftmp_282] = 1;
      __label__ = 5;
      break;
     case 5:
      
      
      if (HEAP[$iftmp_282] != 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      HEAP[$0] = 0;
      __label__ = 85;
      break;
     case 7:
      
      
      
      
      
      var $36 = HEAP[HEAP[HEAP[$dtd] + 152 + 4] + 20];
      HEAP[$len] = $36;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 472] != 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      
      var $42 = HEAP[$len] - 1;
      HEAP[$len] = $42;
      __label__ = 9;
      break;
     case 9:
      HEAP[$i] = 0;
      __label__ = 17;
      break;
     case 10:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 416 + 12] != HEAP[HEAP[$parser_addr] + 416 + 8]) {
        __label__ = 12;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 11:
      
      var $53 = HEAP[$parser_addr] + 416;
      var $54 = _poolGrow($53);
      
      if ($54 != 0) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      
      
      
      var $59 = HEAP[HEAP[$parser_addr] + 416 + 12];
      
      
      
      
      
      
      
      
      var $68 = HEAP[HEAP[HEAP[HEAP[$dtd] + 152 + 4] + 16] + HEAP[$i]];
      HEAP[$59] = $68;
      var $69 = $59 + 1;
      
      
      var $72 = HEAP[$parser_addr] + 416 + 12;
      HEAP[$72] = $69;
      HEAP[$iftmp_283] = 0;
      __label__ = 14;
      break;
     case 13:
      HEAP[$iftmp_283] = 1;
      __label__ = 14;
      break;
     case 14:
      
      
      if (HEAP[$iftmp_283] != 0) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      HEAP[$0] = 0;
      __label__ = 85;
      break;
     case 16:
      
      var $75 = HEAP[$i] + 1;
      HEAP[$i] = $75;
      __label__ = 17;
      break;
     case 17:
      
      
      
      if (HEAP[$i] < HEAP[$len]) {
        __label__ = 10;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 18:
      HEAP[$needSep] = 1;
      __label__ = 19;
      break;
     case 19:
      
      var $80 = HEAP[$dtd] + 60;
      _hashTableIterInit($iter, $80);
      __label__ = 20;
      break;
     case 20:
      var $81 = _hashTableIterNext($iter);
      
      HEAP[$prefix] = $81;
      
      
      if (HEAP[$prefix] == 0) {
        __label__ = 57;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 21:
      
      
      
      
      if (HEAP[HEAP[$prefix] + 4] == 0) {
        __label__ = 56;
        break;
      } else {
        __label__ = 22;
        break;
      }
     case 22:
      
      
      if (HEAP[$needSep] != 0) {
        __label__ = 23;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 23:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 416 + 12] != HEAP[HEAP[$parser_addr] + 416 + 8]) {
        __label__ = 25;
        break;
      } else {
        __label__ = 24;
        break;
      }
     case 24:
      
      var $101 = HEAP[$parser_addr] + 416;
      var $102 = _poolGrow($101);
      
      if ($102 != 0) {
        __label__ = 25;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 25:
      
      
      
      var $107 = HEAP[HEAP[$parser_addr] + 416 + 12];
      HEAP[$107] = 12;
      var $108 = $107 + 1;
      
      
      var $111 = HEAP[$parser_addr] + 416 + 12;
      HEAP[$111] = $108;
      HEAP[$iftmp_284] = 0;
      __label__ = 27;
      break;
     case 26:
      HEAP[$iftmp_284] = 1;
      __label__ = 27;
      break;
     case 27:
      
      
      if (HEAP[$iftmp_284] != 0) {
        __label__ = 28;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 28:
      HEAP[$0] = 0;
      __label__ = 85;
      break;
     case 29:
      
      
      var $115 = HEAP[HEAP[$prefix]];
      HEAP[$s] = $115;
      __label__ = 37;
      break;
     case 30:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 416 + 12] != HEAP[HEAP[$parser_addr] + 416 + 8]) {
        __label__ = 32;
        break;
      } else {
        __label__ = 31;
        break;
      }
     case 31:
      
      var $126 = HEAP[$parser_addr] + 416;
      var $127 = _poolGrow($126);
      
      if ($127 != 0) {
        __label__ = 32;
        break;
      } else {
        __label__ = 33;
        break;
      }
     case 32:
      
      
      
      var $132 = HEAP[HEAP[$parser_addr] + 416 + 12];
      
      var $134 = HEAP[HEAP[$s]];
      HEAP[$132] = $134;
      var $135 = $132 + 1;
      
      
      var $138 = HEAP[$parser_addr] + 416 + 12;
      HEAP[$138] = $135;
      HEAP[$iftmp_285] = 0;
      __label__ = 34;
      break;
     case 33:
      HEAP[$iftmp_285] = 1;
      __label__ = 34;
      break;
     case 34:
      
      
      if (HEAP[$iftmp_285] != 0) {
        __label__ = 35;
        break;
      } else {
        __label__ = 36;
        break;
      }
     case 35:
      HEAP[$0] = 0;
      __label__ = 85;
      break;
     case 36:
      
      var $141 = HEAP[$s] + 1;
      HEAP[$s] = $141;
      __label__ = 37;
      break;
     case 37:
      
      
      
      if (HEAP[HEAP[$s]] != 0) {
        __label__ = 30;
        break;
      } else {
        __label__ = 38;
        break;
      }
     case 38:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 416 + 12] != HEAP[HEAP[$parser_addr] + 416 + 8]) {
        __label__ = 40;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 39:
      
      var $155 = HEAP[$parser_addr] + 416;
      var $156 = _poolGrow($155);
      
      if ($156 != 0) {
        __label__ = 40;
        break;
      } else {
        __label__ = 41;
        break;
      }
     case 40:
      
      
      
      var $161 = HEAP[HEAP[$parser_addr] + 416 + 12];
      HEAP[$161] = 61;
      var $162 = $161 + 1;
      
      
      var $165 = HEAP[$parser_addr] + 416 + 12;
      HEAP[$165] = $162;
      HEAP[$iftmp_286] = 0;
      __label__ = 42;
      break;
     case 41:
      HEAP[$iftmp_286] = 1;
      __label__ = 42;
      break;
     case 42:
      
      
      if (HEAP[$iftmp_286] != 0) {
        __label__ = 43;
        break;
      } else {
        __label__ = 44;
        break;
      }
     case 43:
      HEAP[$0] = 0;
      __label__ = 85;
      break;
     case 44:
      
      
      
      
      var $171 = HEAP[HEAP[HEAP[$prefix] + 4] + 20];
      HEAP[$len22] = $171;
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 472] != 0) {
        __label__ = 45;
        break;
      } else {
        __label__ = 46;
        break;
      }
     case 45:
      
      var $177 = HEAP[$len22] - 1;
      HEAP[$len22] = $177;
      __label__ = 46;
      break;
     case 46:
      HEAP[$i21] = 0;
      __label__ = 54;
      break;
     case 47:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 416 + 12] != HEAP[HEAP[$parser_addr] + 416 + 8]) {
        __label__ = 49;
        break;
      } else {
        __label__ = 48;
        break;
      }
     case 48:
      
      var $188 = HEAP[$parser_addr] + 416;
      var $189 = _poolGrow($188);
      
      if ($189 != 0) {
        __label__ = 49;
        break;
      } else {
        __label__ = 50;
        break;
      }
     case 49:
      
      
      
      var $194 = HEAP[HEAP[$parser_addr] + 416 + 12];
      
      
      
      
      
      
      
      var $202 = HEAP[HEAP[HEAP[HEAP[$prefix] + 4] + 16] + HEAP[$i21]];
      HEAP[$194] = $202;
      var $203 = $194 + 1;
      
      
      var $206 = HEAP[$parser_addr] + 416 + 12;
      HEAP[$206] = $203;
      HEAP[$iftmp_287] = 0;
      __label__ = 51;
      break;
     case 50:
      HEAP[$iftmp_287] = 1;
      __label__ = 51;
      break;
     case 51:
      
      
      if (HEAP[$iftmp_287] != 0) {
        __label__ = 52;
        break;
      } else {
        __label__ = 53;
        break;
      }
     case 52:
      HEAP[$0] = 0;
      __label__ = 85;
      break;
     case 53:
      
      var $209 = HEAP[$i21] + 1;
      HEAP[$i21] = $209;
      __label__ = 54;
      break;
     case 54:
      
      
      
      if (HEAP[$i21] < HEAP[$len22]) {
        __label__ = 47;
        break;
      } else {
        __label__ = 55;
        break;
      }
     case 55:
      HEAP[$needSep] = 1;
      __label__ = 56;
      break;
     case 56:
      __label__ = 20;
      break;
     case 57:
      
      var $214 = HEAP[$dtd];
      _hashTableIterInit($iter, $214);
      __label__ = 58;
      break;
     case 58:
      var $215 = _hashTableIterNext($iter);
      
      HEAP[$e] = $215;
      
      
      if (HEAP[$e] == 0) {
        __label__ = 78;
        break;
      } else {
        __label__ = 59;
        break;
      }
     case 59:
      
      
      
      
      if (HEAP[HEAP[$e] + 32] == 0) {
        __label__ = 77;
        break;
      } else {
        __label__ = 60;
        break;
      }
     case 60:
      
      
      if (HEAP[$needSep] != 0) {
        __label__ = 61;
        break;
      } else {
        __label__ = 67;
        break;
      }
     case 61:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 416 + 12] != HEAP[HEAP[$parser_addr] + 416 + 8]) {
        __label__ = 63;
        break;
      } else {
        __label__ = 62;
        break;
      }
     case 62:
      
      var $235 = HEAP[$parser_addr] + 416;
      var $236 = _poolGrow($235);
      
      if ($236 != 0) {
        __label__ = 63;
        break;
      } else {
        __label__ = 64;
        break;
      }
     case 63:
      
      
      
      var $241 = HEAP[HEAP[$parser_addr] + 416 + 12];
      HEAP[$241] = 12;
      var $242 = $241 + 1;
      
      
      var $245 = HEAP[$parser_addr] + 416 + 12;
      HEAP[$245] = $242;
      HEAP[$iftmp_288] = 0;
      __label__ = 65;
      break;
     case 64:
      HEAP[$iftmp_288] = 1;
      __label__ = 65;
      break;
     case 65:
      
      
      if (HEAP[$iftmp_288] != 0) {
        __label__ = 66;
        break;
      } else {
        __label__ = 67;
        break;
      }
     case 66:
      HEAP[$0] = 0;
      __label__ = 85;
      break;
     case 67:
      
      
      var $249 = HEAP[HEAP[$e]];
      HEAP[$s65] = $249;
      __label__ = 75;
      break;
     case 68:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 416 + 12] != HEAP[HEAP[$parser_addr] + 416 + 8]) {
        __label__ = 70;
        break;
      } else {
        __label__ = 69;
        break;
      }
     case 69:
      
      var $260 = HEAP[$parser_addr] + 416;
      var $261 = _poolGrow($260);
      
      if ($261 != 0) {
        __label__ = 70;
        break;
      } else {
        __label__ = 71;
        break;
      }
     case 70:
      
      
      
      var $266 = HEAP[HEAP[$parser_addr] + 416 + 12];
      
      var $268 = HEAP[HEAP[$s65]];
      HEAP[$266] = $268;
      var $269 = $266 + 1;
      
      
      var $272 = HEAP[$parser_addr] + 416 + 12;
      HEAP[$272] = $269;
      HEAP[$iftmp_289] = 0;
      __label__ = 72;
      break;
     case 71:
      HEAP[$iftmp_289] = 1;
      __label__ = 72;
      break;
     case 72:
      
      
      if (HEAP[$iftmp_289] != 0) {
        __label__ = 73;
        break;
      } else {
        __label__ = 74;
        break;
      }
     case 73:
      HEAP[$0] = 0;
      __label__ = 85;
      break;
     case 74:
      
      var $275 = HEAP[$s65] + 1;
      HEAP[$s65] = $275;
      __label__ = 75;
      break;
     case 75:
      
      
      
      if (HEAP[HEAP[$s65]] != 0) {
        __label__ = 68;
        break;
      } else {
        __label__ = 76;
        break;
      }
     case 76:
      HEAP[$needSep] = 1;
      __label__ = 77;
      break;
     case 77:
      __label__ = 58;
      break;
     case 78:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 416 + 12] != HEAP[HEAP[$parser_addr] + 416 + 8]) {
        __label__ = 80;
        break;
      } else {
        __label__ = 79;
        break;
      }
     case 79:
      
      var $289 = HEAP[$parser_addr] + 416;
      var $290 = _poolGrow($289);
      
      if ($290 != 0) {
        __label__ = 80;
        break;
      } else {
        __label__ = 81;
        break;
      }
     case 80:
      
      
      
      var $295 = HEAP[HEAP[$parser_addr] + 416 + 12];
      HEAP[$295] = 0;
      var $296 = $295 + 1;
      
      
      var $299 = HEAP[$parser_addr] + 416 + 12;
      HEAP[$299] = $296;
      HEAP[$iftmp_290] = 0;
      __label__ = 82;
      break;
     case 81:
      HEAP[$iftmp_290] = 1;
      __label__ = 82;
      break;
     case 82:
      
      
      if (HEAP[$iftmp_290] != 0) {
        __label__ = 83;
        break;
      } else {
        __label__ = 84;
        break;
      }
     case 83:
      HEAP[$0] = 0;
      __label__ = 85;
      break;
     case 84:
      
      
      
      var $304 = HEAP[HEAP[$parser_addr] + 416 + 16];
      HEAP[$0] = $304;
      __label__ = 85;
      break;
     case 85:
      var $305 = HEAP[$0];
      HEAP[$retval] = $305;
      __label__ = 86;
      break;
     case 86:
      var $retval96 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval96;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _setContext($parser, $context) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 37;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 37);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $context_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $iftmp_295 = __stackBase__ + 12;
      var $iftmp_294 = __stackBase__ + 13;
      var $iftmp_293 = __stackBase__ + 14;
      var $iftmp_292 = __stackBase__ + 15;
      var $0 = __stackBase__ + 16;
      var $iftmp_291 = __stackBase__ + 20;
      var $dtd = __stackBase__ + 21;
      var $s = __stackBase__ + 25;
      var $e = __stackBase__ + 29;
      var $prefix = __stackBase__ + 33;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$context_addr] = $context;
      
      
      var $3 = HEAP[HEAP[$parser_addr] + 356];
      HEAP[$dtd] = $3;
      var $4 = HEAP[$context_addr];
      HEAP[$s] = $4;
      __label__ = 57;
      break;
     case 1:
      
      
      
      if (HEAP[HEAP[$s]] == 12) {
        __label__ = 3;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      
      
      
      if (HEAP[HEAP[$s]] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 3:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 416 + 12] != HEAP[HEAP[$parser_addr] + 416 + 8]) {
        __label__ = 5;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 4:
      
      var $21 = HEAP[$parser_addr] + 416;
      var $22 = _poolGrow($21);
      
      if ($22 != 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      
      
      
      var $27 = HEAP[HEAP[$parser_addr] + 416 + 12];
      HEAP[$27] = 0;
      var $28 = $27 + 1;
      
      
      var $31 = HEAP[$parser_addr] + 416 + 12;
      HEAP[$31] = $28;
      HEAP[$iftmp_291] = 0;
      __label__ = 7;
      break;
     case 6:
      HEAP[$iftmp_291] = 1;
      __label__ = 7;
      break;
     case 7:
      
      
      if (HEAP[$iftmp_291] != 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      HEAP[$0] = 0;
      __label__ = 59;
      break;
     case 9:
      
      
      
      var $36 = HEAP[HEAP[$parser_addr] + 416 + 16];
      
      var $38 = HEAP[$dtd];
      var $39 = _lookup($38, $36, 0);
      var $40 = $39;
      HEAP[$e] = $40;
      
      
      if (HEAP[$e] != 0) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      
      var $44 = HEAP[$e] + 32;
      HEAP[$44] = 1;
      __label__ = 11;
      break;
     case 11:
      
      
      
      if (HEAP[HEAP[$s]] != 0) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      
      var $49 = HEAP[$s] + 1;
      HEAP[$s] = $49;
      __label__ = 13;
      break;
     case 13:
      var $50 = HEAP[$s];
      HEAP[$context_addr] = $50;
      
      
      
      var $54 = HEAP[HEAP[$parser_addr] + 416 + 16];
      
      
      var $57 = HEAP[$parser_addr] + 416 + 12;
      HEAP[$57] = $54;
      __label__ = 57;
      break;
     case 14:
      
      
      
      if (HEAP[HEAP[$s]] == 61) {
        __label__ = 15;
        break;
      } else {
        __label__ = 50;
        break;
      }
     case 15:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 416 + 12] == HEAP[HEAP[$parser_addr] + 416 + 16]) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      
      var $71 = HEAP[$dtd] + 152;
      HEAP[$prefix] = $71;
      __label__ = 29;
      break;
     case 17:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 416 + 12] != HEAP[HEAP[$parser_addr] + 416 + 8]) {
        __label__ = 19;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 18:
      
      var $82 = HEAP[$parser_addr] + 416;
      var $83 = _poolGrow($82);
      
      if ($83 != 0) {
        __label__ = 19;
        break;
      } else {
        __label__ = 20;
        break;
      }
     case 19:
      
      
      
      var $88 = HEAP[HEAP[$parser_addr] + 416 + 12];
      HEAP[$88] = 0;
      var $89 = $88 + 1;
      
      
      var $92 = HEAP[$parser_addr] + 416 + 12;
      HEAP[$92] = $89;
      HEAP[$iftmp_292] = 0;
      __label__ = 21;
      break;
     case 20:
      HEAP[$iftmp_292] = 1;
      __label__ = 21;
      break;
     case 21:
      
      
      if (HEAP[$iftmp_292] != 0) {
        __label__ = 22;
        break;
      } else {
        __label__ = 23;
        break;
      }
     case 22:
      HEAP[$0] = 0;
      __label__ = 59;
      break;
     case 23:
      
      
      
      var $97 = HEAP[HEAP[$parser_addr] + 416 + 16];
      
      var $99 = HEAP[$dtd] + 60;
      var $100 = _lookup($99, $97, 8);
      var $101 = $100;
      HEAP[$prefix] = $101;
      
      
      if (HEAP[$prefix] == 0) {
        __label__ = 24;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 24:
      HEAP[$0] = 0;
      __label__ = 59;
      break;
     case 25:
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$prefix]] == HEAP[HEAP[$parser_addr] + 416 + 16]) {
        __label__ = 26;
        break;
      } else {
        __label__ = 28;
        break;
      }
     case 26:
      
      
      var $114 = HEAP[HEAP[$prefix]];
      
      var $116 = HEAP[$dtd] + 80;
      var $117 = _poolCopyString($116, $114);
      
      var $119 = HEAP[$prefix];
      HEAP[$119] = $117;
      
      
      
      
      if (HEAP[HEAP[$prefix]] == 0) {
        __label__ = 27;
        break;
      } else {
        __label__ = 28;
        break;
      }
     case 27:
      HEAP[$0] = 0;
      __label__ = 59;
      break;
     case 28:
      
      
      
      var $127 = HEAP[HEAP[$parser_addr] + 416 + 16];
      
      
      var $130 = HEAP[$parser_addr] + 416 + 12;
      HEAP[$130] = $127;
      __label__ = 29;
      break;
     case 29:
      
      var $132 = HEAP[$s] + 1;
      HEAP[$context_addr] = $132;
      __label__ = 37;
      break;
     case 30:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 416 + 12] != HEAP[HEAP[$parser_addr] + 416 + 8]) {
        __label__ = 32;
        break;
      } else {
        __label__ = 31;
        break;
      }
     case 31:
      
      var $143 = HEAP[$parser_addr] + 416;
      var $144 = _poolGrow($143);
      
      if ($144 != 0) {
        __label__ = 32;
        break;
      } else {
        __label__ = 33;
        break;
      }
     case 32:
      
      
      
      var $149 = HEAP[HEAP[$parser_addr] + 416 + 12];
      
      var $151 = HEAP[HEAP[$context_addr]];
      HEAP[$149] = $151;
      var $152 = $149 + 1;
      
      
      var $155 = HEAP[$parser_addr] + 416 + 12;
      HEAP[$155] = $152;
      HEAP[$iftmp_293] = 0;
      __label__ = 34;
      break;
     case 33:
      HEAP[$iftmp_293] = 1;
      __label__ = 34;
      break;
     case 34:
      
      
      if (HEAP[$iftmp_293] != 0) {
        __label__ = 35;
        break;
      } else {
        __label__ = 36;
        break;
      }
     case 35:
      HEAP[$0] = 0;
      __label__ = 59;
      break;
     case 36:
      
      var $158 = HEAP[$context_addr] + 1;
      HEAP[$context_addr] = $158;
      __label__ = 37;
      break;
     case 37:
      
      
      
      if (HEAP[HEAP[$context_addr]] == 12) {
        __label__ = 39;
        break;
      } else {
        __label__ = 38;
        break;
      }
     case 38:
      
      
      
      if (HEAP[HEAP[$context_addr]] != 0) {
        __label__ = 30;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 39:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 416 + 12] != HEAP[HEAP[$parser_addr] + 416 + 8]) {
        __label__ = 41;
        break;
      } else {
        __label__ = 40;
        break;
      }
     case 40:
      
      var $175 = HEAP[$parser_addr] + 416;
      var $176 = _poolGrow($175);
      
      if ($176 != 0) {
        __label__ = 41;
        break;
      } else {
        __label__ = 42;
        break;
      }
     case 41:
      
      
      
      var $181 = HEAP[HEAP[$parser_addr] + 416 + 12];
      HEAP[$181] = 0;
      var $182 = $181 + 1;
      
      
      var $185 = HEAP[$parser_addr] + 416 + 12;
      HEAP[$185] = $182;
      HEAP[$iftmp_294] = 0;
      __label__ = 43;
      break;
     case 42:
      HEAP[$iftmp_294] = 1;
      __label__ = 43;
      break;
     case 43:
      
      
      if (HEAP[$iftmp_294] != 0) {
        __label__ = 44;
        break;
      } else {
        __label__ = 45;
        break;
      }
     case 44:
      HEAP[$0] = 0;
      __label__ = 59;
      break;
     case 45:
      
      var $188 = HEAP[$parser_addr] + 372;
      
      
      
      var $192 = HEAP[HEAP[$parser_addr] + 416 + 16];
      var $193 = HEAP[$parser_addr];
      var $194 = HEAP[$prefix];
      var $195 = _addBinding($193, $194, 0, $192, $188);
      
      if ($195 != 0) {
        __label__ = 46;
        break;
      } else {
        __label__ = 47;
        break;
      }
     case 46:
      HEAP[$0] = 0;
      __label__ = 59;
      break;
     case 47:
      
      
      
      var $200 = HEAP[HEAP[$parser_addr] + 416 + 16];
      
      
      var $203 = HEAP[$parser_addr] + 416 + 12;
      HEAP[$203] = $200;
      
      
      
      if (HEAP[HEAP[$context_addr]] != 0) {
        __label__ = 48;
        break;
      } else {
        __label__ = 49;
        break;
      }
     case 48:
      
      var $208 = HEAP[$context_addr] + 1;
      HEAP[$context_addr] = $208;
      __label__ = 49;
      break;
     case 49:
      var $209 = HEAP[$context_addr];
      HEAP[$s] = $209;
      __label__ = 57;
      break;
     case 50:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$parser_addr] + 416 + 12] != HEAP[HEAP[$parser_addr] + 416 + 8]) {
        __label__ = 52;
        break;
      } else {
        __label__ = 51;
        break;
      }
     case 51:
      
      var $220 = HEAP[$parser_addr] + 416;
      var $221 = _poolGrow($220);
      
      if ($221 != 0) {
        __label__ = 52;
        break;
      } else {
        __label__ = 53;
        break;
      }
     case 52:
      
      
      
      var $226 = HEAP[HEAP[$parser_addr] + 416 + 12];
      
      var $228 = HEAP[HEAP[$s]];
      HEAP[$226] = $228;
      var $229 = $226 + 1;
      
      
      var $232 = HEAP[$parser_addr] + 416 + 12;
      HEAP[$232] = $229;
      HEAP[$iftmp_295] = 0;
      __label__ = 54;
      break;
     case 53:
      HEAP[$iftmp_295] = 1;
      __label__ = 54;
      break;
     case 54:
      
      
      if (HEAP[$iftmp_295] != 0) {
        __label__ = 55;
        break;
      } else {
        __label__ = 56;
        break;
      }
     case 55:
      HEAP[$0] = 0;
      __label__ = 59;
      break;
     case 56:
      
      var $235 = HEAP[$s] + 1;
      HEAP[$s] = $235;
      __label__ = 57;
      break;
     case 57:
      
      
      
      if (HEAP[HEAP[$context_addr]] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 58;
        break;
      }
     case 58:
      HEAP[$0] = 1;
      __label__ = 59;
      break;
     case 59:
      var $239 = HEAP[$0];
      HEAP[$retval] = $239;
      __label__ = 60;
      break;
     case 60:
      
      var $retval6364 = HEAP[$retval] & 255;
      STACKTOP = __stackBase__;
      return $retval6364;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _normalizePublicId($publicId) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 12;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $publicId_addr = __stackBase__;
      var $p = __stackBase__ + 4;
      var $s = __stackBase__ + 8;
      
      HEAP[$publicId_addr] = $publicId;
      var $0 = HEAP[$publicId_addr];
      HEAP[$p] = $0;
      var $1 = HEAP[$publicId_addr];
      HEAP[$s] = $1;
      __label__ = 8;
      break;
     case 1:
      
      
      var $4 = HEAP[HEAP[$s]];
      if ($4 == 10) {
        __label__ = 2;
        break;
      } else if ($4 == 13) {
        __label__ = 2;
        break;
      } else if ($4 == 32) {
        __label__ = 2;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 2:
      
      
      
      if (HEAP[$p] != HEAP[$publicId_addr]) {
        __label__ = 3;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 3:
      
      var $9 = HEAP[$p] + -1;
      
      
      if (HEAP[$9] != 32) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      var $12 = HEAP[$p];
      HEAP[$12] = 32;
      
      var $14 = HEAP[$p] + 1;
      HEAP[$p] = $14;
      __label__ = 5;
      break;
     case 5:
      __label__ = 7;
      break;
     case 6:
      
      var $16 = HEAP[HEAP[$s]];
      var $17 = HEAP[$p];
      HEAP[$17] = $16;
      
      var $19 = HEAP[$p] + 1;
      HEAP[$p] = $19;
      __label__ = 7;
      break;
     case 7:
      
      var $21 = HEAP[$s] + 1;
      HEAP[$s] = $21;
      __label__ = 8;
      break;
     case 8:
      
      
      
      if (HEAP[HEAP[$s]] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 9:
      
      
      
      if (HEAP[$p] != HEAP[$publicId_addr]) {
        __label__ = 10;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 10:
      
      var $29 = HEAP[$p] + -1;
      
      
      if (HEAP[$29] == 32) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      
      var $33 = HEAP[$p] + -1;
      HEAP[$p] = $33;
      __label__ = 12;
      break;
     case 12:
      var $34 = HEAP[$p];
      HEAP[$34] = 0;
      __label__ = 13;
      break;
     case 13:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _dtdCreate($ms) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $ms_addr = __stackBase__;
      var $retval = __stackBase__ + 4;
      var $0 = __stackBase__ + 8;
      var $p = __stackBase__ + 12;
      
      HEAP[$ms_addr] = $ms;
      
      
      var $3 = HEAP[HEAP[$ms_addr]];
      var $4 = FUNCTION_TABLE[$3](188);
      var $5 = $4;
      HEAP[$p] = $5;
      
      
      if (HEAP[$p] == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      var $8 = HEAP[$p];
      HEAP[$0] = $8;
      __label__ = 3;
      break;
     case 2:
      
      var $10 = HEAP[$p] + 80;
      var $11 = HEAP[$ms_addr];
      _poolInit($10, $11);
      
      var $13 = HEAP[$p] + 104;
      var $14 = HEAP[$ms_addr];
      _poolInit($13, $14);
      
      var $16 = HEAP[$p];
      var $17 = HEAP[$ms_addr];
      _hashTableInit($16, $17);
      
      var $19 = HEAP[$p] + 20;
      var $20 = HEAP[$ms_addr];
      _hashTableInit($19, $20);
      
      var $22 = HEAP[$p] + 40;
      var $23 = HEAP[$ms_addr];
      _hashTableInit($22, $23);
      
      var $25 = HEAP[$p] + 60;
      var $26 = HEAP[$ms_addr];
      _hashTableInit($25, $26);
      
      var $28 = HEAP[$p] + 131;
      HEAP[$28] = 0;
      
      var $30 = HEAP[$p] + 132;
      var $31 = HEAP[$ms_addr];
      _hashTableInit($30, $31);
      
      
      var $34 = HEAP[$p] + 152;
      HEAP[$34] = 0;
      
      
      var $37 = HEAP[$p] + 152 + 4;
      HEAP[$37] = 0;
      
      var $39 = HEAP[$p] + 160;
      HEAP[$39] = 0;
      
      var $41 = HEAP[$p] + 184;
      HEAP[$41] = 0;
      
      var $43 = HEAP[$p] + 164;
      HEAP[$43] = 0;
      
      var $45 = HEAP[$p] + 180;
      HEAP[$45] = 0;
      
      var $47 = HEAP[$p] + 172;
      HEAP[$47] = 0;
      
      var $49 = HEAP[$p] + 176;
      HEAP[$49] = 0;
      
      var $51 = HEAP[$p] + 168;
      HEAP[$51] = 0;
      
      var $53 = HEAP[$p] + 128;
      HEAP[$53] = 1;
      
      var $55 = HEAP[$p] + 129;
      HEAP[$55] = 0;
      
      var $57 = HEAP[$p] + 130;
      HEAP[$57] = 0;
      var $58 = HEAP[$p];
      HEAP[$0] = $58;
      __label__ = 3;
      break;
     case 3:
      var $59 = HEAP[$0];
      HEAP[$retval] = $59;
      __label__ = 4;
      break;
     case 4:
      var $retval3 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval3;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _dtdReset($p, $ms) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 20;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $p_addr = __stackBase__;
      var $ms_addr = __stackBase__ + 4;
      var $iter = __stackBase__ + 8;
      var $e = __stackBase__ + 16;
      
      HEAP[$p_addr] = $p;
      HEAP[$ms_addr] = $ms;
      
      var $1 = HEAP[$p_addr] + 20;
      _hashTableIterInit($iter, $1);
      __label__ = 1;
      break;
     case 1:
      var $2 = _hashTableIterNext($iter);
      
      HEAP[$e] = $2;
      
      
      if (HEAP[$e] == 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      
      
      
      
      if (HEAP[HEAP[$e] + 16] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      
      var $12 = HEAP[HEAP[$ms_addr] + 8];
      
      
      
      var $16 = HEAP[HEAP[$e] + 20];
      FUNCTION_TABLE[$12]($16);
      __label__ = 4;
      break;
     case 4:
      __label__ = 1;
      break;
     case 5:
      
      var $18 = HEAP[$p_addr];
      _hashTableClear($18);
      
      var $20 = HEAP[$p_addr] + 131;
      HEAP[$20] = 0;
      
      var $22 = HEAP[$p_addr] + 132;
      _hashTableClear($22);
      
      var $24 = HEAP[$p_addr] + 20;
      _hashTableClear($24);
      
      var $26 = HEAP[$p_addr] + 40;
      _hashTableClear($26);
      
      var $28 = HEAP[$p_addr] + 60;
      _hashTableClear($28);
      
      var $30 = HEAP[$p_addr] + 80;
      _poolClear($30);
      
      var $32 = HEAP[$p_addr] + 104;
      _poolClear($32);
      
      
      var $35 = HEAP[$p_addr] + 152;
      HEAP[$35] = 0;
      
      
      var $38 = HEAP[$p_addr] + 152 + 4;
      HEAP[$38] = 0;
      
      var $40 = HEAP[$p_addr] + 160;
      HEAP[$40] = 0;
      
      
      var $43 = HEAP[HEAP[$ms_addr] + 8];
      
      
      
      var $47 = HEAP[HEAP[$p_addr] + 184];
      FUNCTION_TABLE[$43]($47);
      
      var $49 = HEAP[$p_addr] + 184;
      HEAP[$49] = 0;
      
      
      var $52 = HEAP[HEAP[$ms_addr] + 8];
      
      
      
      var $56 = HEAP[HEAP[$p_addr] + 164];
      FUNCTION_TABLE[$52]($56);
      
      var $58 = HEAP[$p_addr] + 164;
      HEAP[$58] = 0;
      
      var $60 = HEAP[$p_addr] + 180;
      HEAP[$60] = 0;
      
      var $62 = HEAP[$p_addr] + 172;
      HEAP[$62] = 0;
      
      var $64 = HEAP[$p_addr] + 176;
      HEAP[$64] = 0;
      
      var $66 = HEAP[$p_addr] + 168;
      HEAP[$66] = 0;
      
      var $68 = HEAP[$p_addr] + 128;
      HEAP[$68] = 1;
      
      var $70 = HEAP[$p_addr] + 129;
      HEAP[$70] = 0;
      
      var $72 = HEAP[$p_addr] + 130;
      HEAP[$72] = 0;
      __label__ = 6;
      break;
     case 6:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _dtdDestroy($p, $isDocEntity, $ms) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 21;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 21);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $p_addr = __stackBase__;
      var $isDocEntity_addr = __stackBase__ + 4;
      var $ms_addr = __stackBase__ + 5;
      var $iter = __stackBase__ + 9;
      var $e = __stackBase__ + 17;
      
      HEAP[$p_addr] = $p;
      HEAP[$isDocEntity_addr] = $isDocEntity;
      HEAP[$ms_addr] = $ms;
      
      var $1 = HEAP[$p_addr] + 20;
      _hashTableIterInit($iter, $1);
      __label__ = 1;
      break;
     case 1:
      var $2 = _hashTableIterNext($iter);
      
      HEAP[$e] = $2;
      
      
      if (HEAP[$e] == 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      
      
      
      
      if (HEAP[HEAP[$e] + 16] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      
      var $12 = HEAP[HEAP[$ms_addr] + 8];
      
      
      
      var $16 = HEAP[HEAP[$e] + 20];
      FUNCTION_TABLE[$12]($16);
      __label__ = 4;
      break;
     case 4:
      __label__ = 1;
      break;
     case 5:
      
      var $18 = HEAP[$p_addr];
      _hashTableDestroy($18);
      
      var $20 = HEAP[$p_addr] + 132;
      _hashTableDestroy($20);
      
      var $22 = HEAP[$p_addr] + 20;
      _hashTableDestroy($22);
      
      var $24 = HEAP[$p_addr] + 40;
      _hashTableDestroy($24);
      
      var $26 = HEAP[$p_addr] + 60;
      _hashTableDestroy($26);
      
      var $28 = HEAP[$p_addr] + 80;
      _poolDestroy($28);
      
      var $30 = HEAP[$p_addr] + 104;
      _poolDestroy($30);
      
      
      if (HEAP[$isDocEntity_addr] != 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      
      
      var $35 = HEAP[HEAP[$ms_addr] + 8];
      
      
      
      var $39 = HEAP[HEAP[$p_addr] + 184];
      FUNCTION_TABLE[$35]($39);
      
      
      var $42 = HEAP[HEAP[$ms_addr] + 8];
      
      
      
      var $46 = HEAP[HEAP[$p_addr] + 164];
      FUNCTION_TABLE[$42]($46);
      __label__ = 7;
      break;
     case 7:
      
      
      var $49 = HEAP[HEAP[$ms_addr] + 8];
      
      var $51 = HEAP[$p_addr];
      FUNCTION_TABLE[$49]($51);
      __label__ = 8;
      break;
     case 8:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _dtdCopy($newDtd, $oldDtd, $ms) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 65;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 65);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $newDtd_addr = __stackBase__;
      var $oldDtd_addr = __stackBase__ + 4;
      var $ms_addr = __stackBase__ + 8;
      var $retval = __stackBase__ + 12;
      var $iftmp_296 = __stackBase__ + 16;
      var $0 = __stackBase__ + 17;
      var $iter = __stackBase__ + 21;
      var $name = __stackBase__ + 29;
      var $oldP = __stackBase__ + 33;
      var $newA = __stackBase__ + 37;
      var $name8 = __stackBase__ + 41;
      var $oldA = __stackBase__ + 45;
      var $i = __stackBase__ + 49;
      var $newE = __stackBase__ + 53;
      var $name26 = __stackBase__ + 57;
      var $oldE = __stackBase__ + 61;
      
      HEAP[$newDtd_addr] = $newDtd;
      HEAP[$oldDtd_addr] = $oldDtd;
      HEAP[$ms_addr] = $ms;
      
      var $2 = HEAP[$oldDtd_addr] + 60;
      _hashTableIterInit($iter, $2);
      __label__ = 1;
      break;
     case 1:
      var $3 = _hashTableIterNext($iter);
      
      HEAP[$oldP] = $3;
      
      
      if (HEAP[$oldP] == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      
      
      var $9 = HEAP[HEAP[$oldP]];
      
      var $11 = HEAP[$newDtd_addr] + 80;
      var $12 = _poolCopyString($11, $9);
      HEAP[$name] = $12;
      
      
      if (HEAP[$name] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      HEAP[$0] = 0;
      __label__ = 51;
      break;
     case 4:
      
      var $16 = HEAP[$newDtd_addr] + 60;
      var $17 = HEAP[$name];
      var $18 = _lookup($16, $17, 8);
      
      if ($18 == 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      HEAP[$0] = 0;
      __label__ = 51;
      break;
     case 6:
      __label__ = 1;
      break;
     case 7:
      
      var $21 = HEAP[$oldDtd_addr] + 40;
      _hashTableIterInit($iter, $21);
      __label__ = 8;
      break;
     case 8:
      var $22 = _hashTableIterNext($iter);
      
      HEAP[$oldA] = $22;
      
      
      if (HEAP[$oldA] == 0) {
        __label__ = 24;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 9:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$newDtd_addr] + 80 + 12] != HEAP[HEAP[$newDtd_addr] + 80 + 8]) {
        __label__ = 11;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 10:
      
      var $36 = HEAP[$newDtd_addr] + 80;
      var $37 = _poolGrow($36);
      
      if ($37 != 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      
      
      
      var $42 = HEAP[HEAP[$newDtd_addr] + 80 + 12];
      HEAP[$42] = 0;
      var $43 = $42 + 1;
      
      
      var $46 = HEAP[$newDtd_addr] + 80 + 12;
      HEAP[$46] = $43;
      HEAP[$iftmp_296] = 0;
      __label__ = 13;
      break;
     case 12:
      HEAP[$iftmp_296] = 1;
      __label__ = 13;
      break;
     case 13:
      
      
      if (HEAP[$iftmp_296] != 0) {
        __label__ = 14;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 14:
      HEAP[$0] = 0;
      __label__ = 51;
      break;
     case 15:
      
      
      var $50 = HEAP[HEAP[$oldA]];
      
      var $52 = HEAP[$newDtd_addr] + 80;
      var $53 = _poolCopyString($52, $50);
      HEAP[$name8] = $53;
      
      
      if (HEAP[$name8] == 0) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      HEAP[$0] = 0;
      __label__ = 51;
      break;
     case 17:
      
      var $57 = HEAP[$name8] + 1;
      HEAP[$name8] = $57;
      
      var $59 = HEAP[$newDtd_addr] + 40;
      var $60 = HEAP[$name8];
      var $61 = _lookup($59, $60, 12);
      var $62 = $61;
      HEAP[$newA] = $62;
      
      
      if (HEAP[$newA] == 0) {
        __label__ = 18;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 18:
      HEAP[$0] = 0;
      __label__ = 51;
      break;
     case 19:
      
      
      var $67 = HEAP[HEAP[$oldA] + 8];
      
      var $69 = HEAP[$newA] + 8;
      HEAP[$69] = $67;
      
      
      
      
      if (HEAP[HEAP[$oldA] + 4] != 0) {
        __label__ = 20;
        break;
      } else {
        __label__ = 23;
        break;
      }
     case 20:
      
      
      var $76 = HEAP[HEAP[$oldA] + 9];
      
      var $78 = HEAP[$newA] + 9;
      HEAP[$78] = $76;
      
      
      
      
      
      
      if (HEAP[HEAP[$oldA] + 4] == HEAP[$oldDtd_addr] + 152) {
        __label__ = 21;
        break;
      } else {
        __label__ = 22;
        break;
      }
     case 21:
      
      var $86 = HEAP[$newDtd_addr] + 152;
      
      var $88 = HEAP[$newA] + 4;
      HEAP[$88] = $86;
      __label__ = 23;
      break;
     case 22:
      
      
      
      
      var $93 = HEAP[HEAP[HEAP[$oldA] + 4]];
      
      var $95 = HEAP[$newDtd_addr] + 60;
      var $96 = _lookup($95, $93, 0);
      var $97 = $96;
      
      var $99 = HEAP[$newA] + 4;
      HEAP[$99] = $97;
      __label__ = 23;
      break;
     case 23:
      __label__ = 8;
      break;
     case 24:
      
      var $101 = HEAP[$oldDtd_addr] + 20;
      _hashTableIterInit($iter, $101);
      __label__ = 25;
      break;
     case 25:
      var $102 = _hashTableIterNext($iter);
      
      HEAP[$oldE] = $102;
      
      
      if (HEAP[$oldE] == 0) {
        __label__ = 46;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 26:
      
      
      var $108 = HEAP[HEAP[$oldE]];
      
      var $110 = HEAP[$newDtd_addr] + 80;
      var $111 = _poolCopyString($110, $108);
      HEAP[$name26] = $111;
      
      
      if (HEAP[$name26] == 0) {
        __label__ = 27;
        break;
      } else {
        __label__ = 28;
        break;
      }
     case 27:
      HEAP[$0] = 0;
      __label__ = 51;
      break;
     case 28:
      
      var $115 = HEAP[$newDtd_addr] + 20;
      var $116 = HEAP[$name26];
      var $117 = _lookup($115, $116, 24);
      var $118 = $117;
      HEAP[$newE] = $118;
      
      
      if (HEAP[$newE] == 0) {
        __label__ = 29;
        break;
      } else {
        __label__ = 30;
        break;
      }
     case 29:
      HEAP[$0] = 0;
      __label__ = 51;
      break;
     case 30:
      
      
      
      
      if (HEAP[HEAP[$oldE] + 12] != 0) {
        __label__ = 31;
        break;
      } else {
        __label__ = 33;
        break;
      }
     case 31:
      
      
      var $127 = HEAP[HEAP[$ms_addr]];
      
      
      
      var $131 = HEAP[HEAP[$oldE] + 12] * 12;
      var $132 = FUNCTION_TABLE[$127]($131);
      var $133 = $132;
      
      var $135 = HEAP[$newE] + 20;
      HEAP[$135] = $133;
      
      
      
      
      if (HEAP[HEAP[$newE] + 20] == 0) {
        __label__ = 32;
        break;
      } else {
        __label__ = 33;
        break;
      }
     case 32:
      
      
      var $142 = HEAP[HEAP[$ms_addr] + 8];
      
      var $144 = HEAP[$newE];
      FUNCTION_TABLE[$142]($144);
      HEAP[$0] = 0;
      __label__ = 51;
      break;
     case 33:
      
      
      
      
      if (HEAP[HEAP[$oldE] + 8] != 0) {
        __label__ = 34;
        break;
      } else {
        __label__ = 35;
        break;
      }
     case 34:
      
      
      
      
      var $153 = HEAP[HEAP[HEAP[$oldE] + 8]];
      
      var $155 = HEAP[$newDtd_addr] + 40;
      var $156 = _lookup($155, $153, 0);
      var $157 = $156;
      
      var $159 = HEAP[$newE] + 8;
      HEAP[$159] = $157;
      __label__ = 35;
      break;
     case 35:
      
      
      var $162 = HEAP[HEAP[$oldE] + 12];
      
      var $164 = HEAP[$newE] + 12;
      HEAP[$164] = $162;
      
      
      var $167 = HEAP[HEAP[$newE] + 12];
      
      var $169 = HEAP[$newE] + 16;
      HEAP[$169] = $167;
      
      
      
      
      if (HEAP[HEAP[$oldE] + 4] != 0) {
        __label__ = 36;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 36:
      
      
      
      
      var $178 = HEAP[HEAP[HEAP[$oldE] + 4]];
      
      var $180 = HEAP[$newDtd_addr] + 60;
      var $181 = _lookup($180, $178, 0);
      var $182 = $181;
      
      var $184 = HEAP[$newE] + 4;
      HEAP[$184] = $182;
      __label__ = 37;
      break;
     case 37:
      HEAP[$i] = 0;
      __label__ = 44;
      break;
     case 38:
      
      
      
      
      var $189 = HEAP[HEAP[$newE] + 20] + 12 * HEAP[$i];
      
      
      
      
      
      
      
      
      var $198 = HEAP[HEAP[HEAP[HEAP[$oldE] + 20] + 12 * HEAP[$i]]];
      
      var $200 = HEAP[$newDtd_addr] + 40;
      var $201 = _lookup($200, $198, 0);
      var $202 = $201;
      var $203 = $189;
      HEAP[$203] = $202;
      
      
      
      
      
      
      
      
      
      
      
      var $215 = HEAP[HEAP[HEAP[$oldE] + 20] + 12 * HEAP[$i] + 4];
      var $216 = HEAP[HEAP[$newE] + 20] + 12 * HEAP[$i] + 4;
      HEAP[$216] = $215;
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$oldE] + 20] + 12 * HEAP[$i] + 8] != 0) {
        __label__ = 39;
        break;
      } else {
        __label__ = 42;
        break;
      }
     case 39:
      
      
      
      
      var $229 = HEAP[HEAP[$newE] + 20] + 12 * HEAP[$i];
      
      
      
      
      
      
      var $236 = HEAP[HEAP[HEAP[$oldE] + 20] + 12 * HEAP[$i] + 8];
      
      var $238 = HEAP[$newDtd_addr] + 80;
      var $239 = _poolCopyString($238, $236);
      var $240 = $229 + 8;
      HEAP[$240] = $239;
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$newE] + 20] + 12 * HEAP[$i] + 8] == 0) {
        __label__ = 40;
        break;
      } else {
        __label__ = 41;
        break;
      }
     case 40:
      HEAP[$0] = 0;
      __label__ = 51;
      break;
     case 41:
      __label__ = 43;
      break;
     case 42:
      
      
      
      
      
      var $254 = HEAP[HEAP[$newE] + 20] + 12 * HEAP[$i] + 8;
      HEAP[$254] = 0;
      __label__ = 43;
      break;
     case 43:
      
      var $256 = HEAP[$i] + 1;
      HEAP[$i] = $256;
      __label__ = 44;
      break;
     case 44:
      
      
      
      
      
      if (HEAP[HEAP[$newE] + 12] > HEAP[$i]) {
        __label__ = 38;
        break;
      } else {
        __label__ = 45;
        break;
      }
     case 45:
      __label__ = 25;
      break;
     case 46:
      
      var $263 = HEAP[$oldDtd_addr];
      
      var $265 = HEAP[$newDtd_addr] + 80;
      
      var $267 = HEAP[$newDtd_addr];
      var $268 = _copyEntityTable($267, $265, $263);
      
      if ($268 == 0) {
        __label__ = 47;
        break;
      } else {
        __label__ = 48;
        break;
      }
     case 47:
      HEAP[$0] = 0;
      __label__ = 51;
      break;
     case 48:
      
      var $271 = HEAP[$oldDtd_addr] + 132;
      
      var $273 = HEAP[$newDtd_addr] + 80;
      
      var $275 = HEAP[$newDtd_addr] + 132;
      var $276 = _copyEntityTable($275, $273, $271);
      
      if ($276 == 0) {
        __label__ = 49;
        break;
      } else {
        __label__ = 50;
        break;
      }
     case 49:
      HEAP[$0] = 0;
      __label__ = 51;
      break;
     case 50:
      
      
      var $280 = HEAP[HEAP[$oldDtd_addr] + 131];
      
      var $282 = HEAP[$newDtd_addr] + 131;
      HEAP[$282] = $280;
      
      
      var $285 = HEAP[HEAP[$oldDtd_addr] + 128];
      
      var $287 = HEAP[$newDtd_addr] + 128;
      HEAP[$287] = $285;
      
      
      var $290 = HEAP[HEAP[$oldDtd_addr] + 129];
      
      var $292 = HEAP[$newDtd_addr] + 129;
      HEAP[$292] = $290;
      
      
      var $295 = HEAP[HEAP[$oldDtd_addr] + 130];
      
      var $297 = HEAP[$newDtd_addr] + 130;
      HEAP[$297] = $295;
      
      
      var $300 = HEAP[HEAP[$oldDtd_addr] + 160];
      
      var $302 = HEAP[$newDtd_addr] + 160;
      HEAP[$302] = $300;
      
      
      var $305 = HEAP[HEAP[$oldDtd_addr] + 164];
      
      var $307 = HEAP[$newDtd_addr] + 164;
      HEAP[$307] = $305;
      
      
      var $310 = HEAP[HEAP[$oldDtd_addr] + 168];
      
      var $312 = HEAP[$newDtd_addr] + 168;
      HEAP[$312] = $310;
      
      
      var $315 = HEAP[HEAP[$oldDtd_addr] + 172];
      
      var $317 = HEAP[$newDtd_addr] + 172;
      HEAP[$317] = $315;
      
      
      var $320 = HEAP[HEAP[$oldDtd_addr] + 180];
      
      var $322 = HEAP[$newDtd_addr] + 180;
      HEAP[$322] = $320;
      
      
      var $325 = HEAP[HEAP[$oldDtd_addr] + 184];
      
      var $327 = HEAP[$newDtd_addr] + 184;
      HEAP[$327] = $325;
      HEAP[$0] = 1;
      __label__ = 51;
      break;
     case 51:
      var $328 = HEAP[$0];
      HEAP[$retval] = $328;
      __label__ = 52;
      break;
     case 52:
      var $retval53 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval53;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _copyEntityTable($newTable, $newPool, $oldTable) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 60;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 60);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $newTable_addr = __stackBase__;
      var $newPool_addr = __stackBase__ + 4;
      var $oldTable_addr = __stackBase__ + 8;
      var $retval = __stackBase__ + 12;
      var $0 = __stackBase__ + 16;
      var $iter = __stackBase__ + 20;
      var $cachedOldBase = __stackBase__ + 28;
      var $cachedNewBase = __stackBase__ + 32;
      var $newE = __stackBase__ + 36;
      var $name = __stackBase__ + 40;
      var $oldE = __stackBase__ + 44;
      var $tem = __stackBase__ + 48;
      var $tem20 = __stackBase__ + 52;
      var $tem25 = __stackBase__ + 56;
      
      HEAP[$newTable_addr] = $newTable;
      HEAP[$newPool_addr] = $newPool;
      HEAP[$oldTable_addr] = $oldTable;
      HEAP[$cachedOldBase] = 0;
      HEAP[$cachedNewBase] = 0;
      var $1 = HEAP[$oldTable_addr];
      _hashTableIterInit($iter, $1);
      __label__ = 1;
      break;
     case 1:
      var $2 = _hashTableIterNext($iter);
      
      HEAP[$oldE] = $2;
      
      
      if (HEAP[$oldE] == 0) {
        __label__ = 28;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      
      
      var $8 = HEAP[HEAP[$oldE]];
      var $9 = HEAP[$newPool_addr];
      var $10 = _poolCopyString($9, $8);
      HEAP[$name] = $10;
      
      
      if (HEAP[$name] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      HEAP[$0] = 0;
      __label__ = 29;
      break;
     case 4:
      var $13 = HEAP[$newTable_addr];
      var $14 = HEAP[$name];
      var $15 = _lookup($13, $14, 36);
      var $16 = $15;
      HEAP[$newE] = $16;
      
      
      if (HEAP[$newE] == 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      HEAP[$0] = 0;
      __label__ = 29;
      break;
     case 6:
      
      
      
      
      if (HEAP[HEAP[$oldE] + 16] != 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 20;
        break;
      }
     case 7:
      
      
      var $25 = HEAP[HEAP[$oldE] + 16];
      var $26 = HEAP[$newPool_addr];
      var $27 = _poolCopyString($26, $25);
      HEAP[$tem] = $27;
      
      
      if (HEAP[$tem] == 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      HEAP[$0] = 0;
      __label__ = 29;
      break;
     case 9:
      
      var $31 = HEAP[$newE] + 16;
      var $32 = HEAP[$tem];
      HEAP[$31] = $32;
      
      
      
      
      if (HEAP[HEAP[$oldE] + 20] != 0) {
        __label__ = 10;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 10:
      
      
      
      
      
      if (HEAP[HEAP[$oldE] + 20] == HEAP[$cachedOldBase]) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      
      var $43 = HEAP[$newE] + 20;
      var $44 = HEAP[$cachedNewBase];
      HEAP[$43] = $44;
      __label__ = 15;
      break;
     case 12:
      
      
      var $47 = HEAP[HEAP[$oldE] + 20];
      HEAP[$cachedOldBase] = $47;
      var $48 = HEAP[$newPool_addr];
      var $49 = HEAP[$cachedOldBase];
      var $50 = _poolCopyString($48, $49);
      HEAP[$tem] = $50;
      
      
      if (HEAP[$tem] == 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      HEAP[$0] = 0;
      __label__ = 29;
      break;
     case 14:
      
      var $54 = HEAP[$newE] + 20;
      var $55 = HEAP[$tem];
      HEAP[$54] = $55;
      
      
      var $58 = HEAP[HEAP[$newE] + 20];
      HEAP[$cachedNewBase] = $58;
      __label__ = 15;
      break;
     case 15:
      
      
      
      
      if (HEAP[HEAP[$oldE] + 24] != 0) {
        __label__ = 16;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 16:
      
      
      var $65 = HEAP[HEAP[$oldE] + 24];
      var $66 = HEAP[$newPool_addr];
      var $67 = _poolCopyString($66, $65);
      HEAP[$tem] = $67;
      
      
      if (HEAP[$tem] == 0) {
        __label__ = 17;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 17:
      HEAP[$0] = 0;
      __label__ = 29;
      break;
     case 18:
      
      var $71 = HEAP[$newE] + 24;
      var $72 = HEAP[$tem];
      HEAP[$71] = $72;
      __label__ = 19;
      break;
     case 19:
      __label__ = 23;
      break;
     case 20:
      
      
      var $75 = HEAP[HEAP[$oldE] + 8];
      
      
      var $78 = HEAP[HEAP[$oldE] + 4];
      var $79 = HEAP[$newPool_addr];
      var $80 = _poolCopyStringN($79, $78, $75);
      HEAP[$tem20] = $80;
      
      
      if (HEAP[$tem20] == 0) {
        __label__ = 21;
        break;
      } else {
        __label__ = 22;
        break;
      }
     case 21:
      HEAP[$0] = 0;
      __label__ = 29;
      break;
     case 22:
      
      var $84 = HEAP[$newE] + 4;
      var $85 = HEAP[$tem20];
      HEAP[$84] = $85;
      
      
      var $88 = HEAP[HEAP[$oldE] + 8];
      
      var $90 = HEAP[$newE] + 8;
      HEAP[$90] = $88;
      __label__ = 23;
      break;
     case 23:
      
      
      
      
      if (HEAP[HEAP[$oldE] + 28] != 0) {
        __label__ = 24;
        break;
      } else {
        __label__ = 27;
        break;
      }
     case 24:
      
      
      var $97 = HEAP[HEAP[$oldE] + 28];
      var $98 = HEAP[$newPool_addr];
      var $99 = _poolCopyString($98, $97);
      HEAP[$tem25] = $99;
      
      
      if (HEAP[$tem25] == 0) {
        __label__ = 25;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 25:
      HEAP[$0] = 0;
      __label__ = 29;
      break;
     case 26:
      
      var $103 = HEAP[$newE] + 28;
      var $104 = HEAP[$tem25];
      HEAP[$103] = $104;
      __label__ = 27;
      break;
     case 27:
      
      
      var $107 = HEAP[HEAP[$oldE] + 33];
      
      var $109 = HEAP[$newE] + 33;
      HEAP[$109] = $107;
      
      
      var $112 = HEAP[HEAP[$oldE] + 34];
      
      var $114 = HEAP[$newE] + 34;
      HEAP[$114] = $112;
      __label__ = 1;
      break;
     case 28:
      HEAP[$0] = 1;
      __label__ = 29;
      break;
     case 29:
      var $115 = HEAP[$0];
      HEAP[$retval] = $115;
      __label__ = 30;
      break;
     case 30:
      var $retval31 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval31;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _keyeq($s1, $s2) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $s1_addr = __stackBase__;
      var $s2_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      
      HEAP[$s1_addr] = $s1;
      HEAP[$s2_addr] = $s2;
      __label__ = 4;
      break;
     case 1:
      
      
      
      if (HEAP[HEAP[$s1_addr]] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      HEAP[$0] = 1;
      __label__ = 6;
      break;
     case 3:
      
      var $5 = HEAP[$s1_addr] + 1;
      HEAP[$s1_addr] = $5;
      
      var $7 = HEAP[$s2_addr] + 1;
      HEAP[$s2_addr] = $7;
      __label__ = 4;
      break;
     case 4:
      
      
      
      
      
      if (HEAP[HEAP[$s1_addr]] == HEAP[HEAP[$s2_addr]]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 5:
      HEAP[$0] = 0;
      __label__ = 6;
      break;
     case 6:
      var $13 = HEAP[$0];
      HEAP[$retval] = $13;
      __label__ = 7;
      break;
     case 7:
      
      var $retval67 = HEAP[$retval] & 255;
      STACKTOP = __stackBase__;
      return $retval67;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _hash($s) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $s_addr = __stackBase__;
      var $retval = __stackBase__ + 4;
      var $0 = __stackBase__ + 8;
      var $h = __stackBase__ + 12;
      
      HEAP[$s_addr] = $s;
      HEAP[$h] = 0;
      __label__ = 2;
      break;
     case 1:
      
      
      
      
      
      var $6 = HEAP[$h] * 1000003 ^ HEAP[HEAP[$s_addr]];
      HEAP[$h] = $6;
      
      var $8 = HEAP[$s_addr] + 1;
      HEAP[$s_addr] = $8;
      __label__ = 2;
      break;
     case 2:
      
      
      
      if (HEAP[HEAP[$s_addr]] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 3:
      var $12 = HEAP[$h];
      HEAP[$0] = $12;
      var $13 = HEAP[$0];
      HEAP[$retval] = $13;
      __label__ = 4;
      break;
     case 4:
      var $retval3 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval3;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _lookup($table, $name, $createSize) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 74;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 74);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $table_addr = __stackBase__;
      var $name_addr = __stackBase__ + 4;
      var $createSize_addr = __stackBase__ + 8;
      var $retval = __stackBase__ + 12;
      var $iftmp_299 = __stackBase__ + 16;
      var $iftmp_298 = __stackBase__ + 20;
      var $iftmp_297 = __stackBase__ + 24;
      var $0 = __stackBase__ + 28;
      var $i = __stackBase__ + 32;
      var $tsize = __stackBase__ + 36;
      var $h = __stackBase__ + 40;
      var $mask = __stackBase__ + 44;
      var $step = __stackBase__ + 48;
      var $newPower = __stackBase__ + 49;
      var $newSize = __stackBase__ + 50;
      var $newMask = __stackBase__ + 54;
      var $tsize19 = __stackBase__ + 58;
      var $newV = __stackBase__ + 62;
      var $newHash = __stackBase__ + 66;
      var $j = __stackBase__ + 70;
      
      HEAP[$table_addr] = $table;
      HEAP[$name_addr] = $name;
      HEAP[$createSize_addr] = $createSize;
      
      
      
      
      if (HEAP[HEAP[$table_addr] + 8] == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 1:
      
      
      if (HEAP[$createSize_addr] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      HEAP[$0] = 0;
      __label__ = 42;
      break;
     case 3:
      
      var $8 = HEAP[$table_addr] + 4;
      HEAP[$8] = 6;
      
      var $10 = HEAP[$table_addr] + 8;
      HEAP[$10] = 64;
      
      
      
      var $14 = HEAP[HEAP[$table_addr] + 8] * 4;
      HEAP[$tsize] = $14;
      
      
      
      
      var $19 = HEAP[HEAP[HEAP[$table_addr] + 16]];
      var $20 = HEAP[$tsize];
      var $21 = FUNCTION_TABLE[$19]($20);
      var $22 = $21;
      
      var $24 = HEAP[$table_addr];
      HEAP[$24] = $22;
      
      
      
      
      if (HEAP[HEAP[$table_addr]] == 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      
      var $30 = HEAP[$table_addr] + 8;
      HEAP[$30] = 0;
      HEAP[$0] = 0;
      __label__ = 42;
      break;
     case 5:
      
      
      
      var $34 = HEAP[$tsize];
      var $35 = HEAP[HEAP[$table_addr]];
      _llvm_memset_p0i8_i32($35, 0, $34, 1, 0);
      var $36 = HEAP[$name_addr];
      var $37 = _hash($36);
      
      
      
      
      var $42 = $37 & HEAP[HEAP[$table_addr] + 8] - 1;
      HEAP[$i] = $42;
      __label__ = 39;
      break;
     case 6:
      var $43 = HEAP[$name_addr];
      var $44 = _hash($43);
      HEAP[$h] = $44;
      
      
      
      var $48 = HEAP[HEAP[$table_addr] + 8] - 1;
      HEAP[$mask] = $48;
      HEAP[$step] = 0;
      
      
      var $51 = HEAP[$h] & HEAP[$mask];
      HEAP[$i] = $51;
      __label__ = 14;
      break;
     case 7:
      
      
      
      
      
      
      
      var $59 = HEAP[HEAP[HEAP[HEAP[$table_addr]] + 4 * HEAP[$i]]];
      var $60 = HEAP[$name_addr];
      var $61 = _keyeq($60, $59);
      
      if ($61 != 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      
      
      
      
      
      var $68 = HEAP[HEAP[HEAP[$table_addr]] + 4 * HEAP[$i]];
      HEAP[$0] = $68;
      __label__ = 42;
      break;
     case 9:
      
      
      if (HEAP[$step] == 0) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      
      var $not = HEAP[$mask] ^ -1;
      
      
      
      
      
      
      
      
      
      
      
      
      
      var $85 = ($not & HEAP[$h]) >>> HEAP[HEAP[$table_addr] + 4] - 1 & 255 & (HEAP[$mask] >>> 2 & 255) | 1;
      HEAP[$step] = $85;
      __label__ = 11;
      break;
     case 11:
      
      
      
      
      if (HEAP[$step] > HEAP[$i]) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      
      
      
      
      
      
      
      var $97 = HEAP[HEAP[$table_addr] + 8] - HEAP[$step] + HEAP[$i];
      HEAP[$i] = $97;
      var $98 = HEAP[$i];
      HEAP[$iftmp_297] = $98;
      __label__ = 14;
      break;
     case 13:
      
      
      
      var $102 = HEAP[$i] - HEAP[$step];
      HEAP[$i] = $102;
      var $103 = HEAP[$i];
      HEAP[$iftmp_297] = $103;
      __label__ = 14;
      break;
     case 14:
      
      
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$table_addr]] + 4 * HEAP[$i]] != 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 15:
      
      
      if (HEAP[$createSize_addr] == 0) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      HEAP[$0] = 0;
      __label__ = 42;
      break;
     case 17:
      
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$table_addr] + 12] >>> HEAP[HEAP[$table_addr] + 4] - 1 != 0) {
        __label__ = 18;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 18:
      
      
      
      var $126 = HEAP[HEAP[$table_addr] + 4] + 1;
      HEAP[$newPower] = $126;
      
      
      var $129 = 1 << HEAP[$newPower];
      HEAP[$newSize] = $129;
      
      var $131 = HEAP[$newSize] - 1;
      HEAP[$newMask] = $131;
      
      var $133 = HEAP[$newSize] * 4;
      HEAP[$tsize19] = $133;
      
      
      
      
      var $138 = HEAP[HEAP[HEAP[$table_addr] + 16]];
      var $139 = HEAP[$tsize19];
      var $140 = FUNCTION_TABLE[$138]($139);
      var $141 = $140;
      HEAP[$newV] = $141;
      
      
      if (HEAP[$newV] == 0) {
        __label__ = 19;
        break;
      } else {
        __label__ = 20;
        break;
      }
     case 19:
      HEAP[$0] = 0;
      __label__ = 42;
      break;
     case 20:
      
      var $145 = HEAP[$tsize19];
      var $146 = HEAP[$newV];
      _llvm_memset_p0i8_i32($146, 0, $145, 1, 0);
      HEAP[$i] = 0;
      __label__ = 31;
      break;
     case 21:
      
      
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$table_addr]] + 4 * HEAP[$i]] != 0) {
        __label__ = 22;
        break;
      } else {
        __label__ = 30;
        break;
      }
     case 22:
      
      
      
      
      
      
      
      var $161 = HEAP[HEAP[HEAP[HEAP[$table_addr]] + 4 * HEAP[$i]]];
      var $162 = _hash($161);
      HEAP[$newHash] = $162;
      
      
      var $165 = HEAP[$newHash] & HEAP[$newMask];
      HEAP[$j] = $165;
      HEAP[$step] = 0;
      __label__ = 28;
      break;
     case 23:
      
      
      if (HEAP[$step] == 0) {
        __label__ = 24;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 24:
      
      var $not26 = HEAP[$newMask] ^ -1;
      
      
      
      
      
      
      
      
      
      
      
      var $180 = ($not26 & HEAP[$newHash]) >>> HEAP[$newPower] - 1 & 255 & (HEAP[$newMask] >>> 2 & 255) | 1;
      HEAP[$step] = $180;
      __label__ = 25;
      break;
     case 25:
      
      
      
      
      if (HEAP[$step] > HEAP[$j]) {
        __label__ = 26;
        break;
      } else {
        __label__ = 27;
        break;
      }
     case 26:
      
      
      
      
      
      var $190 = HEAP[$newSize] - HEAP[$step] + HEAP[$j];
      HEAP[$j] = $190;
      var $191 = HEAP[$j];
      HEAP[$iftmp_298] = $191;
      __label__ = 28;
      break;
     case 27:
      
      
      
      var $195 = HEAP[$j] - HEAP[$step];
      HEAP[$j] = $195;
      var $196 = HEAP[$j];
      HEAP[$iftmp_298] = $196;
      __label__ = 28;
      break;
     case 28:
      
      
      
      
      
      if (HEAP[HEAP[$newV] + 4 * HEAP[$j]] != 0) {
        __label__ = 23;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 29:
      
      
      
      
      
      var $207 = HEAP[HEAP[HEAP[$table_addr]] + 4 * HEAP[$i]];
      
      
      var $210 = HEAP[$newV] + 4 * HEAP[$j];
      HEAP[$210] = $207;
      __label__ = 30;
      break;
     case 30:
      
      var $212 = HEAP[$i] + 1;
      HEAP[$i] = $212;
      __label__ = 31;
      break;
     case 31:
      
      
      
      
      
      if (HEAP[HEAP[$table_addr] + 8] > HEAP[$i]) {
        __label__ = 21;
        break;
      } else {
        __label__ = 32;
        break;
      }
     case 32:
      
      
      
      
      var $222 = HEAP[HEAP[HEAP[$table_addr] + 16] + 8];
      
      
      
      var $226 = HEAP[HEAP[$table_addr]];
      FUNCTION_TABLE[$222]($226);
      
      var $228 = HEAP[$table_addr];
      var $229 = HEAP[$newV];
      HEAP[$228] = $229;
      
      var $231 = HEAP[$table_addr] + 4;
      var $232 = HEAP[$newPower];
      HEAP[$231] = $232;
      
      var $234 = HEAP[$table_addr] + 8;
      var $235 = HEAP[$newSize];
      HEAP[$234] = $235;
      
      
      var $238 = HEAP[$h] & HEAP[$newMask];
      HEAP[$i] = $238;
      HEAP[$step] = 0;
      __label__ = 38;
      break;
     case 33:
      
      
      if (HEAP[$step] == 0) {
        __label__ = 34;
        break;
      } else {
        __label__ = 35;
        break;
      }
     case 34:
      
      var $not38 = HEAP[$newMask] ^ -1;
      
      
      
      
      
      
      
      
      
      
      
      var $253 = ($not38 & HEAP[$h]) >>> HEAP[$newPower] - 1 & 255 & (HEAP[$newMask] >>> 2 & 255) | 1;
      HEAP[$step] = $253;
      __label__ = 35;
      break;
     case 35:
      
      
      
      
      if (HEAP[$step] > HEAP[$i]) {
        __label__ = 36;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 36:
      
      
      
      
      
      var $263 = HEAP[$newSize] - HEAP[$step] + HEAP[$i];
      HEAP[$i] = $263;
      var $264 = HEAP[$i];
      HEAP[$iftmp_299] = $264;
      __label__ = 38;
      break;
     case 37:
      
      
      
      var $268 = HEAP[$i] - HEAP[$step];
      HEAP[$i] = $268;
      var $269 = HEAP[$i];
      HEAP[$iftmp_299] = $269;
      __label__ = 38;
      break;
     case 38:
      
      
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$table_addr]] + 4 * HEAP[$i]] != 0) {
        __label__ = 33;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 39:
      
      
      var $279 = HEAP[HEAP[$table_addr]];
      
      
      
      
      var $284 = HEAP[HEAP[HEAP[$table_addr] + 16]];
      var $285 = HEAP[$createSize_addr];
      var $286 = FUNCTION_TABLE[$284]($285);
      var $287 = $286;
      
      var $289 = $279 + 4 * HEAP[$i];
      HEAP[$289] = $287;
      
      
      
      
      
      
      
      if (HEAP[HEAP[HEAP[$table_addr]] + 4 * HEAP[$i]] == 0) {
        __label__ = 40;
        break;
      } else {
        __label__ = 41;
        break;
      }
     case 40:
      HEAP[$0] = 0;
      __label__ = 42;
      break;
     case 41:
      
      
      
      
      
      
      var $303 = HEAP[$createSize_addr];
      var $304 = HEAP[HEAP[HEAP[$table_addr]] + 4 * HEAP[$i]];
      _llvm_memset_p0i8_i32($304, 0, $303, 1, 0);
      
      
      
      
      
      
      var $311 = HEAP[HEAP[HEAP[$table_addr]] + 4 * HEAP[$i]];
      var $312 = HEAP[$name_addr];
      HEAP[$311] = $312;
      
      
      
      var $316 = HEAP[HEAP[$table_addr] + 12] + 1;
      
      var $318 = HEAP[$table_addr] + 12;
      HEAP[$318] = $316;
      
      
      
      
      
      var $324 = HEAP[HEAP[HEAP[$table_addr]] + 4 * HEAP[$i]];
      HEAP[$0] = $324;
      __label__ = 42;
      break;
     case 42:
      var $325 = HEAP[$0];
      HEAP[$retval] = $325;
      __label__ = 43;
      break;
     case 43:
      var $retval48 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval48;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _hashTableClear($table) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $table_addr = __stackBase__;
      var $i = __stackBase__ + 4;
      
      HEAP[$table_addr] = $table;
      HEAP[$i] = 0;
      __label__ = 2;
      break;
     case 1:
      
      
      
      
      var $4 = HEAP[HEAP[HEAP[$table_addr] + 16] + 8];
      
      
      
      
      
      
      var $11 = HEAP[HEAP[HEAP[$table_addr]] + 4 * HEAP[$i]];
      FUNCTION_TABLE[$4]($11);
      
      
      
      
      var $16 = HEAP[HEAP[$table_addr]] + 4 * HEAP[$i];
      HEAP[$16] = 0;
      
      var $18 = HEAP[$i] + 1;
      HEAP[$i] = $18;
      __label__ = 2;
      break;
     case 2:
      
      
      
      
      
      if (HEAP[HEAP[$table_addr] + 8] > HEAP[$i]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 3:
      
      var $25 = HEAP[$table_addr] + 12;
      HEAP[$25] = 0;
      __label__ = 4;
      break;
     case 4:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _hashTableDestroy($table) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $table_addr = __stackBase__;
      var $i = __stackBase__ + 4;
      
      HEAP[$table_addr] = $table;
      HEAP[$i] = 0;
      __label__ = 2;
      break;
     case 1:
      
      
      
      
      var $4 = HEAP[HEAP[HEAP[$table_addr] + 16] + 8];
      
      
      
      
      
      
      var $11 = HEAP[HEAP[HEAP[$table_addr]] + 4 * HEAP[$i]];
      FUNCTION_TABLE[$4]($11);
      
      var $13 = HEAP[$i] + 1;
      HEAP[$i] = $13;
      __label__ = 2;
      break;
     case 2:
      
      
      
      
      
      if (HEAP[HEAP[$table_addr] + 8] > HEAP[$i]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 3:
      
      
      
      
      var $23 = HEAP[HEAP[HEAP[$table_addr] + 16] + 8];
      
      
      
      var $27 = HEAP[HEAP[$table_addr]];
      FUNCTION_TABLE[$23]($27);
      __label__ = 4;
      break;
     case 4:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _hashTableInit($p, $ms) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $p_addr = __stackBase__;
      var $ms_addr = __stackBase__ + 4;
      
      HEAP[$p_addr] = $p;
      HEAP[$ms_addr] = $ms;
      
      var $1 = HEAP[$p_addr] + 4;
      HEAP[$1] = 0;
      
      var $3 = HEAP[$p_addr] + 8;
      HEAP[$3] = 0;
      
      var $5 = HEAP[$p_addr] + 12;
      HEAP[$5] = 0;
      
      var $7 = HEAP[$p_addr];
      HEAP[$7] = 0;
      
      var $9 = HEAP[$p_addr] + 16;
      var $10 = HEAP[$ms_addr];
      HEAP[$9] = $10;
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _hashTableIterInit($iter, $table) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $iter_addr = __stackBase__;
      var $table_addr = __stackBase__ + 4;
      
      HEAP[$iter_addr] = $iter;
      HEAP[$table_addr] = $table;
      
      
      var $2 = HEAP[HEAP[$table_addr]];
      
      var $4 = HEAP[$iter_addr];
      HEAP[$4] = $2;
      
      
      
      
      
      
      var $11 = HEAP[HEAP[$iter_addr]] + 4 * HEAP[HEAP[$table_addr] + 8];
      
      var $13 = HEAP[$iter_addr] + 4;
      HEAP[$13] = $11;
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _hashTableIterNext($iter) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $iter_addr = __stackBase__;
      var $retval = __stackBase__ + 4;
      var $0 = __stackBase__ + 8;
      var $tem = __stackBase__ + 12;
      
      HEAP[$iter_addr] = $iter;
      __label__ = 3;
      break;
     case 1:
      
      
      var $3 = HEAP[HEAP[$iter_addr]];
      var $4 = HEAP[$3];
      HEAP[$tem] = $4;
      var $5 = $3 + 4;
      
      var $7 = HEAP[$iter_addr];
      HEAP[$7] = $5;
      
      
      if (HEAP[$tem] != 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      var $10 = HEAP[$tem];
      HEAP[$0] = $10;
      __label__ = 5;
      break;
     case 3:
      
      
      
      
      
      
      
      if (HEAP[HEAP[$iter_addr]] != HEAP[HEAP[$iter_addr] + 4]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 4:
      HEAP[$0] = 0;
      __label__ = 5;
      break;
     case 5:
      var $18 = HEAP[$0];
      HEAP[$retval] = $18;
      __label__ = 6;
      break;
     case 6:
      var $retval5 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval5;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _poolInit($pool, $ms) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $pool_addr = __stackBase__;
      var $ms_addr = __stackBase__ + 4;
      
      HEAP[$pool_addr] = $pool;
      HEAP[$ms_addr] = $ms;
      
      var $1 = HEAP[$pool_addr];
      HEAP[$1] = 0;
      
      var $3 = HEAP[$pool_addr] + 4;
      HEAP[$3] = 0;
      
      var $5 = HEAP[$pool_addr] + 16;
      HEAP[$5] = 0;
      
      var $7 = HEAP[$pool_addr] + 12;
      HEAP[$7] = 0;
      
      var $9 = HEAP[$pool_addr] + 8;
      HEAP[$9] = 0;
      
      var $11 = HEAP[$pool_addr] + 20;
      var $12 = HEAP[$ms_addr];
      HEAP[$11] = $12;
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _poolClear($pool) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 12;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $pool_addr = __stackBase__;
      var $p = __stackBase__ + 4;
      var $tem = __stackBase__ + 8;
      
      HEAP[$pool_addr] = $pool;
      
      
      
      
      if (HEAP[HEAP[$pool_addr] + 4] == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      
      
      var $6 = HEAP[HEAP[$pool_addr]];
      
      var $8 = HEAP[$pool_addr] + 4;
      HEAP[$8] = $6;
      __label__ = 5;
      break;
     case 2:
      
      
      var $11 = HEAP[HEAP[$pool_addr]];
      HEAP[$p] = $11;
      __label__ = 4;
      break;
     case 3:
      
      
      var $14 = HEAP[HEAP[$p]];
      HEAP[$tem] = $14;
      
      
      var $17 = HEAP[HEAP[$pool_addr] + 4];
      
      var $19 = HEAP[$p];
      HEAP[$19] = $17;
      
      var $21 = HEAP[$pool_addr] + 4;
      var $22 = HEAP[$p];
      HEAP[$21] = $22;
      var $23 = HEAP[$tem];
      HEAP[$p] = $23;
      __label__ = 4;
      break;
     case 4:
      
      
      if (HEAP[$p] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 5:
      
      var $27 = HEAP[$pool_addr];
      HEAP[$27] = 0;
      
      var $29 = HEAP[$pool_addr] + 16;
      HEAP[$29] = 0;
      
      var $31 = HEAP[$pool_addr] + 12;
      HEAP[$31] = 0;
      
      var $33 = HEAP[$pool_addr] + 8;
      HEAP[$33] = 0;
      __label__ = 6;
      break;
     case 6:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _poolDestroy($pool) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $pool_addr = __stackBase__;
      var $p = __stackBase__ + 4;
      var $tem = __stackBase__ + 8;
      var $tem4 = __stackBase__ + 12;
      
      HEAP[$pool_addr] = $pool;
      
      
      var $2 = HEAP[HEAP[$pool_addr]];
      HEAP[$p] = $2;
      __label__ = 2;
      break;
     case 1:
      
      
      var $5 = HEAP[HEAP[$p]];
      HEAP[$tem] = $5;
      
      
      
      
      var $10 = HEAP[HEAP[HEAP[$pool_addr] + 20] + 8];
      
      var $12 = HEAP[$p];
      FUNCTION_TABLE[$10]($12);
      var $13 = HEAP[$tem];
      HEAP[$p] = $13;
      __label__ = 2;
      break;
     case 2:
      
      
      if (HEAP[$p] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 3:
      
      
      var $18 = HEAP[HEAP[$pool_addr] + 4];
      HEAP[$p] = $18;
      __label__ = 5;
      break;
     case 4:
      
      
      var $21 = HEAP[HEAP[$p]];
      HEAP[$tem4] = $21;
      
      
      
      
      var $26 = HEAP[HEAP[HEAP[$pool_addr] + 20] + 8];
      
      var $28 = HEAP[$p];
      FUNCTION_TABLE[$26]($28);
      var $29 = HEAP[$tem4];
      HEAP[$p] = $29;
      __label__ = 5;
      break;
     case 5:
      
      
      if (HEAP[$p] != 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 6:
      __label__ = 7;
      break;
     case 7:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _poolAppend($pool, $enc, $ptr, $end) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 24;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $pool_addr = __stackBase__;
      var $enc_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      
      HEAP[$pool_addr] = $pool;
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      
      
      
      
      if (HEAP[HEAP[$pool_addr] + 12] == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      var $5 = HEAP[$pool_addr];
      var $6 = _poolGrow($5);
      
      if ($6 == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      HEAP[$0] = 0;
      __label__ = 8;
      break;
     case 3:
      
      
      var $10 = HEAP[HEAP[$enc_addr] + 60];
      
      
      var $13 = HEAP[HEAP[$pool_addr] + 8];
      
      var $15 = HEAP[$pool_addr] + 12;
      var $16 = HEAP[$enc_addr];
      var $17 = HEAP[$end_addr];
      FUNCTION_TABLE[$10]($16, $ptr_addr, $17, $15, $13);
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 7;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 4:
      var $21 = HEAP[$pool_addr];
      var $22 = _poolGrow($21);
      
      if ($22 == 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      HEAP[$0] = 0;
      __label__ = 8;
      break;
     case 6:
      __label__ = 3;
      break;
     case 7:
      
      
      var $26 = HEAP[HEAP[$pool_addr] + 16];
      HEAP[$0] = $26;
      __label__ = 8;
      break;
     case 8:
      var $27 = HEAP[$0];
      HEAP[$retval] = $27;
      __label__ = 9;
      break;
     case 9:
      var $retval8 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval8;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _poolCopyString($pool, $s) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 17;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 17);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $pool_addr = __stackBase__;
      var $s_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      var $iftmp_301 = __stackBase__ + 16;
      
      HEAP[$pool_addr] = $pool;
      HEAP[$s_addr] = $s;
      __label__ = 1;
      break;
     case 1:
      
      
      
      
      
      
      
      if (HEAP[HEAP[$pool_addr] + 12] != HEAP[HEAP[$pool_addr] + 8]) {
        __label__ = 3;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      var $8 = HEAP[$pool_addr];
      var $9 = _poolGrow($8);
      
      if ($9 != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      
      var $13 = HEAP[HEAP[$pool_addr] + 12];
      
      var $15 = HEAP[HEAP[$s_addr]];
      HEAP[$13] = $15;
      var $16 = $13 + 1;
      
      var $18 = HEAP[$pool_addr] + 12;
      HEAP[$18] = $16;
      HEAP[$iftmp_301] = 0;
      __label__ = 5;
      break;
     case 4:
      HEAP[$iftmp_301] = 1;
      __label__ = 5;
      break;
     case 5:
      
      
      if (HEAP[$iftmp_301] != 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      HEAP[$0] = 0;
      __label__ = 9;
      break;
     case 7:
      
      
      
      var $23 = HEAP[HEAP[$s_addr]] != 0;
      
      var $25 = HEAP[$s_addr] + 1;
      HEAP[$s_addr] = $25;
      
      if ($23 != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 8:
      
      
      var $28 = HEAP[HEAP[$pool_addr] + 16];
      HEAP[$s_addr] = $28;
      
      
      var $31 = HEAP[HEAP[$pool_addr] + 12];
      
      var $33 = HEAP[$pool_addr] + 16;
      HEAP[$33] = $31;
      var $34 = HEAP[$s_addr];
      HEAP[$0] = $34;
      __label__ = 9;
      break;
     case 9:
      var $35 = HEAP[$0];
      HEAP[$retval] = $35;
      __label__ = 10;
      break;
     case 10:
      var $retval10 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval10;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _poolCopyStringN($pool, $s, $n) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 21;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 21);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $pool_addr = __stackBase__;
      var $s_addr = __stackBase__ + 4;
      var $n_addr = __stackBase__ + 8;
      var $retval = __stackBase__ + 12;
      var $iftmp_302 = __stackBase__ + 16;
      var $0 = __stackBase__ + 17;
      
      HEAP[$pool_addr] = $pool;
      HEAP[$s_addr] = $s;
      HEAP[$n_addr] = $n;
      
      
      
      
      if (HEAP[HEAP[$pool_addr] + 12] == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      var $5 = HEAP[$pool_addr];
      var $6 = _poolGrow($5);
      
      if ($6 == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      HEAP[$0] = 0;
      __label__ = 13;
      break;
     case 3:
      __label__ = 11;
      break;
     case 4:
      
      
      
      
      
      
      
      if (HEAP[HEAP[$pool_addr] + 12] != HEAP[HEAP[$pool_addr] + 8]) {
        __label__ = 6;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 5:
      var $15 = HEAP[$pool_addr];
      var $16 = _poolGrow($15);
      
      if ($16 != 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      
      
      var $20 = HEAP[HEAP[$pool_addr] + 12];
      
      var $22 = HEAP[HEAP[$s_addr]];
      HEAP[$20] = $22;
      var $23 = $20 + 1;
      
      var $25 = HEAP[$pool_addr] + 12;
      HEAP[$25] = $23;
      HEAP[$iftmp_302] = 0;
      __label__ = 8;
      break;
     case 7:
      HEAP[$iftmp_302] = 1;
      __label__ = 8;
      break;
     case 8:
      
      
      if (HEAP[$iftmp_302] != 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      HEAP[$0] = 0;
      __label__ = 13;
      break;
     case 10:
      
      var $28 = HEAP[$n_addr] - 1;
      HEAP[$n_addr] = $28;
      
      var $30 = HEAP[$s_addr] + 1;
      HEAP[$s_addr] = $30;
      __label__ = 11;
      break;
     case 11:
      
      
      if (HEAP[$n_addr] > 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 12:
      
      
      var $35 = HEAP[HEAP[$pool_addr] + 16];
      HEAP[$s_addr] = $35;
      
      
      var $38 = HEAP[HEAP[$pool_addr] + 12];
      
      var $40 = HEAP[$pool_addr] + 16;
      HEAP[$40] = $38;
      var $41 = HEAP[$s_addr];
      HEAP[$0] = $41;
      __label__ = 13;
      break;
     case 13:
      var $42 = HEAP[$0];
      HEAP[$retval] = $42;
      __label__ = 14;
      break;
     case 14:
      var $retval13 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval13;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _poolAppendString($pool, $s) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 17;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 17);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $pool_addr = __stackBase__;
      var $s_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      var $iftmp_303 = __stackBase__ + 16;
      
      HEAP[$pool_addr] = $pool;
      HEAP[$s_addr] = $s;
      __label__ = 8;
      break;
     case 1:
      
      
      
      
      
      
      
      if (HEAP[HEAP[$pool_addr] + 12] != HEAP[HEAP[$pool_addr] + 8]) {
        __label__ = 3;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      var $8 = HEAP[$pool_addr];
      var $9 = _poolGrow($8);
      
      if ($9 != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      
      var $13 = HEAP[HEAP[$pool_addr] + 12];
      
      var $15 = HEAP[HEAP[$s_addr]];
      HEAP[$13] = $15;
      var $16 = $13 + 1;
      
      var $18 = HEAP[$pool_addr] + 12;
      HEAP[$18] = $16;
      HEAP[$iftmp_303] = 0;
      __label__ = 5;
      break;
     case 4:
      HEAP[$iftmp_303] = 1;
      __label__ = 5;
      break;
     case 5:
      
      
      if (HEAP[$iftmp_303] != 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      HEAP[$0] = 0;
      __label__ = 10;
      break;
     case 7:
      
      var $21 = HEAP[$s_addr] + 1;
      HEAP[$s_addr] = $21;
      __label__ = 8;
      break;
     case 8:
      
      
      
      if (HEAP[HEAP[$s_addr]] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 9:
      
      
      var $27 = HEAP[HEAP[$pool_addr] + 16];
      HEAP[$0] = $27;
      __label__ = 10;
      break;
     case 10:
      var $28 = HEAP[$0];
      HEAP[$retval] = $28;
      __label__ = 11;
      break;
     case 11:
      var $retval10 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval10;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _poolStoreString($pool, $enc, $ptr, $end) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 24;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $pool_addr = __stackBase__;
      var $enc_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      
      HEAP[$pool_addr] = $pool;
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      var $1 = HEAP[$pool_addr];
      var $2 = HEAP[$enc_addr];
      var $3 = HEAP[$ptr_addr];
      var $4 = HEAP[$end_addr];
      var $5 = _poolAppend($1, $2, $3, $4);
      
      if ($5 == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = 0;
      __label__ = 6;
      break;
     case 2:
      
      
      
      
      
      
      
      if (HEAP[HEAP[$pool_addr] + 12] == HEAP[HEAP[$pool_addr] + 8]) {
        __label__ = 3;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 3:
      var $14 = HEAP[$pool_addr];
      var $15 = _poolGrow($14);
      
      if ($15 == 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      HEAP[$0] = 0;
      __label__ = 6;
      break;
     case 5:
      
      
      var $19 = HEAP[HEAP[$pool_addr] + 12];
      HEAP[$19] = 0;
      var $20 = $19 + 1;
      
      var $22 = HEAP[$pool_addr] + 12;
      HEAP[$22] = $20;
      
      
      var $25 = HEAP[HEAP[$pool_addr] + 16];
      HEAP[$0] = $25;
      __label__ = 6;
      break;
     case 6:
      var $26 = HEAP[$0];
      HEAP[$retval] = $26;
      __label__ = 7;
      break;
     case 7:
      var $retval6 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval6;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _poolGrow($pool) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $pool_addr = __stackBase__;
      var $retval = __stackBase__ + 4;
      var $0 = __stackBase__ + 8;
      var $tem = __stackBase__ + 12;
      var $blockSize = __stackBase__ + 16;
      var $tem10 = __stackBase__ + 20;
      var $blockSize11 = __stackBase__ + 24;
      
      HEAP[$pool_addr] = $pool;
      
      
      
      
      if (HEAP[HEAP[$pool_addr] + 4] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 1:
      
      
      
      
      if (HEAP[HEAP[$pool_addr] + 16] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      
      var $11 = HEAP[HEAP[$pool_addr] + 4];
      
      var $13 = HEAP[$pool_addr];
      HEAP[$13] = $11;
      
      
      
      
      var $18 = HEAP[HEAP[HEAP[$pool_addr] + 4]];
      
      var $20 = HEAP[$pool_addr] + 4;
      HEAP[$20] = $18;
      
      
      
      var $24 = HEAP[HEAP[$pool_addr]];
      HEAP[$24] = 0;
      
      
      
      
      var $29 = HEAP[HEAP[$pool_addr]] + 8;
      
      var $31 = HEAP[$pool_addr] + 16;
      HEAP[$31] = $29;
      
      
      
      
      
      
      
      
      var $40 = HEAP[HEAP[$pool_addr] + 16] + HEAP[HEAP[HEAP[$pool_addr]] + 4];
      
      var $42 = HEAP[$pool_addr] + 8;
      HEAP[$42] = $40;
      
      
      var $45 = HEAP[HEAP[$pool_addr] + 16];
      
      var $47 = HEAP[$pool_addr] + 12;
      HEAP[$47] = $45;
      HEAP[$0] = 1;
      __label__ = 19;
      break;
     case 3:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$pool_addr] + 8] - HEAP[HEAP[$pool_addr] + 16] < HEAP[HEAP[HEAP[$pool_addr] + 4] + 4]) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      
      
      
      
      var $67 = HEAP[HEAP[HEAP[$pool_addr] + 4]];
      HEAP[$tem] = $67;
      
      
      
      
      
      var $73 = HEAP[HEAP[$pool_addr]];
      var $74 = HEAP[HEAP[$pool_addr] + 4];
      HEAP[$74] = $73;
      
      
      var $77 = HEAP[HEAP[$pool_addr] + 4];
      
      var $79 = HEAP[$pool_addr];
      HEAP[$79] = $77;
      
      var $81 = HEAP[$pool_addr] + 4;
      var $82 = HEAP[$tem];
      HEAP[$81] = $82;
      
      
      
      
      
      
      
      
      var $91 = HEAP[HEAP[$pool_addr] + 8] - HEAP[HEAP[$pool_addr] + 16];
      
      
      var $94 = HEAP[HEAP[$pool_addr] + 16];
      
      
      
      
      var $99 = HEAP[HEAP[$pool_addr]] + 8;
      _llvm_memcpy_p0i8_p0i8_i32($99, $94, $91, 1, 0);
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      var $114 = HEAP[HEAP[$pool_addr]] + 8 + (HEAP[HEAP[$pool_addr] + 12] - HEAP[HEAP[$pool_addr] + 16]);
      
      var $116 = HEAP[$pool_addr] + 12;
      HEAP[$116] = $114;
      
      
      
      
      var $121 = HEAP[HEAP[$pool_addr]] + 8;
      
      var $123 = HEAP[$pool_addr] + 16;
      HEAP[$123] = $121;
      
      
      
      
      
      
      
      
      var $132 = HEAP[HEAP[$pool_addr] + 16] + HEAP[HEAP[HEAP[$pool_addr]] + 4];
      
      var $134 = HEAP[$pool_addr] + 8;
      HEAP[$134] = $132;
      HEAP[$0] = 1;
      __label__ = 19;
      break;
     case 5:
      
      
      
      
      if (HEAP[HEAP[$pool_addr]] == 0) {
        __label__ = 10;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 6:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$pool_addr] + 16] != HEAP[HEAP[$pool_addr]] + 8) {
        __label__ = 10;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 7:
      
      
      
      
      
      
      
      
      
      var $157 = (HEAP[HEAP[$pool_addr] + 8] - HEAP[HEAP[$pool_addr] + 16]) * 2;
      HEAP[$blockSize] = $157;
      
      
      
      
      var $162 = HEAP[HEAP[HEAP[$pool_addr] + 20] + 4];
      
      var $164 = HEAP[$blockSize] + 8;
      
      
      
      var $168 = HEAP[HEAP[$pool_addr]];
      var $169 = FUNCTION_TABLE[$162]($168, $164);
      var $170 = $169;
      
      var $172 = HEAP[$pool_addr];
      HEAP[$172] = $170;
      
      
      
      
      if (HEAP[HEAP[$pool_addr]] == 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      HEAP[$0] = 0;
      __label__ = 19;
      break;
     case 9:
      
      
      
      var $180 = HEAP[HEAP[$pool_addr]] + 4;
      var $181 = HEAP[$blockSize];
      HEAP[$180] = $181;
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      var $196 = HEAP[HEAP[$pool_addr]] + 8 + (HEAP[HEAP[$pool_addr] + 12] - HEAP[HEAP[$pool_addr] + 16]);
      
      var $198 = HEAP[$pool_addr] + 12;
      HEAP[$198] = $196;
      
      
      
      
      var $203 = HEAP[HEAP[$pool_addr]] + 8;
      
      var $205 = HEAP[$pool_addr] + 16;
      HEAP[$205] = $203;
      
      
      
      
      var $210 = HEAP[HEAP[$pool_addr] + 16] + HEAP[$blockSize];
      
      var $212 = HEAP[$pool_addr] + 8;
      HEAP[$212] = $210;
      __label__ = 18;
      break;
     case 10:
      
      
      
      
      
      
      
      
      var $221 = HEAP[HEAP[$pool_addr] + 8] - HEAP[HEAP[$pool_addr] + 16];
      HEAP[$blockSize11] = $221;
      
      
      if (HEAP[$blockSize11] <= 1023) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      HEAP[$blockSize11] = 1024;
      __label__ = 13;
      break;
     case 12:
      
      var $225 = HEAP[$blockSize11] * 2;
      HEAP[$blockSize11] = $225;
      __label__ = 13;
      break;
     case 13:
      
      
      
      
      var $230 = HEAP[HEAP[HEAP[$pool_addr] + 20]];
      
      var $232 = HEAP[$blockSize11] + 8;
      var $233 = FUNCTION_TABLE[$230]($232);
      var $234 = $233;
      HEAP[$tem10] = $234;
      
      
      if (HEAP[$tem10] == 0) {
        __label__ = 14;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 14:
      HEAP[$0] = 0;
      __label__ = 19;
      break;
     case 15:
      
      var $238 = HEAP[$tem10] + 4;
      var $239 = HEAP[$blockSize11];
      HEAP[$238] = $239;
      
      
      var $242 = HEAP[HEAP[$pool_addr]];
      
      var $244 = HEAP[$tem10];
      HEAP[$244] = $242;
      
      var $246 = HEAP[$pool_addr];
      var $247 = HEAP[$tem10];
      HEAP[$246] = $247;
      
      
      
      
      
      
      
      if (HEAP[HEAP[$pool_addr] + 12] != HEAP[HEAP[$pool_addr] + 16]) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      
      
      
      
      
      
      
      
      var $263 = HEAP[HEAP[$pool_addr] + 12] - HEAP[HEAP[$pool_addr] + 16];
      
      
      var $266 = HEAP[HEAP[$pool_addr] + 16];
      
      
      var $269 = HEAP[$tem10] + 8;
      _llvm_memcpy_p0i8_p0i8_i32($269, $266, $263, 1, 0);
      __label__ = 17;
      break;
     case 17:
      
      
      
      
      
      
      
      
      
      
      
      
      var $282 = HEAP[$tem10] + 8 + (HEAP[HEAP[$pool_addr] + 12] - HEAP[HEAP[$pool_addr] + 16]);
      
      var $284 = HEAP[$pool_addr] + 12;
      HEAP[$284] = $282;
      
      
      var $287 = HEAP[$tem10] + 8;
      
      var $289 = HEAP[$pool_addr] + 16;
      HEAP[$289] = $287;
      
      
      
      
      var $294 = HEAP[$tem10] + 8 + HEAP[$blockSize11];
      
      var $296 = HEAP[$pool_addr] + 8;
      HEAP[$296] = $294;
      __label__ = 18;
      break;
     case 18:
      HEAP[$0] = 1;
      __label__ = 19;
      break;
     case 19:
      var $297 = HEAP[$0];
      HEAP[$retval] = $297;
      __label__ = 20;
      break;
     case 20:
      
      var $retval2122 = HEAP[$retval] & 255;
      STACKTOP = __stackBase__;
      return $retval2122;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _nextScaffoldPart($parser) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 32;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $retval = __stackBase__ + 4;
      var $0 = __stackBase__ + 8;
      var $dtd = __stackBase__ + 12;
      var $me = __stackBase__ + 16;
      var $next = __stackBase__ + 20;
      var $temp = __stackBase__ + 24;
      var $parent = __stackBase__ + 28;
      
      HEAP[$parser_addr] = $parser;
      
      
      var $3 = HEAP[HEAP[$parser_addr] + 356];
      HEAP[$dtd] = $3;
      
      
      
      
      if (HEAP[HEAP[$dtd] + 184] == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 1:
      
      
      
      var $11 = HEAP[HEAP[$parser_addr] + 12];
      
      
      
      var $15 = HEAP[HEAP[$parser_addr] + 468] * 4;
      var $16 = FUNCTION_TABLE[$11]($15);
      var $17 = $16;
      
      var $19 = HEAP[$dtd] + 184;
      HEAP[$19] = $17;
      
      
      
      
      if (HEAP[HEAP[$dtd] + 184] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      HEAP[$0] = -1;
      __label__ = 20;
      break;
     case 3:
      
      
      
      var $27 = HEAP[HEAP[$dtd] + 184];
      HEAP[$27] = 0;
      __label__ = 4;
      break;
     case 4:
      
      
      
      
      
      
      
      if (HEAP[HEAP[$dtd] + 176] >= HEAP[HEAP[$dtd] + 172]) {
        __label__ = 5;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 5:
      
      
      
      
      if (HEAP[HEAP[$dtd] + 164] != 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 6:
      
      
      
      var $42 = HEAP[HEAP[$parser_addr] + 12 + 4];
      
      
      
      var $46 = HEAP[HEAP[$dtd] + 172] * 56;
      
      
      
      var $50 = HEAP[HEAP[$dtd] + 164];
      var $51 = FUNCTION_TABLE[$42]($50, $46);
      var $52 = $51;
      HEAP[$temp] = $52;
      
      
      if (HEAP[$temp] == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      HEAP[$0] = -1;
      __label__ = 20;
      break;
     case 8:
      
      
      
      var $58 = HEAP[HEAP[$dtd] + 172] * 2;
      
      var $60 = HEAP[$dtd] + 172;
      HEAP[$60] = $58;
      __label__ = 12;
      break;
     case 9:
      
      
      
      var $64 = HEAP[HEAP[$parser_addr] + 12];
      var $65 = FUNCTION_TABLE[$64](896);
      var $66 = $65;
      HEAP[$temp] = $66;
      
      
      if (HEAP[$temp] == 0) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      HEAP[$0] = -1;
      __label__ = 20;
      break;
     case 11:
      
      var $70 = HEAP[$dtd] + 172;
      HEAP[$70] = 32;
      __label__ = 12;
      break;
     case 12:
      
      var $72 = HEAP[$dtd] + 164;
      var $73 = HEAP[$temp];
      HEAP[$72] = $73;
      __label__ = 13;
      break;
     case 13:
      
      
      var $76 = HEAP[HEAP[$dtd] + 176];
      HEAP[$next] = $76;
      var $77 = $76 + 1;
      
      var $79 = HEAP[$dtd] + 176;
      HEAP[$79] = $77;
      
      
      
      
      var $84 = HEAP[HEAP[$dtd] + 164] + 28 * HEAP[$next];
      HEAP[$me] = $84;
      
      
      
      
      if (HEAP[HEAP[$dtd] + 180] != 0) {
        __label__ = 14;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 14:
      
      
      
      
      
      
      
      
      
      
      
      
      var $101 = HEAP[HEAP[$dtd] + 164] + 28 * HEAP[HEAP[HEAP[$dtd] + 184] + 4 * (HEAP[HEAP[$dtd] + 180] - 1)];
      HEAP[$parent] = $101;
      
      
      
      
      if (HEAP[HEAP[$parent] + 16] != 0) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      
      
      
      
      
      
      
      var $113 = HEAP[HEAP[$dtd] + 164] + 28 * HEAP[HEAP[$parent] + 16] + 24;
      var $114 = HEAP[$next];
      HEAP[$113] = $114;
      __label__ = 16;
      break;
     case 16:
      
      
      
      
      if (HEAP[HEAP[$parent] + 20] == 0) {
        __label__ = 17;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 17:
      
      var $120 = HEAP[$parent] + 12;
      var $121 = HEAP[$next];
      HEAP[$120] = $121;
      __label__ = 18;
      break;
     case 18:
      
      var $123 = HEAP[$parent] + 16;
      var $124 = HEAP[$next];
      HEAP[$123] = $124;
      
      
      
      var $128 = HEAP[HEAP[$parent] + 20] + 1;
      
      var $130 = HEAP[$parent] + 20;
      HEAP[$130] = $128;
      __label__ = 19;
      break;
     case 19:
      
      var $132 = HEAP[$me] + 24;
      HEAP[$132] = 0;
      
      
      var $135 = HEAP[HEAP[$me] + 24];
      
      var $137 = HEAP[$me] + 20;
      HEAP[$137] = $135;
      
      
      var $140 = HEAP[HEAP[$me] + 20];
      
      var $142 = HEAP[$me] + 16;
      HEAP[$142] = $140;
      
      
      var $145 = HEAP[HEAP[$me] + 16];
      
      var $147 = HEAP[$me] + 12;
      HEAP[$147] = $145;
      var $148 = HEAP[$next];
      HEAP[$0] = $148;
      __label__ = 20;
      break;
     case 20:
      var $149 = HEAP[$0];
      HEAP[$retval] = $149;
      __label__ = 21;
      break;
     case 21:
      var $retval20 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval20;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _build_node($parser, $src_node, $dest, $contpos, $strpos) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 36;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $src_node_addr = __stackBase__ + 4;
      var $dest_addr = __stackBase__ + 8;
      var $contpos_addr = __stackBase__ + 12;
      var $strpos_addr = __stackBase__ + 16;
      var $dtd = __stackBase__ + 20;
      var $src = __stackBase__ + 24;
      var $i = __stackBase__ + 28;
      var $cn = __stackBase__ + 32;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$src_node_addr] = $src_node;
      HEAP[$dest_addr] = $dest;
      HEAP[$contpos_addr] = $contpos;
      HEAP[$strpos_addr] = $strpos;
      
      
      var $2 = HEAP[HEAP[$parser_addr] + 356];
      HEAP[$dtd] = $2;
      
      
      
      
      
      
      var $9 = HEAP[HEAP[HEAP[$dtd] + 164] + 28 * HEAP[$src_node_addr]];
      
      var $11 = HEAP[$dest_addr];
      HEAP[$11] = $9;
      
      
      
      
      
      
      var $18 = HEAP[HEAP[HEAP[$dtd] + 164] + 28 * HEAP[$src_node_addr] + 4];
      
      var $20 = HEAP[$dest_addr] + 4;
      HEAP[$20] = $18;
      
      
      
      
      if (HEAP[HEAP[$dest_addr]] == 4) {
        __label__ = 1;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 1:
      
      var $26 = HEAP[HEAP[$strpos_addr]];
      
      var $28 = HEAP[$dest_addr] + 8;
      HEAP[$28] = $26;
      
      
      
      
      
      
      var $35 = HEAP[HEAP[HEAP[$dtd] + 164] + 28 * HEAP[$src_node_addr] + 8];
      HEAP[$src] = $35;
      __label__ = 2;
      break;
     case 2:
      
      var $37 = HEAP[HEAP[$strpos_addr]];
      
      var $39 = HEAP[HEAP[$src]];
      HEAP[$37] = $39;
      var $40 = $37 + 1;
      var $41 = HEAP[$strpos_addr];
      HEAP[$41] = $40;
      
      
      
      if (HEAP[HEAP[$src]] == 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 3:
      
      var $46 = HEAP[$src] + 1;
      HEAP[$src] = $46;
      __label__ = 2;
      break;
     case 4:
      
      var $48 = HEAP[$dest_addr] + 12;
      HEAP[$48] = 0;
      
      var $50 = HEAP[$dest_addr] + 16;
      HEAP[$50] = 0;
      __label__ = 9;
      break;
     case 5:
      
      
      
      
      
      
      var $57 = HEAP[HEAP[HEAP[$dtd] + 164] + 28 * HEAP[$src_node_addr] + 20];
      
      var $59 = HEAP[$dest_addr] + 12;
      HEAP[$59] = $57;
      
      var $61 = HEAP[HEAP[$contpos_addr]];
      
      var $63 = HEAP[$dest_addr] + 16;
      HEAP[$63] = $61;
      
      
      
      
      
      var $69 = HEAP[HEAP[$contpos_addr]] + 20 * HEAP[HEAP[$dest_addr] + 12];
      var $70 = HEAP[$contpos_addr];
      HEAP[$70] = $69;
      HEAP[$i] = 0;
      
      
      
      
      
      
      var $77 = HEAP[HEAP[HEAP[$dtd] + 164] + 28 * HEAP[$src_node_addr] + 12];
      HEAP[$cn] = $77;
      __label__ = 7;
      break;
     case 6:
      
      
      
      
      var $82 = HEAP[HEAP[$dest_addr] + 16] + 20 * HEAP[$i];
      var $83 = HEAP[$parser_addr];
      var $84 = HEAP[$cn];
      var $85 = HEAP[$contpos_addr];
      var $86 = HEAP[$strpos_addr];
      _build_node($83, $84, $82, $85, $86);
      
      var $88 = HEAP[$i] + 1;
      HEAP[$i] = $88;
      
      
      
      
      
      
      var $95 = HEAP[HEAP[HEAP[$dtd] + 164] + 28 * HEAP[$cn] + 24];
      HEAP[$cn] = $95;
      __label__ = 7;
      break;
     case 7:
      
      
      
      
      
      if (HEAP[HEAP[$dest_addr] + 12] > HEAP[$i]) {
        __label__ = 6;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 8:
      
      var $102 = HEAP[$dest_addr] + 8;
      HEAP[$102] = 0;
      __label__ = 9;
      break;
     case 9:
      __label__ = 10;
      break;
     case 10:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _build_model($parser) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 32;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $retval = __stackBase__ + 4;
      var $0 = __stackBase__ + 8;
      var $dtd = __stackBase__ + 12;
      var $ret = __stackBase__ + 16;
      var $cpos = __stackBase__ + 20;
      var $str = __stackBase__ + 24;
      var $allocsize = __stackBase__ + 28;
      
      HEAP[$parser_addr] = $parser;
      
      
      var $3 = HEAP[HEAP[$parser_addr] + 356];
      HEAP[$dtd] = $3;
      
      
      
      
      
      
      
      var $11 = HEAP[HEAP[$dtd] + 176] * 20 + HEAP[HEAP[$dtd] + 168];
      HEAP[$allocsize] = $11;
      
      
      
      var $15 = HEAP[HEAP[$parser_addr] + 12];
      var $16 = HEAP[$allocsize];
      var $17 = FUNCTION_TABLE[$15]($16);
      var $18 = $17;
      HEAP[$ret] = $18;
      
      
      if (HEAP[$ret] == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = 0;
      __label__ = 3;
      break;
     case 2:
      
      
      
      
      
      var $26 = HEAP[$ret] + 20 * HEAP[HEAP[$dtd] + 176];
      HEAP[$str] = $26;
      
      var $28 = HEAP[$ret] + 20;
      HEAP[$cpos] = $28;
      var $29 = HEAP[$parser_addr];
      var $30 = HEAP[$ret];
      _build_node($29, 0, $30, $cpos, $str);
      var $31 = HEAP[$ret];
      HEAP[$0] = $31;
      __label__ = 3;
      break;
     case 3:
      var $32 = HEAP[$0];
      HEAP[$retval] = $32;
      __label__ = 4;
      break;
     case 4:
      var $retval3 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval3;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _getElementType($parser, $enc, $ptr, $end) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 36;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $parser_addr = __stackBase__;
      var $enc_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $dtd = __stackBase__ + 24;
      var $name = __stackBase__ + 28;
      var $ret = __stackBase__ + 32;
      
      HEAP[$parser_addr] = $parser;
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      
      
      var $3 = HEAP[HEAP[$parser_addr] + 356];
      HEAP[$dtd] = $3;
      
      var $5 = HEAP[$dtd] + 80;
      var $6 = HEAP[$enc_addr];
      var $7 = HEAP[$ptr_addr];
      var $8 = HEAP[$end_addr];
      var $9 = _poolStoreString($5, $6, $7, $8);
      HEAP[$name] = $9;
      
      
      if (HEAP[$name] == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = 0;
      __label__ = 9;
      break;
     case 2:
      
      var $13 = HEAP[$dtd] + 20;
      var $14 = HEAP[$name];
      var $15 = _lookup($13, $14, 24);
      var $16 = $15;
      HEAP[$ret] = $16;
      
      
      if (HEAP[$ret] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      HEAP[$0] = 0;
      __label__ = 9;
      break;
     case 4:
      
      
      
      
      
      if (HEAP[HEAP[$ret]] != HEAP[$name]) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      
      
      
      var $27 = HEAP[HEAP[$dtd] + 80 + 16];
      
      
      var $30 = HEAP[$dtd] + 80 + 12;
      HEAP[$30] = $27;
      __label__ = 8;
      break;
     case 6:
      
      
      
      var $34 = HEAP[HEAP[$dtd] + 80 + 12];
      
      
      var $37 = HEAP[$dtd] + 80 + 16;
      HEAP[$37] = $34;
      var $38 = HEAP[$parser_addr];
      var $39 = HEAP[$ret];
      var $40 = _setElementTypePrefix($38, $39);
      
      if ($40 == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      HEAP[$0] = 0;
      __label__ = 9;
      break;
     case 8:
      var $42 = HEAP[$ret];
      HEAP[$0] = $42;
      __label__ = 9;
      break;
     case 9:
      var $43 = HEAP[$0];
      HEAP[$retval] = $43;
      __label__ = 10;
      break;
     case 10:
      var $retval9 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval9;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _prolog0($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 11) {
        __label__ = 3;
        break;
      } else if ($1 == 12) {
        __label__ = 2;
        break;
      } else if ($1 == 13) {
        __label__ = 4;
        break;
      } else if ($1 == 14) {
        __label__ = 5;
        break;
      } else if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 16) {
        __label__ = 6;
        break;
      } else if ($1 == 29) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 1:
      
      var $3 = HEAP[$state_addr];
      HEAP[$3] = FUNCTION_TABLE_OFFSET + 92;
      HEAP[$0] = 0;
      __label__ = 10;
      break;
     case 2:
      
      var $5 = HEAP[$state_addr];
      HEAP[$5] = FUNCTION_TABLE_OFFSET + 92;
      HEAP[$0] = 1;
      __label__ = 10;
      break;
     case 3:
      
      var $7 = HEAP[$state_addr];
      HEAP[$7] = FUNCTION_TABLE_OFFSET + 92;
      HEAP[$0] = 55;
      __label__ = 10;
      break;
     case 4:
      
      var $9 = HEAP[$state_addr];
      HEAP[$9] = FUNCTION_TABLE_OFFSET + 92;
      HEAP[$0] = 56;
      __label__ = 10;
      break;
     case 5:
      HEAP[$0] = 0;
      __label__ = 10;
      break;
     case 6:
      
      
      var $12 = HEAP[HEAP[$enc_addr] + 28];
      
      
      
      
      
      var $18 = HEAP[$ptr_addr] + HEAP[HEAP[$enc_addr] + 68] * 2;
      var $19 = HEAP[$enc_addr];
      var $20 = HEAP[$end_addr];
      var $21 = FUNCTION_TABLE[$12]($19, $18, $20, _KW_DOCTYPE);
      
      if ($21 == 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 7:
      
      var $24 = HEAP[$state_addr];
      HEAP[$24] = FUNCTION_TABLE_OFFSET + 94;
      HEAP[$0] = 3;
      __label__ = 10;
      break;
     case 8:
      
      var $26 = HEAP[$state_addr];
      HEAP[$26] = FUNCTION_TABLE_OFFSET + 96;
      HEAP[$0] = 2;
      __label__ = 10;
      break;
     case 9:
      var $27 = HEAP[$state_addr];
      var $28 = HEAP[$tok_addr];
      var $29 = _common($27, $28);
      HEAP[$0] = $29;
      __label__ = 10;
      break;
     case 10:
      var $30 = HEAP[$0];
      HEAP[$retval] = $30;
      __label__ = 11;
      break;
     case 11:
      var $retval10 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval10;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _prolog1($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 11) {
        __label__ = 2;
        break;
      } else if ($1 == 13) {
        __label__ = 3;
        break;
      } else if ($1 == 14) {
        __label__ = 4;
        break;
      } else if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 16) {
        __label__ = 5;
        break;
      } else if ($1 == 29) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 1:
      HEAP[$0] = 0;
      __label__ = 9;
      break;
     case 2:
      HEAP[$0] = 55;
      __label__ = 9;
      break;
     case 3:
      HEAP[$0] = 56;
      __label__ = 9;
      break;
     case 4:
      HEAP[$0] = 0;
      __label__ = 9;
      break;
     case 5:
      
      
      var $4 = HEAP[HEAP[$enc_addr] + 28];
      
      
      
      
      
      var $10 = HEAP[$ptr_addr] + HEAP[HEAP[$enc_addr] + 68] * 2;
      var $11 = HEAP[$enc_addr];
      var $12 = HEAP[$end_addr];
      var $13 = FUNCTION_TABLE[$4]($11, $10, $12, _KW_DOCTYPE);
      
      if ($13 == 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 6:
      
      var $16 = HEAP[$state_addr];
      HEAP[$16] = FUNCTION_TABLE_OFFSET + 94;
      HEAP[$0] = 3;
      __label__ = 9;
      break;
     case 7:
      
      var $18 = HEAP[$state_addr];
      HEAP[$18] = FUNCTION_TABLE_OFFSET + 96;
      HEAP[$0] = 2;
      __label__ = 9;
      break;
     case 8:
      var $19 = HEAP[$state_addr];
      var $20 = HEAP[$tok_addr];
      var $21 = _common($19, $20);
      HEAP[$0] = $21;
      __label__ = 9;
      break;
     case 9:
      var $22 = HEAP[$0];
      HEAP[$retval] = $22;
      __label__ = 10;
      break;
     case 10:
      var $retval9 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval9;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _prolog2($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 11) {
        __label__ = 2;
        break;
      } else if ($1 == 13) {
        __label__ = 3;
        break;
      } else if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 29) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 1:
      HEAP[$0] = 0;
      __label__ = 6;
      break;
     case 2:
      HEAP[$0] = 55;
      __label__ = 6;
      break;
     case 3:
      HEAP[$0] = 56;
      __label__ = 6;
      break;
     case 4:
      
      var $3 = HEAP[$state_addr];
      HEAP[$3] = FUNCTION_TABLE_OFFSET + 96;
      HEAP[$0] = 2;
      __label__ = 6;
      break;
     case 5:
      var $4 = HEAP[$state_addr];
      var $5 = HEAP[$tok_addr];
      var $6 = _common($4, $5);
      HEAP[$0] = $6;
      __label__ = 6;
      break;
     case 6:
      var $7 = HEAP[$0];
      HEAP[$retval] = $7;
      __label__ = 7;
      break;
     case 7:
      var $retval6 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval6;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _doctype0($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 18) {
        __label__ = 2;
        break;
      } else if ($1 == 41) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      HEAP[$0] = 3;
      __label__ = 4;
      break;
     case 2:
      
      var $3 = HEAP[$state_addr];
      HEAP[$3] = FUNCTION_TABLE_OFFSET + 98;
      HEAP[$0] = 4;
      __label__ = 4;
      break;
     case 3:
      var $4 = HEAP[$state_addr];
      var $5 = HEAP[$tok_addr];
      var $6 = _common($4, $5);
      HEAP[$0] = $6;
      __label__ = 4;
      break;
     case 4:
      var $7 = HEAP[$0];
      HEAP[$retval] = $7;
      __label__ = 5;
      break;
     case 5:
      var $retval4 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval4;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _doctype1($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 17) {
        __label__ = 3;
        break;
      } else if ($1 == 18) {
        __label__ = 4;
        break;
      } else if ($1 == 25) {
        __label__ = 2;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 1:
      HEAP[$0] = 3;
      __label__ = 9;
      break;
     case 2:
      
      var $3 = HEAP[$state_addr];
      HEAP[$3] = FUNCTION_TABLE_OFFSET + 100;
      HEAP[$0] = 7;
      __label__ = 9;
      break;
     case 3:
      
      var $5 = HEAP[$state_addr];
      HEAP[$5] = FUNCTION_TABLE_OFFSET + 102;
      HEAP[$0] = 8;
      __label__ = 9;
      break;
     case 4:
      
      
      var $8 = HEAP[HEAP[$enc_addr] + 28];
      var $9 = HEAP[$enc_addr];
      var $10 = HEAP[$ptr_addr];
      var $11 = HEAP[$end_addr];
      var $12 = FUNCTION_TABLE[$8]($9, $10, $11, _KW_SYSTEM);
      
      if ($12 != 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      
      var $15 = HEAP[$state_addr];
      HEAP[$15] = FUNCTION_TABLE_OFFSET + 104;
      HEAP[$0] = 3;
      __label__ = 9;
      break;
     case 6:
      
      
      var $18 = HEAP[HEAP[$enc_addr] + 28];
      var $19 = HEAP[$enc_addr];
      var $20 = HEAP[$ptr_addr];
      var $21 = HEAP[$end_addr];
      var $22 = FUNCTION_TABLE[$18]($19, $20, $21, _KW_PUBLIC);
      
      if ($22 != 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      
      var $25 = HEAP[$state_addr];
      HEAP[$25] = FUNCTION_TABLE_OFFSET + 106;
      HEAP[$0] = 3;
      __label__ = 9;
      break;
     case 8:
      var $26 = HEAP[$state_addr];
      var $27 = HEAP[$tok_addr];
      var $28 = _common($26, $27);
      HEAP[$0] = $28;
      __label__ = 9;
      break;
     case 9:
      var $29 = HEAP[$0];
      HEAP[$retval] = $29;
      __label__ = 10;
      break;
     case 10:
      var $retval9 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval9;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _doctype2($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 27) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      HEAP[$0] = 3;
      __label__ = 4;
      break;
     case 2:
      
      var $3 = HEAP[$state_addr];
      HEAP[$3] = FUNCTION_TABLE_OFFSET + 104;
      HEAP[$0] = 6;
      __label__ = 4;
      break;
     case 3:
      var $4 = HEAP[$state_addr];
      var $5 = HEAP[$tok_addr];
      var $6 = _common($4, $5);
      HEAP[$0] = $6;
      __label__ = 4;
      break;
     case 4:
      var $7 = HEAP[$0];
      HEAP[$retval] = $7;
      __label__ = 5;
      break;
     case 5:
      var $retval4 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval4;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _doctype3($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 27) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      HEAP[$0] = 3;
      __label__ = 4;
      break;
     case 2:
      
      var $3 = HEAP[$state_addr];
      HEAP[$3] = FUNCTION_TABLE_OFFSET + 108;
      HEAP[$0] = 5;
      __label__ = 4;
      break;
     case 3:
      var $4 = HEAP[$state_addr];
      var $5 = HEAP[$tok_addr];
      var $6 = _common($4, $5);
      HEAP[$0] = $6;
      __label__ = 4;
      break;
     case 4:
      var $7 = HEAP[$0];
      HEAP[$retval] = $7;
      __label__ = 5;
      break;
     case 5:
      var $retval4 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval4;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _doctype4($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 17) {
        __label__ = 3;
        break;
      } else if ($1 == 25) {
        __label__ = 2;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 1:
      HEAP[$0] = 3;
      __label__ = 5;
      break;
     case 2:
      
      var $3 = HEAP[$state_addr];
      HEAP[$3] = FUNCTION_TABLE_OFFSET + 100;
      HEAP[$0] = 7;
      __label__ = 5;
      break;
     case 3:
      
      var $5 = HEAP[$state_addr];
      HEAP[$5] = FUNCTION_TABLE_OFFSET + 102;
      HEAP[$0] = 8;
      __label__ = 5;
      break;
     case 4:
      var $6 = HEAP[$state_addr];
      var $7 = HEAP[$tok_addr];
      var $8 = _common($6, $7);
      HEAP[$0] = $8;
      __label__ = 5;
      break;
     case 5:
      var $9 = HEAP[$0];
      HEAP[$retval] = $9;
      __label__ = 6;
      break;
     case 6:
      var $retval5 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval5;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _doctype5($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 17) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      HEAP[$0] = 3;
      __label__ = 4;
      break;
     case 2:
      
      var $3 = HEAP[$state_addr];
      HEAP[$3] = FUNCTION_TABLE_OFFSET + 102;
      HEAP[$0] = 8;
      __label__ = 4;
      break;
     case 3:
      var $4 = HEAP[$state_addr];
      var $5 = HEAP[$tok_addr];
      var $6 = _common($4, $5);
      HEAP[$0] = $6;
      __label__ = 4;
      break;
     case 4:
      var $7 = HEAP[$0];
      HEAP[$retval] = $7;
      __label__ = 5;
      break;
     case 5:
      var $retval4 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval4;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _internalSubset($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == -4) {
        __label__ = 15;
        break;
      } else if ($1 == 11) {
        __label__ = 11;
        break;
      } else if ($1 == 13) {
        __label__ = 12;
        break;
      } else if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 16) {
        __label__ = 2;
        break;
      } else if ($1 == 26) {
        __label__ = 14;
        break;
      } else if ($1 == 28) {
        __label__ = 13;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 1:
      HEAP[$0] = 0;
      __label__ = 17;
      break;
     case 2:
      
      
      var $4 = HEAP[HEAP[$enc_addr] + 28];
      
      
      
      
      
      var $10 = HEAP[$ptr_addr] + HEAP[HEAP[$enc_addr] + 68] * 2;
      var $11 = HEAP[$enc_addr];
      var $12 = HEAP[$end_addr];
      var $13 = FUNCTION_TABLE[$4]($11, $10, $12, _KW_ENTITY);
      
      if ($13 != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      var $16 = HEAP[$state_addr];
      HEAP[$16] = FUNCTION_TABLE_OFFSET + 110;
      HEAP[$0] = 11;
      __label__ = 17;
      break;
     case 4:
      
      
      var $19 = HEAP[HEAP[$enc_addr] + 28];
      
      
      
      
      
      var $25 = HEAP[$ptr_addr] + HEAP[HEAP[$enc_addr] + 68] * 2;
      var $26 = HEAP[$enc_addr];
      var $27 = HEAP[$end_addr];
      var $28 = FUNCTION_TABLE[$19]($26, $25, $27, _KW_ATTLIST);
      
      if ($28 != 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      
      var $31 = HEAP[$state_addr];
      HEAP[$31] = FUNCTION_TABLE_OFFSET + 112;
      HEAP[$0] = 33;
      __label__ = 17;
      break;
     case 6:
      
      
      var $34 = HEAP[HEAP[$enc_addr] + 28];
      
      
      
      
      
      var $40 = HEAP[$ptr_addr] + HEAP[HEAP[$enc_addr] + 68] * 2;
      var $41 = HEAP[$enc_addr];
      var $42 = HEAP[$end_addr];
      var $43 = FUNCTION_TABLE[$34]($41, $40, $42, _KW_ELEMENT);
      
      if ($43 != 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      
      var $46 = HEAP[$state_addr];
      HEAP[$46] = FUNCTION_TABLE_OFFSET + 114;
      HEAP[$0] = 39;
      __label__ = 17;
      break;
     case 8:
      
      
      var $49 = HEAP[HEAP[$enc_addr] + 28];
      
      
      
      
      
      var $55 = HEAP[$ptr_addr] + HEAP[HEAP[$enc_addr] + 68] * 2;
      var $56 = HEAP[$enc_addr];
      var $57 = HEAP[$end_addr];
      var $58 = FUNCTION_TABLE[$49]($56, $55, $57, _KW_NOTATION);
      
      if ($58 != 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      
      var $61 = HEAP[$state_addr];
      HEAP[$61] = FUNCTION_TABLE_OFFSET + 116;
      HEAP[$0] = 17;
      __label__ = 17;
      break;
     case 10:
      __label__ = 16;
      break;
     case 11:
      HEAP[$0] = 55;
      __label__ = 17;
      break;
     case 12:
      HEAP[$0] = 56;
      __label__ = 17;
      break;
     case 13:
      HEAP[$0] = 60;
      __label__ = 17;
      break;
     case 14:
      
      var $63 = HEAP[$state_addr];
      HEAP[$63] = FUNCTION_TABLE_OFFSET + 118;
      HEAP[$0] = 3;
      __label__ = 17;
      break;
     case 15:
      HEAP[$0] = 0;
      __label__ = 17;
      break;
     case 16:
      var $64 = HEAP[$state_addr];
      var $65 = HEAP[$tok_addr];
      var $66 = _common($64, $65);
      HEAP[$0] = $66;
      __label__ = 17;
      break;
     case 17:
      var $67 = HEAP[$0];
      HEAP[$retval] = $67;
      __label__ = 18;
      break;
     case 18:
      var $retval17 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval17;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _externalSubset0($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      
      var $2 = HEAP[$state_addr];
      HEAP[$2] = FUNCTION_TABLE_OFFSET + 120;
      
      
      if (HEAP[$tok_addr] == 12) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = 57;
      __label__ = 3;
      break;
     case 2:
      var $5 = HEAP[$state_addr];
      var $6 = HEAP[$tok_addr];
      var $7 = HEAP[$ptr_addr];
      var $8 = HEAP[$end_addr];
      var $9 = HEAP[$enc_addr];
      var $10 = _externalSubset1($5, $6, $7, $8, $9);
      HEAP[$0] = $10;
      __label__ = 3;
      break;
     case 3:
      var $11 = HEAP[$0];
      HEAP[$retval] = $11;
      __label__ = 4;
      break;
     case 4:
      var $retval3 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval3;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _externalSubset1($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == -4) {
        __label__ = 6;
        break;
      } else if ($1 == 15) {
        __label__ = 4;
        break;
      } else if ($1 == 26) {
        __label__ = 5;
        break;
      } else if ($1 == 33) {
        __label__ = 1;
        break;
      } else if ($1 == 34) {
        __label__ = 2;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 1:
      
      var $3 = HEAP[$state_addr];
      HEAP[$3] = FUNCTION_TABLE_OFFSET + 122;
      HEAP[$0] = 0;
      __label__ = 10;
      break;
     case 2:
      
      
      
      
      if (HEAP[HEAP[$state_addr] + 12] == 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 3:
      
      
      
      var $11 = HEAP[HEAP[$state_addr] + 12] - 1;
      
      var $13 = HEAP[$state_addr] + 12;
      HEAP[$13] = $11;
      HEAP[$0] = 0;
      __label__ = 10;
      break;
     case 4:
      HEAP[$0] = 0;
      __label__ = 10;
      break;
     case 5:
      __label__ = 9;
      break;
     case 6:
      
      
      
      
      if (HEAP[HEAP[$state_addr] + 12] != 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 7:
      HEAP[$0] = 0;
      __label__ = 10;
      break;
     case 8:
      var $18 = HEAP[$state_addr];
      var $19 = HEAP[$tok_addr];
      var $20 = HEAP[$ptr_addr];
      var $21 = HEAP[$end_addr];
      var $22 = HEAP[$enc_addr];
      var $23 = _internalSubset($18, $19, $20, $21, $22);
      HEAP[$0] = $23;
      __label__ = 10;
      break;
     case 9:
      var $24 = HEAP[$state_addr];
      var $25 = HEAP[$tok_addr];
      var $26 = _common($24, $25);
      HEAP[$0] = $26;
      __label__ = 10;
      break;
     case 10:
      var $27 = HEAP[$0];
      HEAP[$retval] = $27;
      __label__ = 11;
      break;
     case 11:
      var $retval10 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval10;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _entity0($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 18) {
        __label__ = 3;
        break;
      } else if ($1 == 22) {
        __label__ = 2;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 1:
      HEAP[$0] = 11;
      __label__ = 5;
      break;
     case 2:
      
      var $3 = HEAP[$state_addr];
      HEAP[$3] = FUNCTION_TABLE_OFFSET + 124;
      HEAP[$0] = 11;
      __label__ = 5;
      break;
     case 3:
      
      var $5 = HEAP[$state_addr];
      HEAP[$5] = FUNCTION_TABLE_OFFSET + 126;
      HEAP[$0] = 9;
      __label__ = 5;
      break;
     case 4:
      var $6 = HEAP[$state_addr];
      var $7 = HEAP[$tok_addr];
      var $8 = _common($6, $7);
      HEAP[$0] = $8;
      __label__ = 5;
      break;
     case 5:
      var $9 = HEAP[$0];
      HEAP[$retval] = $9;
      __label__ = 6;
      break;
     case 6:
      var $retval5 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval5;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _entity1($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 18) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      HEAP[$0] = 11;
      __label__ = 4;
      break;
     case 2:
      
      var $3 = HEAP[$state_addr];
      HEAP[$3] = FUNCTION_TABLE_OFFSET + 128;
      HEAP[$0] = 10;
      __label__ = 4;
      break;
     case 3:
      var $4 = HEAP[$state_addr];
      var $5 = HEAP[$tok_addr];
      var $6 = _common($4, $5);
      HEAP[$0] = $6;
      __label__ = 4;
      break;
     case 4:
      var $7 = HEAP[$0];
      HEAP[$retval] = $7;
      __label__ = 5;
      break;
     case 5:
      var $retval4 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval4;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _entity2($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 18) {
        __label__ = 2;
        break;
      } else if ($1 == 27) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 1:
      HEAP[$0] = 11;
      __label__ = 9;
      break;
     case 2:
      
      
      var $4 = HEAP[HEAP[$enc_addr] + 28];
      var $5 = HEAP[$enc_addr];
      var $6 = HEAP[$ptr_addr];
      var $7 = HEAP[$end_addr];
      var $8 = FUNCTION_TABLE[$4]($5, $6, $7, _KW_SYSTEM);
      
      if ($8 != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      var $11 = HEAP[$state_addr];
      HEAP[$11] = FUNCTION_TABLE_OFFSET + 130;
      HEAP[$0] = 11;
      __label__ = 9;
      break;
     case 4:
      
      
      var $14 = HEAP[HEAP[$enc_addr] + 28];
      var $15 = HEAP[$enc_addr];
      var $16 = HEAP[$ptr_addr];
      var $17 = HEAP[$end_addr];
      var $18 = FUNCTION_TABLE[$14]($15, $16, $17, _KW_PUBLIC);
      
      if ($18 != 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      
      var $21 = HEAP[$state_addr];
      HEAP[$21] = FUNCTION_TABLE_OFFSET + 132;
      HEAP[$0] = 11;
      __label__ = 9;
      break;
     case 6:
      __label__ = 8;
      break;
     case 7:
      
      var $23 = HEAP[$state_addr];
      HEAP[$23] = FUNCTION_TABLE_OFFSET + 134;
      
      var $25 = HEAP[$state_addr] + 8;
      HEAP[$25] = 11;
      HEAP[$0] = 12;
      __label__ = 9;
      break;
     case 8:
      var $26 = HEAP[$state_addr];
      var $27 = HEAP[$tok_addr];
      var $28 = _common($26, $27);
      HEAP[$0] = $28;
      __label__ = 9;
      break;
     case 9:
      var $29 = HEAP[$0];
      HEAP[$retval] = $29;
      __label__ = 10;
      break;
     case 10:
      var $retval9 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval9;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _entity3($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 27) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      HEAP[$0] = 11;
      __label__ = 4;
      break;
     case 2:
      
      var $3 = HEAP[$state_addr];
      HEAP[$3] = FUNCTION_TABLE_OFFSET + 130;
      HEAP[$0] = 14;
      __label__ = 4;
      break;
     case 3:
      var $4 = HEAP[$state_addr];
      var $5 = HEAP[$tok_addr];
      var $6 = _common($4, $5);
      HEAP[$0] = $6;
      __label__ = 4;
      break;
     case 4:
      var $7 = HEAP[$0];
      HEAP[$retval] = $7;
      __label__ = 5;
      break;
     case 5:
      var $retval4 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval4;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _entity4($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 27) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      HEAP[$0] = 11;
      __label__ = 4;
      break;
     case 2:
      
      var $3 = HEAP[$state_addr];
      HEAP[$3] = FUNCTION_TABLE_OFFSET + 136;
      HEAP[$0] = 13;
      __label__ = 4;
      break;
     case 3:
      var $4 = HEAP[$state_addr];
      var $5 = HEAP[$tok_addr];
      var $6 = _common($4, $5);
      HEAP[$0] = $6;
      __label__ = 4;
      break;
     case 4:
      var $7 = HEAP[$0];
      HEAP[$retval] = $7;
      __label__ = 5;
      break;
     case 5:
      var $retval4 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval4;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _entity5($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 32;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $iftmp_0 = __stackBase__ + 24;
      var $0 = __stackBase__ + 28;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 17) {
        __label__ = 2;
        break;
      } else if ($1 == 18) {
        __label__ = 6;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 1:
      HEAP[$0] = 11;
      __label__ = 9;
      break;
     case 2:
      
      
      
      
      if (HEAP[HEAP[$state_addr] + 16] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      HEAP[$iftmp_0] = FUNCTION_TABLE_OFFSET + 100;
      __label__ = 5;
      break;
     case 4:
      HEAP[$iftmp_0] = FUNCTION_TABLE_OFFSET + 120;
      __label__ = 5;
      break;
     case 5:
      
      var $7 = HEAP[$state_addr];
      var $8 = HEAP[$iftmp_0];
      HEAP[$7] = $8;
      HEAP[$0] = 15;
      __label__ = 9;
      break;
     case 6:
      
      
      var $11 = HEAP[HEAP[$enc_addr] + 28];
      var $12 = HEAP[$enc_addr];
      var $13 = HEAP[$ptr_addr];
      var $14 = HEAP[$end_addr];
      var $15 = FUNCTION_TABLE[$11]($12, $13, $14, _KW_NDATA);
      
      if ($15 != 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      
      var $18 = HEAP[$state_addr];
      HEAP[$18] = FUNCTION_TABLE_OFFSET + 138;
      HEAP[$0] = 11;
      __label__ = 9;
      break;
     case 8:
      var $19 = HEAP[$state_addr];
      var $20 = HEAP[$tok_addr];
      var $21 = _common($19, $20);
      HEAP[$0] = $21;
      __label__ = 9;
      break;
     case 9:
      var $22 = HEAP[$0];
      HEAP[$retval] = $22;
      __label__ = 10;
      break;
     case 10:
      var $retval9 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval9;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _entity6($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 18) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      HEAP[$0] = 11;
      __label__ = 4;
      break;
     case 2:
      
      var $3 = HEAP[$state_addr];
      HEAP[$3] = FUNCTION_TABLE_OFFSET + 134;
      
      var $5 = HEAP[$state_addr] + 8;
      HEAP[$5] = 11;
      HEAP[$0] = 16;
      __label__ = 4;
      break;
     case 3:
      var $6 = HEAP[$state_addr];
      var $7 = HEAP[$tok_addr];
      var $8 = _common($6, $7);
      HEAP[$0] = $8;
      __label__ = 4;
      break;
     case 4:
      var $9 = HEAP[$0];
      HEAP[$retval] = $9;
      __label__ = 5;
      break;
     case 5:
      var $retval4 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval4;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _entity7($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 18) {
        __label__ = 2;
        break;
      } else if ($1 == 27) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 1:
      HEAP[$0] = 11;
      __label__ = 9;
      break;
     case 2:
      
      
      var $4 = HEAP[HEAP[$enc_addr] + 28];
      var $5 = HEAP[$enc_addr];
      var $6 = HEAP[$ptr_addr];
      var $7 = HEAP[$end_addr];
      var $8 = FUNCTION_TABLE[$4]($5, $6, $7, _KW_SYSTEM);
      
      if ($8 != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      var $11 = HEAP[$state_addr];
      HEAP[$11] = FUNCTION_TABLE_OFFSET + 140;
      HEAP[$0] = 11;
      __label__ = 9;
      break;
     case 4:
      
      
      var $14 = HEAP[HEAP[$enc_addr] + 28];
      var $15 = HEAP[$enc_addr];
      var $16 = HEAP[$ptr_addr];
      var $17 = HEAP[$end_addr];
      var $18 = FUNCTION_TABLE[$14]($15, $16, $17, _KW_PUBLIC);
      
      if ($18 != 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      
      var $21 = HEAP[$state_addr];
      HEAP[$21] = FUNCTION_TABLE_OFFSET + 142;
      HEAP[$0] = 11;
      __label__ = 9;
      break;
     case 6:
      __label__ = 8;
      break;
     case 7:
      
      var $23 = HEAP[$state_addr];
      HEAP[$23] = FUNCTION_TABLE_OFFSET + 134;
      
      var $25 = HEAP[$state_addr] + 8;
      HEAP[$25] = 11;
      HEAP[$0] = 12;
      __label__ = 9;
      break;
     case 8:
      var $26 = HEAP[$state_addr];
      var $27 = HEAP[$tok_addr];
      var $28 = _common($26, $27);
      HEAP[$0] = $28;
      __label__ = 9;
      break;
     case 9:
      var $29 = HEAP[$0];
      HEAP[$retval] = $29;
      __label__ = 10;
      break;
     case 10:
      var $retval9 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval9;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _entity8($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 27) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      HEAP[$0] = 11;
      __label__ = 4;
      break;
     case 2:
      
      var $3 = HEAP[$state_addr];
      HEAP[$3] = FUNCTION_TABLE_OFFSET + 140;
      HEAP[$0] = 14;
      __label__ = 4;
      break;
     case 3:
      var $4 = HEAP[$state_addr];
      var $5 = HEAP[$tok_addr];
      var $6 = _common($4, $5);
      HEAP[$0] = $6;
      __label__ = 4;
      break;
     case 4:
      var $7 = HEAP[$0];
      HEAP[$retval] = $7;
      __label__ = 5;
      break;
     case 5:
      var $retval4 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval4;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _entity9($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 27) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      HEAP[$0] = 11;
      __label__ = 4;
      break;
     case 2:
      
      var $3 = HEAP[$state_addr];
      HEAP[$3] = FUNCTION_TABLE_OFFSET + 144;
      HEAP[$0] = 13;
      __label__ = 4;
      break;
     case 3:
      var $4 = HEAP[$state_addr];
      var $5 = HEAP[$tok_addr];
      var $6 = _common($4, $5);
      HEAP[$0] = $6;
      __label__ = 4;
      break;
     case 4:
      var $7 = HEAP[$0];
      HEAP[$retval] = $7;
      __label__ = 5;
      break;
     case 5:
      var $retval4 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval4;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _entity10($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 32;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $iftmp_1 = __stackBase__ + 24;
      var $0 = __stackBase__ + 28;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 17) {
        __label__ = 2;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 1:
      HEAP[$0] = 11;
      __label__ = 7;
      break;
     case 2:
      
      
      
      
      if (HEAP[HEAP[$state_addr] + 16] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      HEAP[$iftmp_1] = FUNCTION_TABLE_OFFSET + 100;
      __label__ = 5;
      break;
     case 4:
      HEAP[$iftmp_1] = FUNCTION_TABLE_OFFSET + 120;
      __label__ = 5;
      break;
     case 5:
      
      var $7 = HEAP[$state_addr];
      var $8 = HEAP[$iftmp_1];
      HEAP[$7] = $8;
      HEAP[$0] = 15;
      __label__ = 7;
      break;
     case 6:
      var $9 = HEAP[$state_addr];
      var $10 = HEAP[$tok_addr];
      var $11 = _common($9, $10);
      HEAP[$0] = $11;
      __label__ = 7;
      break;
     case 7:
      var $12 = HEAP[$0];
      HEAP[$retval] = $12;
      __label__ = 8;
      break;
     case 8:
      var $retval7 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval7;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _notation0($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 18) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      HEAP[$0] = 17;
      __label__ = 4;
      break;
     case 2:
      
      var $3 = HEAP[$state_addr];
      HEAP[$3] = FUNCTION_TABLE_OFFSET + 146;
      HEAP[$0] = 18;
      __label__ = 4;
      break;
     case 3:
      var $4 = HEAP[$state_addr];
      var $5 = HEAP[$tok_addr];
      var $6 = _common($4, $5);
      HEAP[$0] = $6;
      __label__ = 4;
      break;
     case 4:
      var $7 = HEAP[$0];
      HEAP[$retval] = $7;
      __label__ = 5;
      break;
     case 5:
      var $retval4 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval4;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _notation1($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 18) {
        __label__ = 2;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 1:
      HEAP[$0] = 17;
      __label__ = 7;
      break;
     case 2:
      
      
      var $4 = HEAP[HEAP[$enc_addr] + 28];
      var $5 = HEAP[$enc_addr];
      var $6 = HEAP[$ptr_addr];
      var $7 = HEAP[$end_addr];
      var $8 = FUNCTION_TABLE[$4]($5, $6, $7, _KW_SYSTEM);
      
      if ($8 != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      var $11 = HEAP[$state_addr];
      HEAP[$11] = FUNCTION_TABLE_OFFSET + 148;
      HEAP[$0] = 17;
      __label__ = 7;
      break;
     case 4:
      
      
      var $14 = HEAP[HEAP[$enc_addr] + 28];
      var $15 = HEAP[$enc_addr];
      var $16 = HEAP[$ptr_addr];
      var $17 = HEAP[$end_addr];
      var $18 = FUNCTION_TABLE[$14]($15, $16, $17, _KW_PUBLIC);
      
      if ($18 != 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      
      var $21 = HEAP[$state_addr];
      HEAP[$21] = FUNCTION_TABLE_OFFSET + 150;
      HEAP[$0] = 17;
      __label__ = 7;
      break;
     case 6:
      var $22 = HEAP[$state_addr];
      var $23 = HEAP[$tok_addr];
      var $24 = _common($22, $23);
      HEAP[$0] = $24;
      __label__ = 7;
      break;
     case 7:
      var $25 = HEAP[$0];
      HEAP[$retval] = $25;
      __label__ = 8;
      break;
     case 8:
      var $retval7 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval7;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _notation2($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 27) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      HEAP[$0] = 17;
      __label__ = 4;
      break;
     case 2:
      
      var $3 = HEAP[$state_addr];
      HEAP[$3] = FUNCTION_TABLE_OFFSET + 152;
      HEAP[$0] = 21;
      __label__ = 4;
      break;
     case 3:
      var $4 = HEAP[$state_addr];
      var $5 = HEAP[$tok_addr];
      var $6 = _common($4, $5);
      HEAP[$0] = $6;
      __label__ = 4;
      break;
     case 4:
      var $7 = HEAP[$0];
      HEAP[$retval] = $7;
      __label__ = 5;
      break;
     case 5:
      var $retval4 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval4;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _notation3($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 27) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      HEAP[$0] = 17;
      __label__ = 4;
      break;
     case 2:
      
      var $3 = HEAP[$state_addr];
      HEAP[$3] = FUNCTION_TABLE_OFFSET + 134;
      
      var $5 = HEAP[$state_addr] + 8;
      HEAP[$5] = 17;
      HEAP[$0] = 19;
      __label__ = 4;
      break;
     case 3:
      var $6 = HEAP[$state_addr];
      var $7 = HEAP[$tok_addr];
      var $8 = _common($6, $7);
      HEAP[$0] = $8;
      __label__ = 4;
      break;
     case 4:
      var $9 = HEAP[$0];
      HEAP[$retval] = $9;
      __label__ = 5;
      break;
     case 5:
      var $retval4 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval4;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _notation4($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 32;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $iftmp_2 = __stackBase__ + 24;
      var $0 = __stackBase__ + 28;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 17) {
        __label__ = 3;
        break;
      } else if ($1 == 27) {
        __label__ = 2;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 1:
      HEAP[$0] = 17;
      __label__ = 8;
      break;
     case 2:
      
      var $3 = HEAP[$state_addr];
      HEAP[$3] = FUNCTION_TABLE_OFFSET + 134;
      
      var $5 = HEAP[$state_addr] + 8;
      HEAP[$5] = 17;
      HEAP[$0] = 19;
      __label__ = 8;
      break;
     case 3:
      
      
      
      
      if (HEAP[HEAP[$state_addr] + 16] != 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      HEAP[$iftmp_2] = FUNCTION_TABLE_OFFSET + 100;
      __label__ = 6;
      break;
     case 5:
      HEAP[$iftmp_2] = FUNCTION_TABLE_OFFSET + 120;
      __label__ = 6;
      break;
     case 6:
      
      var $11 = HEAP[$state_addr];
      var $12 = HEAP[$iftmp_2];
      HEAP[$11] = $12;
      HEAP[$0] = 20;
      __label__ = 8;
      break;
     case 7:
      var $13 = HEAP[$state_addr];
      var $14 = HEAP[$tok_addr];
      var $15 = _common($13, $14);
      HEAP[$0] = $15;
      __label__ = 8;
      break;
     case 8:
      var $16 = HEAP[$0];
      HEAP[$retval] = $16;
      __label__ = 9;
      break;
     case 9:
      var $retval8 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval8;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _attlist0($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 18) {
        __label__ = 2;
        break;
      } else if ($1 == 41) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      HEAP[$0] = 33;
      __label__ = 4;
      break;
     case 2:
      
      var $3 = HEAP[$state_addr];
      HEAP[$3] = FUNCTION_TABLE_OFFSET + 154;
      HEAP[$0] = 34;
      __label__ = 4;
      break;
     case 3:
      var $4 = HEAP[$state_addr];
      var $5 = HEAP[$tok_addr];
      var $6 = _common($4, $5);
      HEAP[$0] = $6;
      __label__ = 4;
      break;
     case 4:
      var $7 = HEAP[$0];
      HEAP[$retval] = $7;
      __label__ = 5;
      break;
     case 5:
      var $retval4 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval4;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _attlist1($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 32;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $iftmp_3 = __stackBase__ + 24;
      var $0 = __stackBase__ + 28;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 17) {
        __label__ = 2;
        break;
      } else if ($1 == 18) {
        __label__ = 6;
        break;
      } else if ($1 == 41) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 1:
      HEAP[$0] = 33;
      __label__ = 8;
      break;
     case 2:
      
      
      
      
      if (HEAP[HEAP[$state_addr] + 16] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      HEAP[$iftmp_3] = FUNCTION_TABLE_OFFSET + 100;
      __label__ = 5;
      break;
     case 4:
      HEAP[$iftmp_3] = FUNCTION_TABLE_OFFSET + 120;
      __label__ = 5;
      break;
     case 5:
      
      var $7 = HEAP[$state_addr];
      var $8 = HEAP[$iftmp_3];
      HEAP[$7] = $8;
      HEAP[$0] = 33;
      __label__ = 8;
      break;
     case 6:
      
      var $10 = HEAP[$state_addr];
      HEAP[$10] = FUNCTION_TABLE_OFFSET + 156;
      HEAP[$0] = 22;
      __label__ = 8;
      break;
     case 7:
      var $11 = HEAP[$state_addr];
      var $12 = HEAP[$tok_addr];
      var $13 = _common($11, $12);
      HEAP[$0] = $13;
      __label__ = 8;
      break;
     case 8:
      var $14 = HEAP[$0];
      HEAP[$retval] = $14;
      __label__ = 9;
      break;
     case 9:
      var $retval8 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval8;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _attlist2($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 32;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      var $i = __stackBase__ + 28;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 18) {
        __label__ = 2;
        break;
      } else if ($1 == 23) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 1:
      HEAP[$0] = 33;
      __label__ = 12;
      break;
     case 2:
      HEAP[$i] = 0;
      __label__ = 6;
      break;
     case 3:
      
      
      var $4 = HEAP[HEAP[$enc_addr] + 28];
      
      
      var $7 = HEAP[_types_1924 + HEAP[$i] * 4];
      var $8 = HEAP[$enc_addr];
      var $9 = HEAP[$ptr_addr];
      var $10 = HEAP[$end_addr];
      var $11 = FUNCTION_TABLE[$4]($8, $9, $10, $7);
      
      if ($11 != 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      
      var $14 = HEAP[$state_addr];
      HEAP[$14] = FUNCTION_TABLE_OFFSET + 158;
      
      var $16 = HEAP[$i] + 23;
      HEAP[$0] = $16;
      __label__ = 12;
      break;
     case 5:
      
      var $18 = HEAP[$i] + 1;
      HEAP[$i] = $18;
      __label__ = 6;
      break;
     case 6:
      
      
      if (HEAP[$i] <= 7) {
        __label__ = 3;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 7:
      
      
      var $23 = HEAP[HEAP[$enc_addr] + 28];
      var $24 = HEAP[$enc_addr];
      var $25 = HEAP[$ptr_addr];
      var $26 = HEAP[$end_addr];
      var $27 = FUNCTION_TABLE[$23]($24, $25, $26, _KW_NOTATION);
      
      if ($27 != 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      
      var $30 = HEAP[$state_addr];
      HEAP[$30] = FUNCTION_TABLE_OFFSET + 160;
      HEAP[$0] = 33;
      __label__ = 12;
      break;
     case 9:
      __label__ = 11;
      break;
     case 10:
      
      var $32 = HEAP[$state_addr];
      HEAP[$32] = FUNCTION_TABLE_OFFSET + 162;
      HEAP[$0] = 33;
      __label__ = 12;
      break;
     case 11:
      var $33 = HEAP[$state_addr];
      var $34 = HEAP[$tok_addr];
      var $35 = _common($33, $34);
      HEAP[$0] = $35;
      __label__ = 12;
      break;
     case 12:
      var $36 = HEAP[$0];
      HEAP[$retval] = $36;
      __label__ = 13;
      break;
     case 13:
      var $retval12 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval12;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _attlist3($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 18) {
        __label__ = 2;
        break;
      } else if ($1 == 19) {
        __label__ = 2;
        break;
      } else if ($1 == 41) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      HEAP[$0] = 33;
      __label__ = 4;
      break;
     case 2:
      
      var $3 = HEAP[$state_addr];
      HEAP[$3] = FUNCTION_TABLE_OFFSET + 164;
      HEAP[$0] = 31;
      __label__ = 4;
      break;
     case 3:
      var $4 = HEAP[$state_addr];
      var $5 = HEAP[$tok_addr];
      var $6 = _common($4, $5);
      HEAP[$0] = $6;
      __label__ = 4;
      break;
     case 4:
      var $7 = HEAP[$0];
      HEAP[$retval] = $7;
      __label__ = 5;
      break;
     case 5:
      var $retval4 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval4;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _attlist4($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 21) {
        __label__ = 3;
        break;
      } else if ($1 == 24) {
        __label__ = 2;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 1:
      HEAP[$0] = 33;
      __label__ = 5;
      break;
     case 2:
      
      var $3 = HEAP[$state_addr];
      HEAP[$3] = FUNCTION_TABLE_OFFSET + 158;
      HEAP[$0] = 33;
      __label__ = 5;
      break;
     case 3:
      
      var $5 = HEAP[$state_addr];
      HEAP[$5] = FUNCTION_TABLE_OFFSET + 162;
      HEAP[$0] = 33;
      __label__ = 5;
      break;
     case 4:
      var $6 = HEAP[$state_addr];
      var $7 = HEAP[$tok_addr];
      var $8 = _common($6, $7);
      HEAP[$0] = $8;
      __label__ = 5;
      break;
     case 5:
      var $9 = HEAP[$0];
      HEAP[$retval] = $9;
      __label__ = 6;
      break;
     case 6:
      var $retval5 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval5;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _attlist5($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 23) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      HEAP[$0] = 33;
      __label__ = 4;
      break;
     case 2:
      
      var $3 = HEAP[$state_addr];
      HEAP[$3] = FUNCTION_TABLE_OFFSET + 166;
      HEAP[$0] = 33;
      __label__ = 4;
      break;
     case 3:
      var $4 = HEAP[$state_addr];
      var $5 = HEAP[$tok_addr];
      var $6 = _common($4, $5);
      HEAP[$0] = $6;
      __label__ = 4;
      break;
     case 4:
      var $7 = HEAP[$0];
      HEAP[$retval] = $7;
      __label__ = 5;
      break;
     case 5:
      var $retval4 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval4;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _attlist6($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 18) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      HEAP[$0] = 33;
      __label__ = 4;
      break;
     case 2:
      
      var $3 = HEAP[$state_addr];
      HEAP[$3] = FUNCTION_TABLE_OFFSET + 168;
      HEAP[$0] = 32;
      __label__ = 4;
      break;
     case 3:
      var $4 = HEAP[$state_addr];
      var $5 = HEAP[$tok_addr];
      var $6 = _common($4, $5);
      HEAP[$0] = $6;
      __label__ = 4;
      break;
     case 4:
      var $7 = HEAP[$0];
      HEAP[$retval] = $7;
      __label__ = 5;
      break;
     case 5:
      var $retval4 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval4;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _attlist7($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 21) {
        __label__ = 3;
        break;
      } else if ($1 == 24) {
        __label__ = 2;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 1:
      HEAP[$0] = 33;
      __label__ = 5;
      break;
     case 2:
      
      var $3 = HEAP[$state_addr];
      HEAP[$3] = FUNCTION_TABLE_OFFSET + 158;
      HEAP[$0] = 33;
      __label__ = 5;
      break;
     case 3:
      
      var $5 = HEAP[$state_addr];
      HEAP[$5] = FUNCTION_TABLE_OFFSET + 166;
      HEAP[$0] = 33;
      __label__ = 5;
      break;
     case 4:
      var $6 = HEAP[$state_addr];
      var $7 = HEAP[$tok_addr];
      var $8 = _common($6, $7);
      HEAP[$0] = $8;
      __label__ = 5;
      break;
     case 5:
      var $9 = HEAP[$0];
      HEAP[$retval] = $9;
      __label__ = 6;
      break;
     case 6:
      var $retval5 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval5;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _attlist8($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 20) {
        __label__ = 2;
        break;
      } else if ($1 == 27) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 1:
      HEAP[$0] = 33;
      __label__ = 11;
      break;
     case 2:
      
      
      var $4 = HEAP[HEAP[$enc_addr] + 28];
      
      
      
      
      var $9 = HEAP[$ptr_addr] + HEAP[HEAP[$enc_addr] + 68];
      var $10 = HEAP[$enc_addr];
      var $11 = HEAP[$end_addr];
      var $12 = FUNCTION_TABLE[$4]($10, $9, $11, _KW_IMPLIED);
      
      if ($12 != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      var $15 = HEAP[$state_addr];
      HEAP[$15] = FUNCTION_TABLE_OFFSET + 154;
      HEAP[$0] = 35;
      __label__ = 11;
      break;
     case 4:
      
      
      var $18 = HEAP[HEAP[$enc_addr] + 28];
      
      
      
      
      var $23 = HEAP[$ptr_addr] + HEAP[HEAP[$enc_addr] + 68];
      var $24 = HEAP[$enc_addr];
      var $25 = HEAP[$end_addr];
      var $26 = FUNCTION_TABLE[$18]($24, $23, $25, _KW_REQUIRED);
      
      if ($26 != 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      
      var $29 = HEAP[$state_addr];
      HEAP[$29] = FUNCTION_TABLE_OFFSET + 154;
      HEAP[$0] = 36;
      __label__ = 11;
      break;
     case 6:
      
      
      var $32 = HEAP[HEAP[$enc_addr] + 28];
      
      
      
      
      var $37 = HEAP[$ptr_addr] + HEAP[HEAP[$enc_addr] + 68];
      var $38 = HEAP[$enc_addr];
      var $39 = HEAP[$end_addr];
      var $40 = FUNCTION_TABLE[$32]($38, $37, $39, _KW_FIXED);
      
      if ($40 != 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      
      var $43 = HEAP[$state_addr];
      HEAP[$43] = FUNCTION_TABLE_OFFSET + 170;
      HEAP[$0] = 33;
      __label__ = 11;
      break;
     case 8:
      __label__ = 10;
      break;
     case 9:
      
      var $45 = HEAP[$state_addr];
      HEAP[$45] = FUNCTION_TABLE_OFFSET + 154;
      HEAP[$0] = 37;
      __label__ = 11;
      break;
     case 10:
      var $46 = HEAP[$state_addr];
      var $47 = HEAP[$tok_addr];
      var $48 = _common($46, $47);
      HEAP[$0] = $48;
      __label__ = 11;
      break;
     case 11:
      var $49 = HEAP[$0];
      HEAP[$retval] = $49;
      __label__ = 12;
      break;
     case 12:
      var $retval11 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval11;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _attlist9($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 27) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      HEAP[$0] = 33;
      __label__ = 4;
      break;
     case 2:
      
      var $3 = HEAP[$state_addr];
      HEAP[$3] = FUNCTION_TABLE_OFFSET + 154;
      HEAP[$0] = 38;
      __label__ = 4;
      break;
     case 3:
      var $4 = HEAP[$state_addr];
      var $5 = HEAP[$tok_addr];
      var $6 = _common($4, $5);
      HEAP[$0] = $6;
      __label__ = 4;
      break;
     case 4:
      var $7 = HEAP[$0];
      HEAP[$retval] = $7;
      __label__ = 5;
      break;
     case 5:
      var $retval4 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval4;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _element0($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 18) {
        __label__ = 2;
        break;
      } else if ($1 == 41) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      HEAP[$0] = 39;
      __label__ = 4;
      break;
     case 2:
      
      var $3 = HEAP[$state_addr];
      HEAP[$3] = FUNCTION_TABLE_OFFSET + 172;
      HEAP[$0] = 40;
      __label__ = 4;
      break;
     case 3:
      var $4 = HEAP[$state_addr];
      var $5 = HEAP[$tok_addr];
      var $6 = _common($4, $5);
      HEAP[$0] = $6;
      __label__ = 4;
      break;
     case 4:
      var $7 = HEAP[$0];
      HEAP[$retval] = $7;
      __label__ = 5;
      break;
     case 5:
      var $retval4 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval4;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _element1($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 18) {
        __label__ = 2;
        break;
      } else if ($1 == 23) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 1:
      HEAP[$0] = 39;
      __label__ = 9;
      break;
     case 2:
      
      
      var $4 = HEAP[HEAP[$enc_addr] + 28];
      var $5 = HEAP[$enc_addr];
      var $6 = HEAP[$ptr_addr];
      var $7 = HEAP[$end_addr];
      var $8 = FUNCTION_TABLE[$4]($5, $6, $7, _KW_EMPTY);
      
      if ($8 != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      var $11 = HEAP[$state_addr];
      HEAP[$11] = FUNCTION_TABLE_OFFSET + 134;
      
      var $13 = HEAP[$state_addr] + 8;
      HEAP[$13] = 39;
      HEAP[$0] = 42;
      __label__ = 9;
      break;
     case 4:
      
      
      var $16 = HEAP[HEAP[$enc_addr] + 28];
      var $17 = HEAP[$enc_addr];
      var $18 = HEAP[$ptr_addr];
      var $19 = HEAP[$end_addr];
      var $20 = FUNCTION_TABLE[$16]($17, $18, $19, _KW_ANY);
      
      if ($20 != 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      
      var $23 = HEAP[$state_addr];
      HEAP[$23] = FUNCTION_TABLE_OFFSET + 134;
      
      var $25 = HEAP[$state_addr] + 8;
      HEAP[$25] = 39;
      HEAP[$0] = 41;
      __label__ = 9;
      break;
     case 6:
      __label__ = 8;
      break;
     case 7:
      
      var $27 = HEAP[$state_addr];
      HEAP[$27] = FUNCTION_TABLE_OFFSET + 174;
      
      var $29 = HEAP[$state_addr] + 4;
      HEAP[$29] = 1;
      HEAP[$0] = 44;
      __label__ = 9;
      break;
     case 8:
      var $30 = HEAP[$state_addr];
      var $31 = HEAP[$tok_addr];
      var $32 = _common($30, $31);
      HEAP[$0] = $32;
      __label__ = 9;
      break;
     case 9:
      var $33 = HEAP[$0];
      HEAP[$retval] = $33;
      __label__ = 10;
      break;
     case 10:
      var $retval9 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval9;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _element2($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 18) {
        __label__ = 6;
        break;
      } else if ($1 == 20) {
        __label__ = 2;
        break;
      } else if ($1 == 23) {
        __label__ = 5;
        break;
      } else if ($1 == 30) {
        __label__ = 7;
        break;
      } else if ($1 == 31) {
        __label__ = 8;
        break;
      } else if ($1 == 32) {
        __label__ = 9;
        break;
      } else if ($1 == 41) {
        __label__ = 6;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 1:
      HEAP[$0] = 39;
      __label__ = 11;
      break;
     case 2:
      
      
      var $4 = HEAP[HEAP[$enc_addr] + 28];
      
      
      
      
      var $9 = HEAP[$ptr_addr] + HEAP[HEAP[$enc_addr] + 68];
      var $10 = HEAP[$enc_addr];
      var $11 = HEAP[$end_addr];
      var $12 = FUNCTION_TABLE[$4]($10, $9, $11, _KW_PCDATA);
      
      if ($12 != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      var $15 = HEAP[$state_addr];
      HEAP[$15] = FUNCTION_TABLE_OFFSET + 176;
      HEAP[$0] = 43;
      __label__ = 11;
      break;
     case 4:
      __label__ = 10;
      break;
     case 5:
      
      var $17 = HEAP[$state_addr] + 4;
      HEAP[$17] = 2;
      
      var $19 = HEAP[$state_addr];
      HEAP[$19] = FUNCTION_TABLE_OFFSET + 178;
      HEAP[$0] = 44;
      __label__ = 11;
      break;
     case 6:
      
      var $21 = HEAP[$state_addr];
      HEAP[$21] = FUNCTION_TABLE_OFFSET + 180;
      HEAP[$0] = 51;
      __label__ = 11;
      break;
     case 7:
      
      var $23 = HEAP[$state_addr];
      HEAP[$23] = FUNCTION_TABLE_OFFSET + 180;
      HEAP[$0] = 53;
      __label__ = 11;
      break;
     case 8:
      
      var $25 = HEAP[$state_addr];
      HEAP[$25] = FUNCTION_TABLE_OFFSET + 180;
      HEAP[$0] = 52;
      __label__ = 11;
      break;
     case 9:
      
      var $27 = HEAP[$state_addr];
      HEAP[$27] = FUNCTION_TABLE_OFFSET + 180;
      HEAP[$0] = 54;
      __label__ = 11;
      break;
     case 10:
      var $28 = HEAP[$state_addr];
      var $29 = HEAP[$tok_addr];
      var $30 = _common($28, $29);
      HEAP[$0] = $30;
      __label__ = 11;
      break;
     case 11:
      var $31 = HEAP[$0];
      HEAP[$retval] = $31;
      __label__ = 12;
      break;
     case 12:
      var $retval11 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval11;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _element3($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 21) {
        __label__ = 4;
        break;
      } else if ($1 == 24) {
        __label__ = 2;
        break;
      } else if ($1 == 36) {
        __label__ = 3;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 1:
      HEAP[$0] = 39;
      __label__ = 6;
      break;
     case 2:
      
      var $3 = HEAP[$state_addr];
      HEAP[$3] = FUNCTION_TABLE_OFFSET + 134;
      
      var $5 = HEAP[$state_addr] + 8;
      HEAP[$5] = 39;
      HEAP[$0] = 45;
      __label__ = 6;
      break;
     case 3:
      
      var $7 = HEAP[$state_addr];
      HEAP[$7] = FUNCTION_TABLE_OFFSET + 134;
      
      var $9 = HEAP[$state_addr] + 8;
      HEAP[$9] = 39;
      HEAP[$0] = 46;
      __label__ = 6;
      break;
     case 4:
      
      var $11 = HEAP[$state_addr];
      HEAP[$11] = FUNCTION_TABLE_OFFSET + 182;
      HEAP[$0] = 39;
      __label__ = 6;
      break;
     case 5:
      var $12 = HEAP[$state_addr];
      var $13 = HEAP[$tok_addr];
      var $14 = _common($12, $13);
      HEAP[$0] = $14;
      __label__ = 6;
      break;
     case 6:
      var $15 = HEAP[$0];
      HEAP[$retval] = $15;
      __label__ = 7;
      break;
     case 7:
      var $retval6 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval6;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _element4($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 18) {
        __label__ = 2;
        break;
      } else if ($1 == 41) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      HEAP[$0] = 39;
      __label__ = 4;
      break;
     case 2:
      
      var $3 = HEAP[$state_addr];
      HEAP[$3] = FUNCTION_TABLE_OFFSET + 184;
      HEAP[$0] = 51;
      __label__ = 4;
      break;
     case 3:
      var $4 = HEAP[$state_addr];
      var $5 = HEAP[$tok_addr];
      var $6 = _common($4, $5);
      HEAP[$0] = $6;
      __label__ = 4;
      break;
     case 4:
      var $7 = HEAP[$0];
      HEAP[$retval] = $7;
      __label__ = 5;
      break;
     case 5:
      var $retval4 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval4;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _element5($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 21) {
        __label__ = 3;
        break;
      } else if ($1 == 36) {
        __label__ = 2;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 1:
      HEAP[$0] = 39;
      __label__ = 5;
      break;
     case 2:
      
      var $3 = HEAP[$state_addr];
      HEAP[$3] = FUNCTION_TABLE_OFFSET + 134;
      
      var $5 = HEAP[$state_addr] + 8;
      HEAP[$5] = 39;
      HEAP[$0] = 46;
      __label__ = 5;
      break;
     case 3:
      
      var $7 = HEAP[$state_addr];
      HEAP[$7] = FUNCTION_TABLE_OFFSET + 182;
      HEAP[$0] = 39;
      __label__ = 5;
      break;
     case 4:
      var $8 = HEAP[$state_addr];
      var $9 = HEAP[$tok_addr];
      var $10 = _common($8, $9);
      HEAP[$0] = $10;
      __label__ = 5;
      break;
     case 5:
      var $11 = HEAP[$0];
      HEAP[$retval] = $11;
      __label__ = 6;
      break;
     case 6:
      var $retval5 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval5;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _element6($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 18) {
        __label__ = 3;
        break;
      } else if ($1 == 23) {
        __label__ = 2;
        break;
      } else if ($1 == 30) {
        __label__ = 4;
        break;
      } else if ($1 == 31) {
        __label__ = 5;
        break;
      } else if ($1 == 32) {
        __label__ = 6;
        break;
      } else if ($1 == 41) {
        __label__ = 3;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 1:
      HEAP[$0] = 39;
      __label__ = 8;
      break;
     case 2:
      
      
      
      var $5 = HEAP[HEAP[$state_addr] + 4] + 1;
      
      var $7 = HEAP[$state_addr] + 4;
      HEAP[$7] = $5;
      HEAP[$0] = 44;
      __label__ = 8;
      break;
     case 3:
      
      var $9 = HEAP[$state_addr];
      HEAP[$9] = FUNCTION_TABLE_OFFSET + 180;
      HEAP[$0] = 51;
      __label__ = 8;
      break;
     case 4:
      
      var $11 = HEAP[$state_addr];
      HEAP[$11] = FUNCTION_TABLE_OFFSET + 180;
      HEAP[$0] = 53;
      __label__ = 8;
      break;
     case 5:
      
      var $13 = HEAP[$state_addr];
      HEAP[$13] = FUNCTION_TABLE_OFFSET + 180;
      HEAP[$0] = 52;
      __label__ = 8;
      break;
     case 6:
      
      var $15 = HEAP[$state_addr];
      HEAP[$15] = FUNCTION_TABLE_OFFSET + 180;
      HEAP[$0] = 54;
      __label__ = 8;
      break;
     case 7:
      var $16 = HEAP[$state_addr];
      var $17 = HEAP[$tok_addr];
      var $18 = _common($16, $17);
      HEAP[$0] = $18;
      __label__ = 8;
      break;
     case 8:
      var $19 = HEAP[$0];
      HEAP[$retval] = $19;
      __label__ = 9;
      break;
     case 9:
      var $retval8 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval8;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _element7($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 21) {
        __label__ = 15;
        break;
      } else if ($1 == 24) {
        __label__ = 2;
        break;
      } else if ($1 == 35) {
        __label__ = 8;
        break;
      } else if ($1 == 36) {
        __label__ = 5;
        break;
      } else if ($1 == 37) {
        __label__ = 11;
        break;
      } else if ($1 == 38) {
        __label__ = 14;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 1:
      HEAP[$0] = 39;
      __label__ = 17;
      break;
     case 2:
      
      
      
      var $5 = HEAP[HEAP[$state_addr] + 4] - 1;
      
      var $7 = HEAP[$state_addr] + 4;
      HEAP[$7] = $5;
      
      
      
      
      if (HEAP[HEAP[$state_addr] + 4] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      var $13 = HEAP[$state_addr];
      HEAP[$13] = FUNCTION_TABLE_OFFSET + 134;
      
      var $15 = HEAP[$state_addr] + 8;
      HEAP[$15] = 39;
      __label__ = 4;
      break;
     case 4:
      HEAP[$0] = 45;
      __label__ = 17;
      break;
     case 5:
      
      
      
      var $19 = HEAP[HEAP[$state_addr] + 4] - 1;
      
      var $21 = HEAP[$state_addr] + 4;
      HEAP[$21] = $19;
      
      
      
      
      if (HEAP[HEAP[$state_addr] + 4] == 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      
      var $27 = HEAP[$state_addr];
      HEAP[$27] = FUNCTION_TABLE_OFFSET + 134;
      
      var $29 = HEAP[$state_addr] + 8;
      HEAP[$29] = 39;
      __label__ = 7;
      break;
     case 7:
      HEAP[$0] = 46;
      __label__ = 17;
      break;
     case 8:
      
      
      
      var $33 = HEAP[HEAP[$state_addr] + 4] - 1;
      
      var $35 = HEAP[$state_addr] + 4;
      HEAP[$35] = $33;
      
      
      
      
      if (HEAP[HEAP[$state_addr] + 4] == 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      
      var $41 = HEAP[$state_addr];
      HEAP[$41] = FUNCTION_TABLE_OFFSET + 134;
      
      var $43 = HEAP[$state_addr] + 8;
      HEAP[$43] = 39;
      __label__ = 10;
      break;
     case 10:
      HEAP[$0] = 47;
      __label__ = 17;
      break;
     case 11:
      
      
      
      var $47 = HEAP[HEAP[$state_addr] + 4] - 1;
      
      var $49 = HEAP[$state_addr] + 4;
      HEAP[$49] = $47;
      
      
      
      
      if (HEAP[HEAP[$state_addr] + 4] == 0) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      
      var $55 = HEAP[$state_addr];
      HEAP[$55] = FUNCTION_TABLE_OFFSET + 134;
      
      var $57 = HEAP[$state_addr] + 8;
      HEAP[$57] = 39;
      __label__ = 13;
      break;
     case 13:
      HEAP[$0] = 48;
      __label__ = 17;
      break;
     case 14:
      
      var $59 = HEAP[$state_addr];
      HEAP[$59] = FUNCTION_TABLE_OFFSET + 178;
      HEAP[$0] = 50;
      __label__ = 17;
      break;
     case 15:
      
      var $61 = HEAP[$state_addr];
      HEAP[$61] = FUNCTION_TABLE_OFFSET + 178;
      HEAP[$0] = 49;
      __label__ = 17;
      break;
     case 16:
      var $62 = HEAP[$state_addr];
      var $63 = HEAP[$tok_addr];
      var $64 = _common($62, $63);
      HEAP[$0] = $64;
      __label__ = 17;
      break;
     case 17:
      var $65 = HEAP[$0];
      HEAP[$retval] = $65;
      __label__ = 18;
      break;
     case 18:
      var $retval17 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval17;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _condSect0($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 18) {
        __label__ = 2;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 1:
      HEAP[$0] = 0;
      __label__ = 7;
      break;
     case 2:
      
      
      var $4 = HEAP[HEAP[$enc_addr] + 28];
      var $5 = HEAP[$enc_addr];
      var $6 = HEAP[$ptr_addr];
      var $7 = HEAP[$end_addr];
      var $8 = FUNCTION_TABLE[$4]($5, $6, $7, _KW_INCLUDE);
      
      if ($8 != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      var $11 = HEAP[$state_addr];
      HEAP[$11] = FUNCTION_TABLE_OFFSET + 186;
      HEAP[$0] = 0;
      __label__ = 7;
      break;
     case 4:
      
      
      var $14 = HEAP[HEAP[$enc_addr] + 28];
      var $15 = HEAP[$enc_addr];
      var $16 = HEAP[$ptr_addr];
      var $17 = HEAP[$end_addr];
      var $18 = FUNCTION_TABLE[$14]($15, $16, $17, _KW_IGNORE);
      
      if ($18 != 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      
      var $21 = HEAP[$state_addr];
      HEAP[$21] = FUNCTION_TABLE_OFFSET + 188;
      HEAP[$0] = 0;
      __label__ = 7;
      break;
     case 6:
      var $22 = HEAP[$state_addr];
      var $23 = HEAP[$tok_addr];
      var $24 = _common($22, $23);
      HEAP[$0] = $24;
      __label__ = 7;
      break;
     case 7:
      var $25 = HEAP[$0];
      HEAP[$retval] = $25;
      __label__ = 8;
      break;
     case 8:
      var $retval7 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval7;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _condSect1($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 25) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      HEAP[$0] = 0;
      __label__ = 4;
      break;
     case 2:
      
      var $3 = HEAP[$state_addr];
      HEAP[$3] = FUNCTION_TABLE_OFFSET + 120;
      
      
      
      var $7 = HEAP[HEAP[$state_addr] + 12] + 1;
      
      var $9 = HEAP[$state_addr] + 12;
      HEAP[$9] = $7;
      HEAP[$0] = 0;
      __label__ = 4;
      break;
     case 3:
      var $10 = HEAP[$state_addr];
      var $11 = HEAP[$tok_addr];
      var $12 = _common($10, $11);
      HEAP[$0] = $12;
      __label__ = 4;
      break;
     case 4:
      var $13 = HEAP[$0];
      HEAP[$retval] = $13;
      __label__ = 5;
      break;
     case 5:
      var $retval4 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval4;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _condSect2($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 25) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      HEAP[$0] = 0;
      __label__ = 4;
      break;
     case 2:
      
      var $3 = HEAP[$state_addr];
      HEAP[$3] = FUNCTION_TABLE_OFFSET + 120;
      HEAP[$0] = 58;
      __label__ = 4;
      break;
     case 3:
      var $4 = HEAP[$state_addr];
      var $5 = HEAP[$tok_addr];
      var $6 = _common($4, $5);
      HEAP[$0] = $6;
      __label__ = 4;
      break;
     case 4:
      var $7 = HEAP[$0];
      HEAP[$retval] = $7;
      __label__ = 5;
      break;
     case 5:
      var $retval4 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval4;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _declClose($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 32;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $iftmp_5 = __stackBase__ + 24;
      var $0 = __stackBase__ + 28;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      var $1 = HEAP[$tok_addr];
      if ($1 == 15) {
        __label__ = 1;
        break;
      } else if ($1 == 17) {
        __label__ = 2;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 1:
      
      
      var $4 = HEAP[HEAP[$state_addr] + 8];
      HEAP[$0] = $4;
      __label__ = 7;
      break;
     case 2:
      
      
      
      
      if (HEAP[HEAP[$state_addr] + 16] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      HEAP[$iftmp_5] = FUNCTION_TABLE_OFFSET + 100;
      __label__ = 5;
      break;
     case 4:
      HEAP[$iftmp_5] = FUNCTION_TABLE_OFFSET + 120;
      __label__ = 5;
      break;
     case 5:
      
      var $10 = HEAP[$state_addr];
      var $11 = HEAP[$iftmp_5];
      HEAP[$10] = $11;
      
      
      var $14 = HEAP[HEAP[$state_addr] + 8];
      HEAP[$0] = $14;
      __label__ = 7;
      break;
     case 6:
      var $15 = HEAP[$state_addr];
      var $16 = HEAP[$tok_addr];
      var $17 = _common($15, $16);
      HEAP[$0] = $17;
      __label__ = 7;
      break;
     case 7:
      var $18 = HEAP[$0];
      HEAP[$retval] = $18;
      __label__ = 8;
      break;
     case 8:
      var $retval7 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval7;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _error($state, $tok, $ptr, $end, $enc) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $tok_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $enc_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[__stackBase__] = $state;
      HEAP[$tok_addr] = $tok;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$enc_addr] = $enc;
      HEAP[$0] = 0;
      var $1 = HEAP[$0];
      HEAP[$retval] = $1;
      __label__ = 1;
      break;
     case 1:
      var $retval1 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval1;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _common($state, $tok) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      var $tok_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      
      HEAP[$state_addr] = $state;
      HEAP[$tok_addr] = $tok;
      
      
      
      
      if (HEAP[HEAP[$state_addr] + 16] == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      
      
      if (HEAP[$tok_addr] == 28) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      HEAP[$0] = 59;
      __label__ = 4;
      break;
     case 3:
      
      var $8 = HEAP[$state_addr];
      HEAP[$8] = FUNCTION_TABLE_OFFSET + 96;
      HEAP[$0] = -1;
      __label__ = 4;
      break;
     case 4:
      var $9 = HEAP[$0];
      HEAP[$retval] = $9;
      __label__ = 5;
      break;
     case 5:
      var $retval4 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval4;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XmlPrologStateInit($state) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 4;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      
      HEAP[$state_addr] = $state;
      
      var $1 = HEAP[$state_addr];
      HEAP[$1] = FUNCTION_TABLE_OFFSET + 190;
      
      var $3 = HEAP[$state_addr] + 16;
      HEAP[$3] = 1;
      
      var $5 = HEAP[$state_addr] + 12;
      HEAP[$5] = 0;
      
      var $7 = HEAP[$state_addr] + 20;
      HEAP[$7] = 0;
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XmlPrologStateInitExternalEntity($state) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 4;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $state_addr = __stackBase__;
      
      HEAP[$state_addr] = $state;
      
      var $1 = HEAP[$state_addr];
      HEAP[$1] = FUNCTION_TABLE_OFFSET + 192;
      
      var $3 = HEAP[$state_addr] + 16;
      HEAP[$3] = 0;
      
      var $5 = HEAP[$state_addr] + 12;
      HEAP[$5] = 0;
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _isNever($enc, $p) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $p_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      
      HEAP[__stackBase__] = $enc;
      HEAP[$p_addr] = $p;
      HEAP[$0] = 0;
      var $1 = HEAP[$0];
      HEAP[$retval] = $1;
      __label__ = 1;
      break;
     case 1:
      var $retval1 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval1;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _utf8_isName2($enc, $p) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $p_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      
      HEAP[__stackBase__] = $enc;
      HEAP[$p_addr] = $p;
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      var $33 = HEAP[_namingBitmap + ((HEAP[_namePages + (HEAP[HEAP[$p_addr]] >>> 2 & 7)] << 3) + ((HEAP[HEAP[$p_addr]] & 3) << 1) + (HEAP[HEAP[$p_addr] + 1] >>> 5 & 1)) * 4] & 1 << (HEAP[HEAP[$p_addr] + 1] & 31);
      HEAP[$0] = $33;
      var $34 = HEAP[$0];
      HEAP[$retval] = $34;
      __label__ = 1;
      break;
     case 1:
      var $retval1 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval1;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _utf8_isName3($enc, $p) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $p_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      
      HEAP[__stackBase__] = $enc;
      HEAP[$p_addr] = $p;
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      var $40 = HEAP[_namingBitmap + ((HEAP[_namePages + (((HEAP[HEAP[$p_addr]] & 15) << 4) + (HEAP[HEAP[$p_addr] + 1] >>> 2 & 15))] << 3) + ((HEAP[HEAP[$p_addr] + 1] & 3) << 1) + (HEAP[HEAP[$p_addr] + 2] >>> 5 & 1)) * 4] & 1 << (HEAP[HEAP[$p_addr] + 2] & 31);
      HEAP[$0] = $40;
      var $41 = HEAP[$0];
      HEAP[$retval] = $41;
      __label__ = 1;
      break;
     case 1:
      var $retval1 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval1;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _utf8_isNmstrt2($enc, $p) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $p_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      
      HEAP[__stackBase__] = $enc;
      HEAP[$p_addr] = $p;
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      var $33 = HEAP[_namingBitmap + ((HEAP[_nmstrtPages + (HEAP[HEAP[$p_addr]] >>> 2 & 7)] << 3) + ((HEAP[HEAP[$p_addr]] & 3) << 1) + (HEAP[HEAP[$p_addr] + 1] >>> 5 & 1)) * 4] & 1 << (HEAP[HEAP[$p_addr] + 1] & 31);
      HEAP[$0] = $33;
      var $34 = HEAP[$0];
      HEAP[$retval] = $34;
      __label__ = 1;
      break;
     case 1:
      var $retval1 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval1;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _utf8_isNmstrt3($enc, $p) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $p_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      
      HEAP[__stackBase__] = $enc;
      HEAP[$p_addr] = $p;
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      var $40 = HEAP[_namingBitmap + ((HEAP[_nmstrtPages + (((HEAP[HEAP[$p_addr]] & 15) << 4) + (HEAP[HEAP[$p_addr] + 1] >>> 2 & 15))] << 3) + ((HEAP[HEAP[$p_addr] + 1] & 3) << 1) + (HEAP[HEAP[$p_addr] + 2] >>> 5 & 1)) * 4] & 1 << (HEAP[HEAP[$p_addr] + 2] & 31);
      HEAP[$0] = $40;
      var $41 = HEAP[$0];
      HEAP[$retval] = $41;
      __label__ = 1;
      break;
     case 1:
      var $retval1 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval1;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _utf8_isInvalid2($enc, $p) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 20;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $p_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $iftmp_18 = __stackBase__ + 12;
      var $0 = __stackBase__ + 16;
      
      HEAP[__stackBase__] = $enc;
      HEAP[$p_addr] = $p;
      
      
      
      if (HEAP[HEAP[$p_addr]] <= 193) {
        __label__ = 3;
        break;
      } else {
        __label__ = 1;
        break;
      }
     case 1:
      
      
      
      
      if (HEAP[HEAP[$p_addr] + 1] >= 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      
      
      
      
      
      
      if ((HEAP[HEAP[$p_addr] + 1] & 192) == 192) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      HEAP[$iftmp_18] = 1;
      __label__ = 5;
      break;
     case 4:
      HEAP[$iftmp_18] = 0;
      __label__ = 5;
      break;
     case 5:
      var $14 = HEAP[$iftmp_18];
      HEAP[$0] = $14;
      var $15 = HEAP[$0];
      HEAP[$retval] = $15;
      __label__ = 6;
      break;
     case 6:
      var $retval5 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval5;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _utf8_isInvalid3($enc, $p) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $p_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $iftmp_32 = __stackBase__ + 12;
      var $iftmp_29 = __stackBase__ + 16;
      var $iftmp_22 = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[__stackBase__] = $enc;
      HEAP[$p_addr] = $p;
      
      
      
      
      if (HEAP[HEAP[$p_addr] + 2] >= 0) {
        __label__ = 19;
        break;
      } else {
        __label__ = 1;
        break;
      }
     case 1:
      
      
      var $7 = HEAP[HEAP[$p_addr]] != -17;
      if ($7) {
        __label__ = 5;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      
      
      
      var $11 = HEAP[HEAP[$p_addr] + 1] != -65;
      if ($11) {
        __label__ = 5;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 3:
      
      
      
      
      if (HEAP[HEAP[$p_addr] + 2] > 189) {
        __label__ = 19;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 4:
      __label__ = 6;
      break;
     case 5:
      
      
      
      
      
      
      if ((HEAP[HEAP[$p_addr] + 2] & 192) == 192) {
        __label__ = 19;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 6:
      
      
      var $24 = HEAP[HEAP[$p_addr]] == -32;
      if ($24) {
        __label__ = 7;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 7:
      
      
      
      
      if (HEAP[HEAP[$p_addr] + 1] <= 159) {
        __label__ = 9;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 8:
      
      
      
      
      
      
      if ((HEAP[HEAP[$p_addr] + 1] & 192) == 192) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      HEAP[$iftmp_29] = 1;
      __label__ = 11;
      break;
     case 10:
      HEAP[$iftmp_29] = 0;
      __label__ = 11;
      break;
     case 11:
      
      
      
      if ((HEAP[$iftmp_29] & 255) != 0) {
        __label__ = 19;
        break;
      } else {
        __label__ = 20;
        break;
      }
     case 12:
      
      
      
      
      if (HEAP[HEAP[$p_addr] + 1] >= 0) {
        __label__ = 16;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 13:
      
      
      var $43 = HEAP[HEAP[$p_addr]] == -19;
      if ($43) {
        __label__ = 14;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 14:
      
      
      
      
      if (HEAP[HEAP[$p_addr] + 1] > 159) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 15:
      
      
      
      
      
      
      if ((HEAP[HEAP[$p_addr] + 1] & 192) == 192) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      HEAP[$iftmp_32] = 1;
      __label__ = 18;
      break;
     case 17:
      HEAP[$iftmp_32] = 0;
      __label__ = 18;
      break;
     case 18:
      
      
      
      if ((HEAP[$iftmp_32] & 255) != 0) {
        __label__ = 19;
        break;
      } else {
        __label__ = 20;
        break;
      }
     case 19:
      HEAP[$iftmp_22] = 1;
      __label__ = 21;
      break;
     case 20:
      HEAP[$iftmp_22] = 0;
      __label__ = 21;
      break;
     case 21:
      var $56 = HEAP[$iftmp_22];
      HEAP[$0] = $56;
      var $57 = HEAP[$0];
      HEAP[$retval] = $57;
      __label__ = 22;
      break;
     case 22:
      var $retval22 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval22;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _utf8_isInvalid4($enc, $p) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $p_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $iftmp_46 = __stackBase__ + 12;
      var $iftmp_43 = __stackBase__ + 16;
      var $iftmp_37 = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[__stackBase__] = $enc;
      HEAP[$p_addr] = $p;
      
      
      
      
      if (HEAP[HEAP[$p_addr] + 3] >= 0) {
        __label__ = 17;
        break;
      } else {
        __label__ = 1;
        break;
      }
     case 1:
      
      
      
      
      
      
      if ((HEAP[HEAP[$p_addr] + 3] & 192) == 192) {
        __label__ = 17;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      
      
      
      
      if (HEAP[HEAP[$p_addr] + 2] >= 0) {
        __label__ = 17;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 3:
      
      
      
      
      
      
      if ((HEAP[HEAP[$p_addr] + 2] & 192) == 192) {
        __label__ = 17;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 4:
      
      
      var $23 = HEAP[HEAP[$p_addr]] == -16;
      if ($23) {
        __label__ = 5;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 5:
      
      
      
      
      if (HEAP[HEAP[$p_addr] + 1] <= 143) {
        __label__ = 7;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 6:
      
      
      
      
      
      
      if ((HEAP[HEAP[$p_addr] + 1] & 192) == 192) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      HEAP[$iftmp_43] = 1;
      __label__ = 9;
      break;
     case 8:
      HEAP[$iftmp_43] = 0;
      __label__ = 9;
      break;
     case 9:
      
      
      
      if ((HEAP[$iftmp_43] & 255) != 0) {
        __label__ = 17;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 10:
      
      
      
      
      if (HEAP[HEAP[$p_addr] + 1] >= 0) {
        __label__ = 14;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 11:
      
      
      var $42 = HEAP[HEAP[$p_addr]] == -12;
      if ($42) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      
      
      
      
      if (HEAP[HEAP[$p_addr] + 1] > 143) {
        __label__ = 14;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 13:
      
      
      
      
      
      
      if ((HEAP[HEAP[$p_addr] + 1] & 192) == 192) {
        __label__ = 14;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 14:
      HEAP[$iftmp_46] = 1;
      __label__ = 16;
      break;
     case 15:
      HEAP[$iftmp_46] = 0;
      __label__ = 16;
      break;
     case 16:
      
      
      
      if ((HEAP[$iftmp_46] & 255) != 0) {
        __label__ = 17;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 17:
      HEAP[$iftmp_37] = 1;
      __label__ = 19;
      break;
     case 18:
      HEAP[$iftmp_37] = 0;
      __label__ = 19;
      break;
     case 19:
      var $55 = HEAP[$iftmp_37];
      HEAP[$0] = $55;
      var $56 = HEAP[$0];
      HEAP[$retval] = $56;
      __label__ = 20;
      break;
     case 20:
      var $retval20 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval20;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _normal_scanComment($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 24;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 32;
        break;
      }
     case 1:
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 45) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      var $7 = HEAP[$nextTokPtr_addr];
      var $8 = HEAP[$ptr_addr];
      HEAP[$7] = $8;
      HEAP[$0] = 0;
      __label__ = 33;
      break;
     case 3:
      
      var $10 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $10;
      __label__ = 31;
      break;
     case 4:
      
      
      
      
      
      
      
      
      var $19 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($19 == 0) {
        __label__ = 20;
        break;
      } else if ($19 == 1) {
        __label__ = 20;
        break;
      } else if ($19 == 5) {
        __label__ = 5;
        break;
      } else if ($19 == 6) {
        __label__ = 10;
        break;
      } else if ($19 == 7) {
        __label__ = 15;
        break;
      } else if ($19 == 8) {
        __label__ = 20;
        break;
      } else if ($19 == 27) {
        __label__ = 21;
        break;
      } else {
        __label__ = 30;
        break;
      }
     case 5:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      HEAP[$0] = -2;
      __label__ = 33;
      break;
     case 7:
      
      
      
      var $29 = HEAP[HEAP[$enc_addr] + 356];
      var $30 = HEAP[$enc_addr];
      var $31 = HEAP[$ptr_addr];
      var $32 = FUNCTION_TABLE[$29]($30, $31);
      
      if ($32 != 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      var $34 = HEAP[$nextTokPtr_addr];
      var $35 = HEAP[$ptr_addr];
      HEAP[$34] = $35;
      HEAP[$0] = 0;
      __label__ = 33;
      break;
     case 9:
      
      var $37 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $37;
      __label__ = 31;
      break;
     case 10:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      HEAP[$0] = -2;
      __label__ = 33;
      break;
     case 12:
      
      
      
      var $47 = HEAP[HEAP[$enc_addr] + 360];
      var $48 = HEAP[$enc_addr];
      var $49 = HEAP[$ptr_addr];
      var $50 = FUNCTION_TABLE[$47]($48, $49);
      
      if ($50 != 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      var $52 = HEAP[$nextTokPtr_addr];
      var $53 = HEAP[$ptr_addr];
      HEAP[$52] = $53;
      HEAP[$0] = 0;
      __label__ = 33;
      break;
     case 14:
      
      var $55 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $55;
      __label__ = 31;
      break;
     case 15:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      HEAP[$0] = -2;
      __label__ = 33;
      break;
     case 17:
      
      
      
      var $65 = HEAP[HEAP[$enc_addr] + 364];
      var $66 = HEAP[$enc_addr];
      var $67 = HEAP[$ptr_addr];
      var $68 = FUNCTION_TABLE[$65]($66, $67);
      
      if ($68 != 0) {
        __label__ = 18;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 18:
      var $70 = HEAP[$nextTokPtr_addr];
      var $71 = HEAP[$ptr_addr];
      HEAP[$70] = $71;
      HEAP[$0] = 0;
      __label__ = 33;
      break;
     case 19:
      
      var $73 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $73;
      __label__ = 31;
      break;
     case 20:
      var $74 = HEAP[$nextTokPtr_addr];
      var $75 = HEAP[$ptr_addr];
      HEAP[$74] = $75;
      HEAP[$0] = 0;
      __label__ = 33;
      break;
     case 21:
      
      var $77 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $77;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 22;
        break;
      } else {
        __label__ = 23;
        break;
      }
     case 22:
      HEAP[$0] = -1;
      __label__ = 33;
      break;
     case 23:
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 45) {
        __label__ = 24;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 24:
      
      var $85 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $85;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 25;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 25:
      HEAP[$0] = -1;
      __label__ = 33;
      break;
     case 26:
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 62) {
        __label__ = 27;
        break;
      } else {
        __label__ = 28;
        break;
      }
     case 27:
      var $92 = HEAP[$nextTokPtr_addr];
      var $93 = HEAP[$ptr_addr];
      HEAP[$92] = $93;
      HEAP[$0] = 0;
      __label__ = 33;
      break;
     case 28:
      
      var $95 = HEAP[$ptr_addr] + 1;
      var $96 = HEAP[$nextTokPtr_addr];
      HEAP[$96] = $95;
      HEAP[$0] = 13;
      __label__ = 33;
      break;
     case 29:
      __label__ = 31;
      break;
     case 30:
      
      var $98 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $98;
      __label__ = 31;
      break;
     case 31:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 4;
        break;
      } else {
        __label__ = 32;
        break;
      }
     case 32:
      HEAP[$0] = -1;
      __label__ = 33;
      break;
     case 33:
      var $102 = HEAP[$0];
      HEAP[$retval] = $102;
      __label__ = 34;
      break;
     case 34:
      var $retval33 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval33;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _normal_scanDecl($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 24;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -1;
      __label__ = 17;
      break;
     case 2:
      
      
      
      
      
      
      
      
      var $12 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($12 == 20) {
        __label__ = 4;
        break;
      } else if ($12 == 22) {
        __label__ = 5;
        break;
      } else if ($12 == 24) {
        __label__ = 5;
        break;
      } else if ($12 == 27) {
        __label__ = 3;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 3:
      
      var $14 = HEAP[$ptr_addr] + 1;
      var $15 = HEAP[$enc_addr];
      var $16 = HEAP[$end_addr];
      var $17 = HEAP[$nextTokPtr_addr];
      var $18 = _normal_scanComment($15, $14, $16, $17);
      HEAP[$0] = $18;
      __label__ = 17;
      break;
     case 4:
      
      var $20 = HEAP[$ptr_addr] + 1;
      var $21 = HEAP[$nextTokPtr_addr];
      HEAP[$21] = $20;
      HEAP[$0] = 33;
      __label__ = 17;
      break;
     case 5:
      
      var $23 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $23;
      __label__ = 15;
      break;
     case 6:
      var $24 = HEAP[$nextTokPtr_addr];
      var $25 = HEAP[$ptr_addr];
      HEAP[$24] = $25;
      HEAP[$0] = 0;
      __label__ = 17;
      break;
     case 7:
      
      
      
      
      
      
      
      
      var $34 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($34 == 9) {
        __label__ = 12;
        break;
      } else if ($34 == 10) {
        __label__ = 12;
        break;
      } else if ($34 == 21) {
        __label__ = 12;
        break;
      } else if ($34 == 22) {
        __label__ = 13;
        break;
      } else if ($34 == 24) {
        __label__ = 13;
        break;
      } else if ($34 == 30) {
        __label__ = 8;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 8:
      
      
      
      
      if (HEAP[$ptr_addr] + 1 == HEAP[$end_addr]) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      HEAP[$0] = -1;
      __label__ = 17;
      break;
     case 10:
      
      
      
      
      
      
      
      
      
      var $48 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      if ($48 == 9) {
        __label__ = 11;
        break;
      } else if ($48 == 10) {
        __label__ = 11;
        break;
      } else if ($48 == 21) {
        __label__ = 11;
        break;
      } else if ($48 == 30) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      var $49 = HEAP[$nextTokPtr_addr];
      var $50 = HEAP[$ptr_addr];
      HEAP[$49] = $50;
      HEAP[$0] = 0;
      __label__ = 17;
      break;
     case 12:
      var $51 = HEAP[$nextTokPtr_addr];
      var $52 = HEAP[$ptr_addr];
      HEAP[$51] = $52;
      HEAP[$0] = 16;
      __label__ = 17;
      break;
     case 13:
      
      var $54 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $54;
      __label__ = 15;
      break;
     case 14:
      var $55 = HEAP[$nextTokPtr_addr];
      var $56 = HEAP[$ptr_addr];
      HEAP[$55] = $56;
      HEAP[$0] = 0;
      __label__ = 17;
      break;
     case 15:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 7;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 16:
      HEAP[$0] = -1;
      __label__ = 17;
      break;
     case 17:
      var $60 = HEAP[$0];
      HEAP[$retval] = $60;
      __label__ = 18;
      break;
     case 18:
      var $retval17 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval17;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _normal_checkPiTarget($enc, $ptr, $end, $tokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $tokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $upper = __stackBase__ + 24;
      
      HEAP[__stackBase__] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$tokPtr_addr] = $tokPtr;
      HEAP[$upper] = 0;
      var $1 = HEAP[$tokPtr_addr];
      HEAP[$1] = 11;
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] != 3) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = 1;
      __label__ = 17;
      break;
     case 2:
      
      
      var $10 = HEAP[HEAP[$ptr_addr]];
      if ($10 == 88) {
        __label__ = 4;
        break;
      } else if ($10 == 120) {
        __label__ = 3;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 3:
      __label__ = 6;
      break;
     case 4:
      HEAP[$upper] = 1;
      __label__ = 6;
      break;
     case 5:
      HEAP[$0] = 1;
      __label__ = 17;
      break;
     case 6:
      
      var $12 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $12;
      
      
      var $15 = HEAP[HEAP[$ptr_addr]];
      if ($15 == 77) {
        __label__ = 8;
        break;
      } else if ($15 == 109) {
        __label__ = 7;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 7:
      __label__ = 10;
      break;
     case 8:
      HEAP[$upper] = 1;
      __label__ = 10;
      break;
     case 9:
      HEAP[$0] = 1;
      __label__ = 17;
      break;
     case 10:
      
      var $17 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $17;
      
      
      var $20 = HEAP[HEAP[$ptr_addr]];
      if ($20 == 76) {
        __label__ = 12;
        break;
      } else if ($20 == 108) {
        __label__ = 11;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 11:
      __label__ = 14;
      break;
     case 12:
      HEAP[$upper] = 1;
      __label__ = 14;
      break;
     case 13:
      HEAP[$0] = 1;
      __label__ = 17;
      break;
     case 14:
      
      
      if (HEAP[$upper] != 0) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      HEAP[$0] = 0;
      __label__ = 17;
      break;
     case 16:
      var $23 = HEAP[$tokPtr_addr];
      HEAP[$23] = 12;
      HEAP[$0] = 1;
      __label__ = 17;
      break;
     case 17:
      var $24 = HEAP[$0];
      HEAP[$retval] = $24;
      __label__ = 18;
      break;
     case 18:
      var $retval17 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval17;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _normal_scanPi($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 32;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $tok = __stackBase__ + 24;
      var $target = __stackBase__ + 28;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      var $1 = HEAP[$ptr_addr];
      HEAP[$target] = $1;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -1;
      __label__ = 77;
      break;
     case 2:
      
      
      
      
      
      
      
      
      var $13 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($13 == 5) {
        __label__ = 5;
        break;
      } else if ($13 == 6) {
        __label__ = 10;
        break;
      } else if ($13 == 7) {
        __label__ = 15;
        break;
      } else if ($13 == 22) {
        __label__ = 4;
        break;
      } else if ($13 == 24) {
        __label__ = 4;
        break;
      } else if ($13 == 29) {
        __label__ = 3;
        break;
      } else {
        __label__ = 20;
        break;
      }
     case 3:
      var $14 = HEAP[$nextTokPtr_addr];
      var $15 = HEAP[$ptr_addr];
      HEAP[$14] = $15;
      HEAP[$0] = 0;
      __label__ = 77;
      break;
     case 4:
      
      var $17 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $17;
      __label__ = 21;
      break;
     case 5:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      HEAP[$0] = -2;
      __label__ = 77;
      break;
     case 7:
      
      
      
      var $27 = HEAP[HEAP[$enc_addr] + 344];
      var $28 = HEAP[$enc_addr];
      var $29 = HEAP[$ptr_addr];
      var $30 = FUNCTION_TABLE[$27]($28, $29);
      
      if ($30 == 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      var $32 = HEAP[$nextTokPtr_addr];
      var $33 = HEAP[$ptr_addr];
      HEAP[$32] = $33;
      HEAP[$0] = 0;
      __label__ = 77;
      break;
     case 9:
      
      var $35 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $35;
      __label__ = 21;
      break;
     case 10:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      HEAP[$0] = -2;
      __label__ = 77;
      break;
     case 12:
      
      
      
      var $45 = HEAP[HEAP[$enc_addr] + 348];
      var $46 = HEAP[$enc_addr];
      var $47 = HEAP[$ptr_addr];
      var $48 = FUNCTION_TABLE[$45]($46, $47);
      
      if ($48 == 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      var $50 = HEAP[$nextTokPtr_addr];
      var $51 = HEAP[$ptr_addr];
      HEAP[$50] = $51;
      HEAP[$0] = 0;
      __label__ = 77;
      break;
     case 14:
      
      var $53 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $53;
      __label__ = 21;
      break;
     case 15:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      HEAP[$0] = -2;
      __label__ = 77;
      break;
     case 17:
      
      
      
      var $63 = HEAP[HEAP[$enc_addr] + 352];
      var $64 = HEAP[$enc_addr];
      var $65 = HEAP[$ptr_addr];
      var $66 = FUNCTION_TABLE[$63]($64, $65);
      
      if ($66 == 0) {
        __label__ = 18;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 18:
      var $68 = HEAP[$nextTokPtr_addr];
      var $69 = HEAP[$ptr_addr];
      HEAP[$68] = $69;
      HEAP[$0] = 0;
      __label__ = 77;
      break;
     case 19:
      
      var $71 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $71;
      __label__ = 21;
      break;
     case 20:
      var $72 = HEAP[$nextTokPtr_addr];
      var $73 = HEAP[$ptr_addr];
      HEAP[$72] = $73;
      HEAP[$0] = 0;
      __label__ = 77;
      break;
     case 21:
      __label__ = 75;
      break;
     case 22:
      
      
      
      
      
      
      
      
      var $82 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($82 == 5) {
        __label__ = 25;
        break;
      } else if ($82 == 6) {
        __label__ = 30;
        break;
      } else if ($82 == 7) {
        __label__ = 35;
        break;
      } else if ($82 == 9) {
        __label__ = 40;
        break;
      } else if ($82 == 10) {
        __label__ = 40;
        break;
      } else if ($82 == 15) {
        __label__ = 68;
        break;
      } else if ($82 == 21) {
        __label__ = 40;
        break;
      } else if ($82 == 22) {
        __label__ = 24;
        break;
      } else if ($82 == 24) {
        __label__ = 24;
        break;
      } else if ($82 == 25) {
        __label__ = 24;
        break;
      } else if ($82 == 26) {
        __label__ = 24;
        break;
      } else if ($82 == 27) {
        __label__ = 24;
        break;
      } else if ($82 == 29) {
        __label__ = 23;
        break;
      } else {
        __label__ = 74;
        break;
      }
     case 23:
      var $83 = HEAP[$nextTokPtr_addr];
      var $84 = HEAP[$ptr_addr];
      HEAP[$83] = $84;
      HEAP[$0] = 0;
      __label__ = 77;
      break;
     case 24:
      
      var $86 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $86;
      __label__ = 75;
      break;
     case 25:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 26;
        break;
      } else {
        __label__ = 27;
        break;
      }
     case 26:
      HEAP[$0] = -2;
      __label__ = 77;
      break;
     case 27:
      
      
      
      var $96 = HEAP[HEAP[$enc_addr] + 332];
      var $97 = HEAP[$enc_addr];
      var $98 = HEAP[$ptr_addr];
      var $99 = FUNCTION_TABLE[$96]($97, $98);
      
      if ($99 == 0) {
        __label__ = 28;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 28:
      var $101 = HEAP[$nextTokPtr_addr];
      var $102 = HEAP[$ptr_addr];
      HEAP[$101] = $102;
      HEAP[$0] = 0;
      __label__ = 77;
      break;
     case 29:
      
      var $104 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $104;
      __label__ = 75;
      break;
     case 30:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 31;
        break;
      } else {
        __label__ = 32;
        break;
      }
     case 31:
      HEAP[$0] = -2;
      __label__ = 77;
      break;
     case 32:
      
      
      
      var $114 = HEAP[HEAP[$enc_addr] + 336];
      var $115 = HEAP[$enc_addr];
      var $116 = HEAP[$ptr_addr];
      var $117 = FUNCTION_TABLE[$114]($115, $116);
      
      if ($117 == 0) {
        __label__ = 33;
        break;
      } else {
        __label__ = 34;
        break;
      }
     case 33:
      var $119 = HEAP[$nextTokPtr_addr];
      var $120 = HEAP[$ptr_addr];
      HEAP[$119] = $120;
      HEAP[$0] = 0;
      __label__ = 77;
      break;
     case 34:
      
      var $122 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $122;
      __label__ = 75;
      break;
     case 35:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 36;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 36:
      HEAP[$0] = -2;
      __label__ = 77;
      break;
     case 37:
      
      
      
      var $132 = HEAP[HEAP[$enc_addr] + 340];
      var $133 = HEAP[$enc_addr];
      var $134 = HEAP[$ptr_addr];
      var $135 = FUNCTION_TABLE[$132]($133, $134);
      
      if ($135 == 0) {
        __label__ = 38;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 38:
      var $137 = HEAP[$nextTokPtr_addr];
      var $138 = HEAP[$ptr_addr];
      HEAP[$137] = $138;
      HEAP[$0] = 0;
      __label__ = 77;
      break;
     case 39:
      
      var $140 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $140;
      __label__ = 75;
      break;
     case 40:
      var $141 = HEAP[$enc_addr];
      var $142 = HEAP[$target];
      var $143 = HEAP[$ptr_addr];
      var $144 = _normal_checkPiTarget($141, $142, $143, $tok);
      
      if ($144 == 0) {
        __label__ = 41;
        break;
      } else {
        __label__ = 42;
        break;
      }
     case 41:
      var $146 = HEAP[$nextTokPtr_addr];
      var $147 = HEAP[$ptr_addr];
      HEAP[$146] = $147;
      HEAP[$0] = 0;
      __label__ = 77;
      break;
     case 42:
      
      var $149 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $149;
      __label__ = 66;
      break;
     case 43:
      
      
      
      
      
      
      
      
      var $158 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($158 == 0) {
        __label__ = 59;
        break;
      } else if ($158 == 1) {
        __label__ = 59;
        break;
      } else if ($158 == 5) {
        __label__ = 44;
        break;
      } else if ($158 == 6) {
        __label__ = 49;
        break;
      } else if ($158 == 7) {
        __label__ = 54;
        break;
      } else if ($158 == 8) {
        __label__ = 59;
        break;
      } else if ($158 == 15) {
        __label__ = 60;
        break;
      } else {
        __label__ = 65;
        break;
      }
     case 44:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 45;
        break;
      } else {
        __label__ = 46;
        break;
      }
     case 45:
      HEAP[$0] = -2;
      __label__ = 77;
      break;
     case 46:
      
      
      
      var $168 = HEAP[HEAP[$enc_addr] + 356];
      var $169 = HEAP[$enc_addr];
      var $170 = HEAP[$ptr_addr];
      var $171 = FUNCTION_TABLE[$168]($169, $170);
      
      if ($171 != 0) {
        __label__ = 47;
        break;
      } else {
        __label__ = 48;
        break;
      }
     case 47:
      var $173 = HEAP[$nextTokPtr_addr];
      var $174 = HEAP[$ptr_addr];
      HEAP[$173] = $174;
      HEAP[$0] = 0;
      __label__ = 77;
      break;
     case 48:
      
      var $176 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $176;
      __label__ = 66;
      break;
     case 49:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 50;
        break;
      } else {
        __label__ = 51;
        break;
      }
     case 50:
      HEAP[$0] = -2;
      __label__ = 77;
      break;
     case 51:
      
      
      
      var $186 = HEAP[HEAP[$enc_addr] + 360];
      var $187 = HEAP[$enc_addr];
      var $188 = HEAP[$ptr_addr];
      var $189 = FUNCTION_TABLE[$186]($187, $188);
      
      if ($189 != 0) {
        __label__ = 52;
        break;
      } else {
        __label__ = 53;
        break;
      }
     case 52:
      var $191 = HEAP[$nextTokPtr_addr];
      var $192 = HEAP[$ptr_addr];
      HEAP[$191] = $192;
      HEAP[$0] = 0;
      __label__ = 77;
      break;
     case 53:
      
      var $194 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $194;
      __label__ = 66;
      break;
     case 54:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 55;
        break;
      } else {
        __label__ = 56;
        break;
      }
     case 55:
      HEAP[$0] = -2;
      __label__ = 77;
      break;
     case 56:
      
      
      
      var $204 = HEAP[HEAP[$enc_addr] + 364];
      var $205 = HEAP[$enc_addr];
      var $206 = HEAP[$ptr_addr];
      var $207 = FUNCTION_TABLE[$204]($205, $206);
      
      if ($207 != 0) {
        __label__ = 57;
        break;
      } else {
        __label__ = 58;
        break;
      }
     case 57:
      var $209 = HEAP[$nextTokPtr_addr];
      var $210 = HEAP[$ptr_addr];
      HEAP[$209] = $210;
      HEAP[$0] = 0;
      __label__ = 77;
      break;
     case 58:
      
      var $212 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $212;
      __label__ = 66;
      break;
     case 59:
      var $213 = HEAP[$nextTokPtr_addr];
      var $214 = HEAP[$ptr_addr];
      HEAP[$213] = $214;
      HEAP[$0] = 0;
      __label__ = 77;
      break;
     case 60:
      
      var $216 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $216;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 61;
        break;
      } else {
        __label__ = 62;
        break;
      }
     case 61:
      HEAP[$0] = -1;
      __label__ = 77;
      break;
     case 62:
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 62) {
        __label__ = 63;
        break;
      } else {
        __label__ = 64;
        break;
      }
     case 63:
      
      var $224 = HEAP[$ptr_addr] + 1;
      var $225 = HEAP[$nextTokPtr_addr];
      HEAP[$225] = $224;
      var $226 = HEAP[$tok];
      HEAP[$0] = $226;
      __label__ = 77;
      break;
     case 64:
      __label__ = 66;
      break;
     case 65:
      
      var $228 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $228;
      __label__ = 66;
      break;
     case 66:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 43;
        break;
      } else {
        __label__ = 67;
        break;
      }
     case 67:
      HEAP[$0] = -1;
      __label__ = 77;
      break;
     case 68:
      var $232 = HEAP[$enc_addr];
      var $233 = HEAP[$target];
      var $234 = HEAP[$ptr_addr];
      var $235 = _normal_checkPiTarget($232, $233, $234, $tok);
      
      if ($235 == 0) {
        __label__ = 69;
        break;
      } else {
        __label__ = 70;
        break;
      }
     case 69:
      var $237 = HEAP[$nextTokPtr_addr];
      var $238 = HEAP[$ptr_addr];
      HEAP[$237] = $238;
      HEAP[$0] = 0;
      __label__ = 77;
      break;
     case 70:
      
      var $240 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $240;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 71;
        break;
      } else {
        __label__ = 72;
        break;
      }
     case 71:
      HEAP[$0] = -1;
      __label__ = 77;
      break;
     case 72:
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 62) {
        __label__ = 73;
        break;
      } else {
        __label__ = 74;
        break;
      }
     case 73:
      
      var $248 = HEAP[$ptr_addr] + 1;
      var $249 = HEAP[$nextTokPtr_addr];
      HEAP[$249] = $248;
      var $250 = HEAP[$tok];
      HEAP[$0] = $250;
      __label__ = 77;
      break;
     case 74:
      var $251 = HEAP[$nextTokPtr_addr];
      var $252 = HEAP[$ptr_addr];
      HEAP[$251] = $252;
      HEAP[$0] = 0;
      __label__ = 77;
      break;
     case 75:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 22;
        break;
      } else {
        __label__ = 76;
        break;
      }
     case 76:
      HEAP[$0] = -1;
      __label__ = 77;
      break;
     case 77:
      var $256 = HEAP[$0];
      HEAP[$retval] = $256;
      __label__ = 78;
      break;
     case 78:
      var $retval77 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval77;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _normal_scanCdataSection($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $i = __stackBase__ + 24;
      
      HEAP[__stackBase__] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 5) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -1;
      __label__ = 8;
      break;
     case 2:
      HEAP[$i] = 0;
      __label__ = 6;
      break;
     case 3:
      
      
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != HEAP[_CDATA_LSQB_1940 + HEAP[$i]]) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      var $13 = HEAP[$nextTokPtr_addr];
      var $14 = HEAP[$ptr_addr];
      HEAP[$13] = $14;
      HEAP[$0] = 0;
      __label__ = 8;
      break;
     case 5:
      
      var $16 = HEAP[$i] + 1;
      HEAP[$i] = $16;
      
      var $18 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $18;
      __label__ = 6;
      break;
     case 6:
      
      
      if (HEAP[$i] <= 5) {
        __label__ = 3;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 7:
      var $21 = HEAP[$nextTokPtr_addr];
      var $22 = HEAP[$ptr_addr];
      HEAP[$21] = $22;
      HEAP[$0] = 8;
      __label__ = 8;
      break;
     case 8:
      var $23 = HEAP[$0];
      HEAP[$retval] = $23;
      __label__ = 9;
      break;
     case 9:
      var $retval8 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval8;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _normal_cdataSectionTok($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 24;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -4;
      __label__ = 52;
      break;
     case 2:
      
      
      
      
      
      
      
      
      var $12 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($12 == 0) {
        __label__ = 32;
        break;
      } else if ($12 == 1) {
        __label__ = 32;
        break;
      } else if ($12 == 4) {
        __label__ = 3;
        break;
      } else if ($12 == 5) {
        __label__ = 17;
        break;
      } else if ($12 == 6) {
        __label__ = 22;
        break;
      } else if ($12 == 7) {
        __label__ = 27;
        break;
      } else if ($12 == 8) {
        __label__ = 32;
        break;
      } else if ($12 == 9) {
        __label__ = 11;
        break;
      } else if ($12 == 10) {
        __label__ = 16;
        break;
      } else {
        __label__ = 33;
        break;
      }
     case 3:
      
      var $14 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $14;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      HEAP[$0] = -1;
      __label__ = 52;
      break;
     case 5:
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 93) {
        __label__ = 34;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 6:
      
      var $22 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $22;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      HEAP[$0] = -1;
      __label__ = 52;
      break;
     case 8:
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 62) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      
      var $30 = HEAP[$ptr_addr] + -1;
      HEAP[$ptr_addr] = $30;
      __label__ = 34;
      break;
     case 10:
      
      var $32 = HEAP[$ptr_addr] + 1;
      var $33 = HEAP[$nextTokPtr_addr];
      HEAP[$33] = $32;
      HEAP[$0] = 40;
      __label__ = 52;
      break;
     case 11:
      
      var $35 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $35;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      HEAP[$0] = -1;
      __label__ = 52;
      break;
     case 13:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]] == 10) {
        __label__ = 14;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 14:
      
      var $49 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $49;
      __label__ = 15;
      break;
     case 15:
      var $50 = HEAP[$nextTokPtr_addr];
      var $51 = HEAP[$ptr_addr];
      HEAP[$50] = $51;
      HEAP[$0] = 7;
      __label__ = 52;
      break;
     case 16:
      
      var $53 = HEAP[$ptr_addr] + 1;
      var $54 = HEAP[$nextTokPtr_addr];
      HEAP[$54] = $53;
      HEAP[$0] = 7;
      __label__ = 52;
      break;
     case 17:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 18;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 18:
      HEAP[$0] = -2;
      __label__ = 52;
      break;
     case 19:
      
      
      
      var $64 = HEAP[HEAP[$enc_addr] + 356];
      var $65 = HEAP[$enc_addr];
      var $66 = HEAP[$ptr_addr];
      var $67 = FUNCTION_TABLE[$64]($65, $66);
      
      if ($67 != 0) {
        __label__ = 20;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 20:
      var $69 = HEAP[$nextTokPtr_addr];
      var $70 = HEAP[$ptr_addr];
      HEAP[$69] = $70;
      HEAP[$0] = 0;
      __label__ = 52;
      break;
     case 21:
      
      var $72 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $72;
      __label__ = 34;
      break;
     case 22:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 23;
        break;
      } else {
        __label__ = 24;
        break;
      }
     case 23:
      HEAP[$0] = -2;
      __label__ = 52;
      break;
     case 24:
      
      
      
      var $82 = HEAP[HEAP[$enc_addr] + 360];
      var $83 = HEAP[$enc_addr];
      var $84 = HEAP[$ptr_addr];
      var $85 = FUNCTION_TABLE[$82]($83, $84);
      
      if ($85 != 0) {
        __label__ = 25;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 25:
      var $87 = HEAP[$nextTokPtr_addr];
      var $88 = HEAP[$ptr_addr];
      HEAP[$87] = $88;
      HEAP[$0] = 0;
      __label__ = 52;
      break;
     case 26:
      
      var $90 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $90;
      __label__ = 34;
      break;
     case 27:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 28;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 28:
      HEAP[$0] = -2;
      __label__ = 52;
      break;
     case 29:
      
      
      
      var $100 = HEAP[HEAP[$enc_addr] + 364];
      var $101 = HEAP[$enc_addr];
      var $102 = HEAP[$ptr_addr];
      var $103 = FUNCTION_TABLE[$100]($101, $102);
      
      if ($103 != 0) {
        __label__ = 30;
        break;
      } else {
        __label__ = 31;
        break;
      }
     case 30:
      var $105 = HEAP[$nextTokPtr_addr];
      var $106 = HEAP[$ptr_addr];
      HEAP[$105] = $106;
      HEAP[$0] = 0;
      __label__ = 52;
      break;
     case 31:
      
      var $108 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $108;
      __label__ = 34;
      break;
     case 32:
      var $109 = HEAP[$nextTokPtr_addr];
      var $110 = HEAP[$ptr_addr];
      HEAP[$109] = $110;
      HEAP[$0] = 0;
      __label__ = 52;
      break;
     case 33:
      
      var $112 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $112;
      __label__ = 34;
      break;
     case 34:
      __label__ = 50;
      break;
     case 35:
      
      
      
      
      
      
      
      
      var $121 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($121 == 0) {
        __label__ = 48;
        break;
      } else if ($121 == 1) {
        __label__ = 48;
        break;
      } else if ($121 == 4) {
        __label__ = 48;
        break;
      } else if ($121 == 5) {
        __label__ = 36;
        break;
      } else if ($121 == 6) {
        __label__ = 40;
        break;
      } else if ($121 == 7) {
        __label__ = 44;
        break;
      } else if ($121 == 8) {
        __label__ = 48;
        break;
      } else if ($121 == 9) {
        __label__ = 48;
        break;
      } else if ($121 == 10) {
        __label__ = 48;
        break;
      } else {
        __label__ = 49;
        break;
      }
     case 36:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 38;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 37:
      
      
      
      var $131 = HEAP[HEAP[$enc_addr] + 356];
      var $132 = HEAP[$enc_addr];
      var $133 = HEAP[$ptr_addr];
      var $134 = FUNCTION_TABLE[$131]($132, $133);
      
      if ($134 != 0) {
        __label__ = 38;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 38:
      var $136 = HEAP[$nextTokPtr_addr];
      var $137 = HEAP[$ptr_addr];
      HEAP[$136] = $137;
      HEAP[$0] = 6;
      __label__ = 52;
      break;
     case 39:
      
      var $139 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $139;
      __label__ = 50;
      break;
     case 40:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 42;
        break;
      } else {
        __label__ = 41;
        break;
      }
     case 41:
      
      
      
      var $149 = HEAP[HEAP[$enc_addr] + 360];
      var $150 = HEAP[$enc_addr];
      var $151 = HEAP[$ptr_addr];
      var $152 = FUNCTION_TABLE[$149]($150, $151);
      
      if ($152 != 0) {
        __label__ = 42;
        break;
      } else {
        __label__ = 43;
        break;
      }
     case 42:
      var $154 = HEAP[$nextTokPtr_addr];
      var $155 = HEAP[$ptr_addr];
      HEAP[$154] = $155;
      HEAP[$0] = 6;
      __label__ = 52;
      break;
     case 43:
      
      var $157 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $157;
      __label__ = 50;
      break;
     case 44:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 46;
        break;
      } else {
        __label__ = 45;
        break;
      }
     case 45:
      
      
      
      var $167 = HEAP[HEAP[$enc_addr] + 364];
      var $168 = HEAP[$enc_addr];
      var $169 = HEAP[$ptr_addr];
      var $170 = FUNCTION_TABLE[$167]($168, $169);
      
      if ($170 != 0) {
        __label__ = 46;
        break;
      } else {
        __label__ = 47;
        break;
      }
     case 46:
      var $172 = HEAP[$nextTokPtr_addr];
      var $173 = HEAP[$ptr_addr];
      HEAP[$172] = $173;
      HEAP[$0] = 6;
      __label__ = 52;
      break;
     case 47:
      
      var $175 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $175;
      __label__ = 50;
      break;
     case 48:
      var $176 = HEAP[$nextTokPtr_addr];
      var $177 = HEAP[$ptr_addr];
      HEAP[$176] = $177;
      HEAP[$0] = 6;
      __label__ = 52;
      break;
     case 49:
      
      var $179 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $179;
      __label__ = 50;
      break;
     case 50:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 35;
        break;
      } else {
        __label__ = 51;
        break;
      }
     case 51:
      var $183 = HEAP[$nextTokPtr_addr];
      var $184 = HEAP[$ptr_addr];
      HEAP[$183] = $184;
      HEAP[$0] = 6;
      __label__ = 52;
      break;
     case 52:
      var $185 = HEAP[$0];
      HEAP[$retval] = $185;
      __label__ = 53;
      break;
     case 53:
      var $retval52 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval52;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _normal_scanEndTag($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 24;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -1;
      __label__ = 52;
      break;
     case 2:
      
      
      
      
      
      
      
      
      var $12 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($12 == 5) {
        __label__ = 5;
        break;
      } else if ($12 == 6) {
        __label__ = 10;
        break;
      } else if ($12 == 7) {
        __label__ = 15;
        break;
      } else if ($12 == 22) {
        __label__ = 4;
        break;
      } else if ($12 == 24) {
        __label__ = 4;
        break;
      } else if ($12 == 29) {
        __label__ = 3;
        break;
      } else {
        __label__ = 20;
        break;
      }
     case 3:
      var $13 = HEAP[$nextTokPtr_addr];
      var $14 = HEAP[$ptr_addr];
      HEAP[$13] = $14;
      HEAP[$0] = 0;
      __label__ = 52;
      break;
     case 4:
      
      var $16 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $16;
      __label__ = 21;
      break;
     case 5:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      HEAP[$0] = -2;
      __label__ = 52;
      break;
     case 7:
      
      
      
      var $26 = HEAP[HEAP[$enc_addr] + 344];
      var $27 = HEAP[$enc_addr];
      var $28 = HEAP[$ptr_addr];
      var $29 = FUNCTION_TABLE[$26]($27, $28);
      
      if ($29 == 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      var $31 = HEAP[$nextTokPtr_addr];
      var $32 = HEAP[$ptr_addr];
      HEAP[$31] = $32;
      HEAP[$0] = 0;
      __label__ = 52;
      break;
     case 9:
      
      var $34 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $34;
      __label__ = 21;
      break;
     case 10:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      HEAP[$0] = -2;
      __label__ = 52;
      break;
     case 12:
      
      
      
      var $44 = HEAP[HEAP[$enc_addr] + 348];
      var $45 = HEAP[$enc_addr];
      var $46 = HEAP[$ptr_addr];
      var $47 = FUNCTION_TABLE[$44]($45, $46);
      
      if ($47 == 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      var $49 = HEAP[$nextTokPtr_addr];
      var $50 = HEAP[$ptr_addr];
      HEAP[$49] = $50;
      HEAP[$0] = 0;
      __label__ = 52;
      break;
     case 14:
      
      var $52 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $52;
      __label__ = 21;
      break;
     case 15:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      HEAP[$0] = -2;
      __label__ = 52;
      break;
     case 17:
      
      
      
      var $62 = HEAP[HEAP[$enc_addr] + 352];
      var $63 = HEAP[$enc_addr];
      var $64 = HEAP[$ptr_addr];
      var $65 = FUNCTION_TABLE[$62]($63, $64);
      
      if ($65 == 0) {
        __label__ = 18;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 18:
      var $67 = HEAP[$nextTokPtr_addr];
      var $68 = HEAP[$ptr_addr];
      HEAP[$67] = $68;
      HEAP[$0] = 0;
      __label__ = 52;
      break;
     case 19:
      
      var $70 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $70;
      __label__ = 21;
      break;
     case 20:
      var $71 = HEAP[$nextTokPtr_addr];
      var $72 = HEAP[$ptr_addr];
      HEAP[$71] = $72;
      HEAP[$0] = 0;
      __label__ = 52;
      break;
     case 21:
      __label__ = 50;
      break;
     case 22:
      
      
      
      
      
      
      
      
      var $81 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($81 == 5) {
        __label__ = 25;
        break;
      } else if ($81 == 6) {
        __label__ = 30;
        break;
      } else if ($81 == 7) {
        __label__ = 35;
        break;
      } else if ($81 == 9) {
        __label__ = 40;
        break;
      } else if ($81 == 10) {
        __label__ = 40;
        break;
      } else if ($81 == 11) {
        __label__ = 48;
        break;
      } else if ($81 == 21) {
        __label__ = 40;
        break;
      } else if ($81 == 22) {
        __label__ = 24;
        break;
      } else if ($81 == 23) {
        __label__ = 47;
        break;
      } else if ($81 == 24) {
        __label__ = 24;
        break;
      } else if ($81 == 25) {
        __label__ = 24;
        break;
      } else if ($81 == 26) {
        __label__ = 24;
        break;
      } else if ($81 == 27) {
        __label__ = 24;
        break;
      } else if ($81 == 29) {
        __label__ = 23;
        break;
      } else {
        __label__ = 49;
        break;
      }
     case 23:
      var $82 = HEAP[$nextTokPtr_addr];
      var $83 = HEAP[$ptr_addr];
      HEAP[$82] = $83;
      HEAP[$0] = 0;
      __label__ = 52;
      break;
     case 24:
      
      var $85 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $85;
      __label__ = 50;
      break;
     case 25:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 26;
        break;
      } else {
        __label__ = 27;
        break;
      }
     case 26:
      HEAP[$0] = -2;
      __label__ = 52;
      break;
     case 27:
      
      
      
      var $95 = HEAP[HEAP[$enc_addr] + 332];
      var $96 = HEAP[$enc_addr];
      var $97 = HEAP[$ptr_addr];
      var $98 = FUNCTION_TABLE[$95]($96, $97);
      
      if ($98 == 0) {
        __label__ = 28;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 28:
      var $100 = HEAP[$nextTokPtr_addr];
      var $101 = HEAP[$ptr_addr];
      HEAP[$100] = $101;
      HEAP[$0] = 0;
      __label__ = 52;
      break;
     case 29:
      
      var $103 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $103;
      __label__ = 50;
      break;
     case 30:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 31;
        break;
      } else {
        __label__ = 32;
        break;
      }
     case 31:
      HEAP[$0] = -2;
      __label__ = 52;
      break;
     case 32:
      
      
      
      var $113 = HEAP[HEAP[$enc_addr] + 336];
      var $114 = HEAP[$enc_addr];
      var $115 = HEAP[$ptr_addr];
      var $116 = FUNCTION_TABLE[$113]($114, $115);
      
      if ($116 == 0) {
        __label__ = 33;
        break;
      } else {
        __label__ = 34;
        break;
      }
     case 33:
      var $118 = HEAP[$nextTokPtr_addr];
      var $119 = HEAP[$ptr_addr];
      HEAP[$118] = $119;
      HEAP[$0] = 0;
      __label__ = 52;
      break;
     case 34:
      
      var $121 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $121;
      __label__ = 50;
      break;
     case 35:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 36;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 36:
      HEAP[$0] = -2;
      __label__ = 52;
      break;
     case 37:
      
      
      
      var $131 = HEAP[HEAP[$enc_addr] + 340];
      var $132 = HEAP[$enc_addr];
      var $133 = HEAP[$ptr_addr];
      var $134 = FUNCTION_TABLE[$131]($132, $133);
      
      if ($134 == 0) {
        __label__ = 38;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 38:
      var $136 = HEAP[$nextTokPtr_addr];
      var $137 = HEAP[$ptr_addr];
      HEAP[$136] = $137;
      HEAP[$0] = 0;
      __label__ = 52;
      break;
     case 39:
      
      var $139 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $139;
      __label__ = 50;
      break;
     case 40:
      
      var $141 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $141;
      __label__ = 45;
      break;
     case 41:
      
      
      
      
      
      
      
      
      var $150 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($150 == 9) {
        __label__ = 42;
        break;
      } else if ($150 == 10) {
        __label__ = 42;
        break;
      } else if ($150 == 11) {
        __label__ = 43;
        break;
      } else if ($150 == 21) {
        __label__ = 42;
        break;
      } else {
        __label__ = 44;
        break;
      }
     case 42:
      
      var $152 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $152;
      __label__ = 45;
      break;
     case 43:
      
      var $154 = HEAP[$ptr_addr] + 1;
      var $155 = HEAP[$nextTokPtr_addr];
      HEAP[$155] = $154;
      HEAP[$0] = 5;
      __label__ = 52;
      break;
     case 44:
      var $156 = HEAP[$nextTokPtr_addr];
      var $157 = HEAP[$ptr_addr];
      HEAP[$156] = $157;
      HEAP[$0] = 0;
      __label__ = 52;
      break;
     case 45:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 41;
        break;
      } else {
        __label__ = 46;
        break;
      }
     case 46:
      HEAP[$0] = -1;
      __label__ = 52;
      break;
     case 47:
      
      var $162 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $162;
      __label__ = 50;
      break;
     case 48:
      
      var $164 = HEAP[$ptr_addr] + 1;
      var $165 = HEAP[$nextTokPtr_addr];
      HEAP[$165] = $164;
      HEAP[$0] = 5;
      __label__ = 52;
      break;
     case 49:
      var $166 = HEAP[$nextTokPtr_addr];
      var $167 = HEAP[$ptr_addr];
      HEAP[$166] = $167;
      HEAP[$0] = 0;
      __label__ = 52;
      break;
     case 50:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 22;
        break;
      } else {
        __label__ = 51;
        break;
      }
     case 51:
      HEAP[$0] = -1;
      __label__ = 52;
      break;
     case 52:
      var $171 = HEAP[$0];
      HEAP[$retval] = $171;
      __label__ = 53;
      break;
     case 53:
      var $retval52 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval52;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _normal_scanHexCharRef($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 24;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 1:
      
      
      
      
      
      
      
      
      var $12 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($12 == 24) {
        __label__ = 2;
        break;
      } else if ($12 == 25) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      var $14 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $14;
      __label__ = 8;
      break;
     case 3:
      var $15 = HEAP[$nextTokPtr_addr];
      var $16 = HEAP[$ptr_addr];
      HEAP[$15] = $16;
      HEAP[$0] = 0;
      __label__ = 10;
      break;
     case 4:
      
      
      
      
      
      
      
      
      var $25 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($25 == 18) {
        __label__ = 6;
        break;
      } else if ($25 == 24) {
        __label__ = 5;
        break;
      } else if ($25 == 25) {
        __label__ = 5;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 5:
      
      var $27 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $27;
      __label__ = 8;
      break;
     case 6:
      
      var $29 = HEAP[$ptr_addr] + 1;
      var $30 = HEAP[$nextTokPtr_addr];
      HEAP[$30] = $29;
      HEAP[$0] = 10;
      __label__ = 10;
      break;
     case 7:
      var $31 = HEAP[$nextTokPtr_addr];
      var $32 = HEAP[$ptr_addr];
      HEAP[$31] = $32;
      HEAP[$0] = 0;
      __label__ = 10;
      break;
     case 8:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 4;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 9:
      HEAP[$0] = -1;
      __label__ = 10;
      break;
     case 10:
      var $36 = HEAP[$0];
      HEAP[$retval] = $36;
      __label__ = 11;
      break;
     case 11:
      var $retval10 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval10;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _normal_scanCharRef($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 24;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 1:
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 120) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      var $8 = HEAP[$ptr_addr] + 1;
      var $9 = HEAP[$enc_addr];
      var $10 = HEAP[$end_addr];
      var $11 = HEAP[$nextTokPtr_addr];
      var $12 = _normal_scanHexCharRef($9, $8, $10, $11);
      HEAP[$0] = $12;
      __label__ = 12;
      break;
     case 3:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]] == 25) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      
      var $23 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $23;
      __label__ = 10;
      break;
     case 5:
      var $24 = HEAP[$nextTokPtr_addr];
      var $25 = HEAP[$ptr_addr];
      HEAP[$24] = $25;
      HEAP[$0] = 0;
      __label__ = 12;
      break;
     case 6:
      
      
      
      
      
      
      
      
      var $34 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($34 == 18) {
        __label__ = 8;
        break;
      } else if ($34 == 25) {
        __label__ = 7;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 7:
      
      var $36 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $36;
      __label__ = 10;
      break;
     case 8:
      
      var $38 = HEAP[$ptr_addr] + 1;
      var $39 = HEAP[$nextTokPtr_addr];
      HEAP[$39] = $38;
      HEAP[$0] = 10;
      __label__ = 12;
      break;
     case 9:
      var $40 = HEAP[$nextTokPtr_addr];
      var $41 = HEAP[$ptr_addr];
      HEAP[$40] = $41;
      HEAP[$0] = 0;
      __label__ = 12;
      break;
     case 10:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 6;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 11:
      HEAP[$0] = -1;
      __label__ = 12;
      break;
     case 12:
      var $45 = HEAP[$0];
      HEAP[$retval] = $45;
      __label__ = 13;
      break;
     case 13:
      var $retval12 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval12;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _normal_scanRef($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 24;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -1;
      __label__ = 45;
      break;
     case 2:
      
      
      
      
      
      
      
      
      var $12 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($12 == 5) {
        __label__ = 5;
        break;
      } else if ($12 == 6) {
        __label__ = 10;
        break;
      } else if ($12 == 7) {
        __label__ = 15;
        break;
      } else if ($12 == 19) {
        __label__ = 20;
        break;
      } else if ($12 == 22) {
        __label__ = 4;
        break;
      } else if ($12 == 24) {
        __label__ = 4;
        break;
      } else if ($12 == 29) {
        __label__ = 3;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 3:
      var $13 = HEAP[$nextTokPtr_addr];
      var $14 = HEAP[$ptr_addr];
      HEAP[$13] = $14;
      HEAP[$0] = 0;
      __label__ = 45;
      break;
     case 4:
      
      var $16 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $16;
      __label__ = 22;
      break;
     case 5:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      HEAP[$0] = -2;
      __label__ = 45;
      break;
     case 7:
      
      
      
      var $26 = HEAP[HEAP[$enc_addr] + 344];
      var $27 = HEAP[$enc_addr];
      var $28 = HEAP[$ptr_addr];
      var $29 = FUNCTION_TABLE[$26]($27, $28);
      
      if ($29 == 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      var $31 = HEAP[$nextTokPtr_addr];
      var $32 = HEAP[$ptr_addr];
      HEAP[$31] = $32;
      HEAP[$0] = 0;
      __label__ = 45;
      break;
     case 9:
      
      var $34 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $34;
      __label__ = 22;
      break;
     case 10:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      HEAP[$0] = -2;
      __label__ = 45;
      break;
     case 12:
      
      
      
      var $44 = HEAP[HEAP[$enc_addr] + 348];
      var $45 = HEAP[$enc_addr];
      var $46 = HEAP[$ptr_addr];
      var $47 = FUNCTION_TABLE[$44]($45, $46);
      
      if ($47 == 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      var $49 = HEAP[$nextTokPtr_addr];
      var $50 = HEAP[$ptr_addr];
      HEAP[$49] = $50;
      HEAP[$0] = 0;
      __label__ = 45;
      break;
     case 14:
      
      var $52 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $52;
      __label__ = 22;
      break;
     case 15:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      HEAP[$0] = -2;
      __label__ = 45;
      break;
     case 17:
      
      
      
      var $62 = HEAP[HEAP[$enc_addr] + 352];
      var $63 = HEAP[$enc_addr];
      var $64 = HEAP[$ptr_addr];
      var $65 = FUNCTION_TABLE[$62]($63, $64);
      
      if ($65 == 0) {
        __label__ = 18;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 18:
      var $67 = HEAP[$nextTokPtr_addr];
      var $68 = HEAP[$ptr_addr];
      HEAP[$67] = $68;
      HEAP[$0] = 0;
      __label__ = 45;
      break;
     case 19:
      
      var $70 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $70;
      __label__ = 22;
      break;
     case 20:
      
      var $72 = HEAP[$ptr_addr] + 1;
      var $73 = HEAP[$enc_addr];
      var $74 = HEAP[$end_addr];
      var $75 = HEAP[$nextTokPtr_addr];
      var $76 = _normal_scanCharRef($73, $72, $74, $75);
      HEAP[$0] = $76;
      __label__ = 45;
      break;
     case 21:
      var $77 = HEAP[$nextTokPtr_addr];
      var $78 = HEAP[$ptr_addr];
      HEAP[$77] = $78;
      HEAP[$0] = 0;
      __label__ = 45;
      break;
     case 22:
      __label__ = 43;
      break;
     case 23:
      
      
      
      
      
      
      
      
      var $87 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($87 == 5) {
        __label__ = 26;
        break;
      } else if ($87 == 6) {
        __label__ = 31;
        break;
      } else if ($87 == 7) {
        __label__ = 36;
        break;
      } else if ($87 == 18) {
        __label__ = 41;
        break;
      } else if ($87 == 22) {
        __label__ = 25;
        break;
      } else if ($87 == 24) {
        __label__ = 25;
        break;
      } else if ($87 == 25) {
        __label__ = 25;
        break;
      } else if ($87 == 26) {
        __label__ = 25;
        break;
      } else if ($87 == 27) {
        __label__ = 25;
        break;
      } else if ($87 == 29) {
        __label__ = 24;
        break;
      } else {
        __label__ = 42;
        break;
      }
     case 24:
      var $88 = HEAP[$nextTokPtr_addr];
      var $89 = HEAP[$ptr_addr];
      HEAP[$88] = $89;
      HEAP[$0] = 0;
      __label__ = 45;
      break;
     case 25:
      
      var $91 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $91;
      __label__ = 43;
      break;
     case 26:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 27;
        break;
      } else {
        __label__ = 28;
        break;
      }
     case 27:
      HEAP[$0] = -2;
      __label__ = 45;
      break;
     case 28:
      
      
      
      var $101 = HEAP[HEAP[$enc_addr] + 332];
      var $102 = HEAP[$enc_addr];
      var $103 = HEAP[$ptr_addr];
      var $104 = FUNCTION_TABLE[$101]($102, $103);
      
      if ($104 == 0) {
        __label__ = 29;
        break;
      } else {
        __label__ = 30;
        break;
      }
     case 29:
      var $106 = HEAP[$nextTokPtr_addr];
      var $107 = HEAP[$ptr_addr];
      HEAP[$106] = $107;
      HEAP[$0] = 0;
      __label__ = 45;
      break;
     case 30:
      
      var $109 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $109;
      __label__ = 43;
      break;
     case 31:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 32;
        break;
      } else {
        __label__ = 33;
        break;
      }
     case 32:
      HEAP[$0] = -2;
      __label__ = 45;
      break;
     case 33:
      
      
      
      var $119 = HEAP[HEAP[$enc_addr] + 336];
      var $120 = HEAP[$enc_addr];
      var $121 = HEAP[$ptr_addr];
      var $122 = FUNCTION_TABLE[$119]($120, $121);
      
      if ($122 == 0) {
        __label__ = 34;
        break;
      } else {
        __label__ = 35;
        break;
      }
     case 34:
      var $124 = HEAP[$nextTokPtr_addr];
      var $125 = HEAP[$ptr_addr];
      HEAP[$124] = $125;
      HEAP[$0] = 0;
      __label__ = 45;
      break;
     case 35:
      
      var $127 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $127;
      __label__ = 43;
      break;
     case 36:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 37;
        break;
      } else {
        __label__ = 38;
        break;
      }
     case 37:
      HEAP[$0] = -2;
      __label__ = 45;
      break;
     case 38:
      
      
      
      var $137 = HEAP[HEAP[$enc_addr] + 340];
      var $138 = HEAP[$enc_addr];
      var $139 = HEAP[$ptr_addr];
      var $140 = FUNCTION_TABLE[$137]($138, $139);
      
      if ($140 == 0) {
        __label__ = 39;
        break;
      } else {
        __label__ = 40;
        break;
      }
     case 39:
      var $142 = HEAP[$nextTokPtr_addr];
      var $143 = HEAP[$ptr_addr];
      HEAP[$142] = $143;
      HEAP[$0] = 0;
      __label__ = 45;
      break;
     case 40:
      
      var $145 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $145;
      __label__ = 43;
      break;
     case 41:
      
      var $147 = HEAP[$ptr_addr] + 1;
      var $148 = HEAP[$nextTokPtr_addr];
      HEAP[$148] = $147;
      HEAP[$0] = 9;
      __label__ = 45;
      break;
     case 42:
      var $149 = HEAP[$nextTokPtr_addr];
      var $150 = HEAP[$ptr_addr];
      HEAP[$149] = $150;
      HEAP[$0] = 0;
      __label__ = 45;
      break;
     case 43:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 23;
        break;
      } else {
        __label__ = 44;
        break;
      }
     case 44:
      HEAP[$0] = -1;
      __label__ = 45;
      break;
     case 45:
      var $154 = HEAP[$0];
      HEAP[$retval] = $154;
      __label__ = 46;
      break;
     case 46:
      var $retval45 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval45;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _normal_scanAtts($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 44;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 44);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $hadColon = __stackBase__ + 24;
      var $t = __stackBase__ + 28;
      var $open = __stackBase__ + 32;
      var $t58 = __stackBase__ + 36;
      var $tok = __stackBase__ + 40;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      HEAP[$hadColon] = 0;
      __label__ = 123;
      break;
     case 1:
      
      
      
      
      
      
      
      
      var $9 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($9 == 5) {
        __label__ = 4;
        break;
      } else if ($9 == 6) {
        __label__ = 9;
        break;
      } else if ($9 == 7) {
        __label__ = 14;
        break;
      } else if ($9 == 9) {
        __label__ = 43;
        break;
      } else if ($9 == 10) {
        __label__ = 43;
        break;
      } else if ($9 == 14) {
        __label__ = 49;
        break;
      } else if ($9 == 21) {
        __label__ = 43;
        break;
      } else if ($9 == 22) {
        __label__ = 3;
        break;
      } else if ($9 == 23) {
        __label__ = 19;
        break;
      } else if ($9 == 24) {
        __label__ = 3;
        break;
      } else if ($9 == 25) {
        __label__ = 3;
        break;
      } else if ($9 == 26) {
        __label__ = 3;
        break;
      } else if ($9 == 27) {
        __label__ = 3;
        break;
      } else if ($9 == 29) {
        __label__ = 2;
        break;
      } else {
        __label__ = 122;
        break;
      }
     case 2:
      var $10 = HEAP[$ptr_addr];
      var $11 = HEAP[$nextTokPtr_addr];
      HEAP[$11] = $10;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 3:
      
      var $13 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $13;
      __label__ = 123;
      break;
     case 4:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      HEAP[$0] = -2;
      __label__ = 125;
      break;
     case 6:
      
      
      
      var $23 = HEAP[HEAP[$enc_addr] + 332];
      var $24 = HEAP[$ptr_addr];
      var $25 = HEAP[$enc_addr];
      var $26 = FUNCTION_TABLE[$23]($25, $24);
      
      if ($26 == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      var $28 = HEAP[$ptr_addr];
      var $29 = HEAP[$nextTokPtr_addr];
      HEAP[$29] = $28;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 8:
      
      var $31 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $31;
      __label__ = 123;
      break;
     case 9:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      HEAP[$0] = -2;
      __label__ = 125;
      break;
     case 11:
      
      
      
      var $41 = HEAP[HEAP[$enc_addr] + 336];
      var $42 = HEAP[$ptr_addr];
      var $43 = HEAP[$enc_addr];
      var $44 = FUNCTION_TABLE[$41]($43, $42);
      
      if ($44 == 0) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      var $46 = HEAP[$ptr_addr];
      var $47 = HEAP[$nextTokPtr_addr];
      HEAP[$47] = $46;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 13:
      
      var $49 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $49;
      __label__ = 123;
      break;
     case 14:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      HEAP[$0] = -2;
      __label__ = 125;
      break;
     case 16:
      
      
      
      var $59 = HEAP[HEAP[$enc_addr] + 340];
      var $60 = HEAP[$ptr_addr];
      var $61 = HEAP[$enc_addr];
      var $62 = FUNCTION_TABLE[$59]($61, $60);
      
      if ($62 == 0) {
        __label__ = 17;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 17:
      var $64 = HEAP[$ptr_addr];
      var $65 = HEAP[$nextTokPtr_addr];
      HEAP[$65] = $64;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 18:
      
      var $67 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $67;
      __label__ = 123;
      break;
     case 19:
      
      
      if (HEAP[$hadColon] != 0) {
        __label__ = 20;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 20:
      var $70 = HEAP[$ptr_addr];
      var $71 = HEAP[$nextTokPtr_addr];
      HEAP[$71] = $70;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 21:
      HEAP[$hadColon] = 1;
      
      var $73 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $73;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 22;
        break;
      } else {
        __label__ = 23;
        break;
      }
     case 22:
      HEAP[$0] = -1;
      __label__ = 125;
      break;
     case 23:
      
      
      
      
      
      
      
      
      var $85 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($85 == 5) {
        __label__ = 26;
        break;
      } else if ($85 == 6) {
        __label__ = 31;
        break;
      } else if ($85 == 7) {
        __label__ = 36;
        break;
      } else if ($85 == 22) {
        __label__ = 25;
        break;
      } else if ($85 == 24) {
        __label__ = 25;
        break;
      } else if ($85 == 29) {
        __label__ = 24;
        break;
      } else {
        __label__ = 41;
        break;
      }
     case 24:
      var $86 = HEAP[$ptr_addr];
      var $87 = HEAP[$nextTokPtr_addr];
      HEAP[$87] = $86;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 25:
      
      var $89 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $89;
      __label__ = 42;
      break;
     case 26:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 27;
        break;
      } else {
        __label__ = 28;
        break;
      }
     case 27:
      HEAP[$0] = -2;
      __label__ = 125;
      break;
     case 28:
      
      
      
      var $99 = HEAP[HEAP[$enc_addr] + 344];
      var $100 = HEAP[$ptr_addr];
      var $101 = HEAP[$enc_addr];
      var $102 = FUNCTION_TABLE[$99]($101, $100);
      
      if ($102 == 0) {
        __label__ = 29;
        break;
      } else {
        __label__ = 30;
        break;
      }
     case 29:
      var $104 = HEAP[$ptr_addr];
      var $105 = HEAP[$nextTokPtr_addr];
      HEAP[$105] = $104;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 30:
      
      var $107 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $107;
      __label__ = 42;
      break;
     case 31:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 32;
        break;
      } else {
        __label__ = 33;
        break;
      }
     case 32:
      HEAP[$0] = -2;
      __label__ = 125;
      break;
     case 33:
      
      
      
      var $117 = HEAP[HEAP[$enc_addr] + 348];
      var $118 = HEAP[$ptr_addr];
      var $119 = HEAP[$enc_addr];
      var $120 = FUNCTION_TABLE[$117]($119, $118);
      
      if ($120 == 0) {
        __label__ = 34;
        break;
      } else {
        __label__ = 35;
        break;
      }
     case 34:
      var $122 = HEAP[$ptr_addr];
      var $123 = HEAP[$nextTokPtr_addr];
      HEAP[$123] = $122;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 35:
      
      var $125 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $125;
      __label__ = 42;
      break;
     case 36:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 37;
        break;
      } else {
        __label__ = 38;
        break;
      }
     case 37:
      HEAP[$0] = -2;
      __label__ = 125;
      break;
     case 38:
      
      
      
      var $135 = HEAP[HEAP[$enc_addr] + 352];
      var $136 = HEAP[$ptr_addr];
      var $137 = HEAP[$enc_addr];
      var $138 = FUNCTION_TABLE[$135]($137, $136);
      
      if ($138 == 0) {
        __label__ = 39;
        break;
      } else {
        __label__ = 40;
        break;
      }
     case 39:
      var $140 = HEAP[$ptr_addr];
      var $141 = HEAP[$nextTokPtr_addr];
      HEAP[$141] = $140;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 40:
      
      var $143 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $143;
      __label__ = 42;
      break;
     case 41:
      var $144 = HEAP[$ptr_addr];
      var $145 = HEAP[$nextTokPtr_addr];
      HEAP[$145] = $144;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 42:
      __label__ = 123;
      break;
     case 43:
      
      var $147 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $147;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 44;
        break;
      } else {
        __label__ = 45;
        break;
      }
     case 44:
      HEAP[$0] = -1;
      __label__ = 125;
      break;
     case 45:
      
      
      
      
      
      
      
      
      var $159 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$t] = $159;
      
      
      if (HEAP[$t] == 14) {
        __label__ = 49;
        break;
      } else {
        __label__ = 46;
        break;
      }
     case 46:
      var $162 = HEAP[$t];
      if ($162 == 9) {
        __label__ = 47;
        break;
      } else if ($162 == 10) {
        __label__ = 47;
        break;
      } else if ($162 == 21) {
        __label__ = 47;
        break;
      } else {
        __label__ = 48;
        break;
      }
     case 47:
      __label__ = 43;
      break;
     case 48:
      var $163 = HEAP[$ptr_addr];
      var $164 = HEAP[$nextTokPtr_addr];
      HEAP[$164] = $163;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 49:
      HEAP[$hadColon] = 0;
      __label__ = 50;
      break;
     case 50:
      
      var $166 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $166;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 51;
        break;
      } else {
        __label__ = 52;
        break;
      }
     case 51:
      HEAP[$0] = -1;
      __label__ = 125;
      break;
     case 52:
      
      
      
      
      
      
      
      
      var $178 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$open] = $178;
      
      
      if (HEAP[$open] == 12) {
        __label__ = 57;
        break;
      } else {
        __label__ = 53;
        break;
      }
     case 53:
      
      
      if (HEAP[$open] == 13) {
        __label__ = 57;
        break;
      } else {
        __label__ = 54;
        break;
      }
     case 54:
      var $183 = HEAP[$open];
      if ($183 == 9) {
        __label__ = 55;
        break;
      } else if ($183 == 10) {
        __label__ = 55;
        break;
      } else if ($183 == 21) {
        __label__ = 55;
        break;
      } else {
        __label__ = 56;
        break;
      }
     case 55:
      __label__ = 50;
      break;
     case 56:
      var $184 = HEAP[$ptr_addr];
      var $185 = HEAP[$nextTokPtr_addr];
      HEAP[$185] = $184;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 57:
      
      var $187 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $187;
      __label__ = 58;
      break;
     case 58:
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 59;
        break;
      } else {
        __label__ = 60;
        break;
      }
     case 59:
      HEAP[$0] = -1;
      __label__ = 125;
      break;
     case 60:
      
      
      
      
      
      
      
      
      var $199 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$t58] = $199;
      
      
      
      if (HEAP[$t58] == HEAP[$open]) {
        __label__ = 86;
        break;
      } else {
        __label__ = 61;
        break;
      }
     case 61:
      var $203 = HEAP[$t58];
      if ($203 == 0) {
        __label__ = 77;
        break;
      } else if ($203 == 1) {
        __label__ = 77;
        break;
      } else if ($203 == 2) {
        __label__ = 83;
        break;
      } else if ($203 == 3) {
        __label__ = 78;
        break;
      } else if ($203 == 5) {
        __label__ = 62;
        break;
      } else if ($203 == 6) {
        __label__ = 67;
        break;
      } else if ($203 == 7) {
        __label__ = 72;
        break;
      } else if ($203 == 8) {
        __label__ = 77;
        break;
      } else {
        __label__ = 84;
        break;
      }
     case 62:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 63;
        break;
      } else {
        __label__ = 64;
        break;
      }
     case 63:
      HEAP[$0] = -2;
      __label__ = 125;
      break;
     case 64:
      
      
      
      var $213 = HEAP[HEAP[$enc_addr] + 356];
      var $214 = HEAP[$ptr_addr];
      var $215 = HEAP[$enc_addr];
      var $216 = FUNCTION_TABLE[$213]($215, $214);
      
      if ($216 != 0) {
        __label__ = 65;
        break;
      } else {
        __label__ = 66;
        break;
      }
     case 65:
      var $218 = HEAP[$ptr_addr];
      var $219 = HEAP[$nextTokPtr_addr];
      HEAP[$219] = $218;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 66:
      
      var $221 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $221;
      __label__ = 85;
      break;
     case 67:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 68;
        break;
      } else {
        __label__ = 69;
        break;
      }
     case 68:
      HEAP[$0] = -2;
      __label__ = 125;
      break;
     case 69:
      
      
      
      var $231 = HEAP[HEAP[$enc_addr] + 360];
      var $232 = HEAP[$ptr_addr];
      var $233 = HEAP[$enc_addr];
      var $234 = FUNCTION_TABLE[$231]($233, $232);
      
      if ($234 != 0) {
        __label__ = 70;
        break;
      } else {
        __label__ = 71;
        break;
      }
     case 70:
      var $236 = HEAP[$ptr_addr];
      var $237 = HEAP[$nextTokPtr_addr];
      HEAP[$237] = $236;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 71:
      
      var $239 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $239;
      __label__ = 85;
      break;
     case 72:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 73;
        break;
      } else {
        __label__ = 74;
        break;
      }
     case 73:
      HEAP[$0] = -2;
      __label__ = 125;
      break;
     case 74:
      
      
      
      var $249 = HEAP[HEAP[$enc_addr] + 364];
      var $250 = HEAP[$ptr_addr];
      var $251 = HEAP[$enc_addr];
      var $252 = FUNCTION_TABLE[$249]($251, $250);
      
      if ($252 != 0) {
        __label__ = 75;
        break;
      } else {
        __label__ = 76;
        break;
      }
     case 75:
      var $254 = HEAP[$ptr_addr];
      var $255 = HEAP[$nextTokPtr_addr];
      HEAP[$255] = $254;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 76:
      
      var $257 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $257;
      __label__ = 85;
      break;
     case 77:
      var $258 = HEAP[$ptr_addr];
      var $259 = HEAP[$nextTokPtr_addr];
      HEAP[$259] = $258;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 78:
      
      var $261 = HEAP[$ptr_addr] + 1;
      var $262 = HEAP[$enc_addr];
      var $263 = HEAP[$end_addr];
      var $264 = _normal_scanRef($262, $261, $263, $ptr_addr);
      HEAP[$tok] = $264;
      
      
      if (HEAP[$tok] <= 0) {
        __label__ = 79;
        break;
      } else {
        __label__ = 82;
        break;
      }
     case 79:
      
      
      if (HEAP[$tok] == 0) {
        __label__ = 80;
        break;
      } else {
        __label__ = 81;
        break;
      }
     case 80:
      var $269 = HEAP[$ptr_addr];
      var $270 = HEAP[$nextTokPtr_addr];
      HEAP[$270] = $269;
      __label__ = 81;
      break;
     case 81:
      var $271 = HEAP[$tok];
      HEAP[$0] = $271;
      __label__ = 125;
      break;
     case 82:
      __label__ = 85;
      break;
     case 83:
      var $272 = HEAP[$ptr_addr];
      var $273 = HEAP[$nextTokPtr_addr];
      HEAP[$273] = $272;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 84:
      
      var $275 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $275;
      __label__ = 85;
      break;
     case 85:
      __label__ = 58;
      break;
     case 86:
      
      var $277 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $277;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 87;
        break;
      } else {
        __label__ = 88;
        break;
      }
     case 87:
      HEAP[$0] = -1;
      __label__ = 125;
      break;
     case 88:
      
      
      
      
      
      
      
      
      var $289 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($289 == 9) {
        __label__ = 89;
        break;
      } else if ($289 == 10) {
        __label__ = 89;
        break;
      } else if ($289 == 11) {
        __label__ = 91;
        break;
      } else if ($289 == 17) {
        __label__ = 90;
        break;
      } else if ($289 == 21) {
        __label__ = 89;
        break;
      } else {
        __label__ = 92;
        break;
      }
     case 89:
      __label__ = 93;
      break;
     case 90:
      __label__ = 115;
      break;
     case 91:
      __label__ = 114;
      break;
     case 92:
      var $290 = HEAP[$ptr_addr];
      var $291 = HEAP[$nextTokPtr_addr];
      HEAP[$291] = $290;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 93:
      
      var $293 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $293;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 94;
        break;
      } else {
        __label__ = 95;
        break;
      }
     case 94:
      HEAP[$0] = -1;
      __label__ = 125;
      break;
     case 95:
      
      
      
      
      
      
      
      
      var $305 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($305 == 5) {
        __label__ = 98;
        break;
      } else if ($305 == 6) {
        __label__ = 103;
        break;
      } else if ($305 == 7) {
        __label__ = 108;
        break;
      } else if ($305 == 9) {
        __label__ = 113;
        break;
      } else if ($305 == 10) {
        __label__ = 113;
        break;
      } else if ($305 == 11) {
        __label__ = 114;
        break;
      } else if ($305 == 17) {
        __label__ = 115;
        break;
      } else if ($305 == 21) {
        __label__ = 113;
        break;
      } else if ($305 == 22) {
        __label__ = 97;
        break;
      } else if ($305 == 24) {
        __label__ = 97;
        break;
      } else if ($305 == 29) {
        __label__ = 96;
        break;
      } else {
        __label__ = 120;
        break;
      }
     case 96:
      var $306 = HEAP[$ptr_addr];
      var $307 = HEAP[$nextTokPtr_addr];
      HEAP[$307] = $306;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 97:
      
      var $309 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $309;
      __label__ = 121;
      break;
     case 98:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 99;
        break;
      } else {
        __label__ = 100;
        break;
      }
     case 99:
      HEAP[$0] = -2;
      __label__ = 125;
      break;
     case 100:
      
      
      
      var $319 = HEAP[HEAP[$enc_addr] + 344];
      var $320 = HEAP[$ptr_addr];
      var $321 = HEAP[$enc_addr];
      var $322 = FUNCTION_TABLE[$319]($321, $320);
      
      if ($322 == 0) {
        __label__ = 101;
        break;
      } else {
        __label__ = 102;
        break;
      }
     case 101:
      var $324 = HEAP[$ptr_addr];
      var $325 = HEAP[$nextTokPtr_addr];
      HEAP[$325] = $324;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 102:
      
      var $327 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $327;
      __label__ = 121;
      break;
     case 103:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 104;
        break;
      } else {
        __label__ = 105;
        break;
      }
     case 104:
      HEAP[$0] = -2;
      __label__ = 125;
      break;
     case 105:
      
      
      
      var $337 = HEAP[HEAP[$enc_addr] + 348];
      var $338 = HEAP[$ptr_addr];
      var $339 = HEAP[$enc_addr];
      var $340 = FUNCTION_TABLE[$337]($339, $338);
      
      if ($340 == 0) {
        __label__ = 106;
        break;
      } else {
        __label__ = 107;
        break;
      }
     case 106:
      var $342 = HEAP[$ptr_addr];
      var $343 = HEAP[$nextTokPtr_addr];
      HEAP[$343] = $342;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 107:
      
      var $345 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $345;
      __label__ = 121;
      break;
     case 108:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 109;
        break;
      } else {
        __label__ = 110;
        break;
      }
     case 109:
      HEAP[$0] = -2;
      __label__ = 125;
      break;
     case 110:
      
      
      
      var $355 = HEAP[HEAP[$enc_addr] + 352];
      var $356 = HEAP[$ptr_addr];
      var $357 = HEAP[$enc_addr];
      var $358 = FUNCTION_TABLE[$355]($357, $356);
      
      if ($358 == 0) {
        __label__ = 111;
        break;
      } else {
        __label__ = 112;
        break;
      }
     case 111:
      var $360 = HEAP[$ptr_addr];
      var $361 = HEAP[$nextTokPtr_addr];
      HEAP[$361] = $360;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 112:
      
      var $363 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $363;
      __label__ = 121;
      break;
     case 113:
      __label__ = 93;
      break;
     case 114:
      
      var $365 = HEAP[$ptr_addr] + 1;
      var $366 = HEAP[$nextTokPtr_addr];
      HEAP[$366] = $365;
      HEAP[$0] = 1;
      __label__ = 125;
      break;
     case 115:
      
      var $368 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $368;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 116;
        break;
      } else {
        __label__ = 117;
        break;
      }
     case 116:
      HEAP[$0] = -1;
      __label__ = 125;
      break;
     case 117:
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 62) {
        __label__ = 118;
        break;
      } else {
        __label__ = 119;
        break;
      }
     case 118:
      var $375 = HEAP[$ptr_addr];
      var $376 = HEAP[$nextTokPtr_addr];
      HEAP[$376] = $375;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 119:
      
      var $378 = HEAP[$ptr_addr] + 1;
      var $379 = HEAP[$nextTokPtr_addr];
      HEAP[$379] = $378;
      HEAP[$0] = 3;
      __label__ = 125;
      break;
     case 120:
      var $380 = HEAP[$ptr_addr];
      var $381 = HEAP[$nextTokPtr_addr];
      HEAP[$381] = $380;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 121:
      __label__ = 123;
      break;
     case 122:
      var $382 = HEAP[$ptr_addr];
      var $383 = HEAP[$nextTokPtr_addr];
      HEAP[$383] = $382;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 123:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 124;
        break;
      }
     case 124:
      HEAP[$0] = -1;
      __label__ = 125;
      break;
     case 125:
      var $387 = HEAP[$0];
      HEAP[$retval] = $387;
      __label__ = 126;
      break;
     case 126:
      var $retval124 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval124;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _normal_scanLt($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $hadColon = __stackBase__ + 24;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -1;
      __label__ = 107;
      break;
     case 2:
      
      
      
      
      
      
      
      
      var $12 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($12 == 5) {
        __label__ = 5;
        break;
      } else if ($12 == 6) {
        __label__ = 10;
        break;
      } else if ($12 == 7) {
        __label__ = 15;
        break;
      } else if ($12 == 15) {
        __label__ = 26;
        break;
      } else if ($12 == 16) {
        __label__ = 20;
        break;
      } else if ($12 == 17) {
        __label__ = 27;
        break;
      } else if ($12 == 22) {
        __label__ = 4;
        break;
      } else if ($12 == 24) {
        __label__ = 4;
        break;
      } else if ($12 == 29) {
        __label__ = 3;
        break;
      } else {
        __label__ = 28;
        break;
      }
     case 3:
      var $13 = HEAP[$nextTokPtr_addr];
      var $14 = HEAP[$ptr_addr];
      HEAP[$13] = $14;
      HEAP[$0] = 0;
      __label__ = 107;
      break;
     case 4:
      
      var $16 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $16;
      __label__ = 29;
      break;
     case 5:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      HEAP[$0] = -2;
      __label__ = 107;
      break;
     case 7:
      
      
      
      var $26 = HEAP[HEAP[$enc_addr] + 344];
      var $27 = HEAP[$enc_addr];
      var $28 = HEAP[$ptr_addr];
      var $29 = FUNCTION_TABLE[$26]($27, $28);
      
      if ($29 == 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      var $31 = HEAP[$nextTokPtr_addr];
      var $32 = HEAP[$ptr_addr];
      HEAP[$31] = $32;
      HEAP[$0] = 0;
      __label__ = 107;
      break;
     case 9:
      
      var $34 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $34;
      __label__ = 29;
      break;
     case 10:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      HEAP[$0] = -2;
      __label__ = 107;
      break;
     case 12:
      
      
      
      var $44 = HEAP[HEAP[$enc_addr] + 348];
      var $45 = HEAP[$enc_addr];
      var $46 = HEAP[$ptr_addr];
      var $47 = FUNCTION_TABLE[$44]($45, $46);
      
      if ($47 == 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      var $49 = HEAP[$nextTokPtr_addr];
      var $50 = HEAP[$ptr_addr];
      HEAP[$49] = $50;
      HEAP[$0] = 0;
      __label__ = 107;
      break;
     case 14:
      
      var $52 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $52;
      __label__ = 29;
      break;
     case 15:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      HEAP[$0] = -2;
      __label__ = 107;
      break;
     case 17:
      
      
      
      var $62 = HEAP[HEAP[$enc_addr] + 352];
      var $63 = HEAP[$enc_addr];
      var $64 = HEAP[$ptr_addr];
      var $65 = FUNCTION_TABLE[$62]($63, $64);
      
      if ($65 == 0) {
        __label__ = 18;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 18:
      var $67 = HEAP[$nextTokPtr_addr];
      var $68 = HEAP[$ptr_addr];
      HEAP[$67] = $68;
      HEAP[$0] = 0;
      __label__ = 107;
      break;
     case 19:
      
      var $70 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $70;
      __label__ = 29;
      break;
     case 20:
      
      var $72 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $72;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 21;
        break;
      } else {
        __label__ = 22;
        break;
      }
     case 21:
      HEAP[$0] = -1;
      __label__ = 107;
      break;
     case 22:
      
      
      
      
      
      
      
      
      var $84 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($84 == 20) {
        __label__ = 24;
        break;
      } else if ($84 == 27) {
        __label__ = 23;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 23:
      
      var $86 = HEAP[$ptr_addr] + 1;
      var $87 = HEAP[$enc_addr];
      var $88 = HEAP[$end_addr];
      var $89 = HEAP[$nextTokPtr_addr];
      var $90 = _normal_scanComment($87, $86, $88, $89);
      HEAP[$0] = $90;
      __label__ = 107;
      break;
     case 24:
      
      var $92 = HEAP[$ptr_addr] + 1;
      var $93 = HEAP[$enc_addr];
      var $94 = HEAP[$end_addr];
      var $95 = HEAP[$nextTokPtr_addr];
      var $96 = _normal_scanCdataSection($93, $92, $94, $95);
      HEAP[$0] = $96;
      __label__ = 107;
      break;
     case 25:
      var $97 = HEAP[$nextTokPtr_addr];
      var $98 = HEAP[$ptr_addr];
      HEAP[$97] = $98;
      HEAP[$0] = 0;
      __label__ = 107;
      break;
     case 26:
      
      var $100 = HEAP[$ptr_addr] + 1;
      var $101 = HEAP[$enc_addr];
      var $102 = HEAP[$end_addr];
      var $103 = HEAP[$nextTokPtr_addr];
      var $104 = _normal_scanPi($101, $100, $102, $103);
      HEAP[$0] = $104;
      __label__ = 107;
      break;
     case 27:
      
      var $106 = HEAP[$ptr_addr] + 1;
      var $107 = HEAP[$enc_addr];
      var $108 = HEAP[$end_addr];
      var $109 = HEAP[$nextTokPtr_addr];
      var $110 = _normal_scanEndTag($107, $106, $108, $109);
      HEAP[$0] = $110;
      __label__ = 107;
      break;
     case 28:
      var $111 = HEAP[$nextTokPtr_addr];
      var $112 = HEAP[$ptr_addr];
      HEAP[$111] = $112;
      HEAP[$0] = 0;
      __label__ = 107;
      break;
     case 29:
      HEAP[$hadColon] = 0;
      __label__ = 105;
      break;
     case 30:
      
      
      
      
      
      
      
      
      var $121 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($121 == 5) {
        __label__ = 33;
        break;
      } else if ($121 == 6) {
        __label__ = 38;
        break;
      } else if ($121 == 7) {
        __label__ = 43;
        break;
      } else if ($121 == 9) {
        __label__ = 72;
        break;
      } else if ($121 == 10) {
        __label__ = 72;
        break;
      } else if ($121 == 11) {
        __label__ = 98;
        break;
      } else if ($121 == 17) {
        __label__ = 99;
        break;
      } else if ($121 == 21) {
        __label__ = 72;
        break;
      } else if ($121 == 22) {
        __label__ = 32;
        break;
      } else if ($121 == 23) {
        __label__ = 48;
        break;
      } else if ($121 == 24) {
        __label__ = 32;
        break;
      } else if ($121 == 25) {
        __label__ = 32;
        break;
      } else if ($121 == 26) {
        __label__ = 32;
        break;
      } else if ($121 == 27) {
        __label__ = 32;
        break;
      } else if ($121 == 29) {
        __label__ = 31;
        break;
      } else {
        __label__ = 104;
        break;
      }
     case 31:
      var $122 = HEAP[$nextTokPtr_addr];
      var $123 = HEAP[$ptr_addr];
      HEAP[$122] = $123;
      HEAP[$0] = 0;
      __label__ = 107;
      break;
     case 32:
      
      var $125 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $125;
      __label__ = 105;
      break;
     case 33:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 34;
        break;
      } else {
        __label__ = 35;
        break;
      }
     case 34:
      HEAP[$0] = -2;
      __label__ = 107;
      break;
     case 35:
      
      
      
      var $135 = HEAP[HEAP[$enc_addr] + 332];
      var $136 = HEAP[$enc_addr];
      var $137 = HEAP[$ptr_addr];
      var $138 = FUNCTION_TABLE[$135]($136, $137);
      
      if ($138 == 0) {
        __label__ = 36;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 36:
      var $140 = HEAP[$nextTokPtr_addr];
      var $141 = HEAP[$ptr_addr];
      HEAP[$140] = $141;
      HEAP[$0] = 0;
      __label__ = 107;
      break;
     case 37:
      
      var $143 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $143;
      __label__ = 105;
      break;
     case 38:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 39;
        break;
      } else {
        __label__ = 40;
        break;
      }
     case 39:
      HEAP[$0] = -2;
      __label__ = 107;
      break;
     case 40:
      
      
      
      var $153 = HEAP[HEAP[$enc_addr] + 336];
      var $154 = HEAP[$enc_addr];
      var $155 = HEAP[$ptr_addr];
      var $156 = FUNCTION_TABLE[$153]($154, $155);
      
      if ($156 == 0) {
        __label__ = 41;
        break;
      } else {
        __label__ = 42;
        break;
      }
     case 41:
      var $158 = HEAP[$nextTokPtr_addr];
      var $159 = HEAP[$ptr_addr];
      HEAP[$158] = $159;
      HEAP[$0] = 0;
      __label__ = 107;
      break;
     case 42:
      
      var $161 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $161;
      __label__ = 105;
      break;
     case 43:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 44;
        break;
      } else {
        __label__ = 45;
        break;
      }
     case 44:
      HEAP[$0] = -2;
      __label__ = 107;
      break;
     case 45:
      
      
      
      var $171 = HEAP[HEAP[$enc_addr] + 340];
      var $172 = HEAP[$enc_addr];
      var $173 = HEAP[$ptr_addr];
      var $174 = FUNCTION_TABLE[$171]($172, $173);
      
      if ($174 == 0) {
        __label__ = 46;
        break;
      } else {
        __label__ = 47;
        break;
      }
     case 46:
      var $176 = HEAP[$nextTokPtr_addr];
      var $177 = HEAP[$ptr_addr];
      HEAP[$176] = $177;
      HEAP[$0] = 0;
      __label__ = 107;
      break;
     case 47:
      
      var $179 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $179;
      __label__ = 105;
      break;
     case 48:
      
      
      if (HEAP[$hadColon] != 0) {
        __label__ = 49;
        break;
      } else {
        __label__ = 50;
        break;
      }
     case 49:
      var $182 = HEAP[$nextTokPtr_addr];
      var $183 = HEAP[$ptr_addr];
      HEAP[$182] = $183;
      HEAP[$0] = 0;
      __label__ = 107;
      break;
     case 50:
      HEAP[$hadColon] = 1;
      
      var $185 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $185;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 51;
        break;
      } else {
        __label__ = 52;
        break;
      }
     case 51:
      HEAP[$0] = -1;
      __label__ = 107;
      break;
     case 52:
      
      
      
      
      
      
      
      
      var $197 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($197 == 5) {
        __label__ = 55;
        break;
      } else if ($197 == 6) {
        __label__ = 60;
        break;
      } else if ($197 == 7) {
        __label__ = 65;
        break;
      } else if ($197 == 22) {
        __label__ = 54;
        break;
      } else if ($197 == 24) {
        __label__ = 54;
        break;
      } else if ($197 == 29) {
        __label__ = 53;
        break;
      } else {
        __label__ = 70;
        break;
      }
     case 53:
      var $198 = HEAP[$nextTokPtr_addr];
      var $199 = HEAP[$ptr_addr];
      HEAP[$198] = $199;
      HEAP[$0] = 0;
      __label__ = 107;
      break;
     case 54:
      
      var $201 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $201;
      __label__ = 71;
      break;
     case 55:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 56;
        break;
      } else {
        __label__ = 57;
        break;
      }
     case 56:
      HEAP[$0] = -2;
      __label__ = 107;
      break;
     case 57:
      
      
      
      var $211 = HEAP[HEAP[$enc_addr] + 344];
      var $212 = HEAP[$enc_addr];
      var $213 = HEAP[$ptr_addr];
      var $214 = FUNCTION_TABLE[$211]($212, $213);
      
      if ($214 == 0) {
        __label__ = 58;
        break;
      } else {
        __label__ = 59;
        break;
      }
     case 58:
      var $216 = HEAP[$nextTokPtr_addr];
      var $217 = HEAP[$ptr_addr];
      HEAP[$216] = $217;
      HEAP[$0] = 0;
      __label__ = 107;
      break;
     case 59:
      
      var $219 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $219;
      __label__ = 71;
      break;
     case 60:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 61;
        break;
      } else {
        __label__ = 62;
        break;
      }
     case 61:
      HEAP[$0] = -2;
      __label__ = 107;
      break;
     case 62:
      
      
      
      var $229 = HEAP[HEAP[$enc_addr] + 348];
      var $230 = HEAP[$enc_addr];
      var $231 = HEAP[$ptr_addr];
      var $232 = FUNCTION_TABLE[$229]($230, $231);
      
      if ($232 == 0) {
        __label__ = 63;
        break;
      } else {
        __label__ = 64;
        break;
      }
     case 63:
      var $234 = HEAP[$nextTokPtr_addr];
      var $235 = HEAP[$ptr_addr];
      HEAP[$234] = $235;
      HEAP[$0] = 0;
      __label__ = 107;
      break;
     case 64:
      
      var $237 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $237;
      __label__ = 71;
      break;
     case 65:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 66;
        break;
      } else {
        __label__ = 67;
        break;
      }
     case 66:
      HEAP[$0] = -2;
      __label__ = 107;
      break;
     case 67:
      
      
      
      var $247 = HEAP[HEAP[$enc_addr] + 352];
      var $248 = HEAP[$enc_addr];
      var $249 = HEAP[$ptr_addr];
      var $250 = FUNCTION_TABLE[$247]($248, $249);
      
      if ($250 == 0) {
        __label__ = 68;
        break;
      } else {
        __label__ = 69;
        break;
      }
     case 68:
      var $252 = HEAP[$nextTokPtr_addr];
      var $253 = HEAP[$ptr_addr];
      HEAP[$252] = $253;
      HEAP[$0] = 0;
      __label__ = 107;
      break;
     case 69:
      
      var $255 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $255;
      __label__ = 71;
      break;
     case 70:
      var $256 = HEAP[$nextTokPtr_addr];
      var $257 = HEAP[$ptr_addr];
      HEAP[$256] = $257;
      HEAP[$0] = 0;
      __label__ = 107;
      break;
     case 71:
      __label__ = 105;
      break;
     case 72:
      
      var $259 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $259;
      __label__ = 96;
      break;
     case 73:
      
      
      
      
      
      
      
      
      var $268 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($268 == 5) {
        __label__ = 76;
        break;
      } else if ($268 == 6) {
        __label__ = 81;
        break;
      } else if ($268 == 7) {
        __label__ = 86;
        break;
      } else if ($268 == 9) {
        __label__ = 93;
        break;
      } else if ($268 == 10) {
        __label__ = 93;
        break;
      } else if ($268 == 11) {
        __label__ = 91;
        break;
      } else if ($268 == 17) {
        __label__ = 92;
        break;
      } else if ($268 == 21) {
        __label__ = 93;
        break;
      } else if ($268 == 22) {
        __label__ = 75;
        break;
      } else if ($268 == 24) {
        __label__ = 75;
        break;
      } else if ($268 == 29) {
        __label__ = 74;
        break;
      } else {
        __label__ = 94;
        break;
      }
     case 74:
      var $269 = HEAP[$nextTokPtr_addr];
      var $270 = HEAP[$ptr_addr];
      HEAP[$269] = $270;
      HEAP[$0] = 0;
      __label__ = 107;
      break;
     case 75:
      
      var $272 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $272;
      __label__ = 95;
      break;
     case 76:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 77;
        break;
      } else {
        __label__ = 78;
        break;
      }
     case 77:
      HEAP[$0] = -2;
      __label__ = 107;
      break;
     case 78:
      
      
      
      var $282 = HEAP[HEAP[$enc_addr] + 344];
      var $283 = HEAP[$enc_addr];
      var $284 = HEAP[$ptr_addr];
      var $285 = FUNCTION_TABLE[$282]($283, $284);
      
      if ($285 == 0) {
        __label__ = 79;
        break;
      } else {
        __label__ = 80;
        break;
      }
     case 79:
      var $287 = HEAP[$nextTokPtr_addr];
      var $288 = HEAP[$ptr_addr];
      HEAP[$287] = $288;
      HEAP[$0] = 0;
      __label__ = 107;
      break;
     case 80:
      
      var $290 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $290;
      __label__ = 95;
      break;
     case 81:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 82;
        break;
      } else {
        __label__ = 83;
        break;
      }
     case 82:
      HEAP[$0] = -2;
      __label__ = 107;
      break;
     case 83:
      
      
      
      var $300 = HEAP[HEAP[$enc_addr] + 348];
      var $301 = HEAP[$enc_addr];
      var $302 = HEAP[$ptr_addr];
      var $303 = FUNCTION_TABLE[$300]($301, $302);
      
      if ($303 == 0) {
        __label__ = 84;
        break;
      } else {
        __label__ = 85;
        break;
      }
     case 84:
      var $305 = HEAP[$nextTokPtr_addr];
      var $306 = HEAP[$ptr_addr];
      HEAP[$305] = $306;
      HEAP[$0] = 0;
      __label__ = 107;
      break;
     case 85:
      
      var $308 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $308;
      __label__ = 95;
      break;
     case 86:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 87;
        break;
      } else {
        __label__ = 88;
        break;
      }
     case 87:
      HEAP[$0] = -2;
      __label__ = 107;
      break;
     case 88:
      
      
      
      var $318 = HEAP[HEAP[$enc_addr] + 352];
      var $319 = HEAP[$enc_addr];
      var $320 = HEAP[$ptr_addr];
      var $321 = FUNCTION_TABLE[$318]($319, $320);
      
      if ($321 == 0) {
        __label__ = 89;
        break;
      } else {
        __label__ = 90;
        break;
      }
     case 89:
      var $323 = HEAP[$nextTokPtr_addr];
      var $324 = HEAP[$ptr_addr];
      HEAP[$323] = $324;
      HEAP[$0] = 0;
      __label__ = 107;
      break;
     case 90:
      
      var $326 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $326;
      __label__ = 95;
      break;
     case 91:
      __label__ = 98;
      break;
     case 92:
      __label__ = 99;
      break;
     case 93:
      
      var $328 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $328;
      __label__ = 96;
      break;
     case 94:
      var $329 = HEAP[$nextTokPtr_addr];
      var $330 = HEAP[$ptr_addr];
      HEAP[$329] = $330;
      HEAP[$0] = 0;
      __label__ = 107;
      break;
     case 95:
      var $331 = HEAP[$enc_addr];
      var $332 = HEAP[$ptr_addr];
      var $333 = HEAP[$end_addr];
      var $334 = HEAP[$nextTokPtr_addr];
      var $335 = _normal_scanAtts($331, $332, $333, $334);
      HEAP[$0] = $335;
      __label__ = 107;
      break;
     case 96:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 73;
        break;
      } else {
        __label__ = 97;
        break;
      }
     case 97:
      HEAP[$0] = -1;
      __label__ = 107;
      break;
     case 98:
      
      var $340 = HEAP[$ptr_addr] + 1;
      var $341 = HEAP[$nextTokPtr_addr];
      HEAP[$341] = $340;
      HEAP[$0] = 2;
      __label__ = 107;
      break;
     case 99:
      
      var $343 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $343;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 100;
        break;
      } else {
        __label__ = 101;
        break;
      }
     case 100:
      HEAP[$0] = -1;
      __label__ = 107;
      break;
     case 101:
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 62) {
        __label__ = 102;
        break;
      } else {
        __label__ = 103;
        break;
      }
     case 102:
      var $350 = HEAP[$nextTokPtr_addr];
      var $351 = HEAP[$ptr_addr];
      HEAP[$350] = $351;
      HEAP[$0] = 0;
      __label__ = 107;
      break;
     case 103:
      
      var $353 = HEAP[$ptr_addr] + 1;
      var $354 = HEAP[$nextTokPtr_addr];
      HEAP[$354] = $353;
      HEAP[$0] = 4;
      __label__ = 107;
      break;
     case 104:
      var $355 = HEAP[$nextTokPtr_addr];
      var $356 = HEAP[$ptr_addr];
      HEAP[$355] = $356;
      HEAP[$0] = 0;
      __label__ = 107;
      break;
     case 105:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 30;
        break;
      } else {
        __label__ = 106;
        break;
      }
     case 106:
      HEAP[$0] = -1;
      __label__ = 107;
      break;
     case 107:
      var $360 = HEAP[$0];
      HEAP[$retval] = $360;
      __label__ = 108;
      break;
     case 108:
      var $retval105 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval105;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _normal_contentTok($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 24;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -4;
      __label__ = 61;
      break;
     case 2:
      
      
      
      
      
      
      
      
      var $12 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($12 == 0) {
        __label__ = 34;
        break;
      } else if ($12 == 1) {
        __label__ = 34;
        break;
      } else if ($12 == 2) {
        __label__ = 3;
        break;
      } else if ($12 == 3) {
        __label__ = 4;
        break;
      } else if ($12 == 4) {
        __label__ = 11;
        break;
      } else if ($12 == 5) {
        __label__ = 19;
        break;
      } else if ($12 == 6) {
        __label__ = 24;
        break;
      } else if ($12 == 7) {
        __label__ = 29;
        break;
      } else if ($12 == 8) {
        __label__ = 34;
        break;
      } else if ($12 == 9) {
        __label__ = 5;
        break;
      } else if ($12 == 10) {
        __label__ = 10;
        break;
      } else {
        __label__ = 35;
        break;
      }
     case 3:
      
      var $14 = HEAP[$ptr_addr] + 1;
      var $15 = HEAP[$enc_addr];
      var $16 = HEAP[$end_addr];
      var $17 = HEAP[$nextTokPtr_addr];
      var $18 = _normal_scanLt($15, $14, $16, $17);
      HEAP[$0] = $18;
      __label__ = 61;
      break;
     case 4:
      
      var $20 = HEAP[$ptr_addr] + 1;
      var $21 = HEAP[$enc_addr];
      var $22 = HEAP[$end_addr];
      var $23 = HEAP[$nextTokPtr_addr];
      var $24 = _normal_scanRef($21, $20, $22, $23);
      HEAP[$0] = $24;
      __label__ = 61;
      break;
     case 5:
      
      var $26 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $26;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      HEAP[$0] = -3;
      __label__ = 61;
      break;
     case 7:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]] == 10) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      
      var $40 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $40;
      __label__ = 9;
      break;
     case 9:
      var $41 = HEAP[$nextTokPtr_addr];
      var $42 = HEAP[$ptr_addr];
      HEAP[$41] = $42;
      HEAP[$0] = 7;
      __label__ = 61;
      break;
     case 10:
      
      var $44 = HEAP[$ptr_addr] + 1;
      var $45 = HEAP[$nextTokPtr_addr];
      HEAP[$45] = $44;
      HEAP[$0] = 7;
      __label__ = 61;
      break;
     case 11:
      
      var $47 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $47;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      HEAP[$0] = -5;
      __label__ = 61;
      break;
     case 13:
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 93) {
        __label__ = 36;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 14:
      
      var $55 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $55;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      HEAP[$0] = -5;
      __label__ = 61;
      break;
     case 16:
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 62) {
        __label__ = 17;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 17:
      
      var $63 = HEAP[$ptr_addr] + -1;
      HEAP[$ptr_addr] = $63;
      __label__ = 36;
      break;
     case 18:
      var $64 = HEAP[$nextTokPtr_addr];
      var $65 = HEAP[$ptr_addr];
      HEAP[$64] = $65;
      HEAP[$0] = 0;
      __label__ = 61;
      break;
     case 19:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 20;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 20:
      HEAP[$0] = -2;
      __label__ = 61;
      break;
     case 21:
      
      
      
      var $75 = HEAP[HEAP[$enc_addr] + 356];
      var $76 = HEAP[$enc_addr];
      var $77 = HEAP[$ptr_addr];
      var $78 = FUNCTION_TABLE[$75]($76, $77);
      
      if ($78 != 0) {
        __label__ = 22;
        break;
      } else {
        __label__ = 23;
        break;
      }
     case 22:
      var $80 = HEAP[$nextTokPtr_addr];
      var $81 = HEAP[$ptr_addr];
      HEAP[$80] = $81;
      HEAP[$0] = 0;
      __label__ = 61;
      break;
     case 23:
      
      var $83 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $83;
      __label__ = 36;
      break;
     case 24:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 25;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 25:
      HEAP[$0] = -2;
      __label__ = 61;
      break;
     case 26:
      
      
      
      var $93 = HEAP[HEAP[$enc_addr] + 360];
      var $94 = HEAP[$enc_addr];
      var $95 = HEAP[$ptr_addr];
      var $96 = FUNCTION_TABLE[$93]($94, $95);
      
      if ($96 != 0) {
        __label__ = 27;
        break;
      } else {
        __label__ = 28;
        break;
      }
     case 27:
      var $98 = HEAP[$nextTokPtr_addr];
      var $99 = HEAP[$ptr_addr];
      HEAP[$98] = $99;
      HEAP[$0] = 0;
      __label__ = 61;
      break;
     case 28:
      
      var $101 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $101;
      __label__ = 36;
      break;
     case 29:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 30;
        break;
      } else {
        __label__ = 31;
        break;
      }
     case 30:
      HEAP[$0] = -2;
      __label__ = 61;
      break;
     case 31:
      
      
      
      var $111 = HEAP[HEAP[$enc_addr] + 364];
      var $112 = HEAP[$enc_addr];
      var $113 = HEAP[$ptr_addr];
      var $114 = FUNCTION_TABLE[$111]($112, $113);
      
      if ($114 != 0) {
        __label__ = 32;
        break;
      } else {
        __label__ = 33;
        break;
      }
     case 32:
      var $116 = HEAP[$nextTokPtr_addr];
      var $117 = HEAP[$ptr_addr];
      HEAP[$116] = $117;
      HEAP[$0] = 0;
      __label__ = 61;
      break;
     case 33:
      
      var $119 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $119;
      __label__ = 36;
      break;
     case 34:
      var $120 = HEAP[$nextTokPtr_addr];
      var $121 = HEAP[$ptr_addr];
      HEAP[$120] = $121;
      HEAP[$0] = 0;
      __label__ = 61;
      break;
     case 35:
      
      var $123 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $123;
      __label__ = 36;
      break;
     case 36:
      __label__ = 59;
      break;
     case 37:
      
      
      
      
      
      
      
      
      var $132 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($132 == 0) {
        __label__ = 57;
        break;
      } else if ($132 == 1) {
        __label__ = 57;
        break;
      } else if ($132 == 2) {
        __label__ = 57;
        break;
      } else if ($132 == 3) {
        __label__ = 57;
        break;
      } else if ($132 == 4) {
        __label__ = 50;
        break;
      } else if ($132 == 5) {
        __label__ = 38;
        break;
      } else if ($132 == 6) {
        __label__ = 42;
        break;
      } else if ($132 == 7) {
        __label__ = 46;
        break;
      } else if ($132 == 8) {
        __label__ = 57;
        break;
      } else if ($132 == 9) {
        __label__ = 57;
        break;
      } else if ($132 == 10) {
        __label__ = 57;
        break;
      } else {
        __label__ = 58;
        break;
      }
     case 38:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 40;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 39:
      
      
      
      var $142 = HEAP[HEAP[$enc_addr] + 356];
      var $143 = HEAP[$enc_addr];
      var $144 = HEAP[$ptr_addr];
      var $145 = FUNCTION_TABLE[$142]($143, $144);
      
      if ($145 != 0) {
        __label__ = 40;
        break;
      } else {
        __label__ = 41;
        break;
      }
     case 40:
      var $147 = HEAP[$nextTokPtr_addr];
      var $148 = HEAP[$ptr_addr];
      HEAP[$147] = $148;
      HEAP[$0] = 6;
      __label__ = 61;
      break;
     case 41:
      
      var $150 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $150;
      __label__ = 59;
      break;
     case 42:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 44;
        break;
      } else {
        __label__ = 43;
        break;
      }
     case 43:
      
      
      
      var $160 = HEAP[HEAP[$enc_addr] + 360];
      var $161 = HEAP[$enc_addr];
      var $162 = HEAP[$ptr_addr];
      var $163 = FUNCTION_TABLE[$160]($161, $162);
      
      if ($163 != 0) {
        __label__ = 44;
        break;
      } else {
        __label__ = 45;
        break;
      }
     case 44:
      var $165 = HEAP[$nextTokPtr_addr];
      var $166 = HEAP[$ptr_addr];
      HEAP[$165] = $166;
      HEAP[$0] = 6;
      __label__ = 61;
      break;
     case 45:
      
      var $168 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $168;
      __label__ = 59;
      break;
     case 46:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 48;
        break;
      } else {
        __label__ = 47;
        break;
      }
     case 47:
      
      
      
      var $178 = HEAP[HEAP[$enc_addr] + 364];
      var $179 = HEAP[$enc_addr];
      var $180 = HEAP[$ptr_addr];
      var $181 = FUNCTION_TABLE[$178]($179, $180);
      
      if ($181 != 0) {
        __label__ = 48;
        break;
      } else {
        __label__ = 49;
        break;
      }
     case 48:
      var $183 = HEAP[$nextTokPtr_addr];
      var $184 = HEAP[$ptr_addr];
      HEAP[$183] = $184;
      HEAP[$0] = 6;
      __label__ = 61;
      break;
     case 49:
      
      var $186 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $186;
      __label__ = 59;
      break;
     case 50:
      
      
      
      
      if (HEAP[$ptr_addr] + 1 != HEAP[$end_addr]) {
        __label__ = 51;
        break;
      } else {
        __label__ = 57;
        break;
      }
     case 51:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] != 93) {
        __label__ = 52;
        break;
      } else {
        __label__ = 53;
        break;
      }
     case 52:
      
      var $196 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $196;
      __label__ = 59;
      break;
     case 53:
      
      
      
      
      if (HEAP[$ptr_addr] + 2 != HEAP[$end_addr]) {
        __label__ = 54;
        break;
      } else {
        __label__ = 57;
        break;
      }
     case 54:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 2] != 62) {
        __label__ = 55;
        break;
      } else {
        __label__ = 56;
        break;
      }
     case 55:
      
      var $206 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $206;
      __label__ = 59;
      break;
     case 56:
      
      var $208 = HEAP[$ptr_addr] + 2;
      var $209 = HEAP[$nextTokPtr_addr];
      HEAP[$209] = $208;
      HEAP[$0] = 0;
      __label__ = 61;
      break;
     case 57:
      var $210 = HEAP[$nextTokPtr_addr];
      var $211 = HEAP[$ptr_addr];
      HEAP[$210] = $211;
      HEAP[$0] = 6;
      __label__ = 61;
      break;
     case 58:
      
      var $213 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $213;
      __label__ = 59;
      break;
     case 59:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 37;
        break;
      } else {
        __label__ = 60;
        break;
      }
     case 60:
      var $217 = HEAP[$nextTokPtr_addr];
      var $218 = HEAP[$ptr_addr];
      HEAP[$217] = $218;
      HEAP[$0] = 6;
      __label__ = 61;
      break;
     case 61:
      var $219 = HEAP[$0];
      HEAP[$retval] = $219;
      __label__ = 62;
      break;
     case 62:
      var $retval61 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval61;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _normal_scanPercent($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 24;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -22;
      __label__ = 45;
      break;
     case 2:
      
      
      
      
      
      
      
      
      var $12 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($12 == 5) {
        __label__ = 5;
        break;
      } else if ($12 == 6) {
        __label__ = 10;
        break;
      } else if ($12 == 7) {
        __label__ = 15;
        break;
      } else if ($12 == 9) {
        __label__ = 20;
        break;
      } else if ($12 == 10) {
        __label__ = 20;
        break;
      } else if ($12 == 21) {
        __label__ = 20;
        break;
      } else if ($12 == 22) {
        __label__ = 4;
        break;
      } else if ($12 == 24) {
        __label__ = 4;
        break;
      } else if ($12 == 29) {
        __label__ = 3;
        break;
      } else if ($12 == 30) {
        __label__ = 20;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 3:
      var $13 = HEAP[$nextTokPtr_addr];
      var $14 = HEAP[$ptr_addr];
      HEAP[$13] = $14;
      HEAP[$0] = 0;
      __label__ = 45;
      break;
     case 4:
      
      var $16 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $16;
      __label__ = 22;
      break;
     case 5:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      HEAP[$0] = -2;
      __label__ = 45;
      break;
     case 7:
      
      
      
      var $26 = HEAP[HEAP[$enc_addr] + 344];
      var $27 = HEAP[$enc_addr];
      var $28 = HEAP[$ptr_addr];
      var $29 = FUNCTION_TABLE[$26]($27, $28);
      
      if ($29 == 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      var $31 = HEAP[$nextTokPtr_addr];
      var $32 = HEAP[$ptr_addr];
      HEAP[$31] = $32;
      HEAP[$0] = 0;
      __label__ = 45;
      break;
     case 9:
      
      var $34 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $34;
      __label__ = 22;
      break;
     case 10:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      HEAP[$0] = -2;
      __label__ = 45;
      break;
     case 12:
      
      
      
      var $44 = HEAP[HEAP[$enc_addr] + 348];
      var $45 = HEAP[$enc_addr];
      var $46 = HEAP[$ptr_addr];
      var $47 = FUNCTION_TABLE[$44]($45, $46);
      
      if ($47 == 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      var $49 = HEAP[$nextTokPtr_addr];
      var $50 = HEAP[$ptr_addr];
      HEAP[$49] = $50;
      HEAP[$0] = 0;
      __label__ = 45;
      break;
     case 14:
      
      var $52 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $52;
      __label__ = 22;
      break;
     case 15:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      HEAP[$0] = -2;
      __label__ = 45;
      break;
     case 17:
      
      
      
      var $62 = HEAP[HEAP[$enc_addr] + 352];
      var $63 = HEAP[$enc_addr];
      var $64 = HEAP[$ptr_addr];
      var $65 = FUNCTION_TABLE[$62]($63, $64);
      
      if ($65 == 0) {
        __label__ = 18;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 18:
      var $67 = HEAP[$nextTokPtr_addr];
      var $68 = HEAP[$ptr_addr];
      HEAP[$67] = $68;
      HEAP[$0] = 0;
      __label__ = 45;
      break;
     case 19:
      
      var $70 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $70;
      __label__ = 22;
      break;
     case 20:
      var $71 = HEAP[$nextTokPtr_addr];
      var $72 = HEAP[$ptr_addr];
      HEAP[$71] = $72;
      HEAP[$0] = 22;
      __label__ = 45;
      break;
     case 21:
      var $73 = HEAP[$nextTokPtr_addr];
      var $74 = HEAP[$ptr_addr];
      HEAP[$73] = $74;
      HEAP[$0] = 0;
      __label__ = 45;
      break;
     case 22:
      __label__ = 43;
      break;
     case 23:
      
      
      
      
      
      
      
      
      var $83 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($83 == 5) {
        __label__ = 26;
        break;
      } else if ($83 == 6) {
        __label__ = 31;
        break;
      } else if ($83 == 7) {
        __label__ = 36;
        break;
      } else if ($83 == 18) {
        __label__ = 41;
        break;
      } else if ($83 == 22) {
        __label__ = 25;
        break;
      } else if ($83 == 24) {
        __label__ = 25;
        break;
      } else if ($83 == 25) {
        __label__ = 25;
        break;
      } else if ($83 == 26) {
        __label__ = 25;
        break;
      } else if ($83 == 27) {
        __label__ = 25;
        break;
      } else if ($83 == 29) {
        __label__ = 24;
        break;
      } else {
        __label__ = 42;
        break;
      }
     case 24:
      var $84 = HEAP[$nextTokPtr_addr];
      var $85 = HEAP[$ptr_addr];
      HEAP[$84] = $85;
      HEAP[$0] = 0;
      __label__ = 45;
      break;
     case 25:
      
      var $87 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $87;
      __label__ = 43;
      break;
     case 26:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 27;
        break;
      } else {
        __label__ = 28;
        break;
      }
     case 27:
      HEAP[$0] = -2;
      __label__ = 45;
      break;
     case 28:
      
      
      
      var $97 = HEAP[HEAP[$enc_addr] + 332];
      var $98 = HEAP[$enc_addr];
      var $99 = HEAP[$ptr_addr];
      var $100 = FUNCTION_TABLE[$97]($98, $99);
      
      if ($100 == 0) {
        __label__ = 29;
        break;
      } else {
        __label__ = 30;
        break;
      }
     case 29:
      var $102 = HEAP[$nextTokPtr_addr];
      var $103 = HEAP[$ptr_addr];
      HEAP[$102] = $103;
      HEAP[$0] = 0;
      __label__ = 45;
      break;
     case 30:
      
      var $105 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $105;
      __label__ = 43;
      break;
     case 31:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 32;
        break;
      } else {
        __label__ = 33;
        break;
      }
     case 32:
      HEAP[$0] = -2;
      __label__ = 45;
      break;
     case 33:
      
      
      
      var $115 = HEAP[HEAP[$enc_addr] + 336];
      var $116 = HEAP[$enc_addr];
      var $117 = HEAP[$ptr_addr];
      var $118 = FUNCTION_TABLE[$115]($116, $117);
      
      if ($118 == 0) {
        __label__ = 34;
        break;
      } else {
        __label__ = 35;
        break;
      }
     case 34:
      var $120 = HEAP[$nextTokPtr_addr];
      var $121 = HEAP[$ptr_addr];
      HEAP[$120] = $121;
      HEAP[$0] = 0;
      __label__ = 45;
      break;
     case 35:
      
      var $123 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $123;
      __label__ = 43;
      break;
     case 36:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 37;
        break;
      } else {
        __label__ = 38;
        break;
      }
     case 37:
      HEAP[$0] = -2;
      __label__ = 45;
      break;
     case 38:
      
      
      
      var $133 = HEAP[HEAP[$enc_addr] + 340];
      var $134 = HEAP[$enc_addr];
      var $135 = HEAP[$ptr_addr];
      var $136 = FUNCTION_TABLE[$133]($134, $135);
      
      if ($136 == 0) {
        __label__ = 39;
        break;
      } else {
        __label__ = 40;
        break;
      }
     case 39:
      var $138 = HEAP[$nextTokPtr_addr];
      var $139 = HEAP[$ptr_addr];
      HEAP[$138] = $139;
      HEAP[$0] = 0;
      __label__ = 45;
      break;
     case 40:
      
      var $141 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $141;
      __label__ = 43;
      break;
     case 41:
      
      var $143 = HEAP[$ptr_addr] + 1;
      var $144 = HEAP[$nextTokPtr_addr];
      HEAP[$144] = $143;
      HEAP[$0] = 28;
      __label__ = 45;
      break;
     case 42:
      var $145 = HEAP[$nextTokPtr_addr];
      var $146 = HEAP[$ptr_addr];
      HEAP[$145] = $146;
      HEAP[$0] = 0;
      __label__ = 45;
      break;
     case 43:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 23;
        break;
      } else {
        __label__ = 44;
        break;
      }
     case 44:
      HEAP[$0] = -1;
      __label__ = 45;
      break;
     case 45:
      var $150 = HEAP[$0];
      HEAP[$retval] = $150;
      __label__ = 46;
      break;
     case 46:
      var $retval45 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval45;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _normal_scanPoundName($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 24;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -1;
      __label__ = 44;
      break;
     case 2:
      
      
      
      
      
      
      
      
      var $12 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($12 == 5) {
        __label__ = 5;
        break;
      } else if ($12 == 6) {
        __label__ = 10;
        break;
      } else if ($12 == 7) {
        __label__ = 15;
        break;
      } else if ($12 == 22) {
        __label__ = 4;
        break;
      } else if ($12 == 24) {
        __label__ = 4;
        break;
      } else if ($12 == 29) {
        __label__ = 3;
        break;
      } else {
        __label__ = 20;
        break;
      }
     case 3:
      var $13 = HEAP[$nextTokPtr_addr];
      var $14 = HEAP[$ptr_addr];
      HEAP[$13] = $14;
      HEAP[$0] = 0;
      __label__ = 44;
      break;
     case 4:
      
      var $16 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $16;
      __label__ = 21;
      break;
     case 5:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      HEAP[$0] = -2;
      __label__ = 44;
      break;
     case 7:
      
      
      
      var $26 = HEAP[HEAP[$enc_addr] + 344];
      var $27 = HEAP[$enc_addr];
      var $28 = HEAP[$ptr_addr];
      var $29 = FUNCTION_TABLE[$26]($27, $28);
      
      if ($29 == 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      var $31 = HEAP[$nextTokPtr_addr];
      var $32 = HEAP[$ptr_addr];
      HEAP[$31] = $32;
      HEAP[$0] = 0;
      __label__ = 44;
      break;
     case 9:
      
      var $34 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $34;
      __label__ = 21;
      break;
     case 10:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      HEAP[$0] = -2;
      __label__ = 44;
      break;
     case 12:
      
      
      
      var $44 = HEAP[HEAP[$enc_addr] + 348];
      var $45 = HEAP[$enc_addr];
      var $46 = HEAP[$ptr_addr];
      var $47 = FUNCTION_TABLE[$44]($45, $46);
      
      if ($47 == 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      var $49 = HEAP[$nextTokPtr_addr];
      var $50 = HEAP[$ptr_addr];
      HEAP[$49] = $50;
      HEAP[$0] = 0;
      __label__ = 44;
      break;
     case 14:
      
      var $52 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $52;
      __label__ = 21;
      break;
     case 15:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      HEAP[$0] = -2;
      __label__ = 44;
      break;
     case 17:
      
      
      
      var $62 = HEAP[HEAP[$enc_addr] + 352];
      var $63 = HEAP[$enc_addr];
      var $64 = HEAP[$ptr_addr];
      var $65 = FUNCTION_TABLE[$62]($63, $64);
      
      if ($65 == 0) {
        __label__ = 18;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 18:
      var $67 = HEAP[$nextTokPtr_addr];
      var $68 = HEAP[$ptr_addr];
      HEAP[$67] = $68;
      HEAP[$0] = 0;
      __label__ = 44;
      break;
     case 19:
      
      var $70 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $70;
      __label__ = 21;
      break;
     case 20:
      var $71 = HEAP[$nextTokPtr_addr];
      var $72 = HEAP[$ptr_addr];
      HEAP[$71] = $72;
      HEAP[$0] = 0;
      __label__ = 44;
      break;
     case 21:
      __label__ = 42;
      break;
     case 22:
      
      
      
      
      
      
      
      
      var $81 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($81 == 5) {
        __label__ = 25;
        break;
      } else if ($81 == 6) {
        __label__ = 30;
        break;
      } else if ($81 == 7) {
        __label__ = 35;
        break;
      } else if ($81 == 9) {
        __label__ = 40;
        break;
      } else if ($81 == 10) {
        __label__ = 40;
        break;
      } else if ($81 == 11) {
        __label__ = 40;
        break;
      } else if ($81 == 21) {
        __label__ = 40;
        break;
      } else if ($81 == 22) {
        __label__ = 24;
        break;
      } else if ($81 == 24) {
        __label__ = 24;
        break;
      } else if ($81 == 25) {
        __label__ = 24;
        break;
      } else if ($81 == 26) {
        __label__ = 24;
        break;
      } else if ($81 == 27) {
        __label__ = 24;
        break;
      } else if ($81 == 29) {
        __label__ = 23;
        break;
      } else if ($81 == 30) {
        __label__ = 40;
        break;
      } else if ($81 == 32) {
        __label__ = 40;
        break;
      } else if ($81 == 36) {
        __label__ = 40;
        break;
      } else {
        __label__ = 41;
        break;
      }
     case 23:
      var $82 = HEAP[$nextTokPtr_addr];
      var $83 = HEAP[$ptr_addr];
      HEAP[$82] = $83;
      HEAP[$0] = 0;
      __label__ = 44;
      break;
     case 24:
      
      var $85 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $85;
      __label__ = 42;
      break;
     case 25:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 26;
        break;
      } else {
        __label__ = 27;
        break;
      }
     case 26:
      HEAP[$0] = -2;
      __label__ = 44;
      break;
     case 27:
      
      
      
      var $95 = HEAP[HEAP[$enc_addr] + 332];
      var $96 = HEAP[$enc_addr];
      var $97 = HEAP[$ptr_addr];
      var $98 = FUNCTION_TABLE[$95]($96, $97);
      
      if ($98 == 0) {
        __label__ = 28;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 28:
      var $100 = HEAP[$nextTokPtr_addr];
      var $101 = HEAP[$ptr_addr];
      HEAP[$100] = $101;
      HEAP[$0] = 0;
      __label__ = 44;
      break;
     case 29:
      
      var $103 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $103;
      __label__ = 42;
      break;
     case 30:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 31;
        break;
      } else {
        __label__ = 32;
        break;
      }
     case 31:
      HEAP[$0] = -2;
      __label__ = 44;
      break;
     case 32:
      
      
      
      var $113 = HEAP[HEAP[$enc_addr] + 336];
      var $114 = HEAP[$enc_addr];
      var $115 = HEAP[$ptr_addr];
      var $116 = FUNCTION_TABLE[$113]($114, $115);
      
      if ($116 == 0) {
        __label__ = 33;
        break;
      } else {
        __label__ = 34;
        break;
      }
     case 33:
      var $118 = HEAP[$nextTokPtr_addr];
      var $119 = HEAP[$ptr_addr];
      HEAP[$118] = $119;
      HEAP[$0] = 0;
      __label__ = 44;
      break;
     case 34:
      
      var $121 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $121;
      __label__ = 42;
      break;
     case 35:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 36;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 36:
      HEAP[$0] = -2;
      __label__ = 44;
      break;
     case 37:
      
      
      
      var $131 = HEAP[HEAP[$enc_addr] + 340];
      var $132 = HEAP[$enc_addr];
      var $133 = HEAP[$ptr_addr];
      var $134 = FUNCTION_TABLE[$131]($132, $133);
      
      if ($134 == 0) {
        __label__ = 38;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 38:
      var $136 = HEAP[$nextTokPtr_addr];
      var $137 = HEAP[$ptr_addr];
      HEAP[$136] = $137;
      HEAP[$0] = 0;
      __label__ = 44;
      break;
     case 39:
      
      var $139 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $139;
      __label__ = 42;
      break;
     case 40:
      var $140 = HEAP[$nextTokPtr_addr];
      var $141 = HEAP[$ptr_addr];
      HEAP[$140] = $141;
      HEAP[$0] = 20;
      __label__ = 44;
      break;
     case 41:
      var $142 = HEAP[$nextTokPtr_addr];
      var $143 = HEAP[$ptr_addr];
      HEAP[$142] = $143;
      HEAP[$0] = 0;
      __label__ = 44;
      break;
     case 42:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 22;
        break;
      } else {
        __label__ = 43;
        break;
      }
     case 43:
      HEAP[$0] = -20;
      __label__ = 44;
      break;
     case 44:
      var $147 = HEAP[$0];
      HEAP[$retval] = $147;
      __label__ = 45;
      break;
     case 45:
      var $retval44 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval44;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _normal_scanLit($open, $enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 32;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $open_addr = __stackBase__;
      var $enc_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $nextTokPtr_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      var $t = __stackBase__ + 28;
      
      HEAP[$open_addr] = $open;
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      __label__ = 25;
      break;
     case 1:
      
      
      
      
      
      
      
      
      var $9 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$t] = $9;
      var $10 = HEAP[$t];
      if ($10 == 0) {
        __label__ = 17;
        break;
      } else if ($10 == 1) {
        __label__ = 17;
        break;
      } else if ($10 == 5) {
        __label__ = 2;
        break;
      } else if ($10 == 6) {
        __label__ = 7;
        break;
      } else if ($10 == 7) {
        __label__ = 12;
        break;
      } else if ($10 == 8) {
        __label__ = 17;
        break;
      } else if ($10 == 12) {
        __label__ = 18;
        break;
      } else if ($10 == 13) {
        __label__ = 18;
        break;
      } else {
        __label__ = 24;
        break;
      }
     case 2:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      HEAP[$0] = -2;
      __label__ = 27;
      break;
     case 4:
      
      
      
      var $20 = HEAP[HEAP[$enc_addr] + 356];
      var $21 = HEAP[$enc_addr];
      var $22 = HEAP[$ptr_addr];
      var $23 = FUNCTION_TABLE[$20]($21, $22);
      
      if ($23 != 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      var $25 = HEAP[$nextTokPtr_addr];
      var $26 = HEAP[$ptr_addr];
      HEAP[$25] = $26;
      HEAP[$0] = 0;
      __label__ = 27;
      break;
     case 6:
      
      var $28 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $28;
      __label__ = 25;
      break;
     case 7:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      HEAP[$0] = -2;
      __label__ = 27;
      break;
     case 9:
      
      
      
      var $38 = HEAP[HEAP[$enc_addr] + 360];
      var $39 = HEAP[$enc_addr];
      var $40 = HEAP[$ptr_addr];
      var $41 = FUNCTION_TABLE[$38]($39, $40);
      
      if ($41 != 0) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      var $43 = HEAP[$nextTokPtr_addr];
      var $44 = HEAP[$ptr_addr];
      HEAP[$43] = $44;
      HEAP[$0] = 0;
      __label__ = 27;
      break;
     case 11:
      
      var $46 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $46;
      __label__ = 25;
      break;
     case 12:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      HEAP[$0] = -2;
      __label__ = 27;
      break;
     case 14:
      
      
      
      var $56 = HEAP[HEAP[$enc_addr] + 364];
      var $57 = HEAP[$enc_addr];
      var $58 = HEAP[$ptr_addr];
      var $59 = FUNCTION_TABLE[$56]($57, $58);
      
      if ($59 != 0) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      var $61 = HEAP[$nextTokPtr_addr];
      var $62 = HEAP[$ptr_addr];
      HEAP[$61] = $62;
      HEAP[$0] = 0;
      __label__ = 27;
      break;
     case 16:
      
      var $64 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $64;
      __label__ = 25;
      break;
     case 17:
      var $65 = HEAP[$nextTokPtr_addr];
      var $66 = HEAP[$ptr_addr];
      HEAP[$65] = $66;
      HEAP[$0] = 0;
      __label__ = 27;
      break;
     case 18:
      
      var $68 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $68;
      
      
      
      if (HEAP[$t] != HEAP[$open_addr]) {
        __label__ = 25;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 19:
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 20;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 20:
      HEAP[$0] = -27;
      __label__ = 27;
      break;
     case 21:
      var $75 = HEAP[$nextTokPtr_addr];
      var $76 = HEAP[$ptr_addr];
      HEAP[$75] = $76;
      
      
      
      
      
      
      
      
      var $85 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($85 == 9) {
        __label__ = 22;
        break;
      } else if ($85 == 10) {
        __label__ = 22;
        break;
      } else if ($85 == 11) {
        __label__ = 22;
        break;
      } else if ($85 == 20) {
        __label__ = 22;
        break;
      } else if ($85 == 21) {
        __label__ = 22;
        break;
      } else if ($85 == 30) {
        __label__ = 22;
        break;
      } else {
        __label__ = 23;
        break;
      }
     case 22:
      HEAP[$0] = 27;
      __label__ = 27;
      break;
     case 23:
      HEAP[$0] = 0;
      __label__ = 27;
      break;
     case 24:
      
      var $87 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $87;
      __label__ = 25;
      break;
     case 25:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 26:
      HEAP[$0] = -1;
      __label__ = 27;
      break;
     case 27:
      var $91 = HEAP[$0];
      HEAP[$retval] = $91;
      __label__ = 28;
      break;
     case 28:
      var $retval27 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval27;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _normal_prologTok($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $tok = __stackBase__ + 24;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -4;
      __label__ = 125;
      break;
     case 2:
      
      
      
      
      
      
      
      
      var $12 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($12 == 2) {
        __label__ = 5;
        break;
      } else if ($12 == 4) {
        __label__ = 24;
        break;
      } else if ($12 == 5) {
        __label__ = 44;
        break;
      } else if ($12 == 6) {
        __label__ = 51;
        break;
      } else if ($12 == 7) {
        __label__ = 58;
        break;
      } else if ($12 == 9) {
        __label__ = 12;
        break;
      } else if ($12 == 10) {
        __label__ = 14;
        break;
      } else if ($12 == 11) {
        __label__ = 42;
        break;
      } else if ($12 == 12) {
        __label__ = 3;
        break;
      } else if ($12 == 13) {
        __label__ = 4;
        break;
      } else if ($12 == 19) {
        __label__ = 43;
        break;
      } else if ($12 == 20) {
        __label__ = 23;
        break;
      } else if ($12 == 21) {
        __label__ = 14;
        break;
      } else if ($12 == 22) {
        __label__ = 65;
        break;
      } else if ($12 == 23) {
        __label__ = 66;
        break;
      } else if ($12 == 24) {
        __label__ = 65;
        break;
      } else if ($12 == 25) {
        __label__ = 66;
        break;
      } else if ($12 == 26) {
        __label__ = 66;
        break;
      } else if ($12 == 27) {
        __label__ = 66;
        break;
      } else if ($12 == 30) {
        __label__ = 21;
        break;
      } else if ($12 == 31) {
        __label__ = 32;
        break;
      } else if ($12 == 32) {
        __label__ = 33;
        break;
      } else if ($12 == 35) {
        __label__ = 22;
        break;
      } else if ($12 == 36) {
        __label__ = 41;
        break;
      } else {
        __label__ = 67;
        break;
      }
     case 3:
      
      var $14 = HEAP[$ptr_addr] + 1;
      var $15 = HEAP[$enc_addr];
      var $16 = HEAP[$end_addr];
      var $17 = HEAP[$nextTokPtr_addr];
      var $18 = _normal_scanLit(12, $15, $14, $16, $17);
      HEAP[$0] = $18;
      __label__ = 125;
      break;
     case 4:
      
      var $20 = HEAP[$ptr_addr] + 1;
      var $21 = HEAP[$enc_addr];
      var $22 = HEAP[$end_addr];
      var $23 = HEAP[$nextTokPtr_addr];
      var $24 = _normal_scanLit(13, $21, $20, $22, $23);
      HEAP[$0] = $24;
      __label__ = 125;
      break;
     case 5:
      
      var $26 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $26;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      HEAP[$0] = -1;
      __label__ = 125;
      break;
     case 7:
      
      
      
      
      
      
      
      
      var $38 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($38 == 5) {
        __label__ = 10;
        break;
      } else if ($38 == 6) {
        __label__ = 10;
        break;
      } else if ($38 == 7) {
        __label__ = 10;
        break;
      } else if ($38 == 15) {
        __label__ = 9;
        break;
      } else if ($38 == 16) {
        __label__ = 8;
        break;
      } else if ($38 == 22) {
        __label__ = 10;
        break;
      } else if ($38 == 24) {
        __label__ = 10;
        break;
      } else if ($38 == 29) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 8:
      
      var $40 = HEAP[$ptr_addr] + 1;
      var $41 = HEAP[$enc_addr];
      var $42 = HEAP[$end_addr];
      var $43 = HEAP[$nextTokPtr_addr];
      var $44 = _normal_scanDecl($41, $40, $42, $43);
      HEAP[$0] = $44;
      __label__ = 125;
      break;
     case 9:
      
      var $46 = HEAP[$ptr_addr] + 1;
      var $47 = HEAP[$enc_addr];
      var $48 = HEAP[$end_addr];
      var $49 = HEAP[$nextTokPtr_addr];
      var $50 = _normal_scanPi($47, $46, $48, $49);
      HEAP[$0] = $50;
      __label__ = 125;
      break;
     case 10:
      
      var $52 = HEAP[$ptr_addr] + -1;
      var $53 = HEAP[$nextTokPtr_addr];
      HEAP[$53] = $52;
      HEAP[$0] = 29;
      __label__ = 125;
      break;
     case 11:
      var $54 = HEAP[$nextTokPtr_addr];
      var $55 = HEAP[$ptr_addr];
      HEAP[$54] = $55;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 12:
      
      
      
      
      if (HEAP[$ptr_addr] + 1 == HEAP[$end_addr]) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      var $60 = HEAP[$nextTokPtr_addr];
      var $61 = HEAP[$end_addr];
      HEAP[$60] = $61;
      HEAP[$0] = -15;
      __label__ = 125;
      break;
     case 14:
      
      var $63 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $63;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 20;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 15:
      
      
      
      
      
      
      
      
      var $75 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($75 == 9) {
        __label__ = 17;
        break;
      } else if ($75 == 10) {
        __label__ = 16;
        break;
      } else if ($75 == 21) {
        __label__ = 16;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 16:
      __label__ = 19;
      break;
     case 17:
      
      
      
      
      if (HEAP[$ptr_addr] + 1 != HEAP[$end_addr]) {
        __label__ = 19;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 18:
      var $80 = HEAP[$nextTokPtr_addr];
      var $81 = HEAP[$ptr_addr];
      HEAP[$80] = $81;
      HEAP[$0] = 15;
      __label__ = 125;
      break;
     case 19:
      __label__ = 14;
      break;
     case 20:
      var $82 = HEAP[$nextTokPtr_addr];
      var $83 = HEAP[$ptr_addr];
      HEAP[$82] = $83;
      HEAP[$0] = 15;
      __label__ = 125;
      break;
     case 21:
      
      var $85 = HEAP[$ptr_addr] + 1;
      var $86 = HEAP[$enc_addr];
      var $87 = HEAP[$end_addr];
      var $88 = HEAP[$nextTokPtr_addr];
      var $89 = _normal_scanPercent($86, $85, $87, $88);
      HEAP[$0] = $89;
      __label__ = 125;
      break;
     case 22:
      
      var $91 = HEAP[$ptr_addr] + 1;
      var $92 = HEAP[$nextTokPtr_addr];
      HEAP[$92] = $91;
      HEAP[$0] = 38;
      __label__ = 125;
      break;
     case 23:
      
      var $94 = HEAP[$ptr_addr] + 1;
      var $95 = HEAP[$nextTokPtr_addr];
      HEAP[$95] = $94;
      HEAP[$0] = 25;
      __label__ = 125;
      break;
     case 24:
      
      var $97 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $97;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 25;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 25:
      HEAP[$0] = -26;
      __label__ = 125;
      break;
     case 26:
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 93) {
        __label__ = 27;
        break;
      } else {
        __label__ = 31;
        break;
      }
     case 27:
      
      
      
      
      if (HEAP[$ptr_addr] + 1 == HEAP[$end_addr]) {
        __label__ = 28;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 28:
      HEAP[$0] = -1;
      __label__ = 125;
      break;
     case 29:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 62) {
        __label__ = 30;
        break;
      } else {
        __label__ = 31;
        break;
      }
     case 30:
      
      var $113 = HEAP[$ptr_addr] + 2;
      var $114 = HEAP[$nextTokPtr_addr];
      HEAP[$114] = $113;
      HEAP[$0] = 34;
      __label__ = 125;
      break;
     case 31:
      var $115 = HEAP[$nextTokPtr_addr];
      var $116 = HEAP[$ptr_addr];
      HEAP[$115] = $116;
      HEAP[$0] = 26;
      __label__ = 125;
      break;
     case 32:
      
      var $118 = HEAP[$ptr_addr] + 1;
      var $119 = HEAP[$nextTokPtr_addr];
      HEAP[$119] = $118;
      HEAP[$0] = 23;
      __label__ = 125;
      break;
     case 33:
      
      var $121 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $121;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 34;
        break;
      } else {
        __label__ = 35;
        break;
      }
     case 34:
      HEAP[$0] = -24;
      __label__ = 125;
      break;
     case 35:
      
      
      
      
      
      
      
      
      var $133 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($133 == 9) {
        __label__ = 39;
        break;
      } else if ($133 == 10) {
        __label__ = 39;
        break;
      } else if ($133 == 11) {
        __label__ = 39;
        break;
      } else if ($133 == 15) {
        __label__ = 37;
        break;
      } else if ($133 == 21) {
        __label__ = 39;
        break;
      } else if ($133 == 32) {
        __label__ = 39;
        break;
      } else if ($133 == 33) {
        __label__ = 36;
        break;
      } else if ($133 == 34) {
        __label__ = 38;
        break;
      } else if ($133 == 35) {
        __label__ = 39;
        break;
      } else if ($133 == 36) {
        __label__ = 39;
        break;
      } else {
        __label__ = 40;
        break;
      }
     case 36:
      
      var $135 = HEAP[$ptr_addr] + 1;
      var $136 = HEAP[$nextTokPtr_addr];
      HEAP[$136] = $135;
      HEAP[$0] = 36;
      __label__ = 125;
      break;
     case 37:
      
      var $138 = HEAP[$ptr_addr] + 1;
      var $139 = HEAP[$nextTokPtr_addr];
      HEAP[$139] = $138;
      HEAP[$0] = 35;
      __label__ = 125;
      break;
     case 38:
      
      var $141 = HEAP[$ptr_addr] + 1;
      var $142 = HEAP[$nextTokPtr_addr];
      HEAP[$142] = $141;
      HEAP[$0] = 37;
      __label__ = 125;
      break;
     case 39:
      var $143 = HEAP[$nextTokPtr_addr];
      var $144 = HEAP[$ptr_addr];
      HEAP[$143] = $144;
      HEAP[$0] = 24;
      __label__ = 125;
      break;
     case 40:
      var $145 = HEAP[$nextTokPtr_addr];
      var $146 = HEAP[$ptr_addr];
      HEAP[$145] = $146;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 41:
      
      var $148 = HEAP[$ptr_addr] + 1;
      var $149 = HEAP[$nextTokPtr_addr];
      HEAP[$149] = $148;
      HEAP[$0] = 21;
      __label__ = 125;
      break;
     case 42:
      
      var $151 = HEAP[$ptr_addr] + 1;
      var $152 = HEAP[$nextTokPtr_addr];
      HEAP[$152] = $151;
      HEAP[$0] = 17;
      __label__ = 125;
      break;
     case 43:
      
      var $154 = HEAP[$ptr_addr] + 1;
      var $155 = HEAP[$enc_addr];
      var $156 = HEAP[$end_addr];
      var $157 = HEAP[$nextTokPtr_addr];
      var $158 = _normal_scanPoundName($155, $154, $156, $157);
      HEAP[$0] = $158;
      __label__ = 125;
      break;
     case 44:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 45;
        break;
      } else {
        __label__ = 46;
        break;
      }
     case 45:
      HEAP[$0] = -2;
      __label__ = 125;
      break;
     case 46:
      
      
      
      var $168 = HEAP[HEAP[$enc_addr] + 344];
      var $169 = HEAP[$enc_addr];
      var $170 = HEAP[$ptr_addr];
      var $171 = FUNCTION_TABLE[$168]($169, $170);
      
      if ($171 != 0) {
        __label__ = 47;
        break;
      } else {
        __label__ = 48;
        break;
      }
     case 47:
      
      var $174 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $174;
      HEAP[$tok] = 18;
      __label__ = 68;
      break;
     case 48:
      
      
      
      var $178 = HEAP[HEAP[$enc_addr] + 332];
      var $179 = HEAP[$enc_addr];
      var $180 = HEAP[$ptr_addr];
      var $181 = FUNCTION_TABLE[$178]($179, $180);
      
      if ($181 != 0) {
        __label__ = 49;
        break;
      } else {
        __label__ = 50;
        break;
      }
     case 49:
      
      var $184 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $184;
      HEAP[$tok] = 19;
      __label__ = 68;
      break;
     case 50:
      var $185 = HEAP[$nextTokPtr_addr];
      var $186 = HEAP[$ptr_addr];
      HEAP[$185] = $186;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 51:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 52;
        break;
      } else {
        __label__ = 53;
        break;
      }
     case 52:
      HEAP[$0] = -2;
      __label__ = 125;
      break;
     case 53:
      
      
      
      var $196 = HEAP[HEAP[$enc_addr] + 348];
      var $197 = HEAP[$enc_addr];
      var $198 = HEAP[$ptr_addr];
      var $199 = FUNCTION_TABLE[$196]($197, $198);
      
      if ($199 != 0) {
        __label__ = 54;
        break;
      } else {
        __label__ = 55;
        break;
      }
     case 54:
      
      var $202 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $202;
      HEAP[$tok] = 18;
      __label__ = 68;
      break;
     case 55:
      
      
      
      var $206 = HEAP[HEAP[$enc_addr] + 336];
      var $207 = HEAP[$enc_addr];
      var $208 = HEAP[$ptr_addr];
      var $209 = FUNCTION_TABLE[$206]($207, $208);
      
      if ($209 != 0) {
        __label__ = 56;
        break;
      } else {
        __label__ = 57;
        break;
      }
     case 56:
      
      var $212 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $212;
      HEAP[$tok] = 19;
      __label__ = 68;
      break;
     case 57:
      var $213 = HEAP[$nextTokPtr_addr];
      var $214 = HEAP[$ptr_addr];
      HEAP[$213] = $214;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 58:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 59;
        break;
      } else {
        __label__ = 60;
        break;
      }
     case 59:
      HEAP[$0] = -2;
      __label__ = 125;
      break;
     case 60:
      
      
      
      var $224 = HEAP[HEAP[$enc_addr] + 352];
      var $225 = HEAP[$enc_addr];
      var $226 = HEAP[$ptr_addr];
      var $227 = FUNCTION_TABLE[$224]($225, $226);
      
      if ($227 != 0) {
        __label__ = 61;
        break;
      } else {
        __label__ = 62;
        break;
      }
     case 61:
      
      var $230 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $230;
      HEAP[$tok] = 18;
      __label__ = 68;
      break;
     case 62:
      
      
      
      var $234 = HEAP[HEAP[$enc_addr] + 340];
      var $235 = HEAP[$enc_addr];
      var $236 = HEAP[$ptr_addr];
      var $237 = FUNCTION_TABLE[$234]($235, $236);
      
      if ($237 != 0) {
        __label__ = 63;
        break;
      } else {
        __label__ = 64;
        break;
      }
     case 63:
      
      var $240 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $240;
      HEAP[$tok] = 19;
      __label__ = 68;
      break;
     case 64:
      var $241 = HEAP[$nextTokPtr_addr];
      var $242 = HEAP[$ptr_addr];
      HEAP[$241] = $242;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 65:
      HEAP[$tok] = 18;
      
      var $244 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $244;
      __label__ = 68;
      break;
     case 66:
      HEAP[$tok] = 19;
      
      var $246 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $246;
      __label__ = 68;
      break;
     case 67:
      var $247 = HEAP[$nextTokPtr_addr];
      var $248 = HEAP[$ptr_addr];
      HEAP[$247] = $248;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 68:
      __label__ = 123;
      break;
     case 69:
      
      
      
      
      
      
      
      
      var $257 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($257 == 5) {
        __label__ = 72;
        break;
      } else if ($257 == 6) {
        __label__ = 77;
        break;
      } else if ($257 == 7) {
        __label__ = 82;
        break;
      } else if ($257 == 9) {
        __label__ = 87;
        break;
      } else if ($257 == 10) {
        __label__ = 87;
        break;
      } else if ($257 == 11) {
        __label__ = 87;
        break;
      } else if ($257 == 15) {
        __label__ = 119;
        break;
      } else if ($257 == 20) {
        __label__ = 87;
        break;
      } else if ($257 == 21) {
        __label__ = 87;
        break;
      } else if ($257 == 22) {
        __label__ = 71;
        break;
      } else if ($257 == 23) {
        __label__ = 88;
        break;
      } else if ($257 == 24) {
        __label__ = 71;
        break;
      } else if ($257 == 25) {
        __label__ = 71;
        break;
      } else if ($257 == 26) {
        __label__ = 71;
        break;
      } else if ($257 == 27) {
        __label__ = 71;
        break;
      } else if ($257 == 29) {
        __label__ = 70;
        break;
      } else if ($257 == 30) {
        __label__ = 87;
        break;
      } else if ($257 == 32) {
        __label__ = 87;
        break;
      } else if ($257 == 33) {
        __label__ = 116;
        break;
      } else if ($257 == 34) {
        __label__ = 113;
        break;
      } else if ($257 == 35) {
        __label__ = 87;
        break;
      } else if ($257 == 36) {
        __label__ = 87;
        break;
      } else {
        __label__ = 122;
        break;
      }
     case 70:
      var $258 = HEAP[$nextTokPtr_addr];
      var $259 = HEAP[$ptr_addr];
      HEAP[$258] = $259;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 71:
      
      var $261 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $261;
      __label__ = 123;
      break;
     case 72:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 73;
        break;
      } else {
        __label__ = 74;
        break;
      }
     case 73:
      HEAP[$0] = -2;
      __label__ = 125;
      break;
     case 74:
      
      
      
      var $271 = HEAP[HEAP[$enc_addr] + 332];
      var $272 = HEAP[$enc_addr];
      var $273 = HEAP[$ptr_addr];
      var $274 = FUNCTION_TABLE[$271]($272, $273);
      
      if ($274 == 0) {
        __label__ = 75;
        break;
      } else {
        __label__ = 76;
        break;
      }
     case 75:
      var $276 = HEAP[$nextTokPtr_addr];
      var $277 = HEAP[$ptr_addr];
      HEAP[$276] = $277;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 76:
      
      var $279 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $279;
      __label__ = 123;
      break;
     case 77:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 78;
        break;
      } else {
        __label__ = 79;
        break;
      }
     case 78:
      HEAP[$0] = -2;
      __label__ = 125;
      break;
     case 79:
      
      
      
      var $289 = HEAP[HEAP[$enc_addr] + 336];
      var $290 = HEAP[$enc_addr];
      var $291 = HEAP[$ptr_addr];
      var $292 = FUNCTION_TABLE[$289]($290, $291);
      
      if ($292 == 0) {
        __label__ = 80;
        break;
      } else {
        __label__ = 81;
        break;
      }
     case 80:
      var $294 = HEAP[$nextTokPtr_addr];
      var $295 = HEAP[$ptr_addr];
      HEAP[$294] = $295;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 81:
      
      var $297 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $297;
      __label__ = 123;
      break;
     case 82:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 83;
        break;
      } else {
        __label__ = 84;
        break;
      }
     case 83:
      HEAP[$0] = -2;
      __label__ = 125;
      break;
     case 84:
      
      
      
      var $307 = HEAP[HEAP[$enc_addr] + 340];
      var $308 = HEAP[$enc_addr];
      var $309 = HEAP[$ptr_addr];
      var $310 = FUNCTION_TABLE[$307]($308, $309);
      
      if ($310 == 0) {
        __label__ = 85;
        break;
      } else {
        __label__ = 86;
        break;
      }
     case 85:
      var $312 = HEAP[$nextTokPtr_addr];
      var $313 = HEAP[$ptr_addr];
      HEAP[$312] = $313;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 86:
      
      var $315 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $315;
      __label__ = 123;
      break;
     case 87:
      var $316 = HEAP[$nextTokPtr_addr];
      var $317 = HEAP[$ptr_addr];
      HEAP[$316] = $317;
      var $318 = HEAP[$tok];
      HEAP[$0] = $318;
      __label__ = 125;
      break;
     case 88:
      
      var $320 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $320;
      var $321 = HEAP[$tok];
      if ($321 == 18) {
        __label__ = 89;
        break;
      } else if ($321 == 41) {
        __label__ = 111;
        break;
      } else {
        __label__ = 112;
        break;
      }
     case 89:
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 90;
        break;
      } else {
        __label__ = 91;
        break;
      }
     case 90:
      HEAP[$0] = -1;
      __label__ = 125;
      break;
     case 91:
      HEAP[$tok] = 41;
      
      
      
      
      
      
      
      
      var $333 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($333 == 5) {
        __label__ = 94;
        break;
      } else if ($333 == 6) {
        __label__ = 99;
        break;
      } else if ($333 == 7) {
        __label__ = 104;
        break;
      } else if ($333 == 22) {
        __label__ = 93;
        break;
      } else if ($333 == 24) {
        __label__ = 93;
        break;
      } else if ($333 == 25) {
        __label__ = 93;
        break;
      } else if ($333 == 26) {
        __label__ = 93;
        break;
      } else if ($333 == 27) {
        __label__ = 93;
        break;
      } else if ($333 == 29) {
        __label__ = 92;
        break;
      } else {
        __label__ = 109;
        break;
      }
     case 92:
      var $334 = HEAP[$nextTokPtr_addr];
      var $335 = HEAP[$ptr_addr];
      HEAP[$334] = $335;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 93:
      
      var $337 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $337;
      __label__ = 110;
      break;
     case 94:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 95;
        break;
      } else {
        __label__ = 96;
        break;
      }
     case 95:
      HEAP[$0] = -2;
      __label__ = 125;
      break;
     case 96:
      
      
      
      var $347 = HEAP[HEAP[$enc_addr] + 332];
      var $348 = HEAP[$enc_addr];
      var $349 = HEAP[$ptr_addr];
      var $350 = FUNCTION_TABLE[$347]($348, $349);
      
      if ($350 == 0) {
        __label__ = 97;
        break;
      } else {
        __label__ = 98;
        break;
      }
     case 97:
      var $352 = HEAP[$nextTokPtr_addr];
      var $353 = HEAP[$ptr_addr];
      HEAP[$352] = $353;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 98:
      
      var $355 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $355;
      __label__ = 110;
      break;
     case 99:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 100;
        break;
      } else {
        __label__ = 101;
        break;
      }
     case 100:
      HEAP[$0] = -2;
      __label__ = 125;
      break;
     case 101:
      
      
      
      var $365 = HEAP[HEAP[$enc_addr] + 336];
      var $366 = HEAP[$enc_addr];
      var $367 = HEAP[$ptr_addr];
      var $368 = FUNCTION_TABLE[$365]($366, $367);
      
      if ($368 == 0) {
        __label__ = 102;
        break;
      } else {
        __label__ = 103;
        break;
      }
     case 102:
      var $370 = HEAP[$nextTokPtr_addr];
      var $371 = HEAP[$ptr_addr];
      HEAP[$370] = $371;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 103:
      
      var $373 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $373;
      __label__ = 110;
      break;
     case 104:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 105;
        break;
      } else {
        __label__ = 106;
        break;
      }
     case 105:
      HEAP[$0] = -2;
      __label__ = 125;
      break;
     case 106:
      
      
      
      var $383 = HEAP[HEAP[$enc_addr] + 340];
      var $384 = HEAP[$enc_addr];
      var $385 = HEAP[$ptr_addr];
      var $386 = FUNCTION_TABLE[$383]($384, $385);
      
      if ($386 == 0) {
        __label__ = 107;
        break;
      } else {
        __label__ = 108;
        break;
      }
     case 107:
      var $388 = HEAP[$nextTokPtr_addr];
      var $389 = HEAP[$ptr_addr];
      HEAP[$388] = $389;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 108:
      
      var $391 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $391;
      __label__ = 110;
      break;
     case 109:
      HEAP[$tok] = 19;
      __label__ = 110;
      break;
     case 110:
      __label__ = 112;
      break;
     case 111:
      HEAP[$tok] = 19;
      __label__ = 112;
      break;
     case 112:
      __label__ = 123;
      break;
     case 113:
      
      
      if (HEAP[$tok] == 19) {
        __label__ = 114;
        break;
      } else {
        __label__ = 115;
        break;
      }
     case 114:
      var $394 = HEAP[$nextTokPtr_addr];
      var $395 = HEAP[$ptr_addr];
      HEAP[$394] = $395;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 115:
      
      var $397 = HEAP[$ptr_addr] + 1;
      var $398 = HEAP[$nextTokPtr_addr];
      HEAP[$398] = $397;
      HEAP[$0] = 32;
      __label__ = 125;
      break;
     case 116:
      
      
      if (HEAP[$tok] == 19) {
        __label__ = 117;
        break;
      } else {
        __label__ = 118;
        break;
      }
     case 117:
      var $401 = HEAP[$nextTokPtr_addr];
      var $402 = HEAP[$ptr_addr];
      HEAP[$401] = $402;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 118:
      
      var $404 = HEAP[$ptr_addr] + 1;
      var $405 = HEAP[$nextTokPtr_addr];
      HEAP[$405] = $404;
      HEAP[$0] = 31;
      __label__ = 125;
      break;
     case 119:
      
      
      if (HEAP[$tok] == 19) {
        __label__ = 120;
        break;
      } else {
        __label__ = 121;
        break;
      }
     case 120:
      var $408 = HEAP[$nextTokPtr_addr];
      var $409 = HEAP[$ptr_addr];
      HEAP[$408] = $409;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 121:
      
      var $411 = HEAP[$ptr_addr] + 1;
      var $412 = HEAP[$nextTokPtr_addr];
      HEAP[$412] = $411;
      HEAP[$0] = 30;
      __label__ = 125;
      break;
     case 122:
      var $413 = HEAP[$nextTokPtr_addr];
      var $414 = HEAP[$ptr_addr];
      HEAP[$413] = $414;
      HEAP[$0] = 0;
      __label__ = 125;
      break;
     case 123:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 69;
        break;
      } else {
        __label__ = 124;
        break;
      }
     case 124:
      
      var $419 = 0 - HEAP[$tok];
      HEAP[$0] = $419;
      __label__ = 125;
      break;
     case 125:
      var $420 = HEAP[$0];
      HEAP[$retval] = $420;
      __label__ = 126;
      break;
     case 126:
      var $retval125 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval125;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _normal_attributeValueTok($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $start = __stackBase__ + 24;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -4;
      __label__ = 27;
      break;
     case 2:
      var $4 = HEAP[$ptr_addr];
      HEAP[$start] = $4;
      __label__ = 25;
      break;
     case 3:
      
      
      
      
      
      
      
      
      var $13 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($13 == 2) {
        __label__ = 10;
        break;
      } else if ($13 == 3) {
        __label__ = 7;
        break;
      } else if ($13 == 5) {
        __label__ = 4;
        break;
      } else if ($13 == 6) {
        __label__ = 5;
        break;
      } else if ($13 == 7) {
        __label__ = 6;
        break;
      } else if ($13 == 9) {
        __label__ = 14;
        break;
      } else if ($13 == 10) {
        __label__ = 11;
        break;
      } else if ($13 == 21) {
        __label__ = 21;
        break;
      } else {
        __label__ = 24;
        break;
      }
     case 4:
      
      var $15 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $15;
      __label__ = 25;
      break;
     case 5:
      
      var $17 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $17;
      __label__ = 25;
      break;
     case 6:
      
      var $19 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $19;
      __label__ = 25;
      break;
     case 7:
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$start]) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      
      var $24 = HEAP[$ptr_addr] + 1;
      var $25 = HEAP[$enc_addr];
      var $26 = HEAP[$end_addr];
      var $27 = HEAP[$nextTokPtr_addr];
      var $28 = _normal_scanRef($25, $24, $26, $27);
      HEAP[$0] = $28;
      __label__ = 27;
      break;
     case 9:
      var $29 = HEAP[$nextTokPtr_addr];
      var $30 = HEAP[$ptr_addr];
      HEAP[$29] = $30;
      HEAP[$0] = 6;
      __label__ = 27;
      break;
     case 10:
      var $31 = HEAP[$nextTokPtr_addr];
      var $32 = HEAP[$ptr_addr];
      HEAP[$31] = $32;
      HEAP[$0] = 0;
      __label__ = 27;
      break;
     case 11:
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$start]) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      
      var $37 = HEAP[$ptr_addr] + 1;
      var $38 = HEAP[$nextTokPtr_addr];
      HEAP[$38] = $37;
      HEAP[$0] = 7;
      __label__ = 27;
      break;
     case 13:
      var $39 = HEAP[$nextTokPtr_addr];
      var $40 = HEAP[$ptr_addr];
      HEAP[$39] = $40;
      HEAP[$0] = 6;
      __label__ = 27;
      break;
     case 14:
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$start]) {
        __label__ = 15;
        break;
      } else {
        __label__ = 20;
        break;
      }
     case 15:
      
      var $45 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $45;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      HEAP[$0] = -3;
      __label__ = 27;
      break;
     case 17:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]] == 10) {
        __label__ = 18;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 18:
      
      var $59 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $59;
      __label__ = 19;
      break;
     case 19:
      var $60 = HEAP[$nextTokPtr_addr];
      var $61 = HEAP[$ptr_addr];
      HEAP[$60] = $61;
      HEAP[$0] = 7;
      __label__ = 27;
      break;
     case 20:
      var $62 = HEAP[$nextTokPtr_addr];
      var $63 = HEAP[$ptr_addr];
      HEAP[$62] = $63;
      HEAP[$0] = 6;
      __label__ = 27;
      break;
     case 21:
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$start]) {
        __label__ = 22;
        break;
      } else {
        __label__ = 23;
        break;
      }
     case 22:
      
      var $68 = HEAP[$ptr_addr] + 1;
      var $69 = HEAP[$nextTokPtr_addr];
      HEAP[$69] = $68;
      HEAP[$0] = 39;
      __label__ = 27;
      break;
     case 23:
      var $70 = HEAP[$nextTokPtr_addr];
      var $71 = HEAP[$ptr_addr];
      HEAP[$70] = $71;
      HEAP[$0] = 6;
      __label__ = 27;
      break;
     case 24:
      
      var $73 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $73;
      __label__ = 25;
      break;
     case 25:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 3;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 26:
      var $77 = HEAP[$nextTokPtr_addr];
      var $78 = HEAP[$ptr_addr];
      HEAP[$77] = $78;
      HEAP[$0] = 6;
      __label__ = 27;
      break;
     case 27:
      var $79 = HEAP[$0];
      HEAP[$retval] = $79;
      __label__ = 28;
      break;
     case 28:
      var $retval27 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval27;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _normal_entityValueTok($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 36;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_458 = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      var $start = __stackBase__ + 28;
      var $tok = __stackBase__ + 32;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -4;
      __label__ = 29;
      break;
     case 2:
      var $4 = HEAP[$ptr_addr];
      HEAP[$start] = $4;
      __label__ = 27;
      break;
     case 3:
      
      
      
      
      
      
      
      
      var $13 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($13 == 3) {
        __label__ = 7;
        break;
      } else if ($13 == 5) {
        __label__ = 4;
        break;
      } else if ($13 == 6) {
        __label__ = 5;
        break;
      } else if ($13 == 7) {
        __label__ = 6;
        break;
      } else if ($13 == 9) {
        __label__ = 19;
        break;
      } else if ($13 == 10) {
        __label__ = 16;
        break;
      } else if ($13 == 30) {
        __label__ = 10;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 4:
      
      var $15 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $15;
      __label__ = 27;
      break;
     case 5:
      
      var $17 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $17;
      __label__ = 27;
      break;
     case 6:
      
      var $19 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $19;
      __label__ = 27;
      break;
     case 7:
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$start]) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      
      var $24 = HEAP[$ptr_addr] + 1;
      var $25 = HEAP[$enc_addr];
      var $26 = HEAP[$end_addr];
      var $27 = HEAP[$nextTokPtr_addr];
      var $28 = _normal_scanRef($25, $24, $26, $27);
      HEAP[$0] = $28;
      __label__ = 29;
      break;
     case 9:
      var $29 = HEAP[$nextTokPtr_addr];
      var $30 = HEAP[$ptr_addr];
      HEAP[$29] = $30;
      HEAP[$0] = 6;
      __label__ = 29;
      break;
     case 10:
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$start]) {
        __label__ = 11;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 11:
      
      var $35 = HEAP[$ptr_addr] + 1;
      var $36 = HEAP[$enc_addr];
      var $37 = HEAP[$end_addr];
      var $38 = HEAP[$nextTokPtr_addr];
      var $39 = _normal_scanPercent($36, $35, $37, $38);
      HEAP[$tok] = $39;
      
      
      if (HEAP[$tok] != 22) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      var $42 = HEAP[$tok];
      HEAP[$iftmp_458] = $42;
      __label__ = 14;
      break;
     case 13:
      HEAP[$iftmp_458] = 0;
      __label__ = 14;
      break;
     case 14:
      var $43 = HEAP[$iftmp_458];
      HEAP[$0] = $43;
      __label__ = 29;
      break;
     case 15:
      var $44 = HEAP[$nextTokPtr_addr];
      var $45 = HEAP[$ptr_addr];
      HEAP[$44] = $45;
      HEAP[$0] = 6;
      __label__ = 29;
      break;
     case 16:
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$start]) {
        __label__ = 17;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 17:
      
      var $50 = HEAP[$ptr_addr] + 1;
      var $51 = HEAP[$nextTokPtr_addr];
      HEAP[$51] = $50;
      HEAP[$0] = 7;
      __label__ = 29;
      break;
     case 18:
      var $52 = HEAP[$nextTokPtr_addr];
      var $53 = HEAP[$ptr_addr];
      HEAP[$52] = $53;
      HEAP[$0] = 6;
      __label__ = 29;
      break;
     case 19:
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$start]) {
        __label__ = 20;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 20:
      
      var $58 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $58;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 21;
        break;
      } else {
        __label__ = 22;
        break;
      }
     case 21:
      HEAP[$0] = -3;
      __label__ = 29;
      break;
     case 22:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]] == 10) {
        __label__ = 23;
        break;
      } else {
        __label__ = 24;
        break;
      }
     case 23:
      
      var $72 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $72;
      __label__ = 24;
      break;
     case 24:
      var $73 = HEAP[$nextTokPtr_addr];
      var $74 = HEAP[$ptr_addr];
      HEAP[$73] = $74;
      HEAP[$0] = 7;
      __label__ = 29;
      break;
     case 25:
      var $75 = HEAP[$nextTokPtr_addr];
      var $76 = HEAP[$ptr_addr];
      HEAP[$75] = $76;
      HEAP[$0] = 6;
      __label__ = 29;
      break;
     case 26:
      
      var $78 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $78;
      __label__ = 27;
      break;
     case 27:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 3;
        break;
      } else {
        __label__ = 28;
        break;
      }
     case 28:
      var $82 = HEAP[$nextTokPtr_addr];
      var $83 = HEAP[$ptr_addr];
      HEAP[$82] = $83;
      HEAP[$0] = 6;
      __label__ = 29;
      break;
     case 29:
      var $84 = HEAP[$0];
      HEAP[$retval] = $84;
      __label__ = 30;
      break;
     case 30:
      var $retval29 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval29;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _normal_ignoreSectionTok($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $level = __stackBase__ + 24;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      HEAP[$level] = 0;
      __label__ = 37;
      break;
     case 1:
      
      
      
      
      
      
      
      
      var $9 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($9 == 0) {
        __label__ = 17;
        break;
      } else if ($9 == 1) {
        __label__ = 17;
        break;
      } else if ($9 == 2) {
        __label__ = 18;
        break;
      } else if ($9 == 4) {
        __label__ = 26;
        break;
      } else if ($9 == 5) {
        __label__ = 2;
        break;
      } else if ($9 == 6) {
        __label__ = 7;
        break;
      } else if ($9 == 7) {
        __label__ = 12;
        break;
      } else if ($9 == 8) {
        __label__ = 17;
        break;
      } else {
        __label__ = 36;
        break;
      }
     case 2:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      HEAP[$0] = -2;
      __label__ = 39;
      break;
     case 4:
      
      
      
      var $19 = HEAP[HEAP[$enc_addr] + 356];
      var $20 = HEAP[$enc_addr];
      var $21 = HEAP[$ptr_addr];
      var $22 = FUNCTION_TABLE[$19]($20, $21);
      
      if ($22 != 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      var $24 = HEAP[$nextTokPtr_addr];
      var $25 = HEAP[$ptr_addr];
      HEAP[$24] = $25;
      HEAP[$0] = 0;
      __label__ = 39;
      break;
     case 6:
      
      var $27 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $27;
      __label__ = 37;
      break;
     case 7:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      HEAP[$0] = -2;
      __label__ = 39;
      break;
     case 9:
      
      
      
      var $37 = HEAP[HEAP[$enc_addr] + 360];
      var $38 = HEAP[$enc_addr];
      var $39 = HEAP[$ptr_addr];
      var $40 = FUNCTION_TABLE[$37]($38, $39);
      
      if ($40 != 0) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      var $42 = HEAP[$nextTokPtr_addr];
      var $43 = HEAP[$ptr_addr];
      HEAP[$42] = $43;
      HEAP[$0] = 0;
      __label__ = 39;
      break;
     case 11:
      
      var $45 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $45;
      __label__ = 37;
      break;
     case 12:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      HEAP[$0] = -2;
      __label__ = 39;
      break;
     case 14:
      
      
      
      var $55 = HEAP[HEAP[$enc_addr] + 364];
      var $56 = HEAP[$enc_addr];
      var $57 = HEAP[$ptr_addr];
      var $58 = FUNCTION_TABLE[$55]($56, $57);
      
      if ($58 != 0) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      var $60 = HEAP[$nextTokPtr_addr];
      var $61 = HEAP[$ptr_addr];
      HEAP[$60] = $61;
      HEAP[$0] = 0;
      __label__ = 39;
      break;
     case 16:
      
      var $63 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $63;
      __label__ = 37;
      break;
     case 17:
      var $64 = HEAP[$nextTokPtr_addr];
      var $65 = HEAP[$ptr_addr];
      HEAP[$64] = $65;
      HEAP[$0] = 0;
      __label__ = 39;
      break;
     case 18:
      
      var $67 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $67;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 19;
        break;
      } else {
        __label__ = 20;
        break;
      }
     case 19:
      HEAP[$0] = -1;
      __label__ = 39;
      break;
     case 20:
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 33) {
        __label__ = 21;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 21:
      
      var $75 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $75;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 22;
        break;
      } else {
        __label__ = 23;
        break;
      }
     case 22:
      HEAP[$0] = -1;
      __label__ = 39;
      break;
     case 23:
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 91) {
        __label__ = 24;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 24:
      
      var $83 = HEAP[$level] + 1;
      HEAP[$level] = $83;
      
      var $85 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $85;
      __label__ = 25;
      break;
     case 25:
      __label__ = 37;
      break;
     case 26:
      
      var $87 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $87;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 27;
        break;
      } else {
        __label__ = 28;
        break;
      }
     case 27:
      HEAP[$0] = -1;
      __label__ = 39;
      break;
     case 28:
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 93) {
        __label__ = 29;
        break;
      } else {
        __label__ = 35;
        break;
      }
     case 29:
      
      var $95 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $95;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 30;
        break;
      } else {
        __label__ = 31;
        break;
      }
     case 30:
      HEAP[$0] = -1;
      __label__ = 39;
      break;
     case 31:
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 62) {
        __label__ = 32;
        break;
      } else {
        __label__ = 35;
        break;
      }
     case 32:
      
      var $103 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $103;
      
      
      if (HEAP[$level] == 0) {
        __label__ = 33;
        break;
      } else {
        __label__ = 34;
        break;
      }
     case 33:
      var $106 = HEAP[$nextTokPtr_addr];
      var $107 = HEAP[$ptr_addr];
      HEAP[$106] = $107;
      HEAP[$0] = 42;
      __label__ = 39;
      break;
     case 34:
      
      var $109 = HEAP[$level] - 1;
      HEAP[$level] = $109;
      __label__ = 35;
      break;
     case 35:
      __label__ = 37;
      break;
     case 36:
      
      var $111 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $111;
      __label__ = 37;
      break;
     case 37:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 38;
        break;
      }
     case 38:
      HEAP[$0] = -1;
      __label__ = 39;
      break;
     case 39:
      var $115 = HEAP[$0];
      HEAP[$retval] = $115;
      __label__ = 40;
      break;
     case 40:
      var $retval39 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval39;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _normal_isPublicId($enc, $ptr, $end, $badPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 24;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $badPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$badPtr_addr] = $badPtr;
      
      var $2 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $2;
      
      var $4 = HEAP[$end_addr] + -1;
      HEAP[$end_addr] = $4;
      __label__ = 11;
      break;
     case 1:
      
      
      
      
      
      
      
      
      var $13 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($13 == 9) {
        __label__ = 2;
        break;
      } else if ($13 == 10) {
        __label__ = 2;
        break;
      } else if ($13 == 13) {
        __label__ = 2;
        break;
      } else if ($13 == 14) {
        __label__ = 2;
        break;
      } else if ($13 == 15) {
        __label__ = 2;
        break;
      } else if ($13 == 16) {
        __label__ = 2;
        break;
      } else if ($13 == 17) {
        __label__ = 2;
        break;
      } else if ($13 == 18) {
        __label__ = 2;
        break;
      } else if ($13 == 19) {
        __label__ = 2;
        break;
      } else if ($13 == 21) {
        __label__ = 3;
        break;
      } else if ($13 == 22) {
        __label__ = 6;
        break;
      } else if ($13 == 23) {
        __label__ = 2;
        break;
      } else if ($13 == 24) {
        __label__ = 2;
        break;
      } else if ($13 == 25) {
        __label__ = 2;
        break;
      } else if ($13 == 26) {
        __label__ = 6;
        break;
      } else if ($13 == 27) {
        __label__ = 2;
        break;
      } else if ($13 == 30) {
        __label__ = 2;
        break;
      } else if ($13 == 31) {
        __label__ = 2;
        break;
      } else if ($13 == 32) {
        __label__ = 2;
        break;
      } else if ($13 == 33) {
        __label__ = 2;
        break;
      } else if ($13 == 34) {
        __label__ = 2;
        break;
      } else if ($13 == 35) {
        __label__ = 2;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 2:
      __label__ = 10;
      break;
     case 3:
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 9) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      var $17 = HEAP[$badPtr_addr];
      var $18 = HEAP[$ptr_addr];
      HEAP[$17] = $18;
      HEAP[$0] = 0;
      __label__ = 13;
      break;
     case 5:
      __label__ = 10;
      break;
     case 6:
      
      
      
      if (HEAP[HEAP[$ptr_addr]] >= 0) {
        __label__ = 10;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 7:
      
      
      var $24 = HEAP[HEAP[$ptr_addr]];
      if ($24 == 36) {
        __label__ = 8;
        break;
      } else if ($24 == 64) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      __label__ = 10;
      break;
     case 9:
      var $25 = HEAP[$badPtr_addr];
      var $26 = HEAP[$ptr_addr];
      HEAP[$25] = $26;
      HEAP[$0] = 0;
      __label__ = 13;
      break;
     case 10:
      
      var $28 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $28;
      __label__ = 11;
      break;
     case 11:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 12:
      HEAP[$0] = 1;
      __label__ = 13;
      break;
     case 13:
      var $32 = HEAP[$0];
      HEAP[$retval] = $32;
      __label__ = 14;
      break;
     case 14:
      var $retval13 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval13;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _normal_getAtts($enc, $ptr, $attsMax, $atts) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 36;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $attsMax_addr = __stackBase__ + 8;
      var $atts_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $state = __stackBase__ + 24;
      var $nAtts = __stackBase__ + 28;
      var $open = __stackBase__ + 32;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$attsMax_addr] = $attsMax;
      HEAP[$atts_addr] = $atts;
      HEAP[$state] = 1;
      HEAP[$nAtts] = 0;
      HEAP[$open] = 0;
      
      var $2 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $2;
      __label__ = 1;
      break;
     case 1:
      
      
      
      
      
      
      
      
      var $11 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($11 == 3) {
        __label__ = 40;
        break;
      } else if ($11 == 5) {
        __label__ = 2;
        break;
      } else if ($11 == 6) {
        __label__ = 7;
        break;
      } else if ($11 == 7) {
        __label__ = 12;
        break;
      } else if ($11 == 9) {
        __label__ = 54;
        break;
      } else if ($11 == 10) {
        __label__ = 54;
        break;
      } else if ($11 == 11) {
        __label__ = 60;
        break;
      } else if ($11 == 12) {
        __label__ = 22;
        break;
      } else if ($11 == 13) {
        __label__ = 31;
        break;
      } else if ($11 == 17) {
        __label__ = 60;
        break;
      } else if ($11 == 21) {
        __label__ = 43;
        break;
      } else if ($11 == 22) {
        __label__ = 17;
        break;
      } else if ($11 == 24) {
        __label__ = 17;
        break;
      } else if ($11 == 29) {
        __label__ = 17;
        break;
      } else {
        __label__ = 62;
        break;
      }
     case 2:
      
      
      if (HEAP[$state] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 3:
      
      
      
      if (HEAP[$nAtts] < HEAP[$attsMax_addr]) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      
      
      
      var $20 = HEAP[$atts_addr] + 16 * HEAP[$nAtts];
      var $21 = HEAP[$ptr_addr];
      HEAP[$20] = $21;
      
      
      
      var $25 = HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 12;
      HEAP[$25] = 1;
      __label__ = 5;
      break;
     case 5:
      HEAP[$state] = 1;
      __label__ = 6;
      break;
     case 6:
      
      var $27 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $27;
      __label__ = 62;
      break;
     case 7:
      
      
      if (HEAP[$state] == 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 8:
      
      
      
      if (HEAP[$nAtts] < HEAP[$attsMax_addr]) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      
      
      
      var $36 = HEAP[$atts_addr] + 16 * HEAP[$nAtts];
      var $37 = HEAP[$ptr_addr];
      HEAP[$36] = $37;
      
      
      
      var $41 = HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 12;
      HEAP[$41] = 1;
      __label__ = 10;
      break;
     case 10:
      HEAP[$state] = 1;
      __label__ = 11;
      break;
     case 11:
      
      var $43 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $43;
      __label__ = 62;
      break;
     case 12:
      
      
      if (HEAP[$state] == 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 13:
      
      
      
      if (HEAP[$nAtts] < HEAP[$attsMax_addr]) {
        __label__ = 14;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 14:
      
      
      
      var $52 = HEAP[$atts_addr] + 16 * HEAP[$nAtts];
      var $53 = HEAP[$ptr_addr];
      HEAP[$52] = $53;
      
      
      
      var $57 = HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 12;
      HEAP[$57] = 1;
      __label__ = 15;
      break;
     case 15:
      HEAP[$state] = 1;
      __label__ = 16;
      break;
     case 16:
      
      var $59 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $59;
      __label__ = 62;
      break;
     case 17:
      
      
      if (HEAP[$state] == 0) {
        __label__ = 18;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 18:
      
      
      
      if (HEAP[$nAtts] < HEAP[$attsMax_addr]) {
        __label__ = 19;
        break;
      } else {
        __label__ = 20;
        break;
      }
     case 19:
      
      
      
      var $68 = HEAP[$atts_addr] + 16 * HEAP[$nAtts];
      var $69 = HEAP[$ptr_addr];
      HEAP[$68] = $69;
      
      
      
      var $73 = HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 12;
      HEAP[$73] = 1;
      __label__ = 20;
      break;
     case 20:
      HEAP[$state] = 1;
      __label__ = 21;
      break;
     case 21:
      __label__ = 62;
      break;
     case 22:
      
      
      if (HEAP[$state] != 2) {
        __label__ = 23;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 23:
      
      
      
      if (HEAP[$nAtts] < HEAP[$attsMax_addr]) {
        __label__ = 24;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 24:
      
      
      
      
      var $83 = HEAP[$ptr_addr] + 1;
      var $84 = HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 4;
      HEAP[$84] = $83;
      __label__ = 25;
      break;
     case 25:
      HEAP[$state] = 2;
      HEAP[$open] = 12;
      __label__ = 30;
      break;
     case 26:
      
      
      if (HEAP[$open] == 12) {
        __label__ = 27;
        break;
      } else {
        __label__ = 30;
        break;
      }
     case 27:
      HEAP[$state] = 0;
      
      
      
      if (HEAP[$nAtts] < HEAP[$attsMax_addr]) {
        __label__ = 28;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 28:
      
      
      
      var $93 = HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 8;
      var $94 = HEAP[$ptr_addr];
      HEAP[$93] = $94;
      __label__ = 29;
      break;
     case 29:
      
      var $96 = HEAP[$nAtts] + 1;
      HEAP[$nAtts] = $96;
      __label__ = 30;
      break;
     case 30:
      __label__ = 62;
      break;
     case 31:
      
      
      if (HEAP[$state] != 2) {
        __label__ = 32;
        break;
      } else {
        __label__ = 35;
        break;
      }
     case 32:
      
      
      
      if (HEAP[$nAtts] < HEAP[$attsMax_addr]) {
        __label__ = 33;
        break;
      } else {
        __label__ = 34;
        break;
      }
     case 33:
      
      
      
      
      var $106 = HEAP[$ptr_addr] + 1;
      var $107 = HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 4;
      HEAP[$107] = $106;
      __label__ = 34;
      break;
     case 34:
      HEAP[$state] = 2;
      HEAP[$open] = 13;
      __label__ = 39;
      break;
     case 35:
      
      
      if (HEAP[$open] == 13) {
        __label__ = 36;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 36:
      HEAP[$state] = 0;
      
      
      
      if (HEAP[$nAtts] < HEAP[$attsMax_addr]) {
        __label__ = 37;
        break;
      } else {
        __label__ = 38;
        break;
      }
     case 37:
      
      
      
      var $116 = HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 8;
      var $117 = HEAP[$ptr_addr];
      HEAP[$116] = $117;
      __label__ = 38;
      break;
     case 38:
      
      var $119 = HEAP[$nAtts] + 1;
      HEAP[$nAtts] = $119;
      __label__ = 39;
      break;
     case 39:
      __label__ = 62;
      break;
     case 40:
      
      
      
      if (HEAP[$nAtts] < HEAP[$attsMax_addr]) {
        __label__ = 41;
        break;
      } else {
        __label__ = 42;
        break;
      }
     case 41:
      
      
      
      var $126 = HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 12;
      HEAP[$126] = 0;
      __label__ = 42;
      break;
     case 42:
      __label__ = 62;
      break;
     case 43:
      
      
      if (HEAP[$state] == 1) {
        __label__ = 44;
        break;
      } else {
        __label__ = 45;
        break;
      }
     case 44:
      HEAP[$state] = 0;
      __label__ = 53;
      break;
     case 45:
      
      
      if (HEAP[$state] == 2) {
        __label__ = 46;
        break;
      } else {
        __label__ = 53;
        break;
      }
     case 46:
      
      
      
      if (HEAP[$nAtts] < HEAP[$attsMax_addr]) {
        __label__ = 47;
        break;
      } else {
        __label__ = 53;
        break;
      }
     case 47:
      
      
      
      
      
      
      if (HEAP[HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 12] != 0) {
        __label__ = 48;
        break;
      } else {
        __label__ = 53;
        break;
      }
     case 48:
      
      
      
      
      
      
      
      if (HEAP[HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 4] == HEAP[$ptr_addr]) {
        __label__ = 52;
        break;
      } else {
        __label__ = 49;
        break;
      }
     case 49:
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 32) {
        __label__ = 52;
        break;
      } else {
        __label__ = 50;
        break;
      }
     case 50:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 32) {
        __label__ = 52;
        break;
      } else {
        __label__ = 51;
        break;
      }
     case 51:
      
      
      
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]] == HEAP[$open]) {
        __label__ = 52;
        break;
      } else {
        __label__ = 53;
        break;
      }
     case 52:
      
      
      
      var $169 = HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 12;
      HEAP[$169] = 0;
      __label__ = 53;
      break;
     case 53:
      __label__ = 62;
      break;
     case 54:
      
      
      if (HEAP[$state] == 1) {
        __label__ = 55;
        break;
      } else {
        __label__ = 56;
        break;
      }
     case 55:
      HEAP[$state] = 0;
      __label__ = 59;
      break;
     case 56:
      
      
      if (HEAP[$state] == 2) {
        __label__ = 57;
        break;
      } else {
        __label__ = 59;
        break;
      }
     case 57:
      
      
      
      if (HEAP[$nAtts] < HEAP[$attsMax_addr]) {
        __label__ = 58;
        break;
      } else {
        __label__ = 59;
        break;
      }
     case 58:
      
      
      
      var $180 = HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 12;
      HEAP[$180] = 0;
      __label__ = 59;
      break;
     case 59:
      __label__ = 62;
      break;
     case 60:
      
      
      if (HEAP[$state] != 2) {
        __label__ = 61;
        break;
      } else {
        __label__ = 62;
        break;
      }
     case 61:
      var $183 = HEAP[$nAtts];
      HEAP[$0] = $183;
      var $184 = HEAP[$0];
      HEAP[$retval] = $184;
      __label__ = 63;
      break;
     case 62:
      
      var $186 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $186;
      __label__ = 1;
      break;
     case 63:
      var $retval62 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval62;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _normal_charRefNumber($enc, $ptr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $ptr_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      var $result = __stackBase__ + 16;
      var $c = __stackBase__ + 20;
      var $c12 = __stackBase__ + 24;
      
      HEAP[__stackBase__] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$result] = 0;
      
      var $2 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $2;
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 120) {
        __label__ = 1;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 1:
      
      var $7 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $7;
      __label__ = 9;
      break;
     case 2:
      
      
      var $10 = HEAP[HEAP[$ptr_addr]];
      HEAP[$c] = $10;
      var $11 = HEAP[$c];
      if ($11 == 48) {
        __label__ = 3;
        break;
      } else if ($11 == 49) {
        __label__ = 3;
        break;
      } else if ($11 == 50) {
        __label__ = 3;
        break;
      } else if ($11 == 51) {
        __label__ = 3;
        break;
      } else if ($11 == 52) {
        __label__ = 3;
        break;
      } else if ($11 == 53) {
        __label__ = 3;
        break;
      } else if ($11 == 54) {
        __label__ = 3;
        break;
      } else if ($11 == 55) {
        __label__ = 3;
        break;
      } else if ($11 == 56) {
        __label__ = 3;
        break;
      } else if ($11 == 57) {
        __label__ = 3;
        break;
      } else if ($11 == 65) {
        __label__ = 4;
        break;
      } else if ($11 == 66) {
        __label__ = 4;
        break;
      } else if ($11 == 67) {
        __label__ = 4;
        break;
      } else if ($11 == 68) {
        __label__ = 4;
        break;
      } else if ($11 == 69) {
        __label__ = 4;
        break;
      } else if ($11 == 70) {
        __label__ = 4;
        break;
      } else if ($11 == 97) {
        __label__ = 5;
        break;
      } else if ($11 == 98) {
        __label__ = 5;
        break;
      } else if ($11 == 99) {
        __label__ = 5;
        break;
      } else if ($11 == 100) {
        __label__ = 5;
        break;
      } else if ($11 == 101) {
        __label__ = 5;
        break;
      } else if ($11 == 102) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 3:
      
      var $13 = HEAP[$result] << 4;
      HEAP[$result] = $13;
      
      
      
      var $17 = HEAP[$c] - 48 | HEAP[$result];
      HEAP[$result] = $17;
      __label__ = 6;
      break;
     case 4:
      
      var $19 = HEAP[$result] << 4;
      HEAP[$result] = $19;
      
      
      
      var $23 = HEAP[$c] - 55 + HEAP[$result];
      HEAP[$result] = $23;
      __label__ = 6;
      break;
     case 5:
      
      var $25 = HEAP[$result] << 4;
      HEAP[$result] = $25;
      
      
      
      var $29 = HEAP[$c] - 87 + HEAP[$result];
      HEAP[$result] = $29;
      __label__ = 6;
      break;
     case 6:
      
      
      if (HEAP[$result] > 1114111) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      HEAP[$0] = -1;
      __label__ = 17;
      break;
     case 8:
      
      var $33 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $33;
      __label__ = 9;
      break;
     case 9:
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 59) {
        __label__ = 2;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 10:
      __label__ = 16;
      break;
     case 11:
      __label__ = 15;
      break;
     case 12:
      
      
      var $39 = HEAP[HEAP[$ptr_addr]];
      HEAP[$c12] = $39;
      
      var $41 = HEAP[$result] * 10;
      HEAP[$result] = $41;
      
      
      
      var $45 = HEAP[$c12] - 48 + HEAP[$result];
      HEAP[$result] = $45;
      
      
      if (HEAP[$result] > 1114111) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      HEAP[$0] = -1;
      __label__ = 17;
      break;
     case 14:
      
      var $49 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $49;
      __label__ = 15;
      break;
     case 15:
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 59) {
        __label__ = 12;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 16:
      var $53 = HEAP[$result];
      var $54 = _checkCharRefNumber($53);
      HEAP[$0] = $54;
      __label__ = 17;
      break;
     case 17:
      var $55 = HEAP[$0];
      HEAP[$retval] = $55;
      __label__ = 18;
      break;
     case 18:
      var $retval18 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval18;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _normal_predefinedEntityName($enc, $ptr, $end) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 20;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $retval = __stackBase__ + 12;
      var $0 = __stackBase__ + 16;
      
      HEAP[__stackBase__] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      
      
      
      
      var $5 = HEAP[$end_addr] - HEAP[$ptr_addr];
      if ($5 == 2) {
        __label__ = 1;
        break;
      } else if ($5 == 3) {
        __label__ = 6;
        break;
      } else if ($5 == 4) {
        __label__ = 11;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 1:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 116) {
        __label__ = 2;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 2:
      
      
      var $12 = HEAP[HEAP[$ptr_addr]];
      if ($12 == 103) {
        __label__ = 4;
        break;
      } else if ($12 == 108) {
        __label__ = 3;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 3:
      HEAP[$0] = 60;
      __label__ = 22;
      break;
     case 4:
      HEAP[$0] = 62;
      __label__ = 22;
      break;
     case 5:
      __label__ = 21;
      break;
     case 6:
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 97) {
        __label__ = 7;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 7:
      
      var $17 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $17;
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 109) {
        __label__ = 8;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 8:
      
      var $22 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $22;
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 112) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      HEAP[$0] = 38;
      __label__ = 22;
      break;
     case 10:
      __label__ = 21;
      break;
     case 11:
      
      
      var $28 = HEAP[HEAP[$ptr_addr]];
      if ($28 == 97) {
        __label__ = 17;
        break;
      } else if ($28 == 113) {
        __label__ = 12;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 12:
      
      var $30 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $30;
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 117) {
        __label__ = 13;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 13:
      
      var $35 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $35;
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 111) {
        __label__ = 14;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 14:
      
      var $40 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $40;
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 116) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      HEAP[$0] = 34;
      __label__ = 22;
      break;
     case 16:
      __label__ = 21;
      break;
     case 17:
      
      var $45 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $45;
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 112) {
        __label__ = 18;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 18:
      
      var $50 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $50;
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 111) {
        __label__ = 19;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 19:
      
      var $55 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $55;
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 115) {
        __label__ = 20;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 20:
      HEAP[$0] = 39;
      __label__ = 22;
      break;
     case 21:
      HEAP[$0] = 0;
      __label__ = 22;
      break;
     case 22:
      var $59 = HEAP[$0];
      HEAP[$retval] = $59;
      __label__ = 23;
      break;
     case 23:
      var $retval22 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval22;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _normal_sameName($enc, $ptr1, $ptr2) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 20;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr1_addr = __stackBase__ + 4;
      var $ptr2_addr = __stackBase__ + 8;
      var $retval = __stackBase__ + 12;
      var $0 = __stackBase__ + 16;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr1_addr] = $ptr1;
      HEAP[$ptr2_addr] = $ptr2;
      __label__ = 1;
      break;
     case 1:
      
      
      
      
      
      
      
      
      var $9 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr1_addr]]];
      if ($9 == 5) {
        __label__ = 6;
        break;
      } else if ($9 == 6) {
        __label__ = 4;
        break;
      } else if ($9 == 7) {
        __label__ = 2;
        break;
      } else if ($9 == 22) {
        __label__ = 11;
        break;
      } else if ($9 == 23) {
        __label__ = 11;
        break;
      } else if ($9 == 24) {
        __label__ = 11;
        break;
      } else if ($9 == 25) {
        __label__ = 11;
        break;
      } else if ($9 == 26) {
        __label__ = 11;
        break;
      } else if ($9 == 27) {
        __label__ = 11;
        break;
      } else if ($9 == 29) {
        __label__ = 11;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 2:
      
      
      
      
      
      var $15 = HEAP[HEAP[$ptr1_addr]] != HEAP[HEAP[$ptr2_addr]];
      
      var $17 = HEAP[$ptr1_addr] + 1;
      HEAP[$ptr1_addr] = $17;
      
      var $19 = HEAP[$ptr2_addr] + 1;
      HEAP[$ptr2_addr] = $19;
      
      if ($15 != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      HEAP[$0] = 0;
      __label__ = 20;
      break;
     case 4:
      
      
      
      
      
      var $25 = HEAP[HEAP[$ptr1_addr]] != HEAP[HEAP[$ptr2_addr]];
      
      var $27 = HEAP[$ptr1_addr] + 1;
      HEAP[$ptr1_addr] = $27;
      
      var $29 = HEAP[$ptr2_addr] + 1;
      HEAP[$ptr2_addr] = $29;
      
      if ($25 != 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      HEAP[$0] = 0;
      __label__ = 20;
      break;
     case 6:
      
      
      
      
      
      var $35 = HEAP[HEAP[$ptr1_addr]] != HEAP[HEAP[$ptr2_addr]];
      
      var $37 = HEAP[$ptr1_addr] + 1;
      HEAP[$ptr1_addr] = $37;
      
      var $39 = HEAP[$ptr2_addr] + 1;
      HEAP[$ptr2_addr] = $39;
      
      if ($35 != 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      HEAP[$0] = 0;
      __label__ = 20;
      break;
     case 8:
      
      
      
      
      
      var $45 = HEAP[HEAP[$ptr1_addr]] != HEAP[HEAP[$ptr2_addr]];
      
      var $47 = HEAP[$ptr1_addr] + 1;
      HEAP[$ptr1_addr] = $47;
      
      var $49 = HEAP[$ptr2_addr] + 1;
      HEAP[$ptr2_addr] = $49;
      
      if ($45 != 0) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      HEAP[$0] = 0;
      __label__ = 20;
      break;
     case 10:
      __label__ = 19;
      break;
     case 11:
      
      
      
      
      
      var $55 = HEAP[HEAP[$ptr2_addr]] != HEAP[HEAP[$ptr1_addr]];
      
      var $57 = HEAP[$ptr2_addr] + 1;
      HEAP[$ptr2_addr] = $57;
      
      var $59 = HEAP[$ptr1_addr] + 1;
      HEAP[$ptr1_addr] = $59;
      
      if ($55 != 0) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      HEAP[$0] = 0;
      __label__ = 20;
      break;
     case 13:
      __label__ = 19;
      break;
     case 14:
      
      
      
      
      
      if (HEAP[HEAP[$ptr1_addr]] == HEAP[HEAP[$ptr2_addr]]) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      HEAP[$0] = 1;
      __label__ = 20;
      break;
     case 16:
      
      
      
      
      
      
      
      
      var $73 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr2_addr]]];
      if ($73 == 5) {
        __label__ = 17;
        break;
      } else if ($73 == 6) {
        __label__ = 17;
        break;
      } else if ($73 == 7) {
        __label__ = 17;
        break;
      } else if ($73 == 22) {
        __label__ = 17;
        break;
      } else if ($73 == 23) {
        __label__ = 17;
        break;
      } else if ($73 == 24) {
        __label__ = 17;
        break;
      } else if ($73 == 25) {
        __label__ = 17;
        break;
      } else if ($73 == 26) {
        __label__ = 17;
        break;
      } else if ($73 == 27) {
        __label__ = 17;
        break;
      } else if ($73 == 29) {
        __label__ = 17;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 17:
      HEAP[$0] = 0;
      __label__ = 20;
      break;
     case 18:
      HEAP[$0] = 1;
      __label__ = 20;
      break;
     case 19:
      __label__ = 1;
      break;
     case 20:
      var $74 = HEAP[$0];
      HEAP[$retval] = $74;
      __label__ = 21;
      break;
     case 21:
      var $retval24 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval24;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _normal_nameMatchesAscii($enc, $ptr1, $end1, $ptr2) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 24;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $ptr1_addr = __stackBase__ + 4;
      var $end1_addr = __stackBase__ + 8;
      var $ptr2_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      
      HEAP[__stackBase__] = $enc;
      HEAP[$ptr1_addr] = $ptr1;
      HEAP[$end1_addr] = $end1;
      HEAP[$ptr2_addr] = $ptr2;
      __label__ = 6;
      break;
     case 1:
      
      
      
      if (HEAP[$ptr1_addr] == HEAP[$end1_addr]) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      HEAP[$0] = 0;
      __label__ = 8;
      break;
     case 3:
      
      
      
      
      
      if (HEAP[HEAP[$ptr1_addr]] != HEAP[HEAP[$ptr2_addr]]) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      HEAP[$0] = 0;
      __label__ = 8;
      break;
     case 5:
      
      var $10 = HEAP[$ptr1_addr] + 1;
      HEAP[$ptr1_addr] = $10;
      
      var $12 = HEAP[$ptr2_addr] + 1;
      HEAP[$ptr2_addr] = $12;
      __label__ = 6;
      break;
     case 6:
      
      
      
      if (HEAP[HEAP[$ptr2_addr]] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 7:
      
      
      
      var $19 = HEAP[$ptr1_addr] == HEAP[$end1_addr];
      HEAP[$0] = $19;
      __label__ = 8;
      break;
     case 8:
      var $20 = HEAP[$0];
      HEAP[$retval] = $20;
      __label__ = 9;
      break;
     case 9:
      var $retval8 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval8;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _normal_nameLength($enc, $ptr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 20;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      var $start = __stackBase__ + 16;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      var $1 = HEAP[$ptr_addr];
      HEAP[$start] = $1;
      __label__ = 1;
      break;
     case 1:
      
      
      
      
      
      
      
      
      var $10 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($10 == 5) {
        __label__ = 2;
        break;
      } else if ($10 == 6) {
        __label__ = 3;
        break;
      } else if ($10 == 7) {
        __label__ = 4;
        break;
      } else if ($10 == 22) {
        __label__ = 5;
        break;
      } else if ($10 == 23) {
        __label__ = 5;
        break;
      } else if ($10 == 24) {
        __label__ = 5;
        break;
      } else if ($10 == 25) {
        __label__ = 5;
        break;
      } else if ($10 == 26) {
        __label__ = 5;
        break;
      } else if ($10 == 27) {
        __label__ = 5;
        break;
      } else if ($10 == 29) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 2:
      
      var $12 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $12;
      __label__ = 7;
      break;
     case 3:
      
      var $14 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $14;
      __label__ = 7;
      break;
     case 4:
      
      var $16 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $16;
      __label__ = 7;
      break;
     case 5:
      
      var $18 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $18;
      __label__ = 7;
      break;
     case 6:
      
      
      
      
      var $23 = HEAP[$ptr_addr] - HEAP[$start];
      HEAP[$0] = $23;
      var $24 = HEAP[$0];
      HEAP[$retval] = $24;
      __label__ = 8;
      break;
     case 7:
      __label__ = 1;
      break;
     case 8:
      var $retval7 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval7;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _normal_skipS($enc, $ptr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      __label__ = 1;
      break;
     case 1:
      
      
      
      
      
      
      
      
      var $9 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($9 == 9) {
        __label__ = 2;
        break;
      } else if ($9 == 10) {
        __label__ = 2;
        break;
      } else if ($9 == 21) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      var $11 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $11;
      __label__ = 1;
      break;
     case 3:
      var $12 = HEAP[$ptr_addr];
      HEAP[$0] = $12;
      var $13 = HEAP[$0];
      HEAP[$retval] = $13;
      __label__ = 4;
      break;
     case 4:
      var $retval3 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval3;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _normal_updatePosition($enc, $ptr, $end, $pos) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $pos_addr = __stackBase__ + 12;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$pos_addr] = $pos;
      __label__ = 12;
      break;
     case 1:
      
      
      
      
      
      
      
      
      var $8 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      if ($8 == 5) {
        __label__ = 2;
        break;
      } else if ($8 == 6) {
        __label__ = 3;
        break;
      } else if ($8 == 7) {
        __label__ = 4;
        break;
      } else if ($8 == 9) {
        __label__ = 6;
        break;
      } else if ($8 == 10) {
        __label__ = 5;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 2:
      
      var $10 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $10;
      __label__ = 11;
      break;
     case 3:
      
      var $12 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $12;
      __label__ = 11;
      break;
     case 4:
      
      var $14 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $14;
      __label__ = 11;
      break;
     case 5:
      
      var $16 = HEAP[$pos_addr] + 4;
      HEAP[$16] = -1;
      
      
      
      var $20 = HEAP[HEAP[$pos_addr]] + 1;
      
      var $22 = HEAP[$pos_addr];
      HEAP[$22] = $20;
      
      var $24 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $24;
      __label__ = 11;
      break;
     case 6:
      
      
      
      var $28 = HEAP[HEAP[$pos_addr]] + 1;
      
      var $30 = HEAP[$pos_addr];
      HEAP[$30] = $28;
      
      var $32 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $32;
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 7;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 7:
      
      
      
      
      
      
      
      
      
      if (HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]] == 10) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      
      var $46 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $46;
      __label__ = 9;
      break;
     case 9:
      
      var $48 = HEAP[$pos_addr] + 4;
      HEAP[$48] = -1;
      __label__ = 11;
      break;
     case 10:
      
      var $50 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $50;
      __label__ = 11;
      break;
     case 11:
      
      
      
      var $54 = HEAP[HEAP[$pos_addr] + 4] + 1;
      
      var $56 = HEAP[$pos_addr] + 4;
      HEAP[$56] = $54;
      __label__ = 12;
      break;
     case 12:
      
      
      
      if (HEAP[$ptr_addr] < HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 13:
      __label__ = 14;
      break;
     case 14:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _utf8_toUtf8($enc, $fromP, $fromLim, $toP, $toLim) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $fromP_addr = __stackBase__ + 4;
      var $fromLim_addr = __stackBase__ + 8;
      var $toP_addr = __stackBase__ + 12;
      var $toLim_addr = __stackBase__ + 16;
      var $to = __stackBase__ + 20;
      var $from = __stackBase__ + 24;
      
      HEAP[__stackBase__] = $enc;
      HEAP[$fromP_addr] = $fromP;
      HEAP[$fromLim_addr] = $fromLim;
      HEAP[$toP_addr] = $toP;
      HEAP[$toLim_addr] = $toLim;
      
      
      
      
      
      
      
      
      
      
      
      
      
      if (HEAP[$fromLim_addr] - HEAP[HEAP[$fromP_addr]] > HEAP[$toLim_addr] - HEAP[HEAP[$toP_addr]]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 1:
      
      
      
      
      
      
      
      
      var $21 = HEAP[HEAP[$fromP_addr]] + (HEAP[$toLim_addr] - HEAP[HEAP[$toP_addr]]);
      HEAP[$fromLim_addr] = $21;
      __label__ = 4;
      break;
     case 2:
      
      var $23 = HEAP[$fromLim_addr] + -1;
      
      
      
      
      if ((HEAP[$23] & 192) != 128) {
        __label__ = 5;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 3:
      
      var $29 = HEAP[$fromLim_addr] + -1;
      HEAP[$fromLim_addr] = $29;
      __label__ = 4;
      break;
     case 4:
      
      
      
      
      if (HEAP[HEAP[$fromP_addr]] < HEAP[$fromLim_addr]) {
        __label__ = 2;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 5:
      
      var $35 = HEAP[HEAP[$toP_addr]];
      HEAP[$to] = $35;
      
      var $37 = HEAP[HEAP[$fromP_addr]];
      HEAP[$from] = $37;
      __label__ = 7;
      break;
     case 6:
      
      var $39 = HEAP[HEAP[$from]];
      var $40 = HEAP[$to];
      HEAP[$40] = $39;
      
      var $42 = HEAP[$from] + 1;
      HEAP[$from] = $42;
      
      var $44 = HEAP[$to] + 1;
      HEAP[$to] = $44;
      __label__ = 7;
      break;
     case 7:
      
      
      
      if (HEAP[$from] != HEAP[$fromLim_addr]) {
        __label__ = 6;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 8:
      var $48 = HEAP[$fromP_addr];
      var $49 = HEAP[$from];
      HEAP[$48] = $49;
      var $50 = HEAP[$toP_addr];
      var $51 = HEAP[$to];
      HEAP[$50] = $51;
      __label__ = 9;
      break;
     case 9:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _utf8_toUtf16($enc, $fromP, $fromLim, $toP, $toLim) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 32;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $fromP_addr = __stackBase__ + 4;
      var $fromLim_addr = __stackBase__ + 8;
      var $toP_addr = __stackBase__ + 12;
      var $toLim_addr = __stackBase__ + 16;
      var $to = __stackBase__ + 20;
      var $from = __stackBase__ + 24;
      var $n = __stackBase__ + 28;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$fromP_addr] = $fromP;
      HEAP[$fromLim_addr] = $fromLim;
      HEAP[$toP_addr] = $toP;
      HEAP[$toLim_addr] = $toLim;
      
      var $1 = HEAP[HEAP[$toP_addr]];
      HEAP[$to] = $1;
      
      var $3 = HEAP[HEAP[$fromP_addr]];
      HEAP[$from] = $3;
      __label__ = 7;
      break;
     case 1:
      
      
      
      
      
      
      
      
      var $12 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$from]]];
      if ($12 == 5) {
        __label__ = 2;
        break;
      } else if ($12 == 6) {
        __label__ = 3;
        break;
      } else if ($12 == 7) {
        __label__ = 4;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 2:
      
      
      
      
      
      
      
      
      
      
      
      
      var $25 = (HEAP[HEAP[$from]] & 31) << 6 & 65535 | HEAP[HEAP[$from] + 1] & 63;
      var $26 = HEAP[$to];
      HEAP[$26] = $25;
      
      var $28 = HEAP[$to] + 2;
      HEAP[$to] = $28;
      
      var $30 = HEAP[$from] + 2;
      HEAP[$from] = $30;
      __label__ = 7;
      break;
     case 3:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      var $51 = (HEAP[HEAP[$from]] & 15) << 12 & 65535 | (HEAP[HEAP[$from] + 1] & 63) << 6 & 65535 | HEAP[HEAP[$from] + 2] & 63;
      var $52 = HEAP[$to];
      HEAP[$52] = $51;
      
      var $54 = HEAP[$to] + 2;
      HEAP[$to] = $54;
      
      var $56 = HEAP[$from] + 3;
      HEAP[$from] = $56;
      __label__ = 7;
      break;
     case 4:
      
      
      
      
      if (HEAP[$to] + 2 == HEAP[$toLim_addr]) {
        __label__ = 9;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 5:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      var $86 = (HEAP[HEAP[$from]] & 7) << 18 | (HEAP[HEAP[$from] + 1] & 63) << 12 | (HEAP[HEAP[$from] + 2] & 63) << 6 | HEAP[HEAP[$from] + 3] & 63;
      HEAP[$n] = $86;
      
      var $88 = HEAP[$n] - 65536;
      HEAP[$n] = $88;
      
      
      
      var $92 = HEAP[$n] >>> 10 & 65535 | -10240;
      
      var $94 = HEAP[$to];
      HEAP[$94] = $92;
      
      
      
      var $98 = HEAP[$n] & 65535 & 1023 | -9216;
      
      var $100 = HEAP[$to] + 2;
      HEAP[$100] = $98;
      
      var $102 = HEAP[$to] + 4;
      HEAP[$to] = $102;
      
      var $104 = HEAP[$from] + 4;
      HEAP[$from] = $104;
      __label__ = 7;
      break;
     case 6:
      
      
      var $107 = HEAP[HEAP[$from]];
      var $108 = HEAP[$to];
      HEAP[$108] = $107;
      
      var $110 = HEAP[$to] + 2;
      HEAP[$to] = $110;
      
      var $112 = HEAP[$from] + 1;
      HEAP[$from] = $112;
      __label__ = 7;
      break;
     case 7:
      
      
      
      if (HEAP[$from] == HEAP[$fromLim_addr]) {
        __label__ = 9;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 8:
      
      
      
      if (HEAP[$to] != HEAP[$toLim_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 9:
      var $119 = HEAP[$fromP_addr];
      var $120 = HEAP[$from];
      HEAP[$119] = $120;
      var $121 = HEAP[$toP_addr];
      var $122 = HEAP[$to];
      HEAP[$121] = $122;
      __label__ = 10;
      break;
     case 10:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _latin1_toUtf8($enc, $fromP, $fromLim, $toP, $toLim) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 21;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 21);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $fromP_addr = __stackBase__ + 4;
      var $fromLim_addr = __stackBase__ + 8;
      var $toP_addr = __stackBase__ + 12;
      var $toLim_addr = __stackBase__ + 16;
      var $c = __stackBase__ + 20;
      
      HEAP[__stackBase__] = $enc;
      HEAP[$fromP_addr] = $fromP;
      HEAP[$fromLim_addr] = $fromLim;
      HEAP[$toP_addr] = $toP;
      HEAP[$toLim_addr] = $toLim;
      __label__ = 1;
      break;
     case 1:
      
      
      
      
      if (HEAP[HEAP[$fromP_addr]] == HEAP[$fromLim_addr]) {
        __label__ = 8;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      
      
      var $6 = HEAP[HEAP[HEAP[$fromP_addr]]];
      HEAP[$c] = $6;
      
      
      if (HEAP[$c] < 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 3:
      
      
      
      
      
      
      
      if (HEAP[$toLim_addr] - HEAP[HEAP[$toP_addr]] <= 1) {
        __label__ = 8;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 4:
      
      var $17 = HEAP[HEAP[$toP_addr]];
      
      
      var $20 = HEAP[$c] >>> 6 | -64;
      HEAP[$17] = $20;
      var $21 = $17 + 1;
      var $22 = HEAP[$toP_addr];
      HEAP[$22] = $21;
      
      var $24 = HEAP[HEAP[$toP_addr]];
      
      
      var $27 = HEAP[$c] & 63 | -128;
      HEAP[$24] = $27;
      var $28 = $24 + 1;
      var $29 = HEAP[$toP_addr];
      HEAP[$29] = $28;
      
      
      var $32 = HEAP[HEAP[$fromP_addr]] + 1;
      var $33 = HEAP[$fromP_addr];
      HEAP[$33] = $32;
      __label__ = 7;
      break;
     case 5:
      
      
      
      
      if (HEAP[HEAP[$toP_addr]] == HEAP[$toLim_addr]) {
        __label__ = 8;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 6:
      
      var $39 = HEAP[HEAP[$toP_addr]];
      
      var $41 = HEAP[HEAP[$fromP_addr]];
      var $42 = HEAP[$41];
      HEAP[$39] = $42;
      var $43 = $39 + 1;
      var $44 = HEAP[$toP_addr];
      HEAP[$44] = $43;
      var $45 = $41 + 1;
      var $46 = HEAP[$fromP_addr];
      HEAP[$46] = $45;
      __label__ = 7;
      break;
     case 7:
      __label__ = 1;
      break;
     case 8:
      __label__ = 9;
      break;
     case 9:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _latin1_toUtf16($enc, $fromP, $fromLim, $toP, $toLim) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 20;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $fromP_addr = __stackBase__ + 4;
      var $fromLim_addr = __stackBase__ + 8;
      var $toP_addr = __stackBase__ + 12;
      var $toLim_addr = __stackBase__ + 16;
      
      HEAP[__stackBase__] = $enc;
      HEAP[$fromP_addr] = $fromP;
      HEAP[$fromLim_addr] = $fromLim;
      HEAP[$toP_addr] = $toP;
      HEAP[$toLim_addr] = $toLim;
      __label__ = 2;
      break;
     case 1:
      
      var $1 = HEAP[HEAP[$toP_addr]];
      
      var $3 = HEAP[HEAP[$fromP_addr]];
      
      var $5 = HEAP[$3];
      HEAP[$1] = $5;
      var $6 = $1 + 2;
      var $7 = HEAP[$toP_addr];
      HEAP[$7] = $6;
      var $8 = $3 + 1;
      var $9 = HEAP[$fromP_addr];
      HEAP[$9] = $8;
      __label__ = 2;
      break;
     case 2:
      
      
      
      
      if (HEAP[HEAP[$fromP_addr]] == HEAP[$fromLim_addr]) {
        __label__ = 4;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 3:
      
      
      
      
      if (HEAP[HEAP[$toP_addr]] != HEAP[$toLim_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 4:
      __label__ = 5;
      break;
     case 5:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _ascii_toUtf8($enc, $fromP, $fromLim, $toP, $toLim) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 20;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $fromP_addr = __stackBase__ + 4;
      var $fromLim_addr = __stackBase__ + 8;
      var $toP_addr = __stackBase__ + 12;
      var $toLim_addr = __stackBase__ + 16;
      
      HEAP[__stackBase__] = $enc;
      HEAP[$fromP_addr] = $fromP;
      HEAP[$fromLim_addr] = $fromLim;
      HEAP[$toP_addr] = $toP;
      HEAP[$toLim_addr] = $toLim;
      __label__ = 2;
      break;
     case 1:
      
      var $1 = HEAP[HEAP[$toP_addr]];
      
      var $3 = HEAP[HEAP[$fromP_addr]];
      var $4 = HEAP[$3];
      HEAP[$1] = $4;
      var $5 = $1 + 1;
      var $6 = HEAP[$toP_addr];
      HEAP[$6] = $5;
      var $7 = $3 + 1;
      var $8 = HEAP[$fromP_addr];
      HEAP[$8] = $7;
      __label__ = 2;
      break;
     case 2:
      
      
      
      
      if (HEAP[HEAP[$fromP_addr]] == HEAP[$fromLim_addr]) {
        __label__ = 4;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 3:
      
      
      
      
      if (HEAP[HEAP[$toP_addr]] != HEAP[$toLim_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 4:
      __label__ = 5;
      break;
     case 5:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _unicode_byte_type($hi, $lo) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 10;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 10);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $hi_addr = __stackBase__;
      var $lo_addr = __stackBase__ + 1;
      var $retval = __stackBase__ + 2;
      var $0 = __stackBase__ + 6;
      
      HEAP[$hi_addr] = $hi;
      HEAP[$lo_addr] = $lo;
      
      var $2 = HEAP[$hi_addr];
      if ($2 == 216) {
        __label__ = 1;
        break;
      } else if ($2 == 217) {
        __label__ = 1;
        break;
      } else if ($2 == 218) {
        __label__ = 1;
        break;
      } else if ($2 == 219) {
        __label__ = 1;
        break;
      } else if ($2 == 220) {
        __label__ = 2;
        break;
      } else if ($2 == 221) {
        __label__ = 2;
        break;
      } else if ($2 == 222) {
        __label__ = 2;
        break;
      } else if ($2 == 223) {
        __label__ = 2;
        break;
      } else if ($2 == 255) {
        __label__ = 3;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 1:
      HEAP[$0] = 7;
      __label__ = 6;
      break;
     case 2:
      HEAP[$0] = 8;
      __label__ = 6;
      break;
     case 3:
      
      var $4 = HEAP[$lo_addr];
      if ($4 == 254) {
        __label__ = 4;
        break;
      } else if ($4 == 255) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      HEAP[$0] = 0;
      __label__ = 6;
      break;
     case 5:
      HEAP[$0] = 29;
      __label__ = 6;
      break;
     case 6:
      var $5 = HEAP[$0];
      HEAP[$retval] = $5;
      __label__ = 7;
      break;
     case 7:
      var $retval6 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval6;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _little2_toUtf8($enc, $fromP, $fromLim, $toP, $toLim) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 31;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 31);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $fromP_addr = __stackBase__ + 4;
      var $fromLim_addr = __stackBase__ + 8;
      var $toP_addr = __stackBase__ + 12;
      var $toLim_addr = __stackBase__ + 16;
      var $from = __stackBase__ + 20;
      var $plane = __stackBase__ + 24;
      var $lo2 = __stackBase__ + 28;
      var $lo = __stackBase__ + 29;
      var $hi = __stackBase__ + 30;
      
      HEAP[__stackBase__] = $enc;
      HEAP[$fromP_addr] = $fromP;
      HEAP[$fromLim_addr] = $fromLim;
      HEAP[$toP_addr] = $toP;
      HEAP[$toLim_addr] = $toLim;
      
      var $1 = HEAP[HEAP[$fromP_addr]];
      HEAP[$from] = $1;
      __label__ = 16;
      break;
     case 1:
      
      
      var $4 = HEAP[HEAP[$from]];
      HEAP[$lo] = $4;
      
      
      var $7 = HEAP[HEAP[$from] + 1];
      HEAP[$hi] = $7;
      
      var $9 = HEAP[$hi];
      if ($9 == 0) {
        __label__ = 2;
        break;
      } else if ($9 == 1) {
        __label__ = 6;
        break;
      } else if ($9 == 2) {
        __label__ = 6;
        break;
      } else if ($9 == 3) {
        __label__ = 6;
        break;
      } else if ($9 == 4) {
        __label__ = 6;
        break;
      } else if ($9 == 5) {
        __label__ = 6;
        break;
      } else if ($9 == 6) {
        __label__ = 6;
        break;
      } else if ($9 == 7) {
        __label__ = 6;
        break;
      } else if ($9 == 216) {
        __label__ = 12;
        break;
      } else if ($9 == 217) {
        __label__ = 12;
        break;
      } else if ($9 == 218) {
        __label__ = 12;
        break;
      } else if ($9 == 219) {
        __label__ = 12;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 2:
      
      
      if (HEAP[$lo] >= 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 3:
      
      
      
      
      if (HEAP[HEAP[$toP_addr]] == HEAP[$toLim_addr]) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      var $16 = HEAP[$fromP_addr];
      var $17 = HEAP[$from];
      HEAP[$16] = $17;
      __label__ = 18;
      break;
     case 5:
      
      var $19 = HEAP[HEAP[$toP_addr]];
      var $20 = HEAP[$lo];
      HEAP[$19] = $20;
      var $21 = $19 + 1;
      var $22 = HEAP[$toP_addr];
      HEAP[$22] = $21;
      __label__ = 15;
      break;
     case 6:
      
      
      
      
      
      
      
      if (HEAP[$toLim_addr] - HEAP[HEAP[$toP_addr]] <= 1) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      var $30 = HEAP[$fromP_addr];
      var $31 = HEAP[$from];
      HEAP[$30] = $31;
      __label__ = 18;
      break;
     case 8:
      
      var $33 = HEAP[HEAP[$toP_addr]];
      
      
      
      
      
      
      
      var $41 = HEAP[$lo] >>> 6 | HEAP[$hi] << 2 & 255 | -64;
      HEAP[$33] = $41;
      var $42 = $33 + 1;
      var $43 = HEAP[$toP_addr];
      HEAP[$43] = $42;
      
      var $45 = HEAP[HEAP[$toP_addr]];
      
      
      var $48 = HEAP[$lo] & 63 | -128;
      HEAP[$45] = $48;
      var $49 = $45 + 1;
      var $50 = HEAP[$toP_addr];
      HEAP[$50] = $49;
      __label__ = 15;
      break;
     case 9:
      
      
      
      
      
      
      
      if (HEAP[$toLim_addr] - HEAP[HEAP[$toP_addr]] <= 2) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      var $58 = HEAP[$fromP_addr];
      var $59 = HEAP[$from];
      HEAP[$58] = $59;
      __label__ = 18;
      break;
     case 11:
      
      var $61 = HEAP[HEAP[$toP_addr]];
      
      
      var $64 = HEAP[$hi] >>> 4 | -32;
      HEAP[$61] = $64;
      var $65 = $61 + 1;
      var $66 = HEAP[$toP_addr];
      HEAP[$66] = $65;
      
      var $68 = HEAP[HEAP[$toP_addr]];
      
      
      
      
      
      
      
      
      var $77 = (HEAP[$hi] & 15) << 2 & 255 | HEAP[$lo] >>> 6 | -128;
      HEAP[$68] = $77;
      var $78 = $68 + 1;
      var $79 = HEAP[$toP_addr];
      HEAP[$79] = $78;
      
      var $81 = HEAP[HEAP[$toP_addr]];
      
      
      var $84 = HEAP[$lo] & 63 | -128;
      HEAP[$81] = $84;
      var $85 = $81 + 1;
      var $86 = HEAP[$toP_addr];
      HEAP[$86] = $85;
      __label__ = 15;
      break;
     case 12:
      
      
      
      
      
      
      
      if (HEAP[$toLim_addr] - HEAP[HEAP[$toP_addr]] <= 3) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      var $94 = HEAP[$fromP_addr];
      var $95 = HEAP[$from];
      HEAP[$94] = $95;
      __label__ = 18;
      break;
     case 14:
      
      
      
      
      
      
      
      
      
      var $105 = ((HEAP[$hi] & 3) << 2 | HEAP[$lo] >>> 6 & 3) + 1;
      HEAP[$plane] = $105;
      
      var $107 = HEAP[HEAP[$toP_addr]];
      
      
      
      var $111 = HEAP[$plane] >> 2 & 255 | -16;
      HEAP[$107] = $111;
      var $112 = $107 + 1;
      var $113 = HEAP[$toP_addr];
      HEAP[$113] = $112;
      
      var $115 = HEAP[HEAP[$toP_addr]];
      
      
      
      
      
      
      
      
      var $124 = HEAP[$lo] >>> 2 & 15 | (HEAP[$plane] & 3) << 4 & 255 | -128;
      HEAP[$115] = $124;
      var $125 = $115 + 1;
      var $126 = HEAP[$toP_addr];
      HEAP[$126] = $125;
      
      var $128 = HEAP[$from] + 2;
      HEAP[$from] = $128;
      
      
      var $131 = HEAP[HEAP[$from]];
      HEAP[$lo2] = $131;
      
      var $133 = HEAP[HEAP[$toP_addr]];
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      var $150 = (HEAP[$lo] & 3) << 4 & 255 | (HEAP[HEAP[$from] + 1] & 3) << 2 & 255 | HEAP[$lo2] >>> 6 | -128;
      HEAP[$133] = $150;
      var $151 = $133 + 1;
      var $152 = HEAP[$toP_addr];
      HEAP[$152] = $151;
      
      var $154 = HEAP[HEAP[$toP_addr]];
      
      
      var $157 = HEAP[$lo2] & 63 | -128;
      HEAP[$154] = $157;
      var $158 = $154 + 1;
      var $159 = HEAP[$toP_addr];
      HEAP[$159] = $158;
      __label__ = 15;
      break;
     case 15:
      
      var $161 = HEAP[$from] + 2;
      HEAP[$from] = $161;
      __label__ = 16;
      break;
     case 16:
      
      
      
      if (HEAP[$from] != HEAP[$fromLim_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 17:
      var $165 = HEAP[$fromP_addr];
      var $166 = HEAP[$from];
      HEAP[$165] = $166;
      __label__ = 18;
      break;
     case 18:
      __label__ = 19;
      break;
     case 19:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _little2_toUtf16($enc, $fromP, $fromLim, $toP, $toLim) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 20;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $fromP_addr = __stackBase__ + 4;
      var $fromLim_addr = __stackBase__ + 8;
      var $toP_addr = __stackBase__ + 12;
      var $toLim_addr = __stackBase__ + 16;
      
      HEAP[__stackBase__] = $enc;
      HEAP[$fromP_addr] = $fromP;
      HEAP[$fromLim_addr] = $fromLim;
      HEAP[$toP_addr] = $toP;
      HEAP[$toLim_addr] = $toLim;
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if (HEAP[$fromLim_addr] - HEAP[HEAP[$fromP_addr]] > ((HEAP[$toLim_addr] - HEAP[HEAP[$toP_addr]]) / 2 | 0) << 1) {
        __label__ = 1;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      
      var $16 = HEAP[$fromLim_addr] + -2;
      
      
      
      
      
      if ((HEAP[$16 + 1] & 248) == 216) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      var $23 = HEAP[$fromLim_addr] + -2;
      HEAP[$fromLim_addr] = $23;
      __label__ = 3;
      break;
     case 3:
      __label__ = 5;
      break;
     case 4:
      
      var $25 = HEAP[HEAP[$toP_addr]];
      
      
      
      
      
      
      
      
      
      
      
      
      var $38 = HEAP[HEAP[HEAP[$fromP_addr]] + 1] << 8 & 65535 | HEAP[HEAP[HEAP[$fromP_addr]]];
      HEAP[$25] = $38;
      var $39 = $25 + 2;
      var $40 = HEAP[$toP_addr];
      HEAP[$40] = $39;
      
      
      var $43 = HEAP[HEAP[$fromP_addr]] + 2;
      var $44 = HEAP[$fromP_addr];
      HEAP[$44] = $43;
      __label__ = 5;
      break;
     case 5:
      
      
      
      
      if (HEAP[HEAP[$fromP_addr]] == HEAP[$fromLim_addr]) {
        __label__ = 7;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 6:
      
      
      
      
      if (HEAP[HEAP[$toP_addr]] != HEAP[$toLim_addr]) {
        __label__ = 4;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 7:
      __label__ = 8;
      break;
     case 8:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _big2_toUtf8($enc, $fromP, $fromLim, $toP, $toLim) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 31;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 31);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $fromP_addr = __stackBase__ + 4;
      var $fromLim_addr = __stackBase__ + 8;
      var $toP_addr = __stackBase__ + 12;
      var $toLim_addr = __stackBase__ + 16;
      var $from = __stackBase__ + 20;
      var $plane = __stackBase__ + 24;
      var $lo2 = __stackBase__ + 28;
      var $lo = __stackBase__ + 29;
      var $hi = __stackBase__ + 30;
      
      HEAP[__stackBase__] = $enc;
      HEAP[$fromP_addr] = $fromP;
      HEAP[$fromLim_addr] = $fromLim;
      HEAP[$toP_addr] = $toP;
      HEAP[$toLim_addr] = $toLim;
      
      var $1 = HEAP[HEAP[$fromP_addr]];
      HEAP[$from] = $1;
      __label__ = 16;
      break;
     case 1:
      
      
      var $4 = HEAP[HEAP[$from] + 1];
      HEAP[$lo] = $4;
      
      
      var $7 = HEAP[HEAP[$from]];
      HEAP[$hi] = $7;
      
      var $9 = HEAP[$hi];
      if ($9 == 0) {
        __label__ = 2;
        break;
      } else if ($9 == 1) {
        __label__ = 6;
        break;
      } else if ($9 == 2) {
        __label__ = 6;
        break;
      } else if ($9 == 3) {
        __label__ = 6;
        break;
      } else if ($9 == 4) {
        __label__ = 6;
        break;
      } else if ($9 == 5) {
        __label__ = 6;
        break;
      } else if ($9 == 6) {
        __label__ = 6;
        break;
      } else if ($9 == 7) {
        __label__ = 6;
        break;
      } else if ($9 == 216) {
        __label__ = 12;
        break;
      } else if ($9 == 217) {
        __label__ = 12;
        break;
      } else if ($9 == 218) {
        __label__ = 12;
        break;
      } else if ($9 == 219) {
        __label__ = 12;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 2:
      
      
      if (HEAP[$lo] >= 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 3:
      
      
      
      
      if (HEAP[HEAP[$toP_addr]] == HEAP[$toLim_addr]) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      var $16 = HEAP[$fromP_addr];
      var $17 = HEAP[$from];
      HEAP[$16] = $17;
      __label__ = 18;
      break;
     case 5:
      
      var $19 = HEAP[HEAP[$toP_addr]];
      var $20 = HEAP[$lo];
      HEAP[$19] = $20;
      var $21 = $19 + 1;
      var $22 = HEAP[$toP_addr];
      HEAP[$22] = $21;
      __label__ = 15;
      break;
     case 6:
      
      
      
      
      
      
      
      if (HEAP[$toLim_addr] - HEAP[HEAP[$toP_addr]] <= 1) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      var $30 = HEAP[$fromP_addr];
      var $31 = HEAP[$from];
      HEAP[$30] = $31;
      __label__ = 18;
      break;
     case 8:
      
      var $33 = HEAP[HEAP[$toP_addr]];
      
      
      
      
      
      
      
      var $41 = HEAP[$lo] >>> 6 | HEAP[$hi] << 2 & 255 | -64;
      HEAP[$33] = $41;
      var $42 = $33 + 1;
      var $43 = HEAP[$toP_addr];
      HEAP[$43] = $42;
      
      var $45 = HEAP[HEAP[$toP_addr]];
      
      
      var $48 = HEAP[$lo] & 63 | -128;
      HEAP[$45] = $48;
      var $49 = $45 + 1;
      var $50 = HEAP[$toP_addr];
      HEAP[$50] = $49;
      __label__ = 15;
      break;
     case 9:
      
      
      
      
      
      
      
      if (HEAP[$toLim_addr] - HEAP[HEAP[$toP_addr]] <= 2) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      var $58 = HEAP[$fromP_addr];
      var $59 = HEAP[$from];
      HEAP[$58] = $59;
      __label__ = 18;
      break;
     case 11:
      
      var $61 = HEAP[HEAP[$toP_addr]];
      
      
      var $64 = HEAP[$hi] >>> 4 | -32;
      HEAP[$61] = $64;
      var $65 = $61 + 1;
      var $66 = HEAP[$toP_addr];
      HEAP[$66] = $65;
      
      var $68 = HEAP[HEAP[$toP_addr]];
      
      
      
      
      
      
      
      
      var $77 = (HEAP[$hi] & 15) << 2 & 255 | HEAP[$lo] >>> 6 | -128;
      HEAP[$68] = $77;
      var $78 = $68 + 1;
      var $79 = HEAP[$toP_addr];
      HEAP[$79] = $78;
      
      var $81 = HEAP[HEAP[$toP_addr]];
      
      
      var $84 = HEAP[$lo] & 63 | -128;
      HEAP[$81] = $84;
      var $85 = $81 + 1;
      var $86 = HEAP[$toP_addr];
      HEAP[$86] = $85;
      __label__ = 15;
      break;
     case 12:
      
      
      
      
      
      
      
      if (HEAP[$toLim_addr] - HEAP[HEAP[$toP_addr]] <= 3) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      var $94 = HEAP[$fromP_addr];
      var $95 = HEAP[$from];
      HEAP[$94] = $95;
      __label__ = 18;
      break;
     case 14:
      
      
      
      
      
      
      
      
      
      var $105 = ((HEAP[$hi] & 3) << 2 | HEAP[$lo] >>> 6 & 3) + 1;
      HEAP[$plane] = $105;
      
      var $107 = HEAP[HEAP[$toP_addr]];
      
      
      
      var $111 = HEAP[$plane] >> 2 & 255 | -16;
      HEAP[$107] = $111;
      var $112 = $107 + 1;
      var $113 = HEAP[$toP_addr];
      HEAP[$113] = $112;
      
      var $115 = HEAP[HEAP[$toP_addr]];
      
      
      
      
      
      
      
      
      var $124 = HEAP[$lo] >>> 2 & 15 | (HEAP[$plane] & 3) << 4 & 255 | -128;
      HEAP[$115] = $124;
      var $125 = $115 + 1;
      var $126 = HEAP[$toP_addr];
      HEAP[$126] = $125;
      
      var $128 = HEAP[$from] + 2;
      HEAP[$from] = $128;
      
      
      var $131 = HEAP[HEAP[$from] + 1];
      HEAP[$lo2] = $131;
      
      var $133 = HEAP[HEAP[$toP_addr]];
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      var $150 = (HEAP[$lo] & 3) << 4 & 255 | (HEAP[HEAP[$from]] & 3) << 2 & 255 | HEAP[$lo2] >>> 6 | -128;
      HEAP[$133] = $150;
      var $151 = $133 + 1;
      var $152 = HEAP[$toP_addr];
      HEAP[$152] = $151;
      
      var $154 = HEAP[HEAP[$toP_addr]];
      
      
      var $157 = HEAP[$lo2] & 63 | -128;
      HEAP[$154] = $157;
      var $158 = $154 + 1;
      var $159 = HEAP[$toP_addr];
      HEAP[$159] = $158;
      __label__ = 15;
      break;
     case 15:
      
      var $161 = HEAP[$from] + 2;
      HEAP[$from] = $161;
      __label__ = 16;
      break;
     case 16:
      
      
      
      if (HEAP[$from] != HEAP[$fromLim_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 17:
      var $165 = HEAP[$fromP_addr];
      var $166 = HEAP[$from];
      HEAP[$165] = $166;
      __label__ = 18;
      break;
     case 18:
      __label__ = 19;
      break;
     case 19:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _big2_toUtf16($enc, $fromP, $fromLim, $toP, $toLim) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 20;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $fromP_addr = __stackBase__ + 4;
      var $fromLim_addr = __stackBase__ + 8;
      var $toP_addr = __stackBase__ + 12;
      var $toLim_addr = __stackBase__ + 16;
      
      HEAP[__stackBase__] = $enc;
      HEAP[$fromP_addr] = $fromP;
      HEAP[$fromLim_addr] = $fromLim;
      HEAP[$toP_addr] = $toP;
      HEAP[$toLim_addr] = $toLim;
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if (HEAP[$fromLim_addr] - HEAP[HEAP[$fromP_addr]] > ((HEAP[$toLim_addr] - HEAP[HEAP[$toP_addr]]) / 2 | 0) << 1) {
        __label__ = 1;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 1:
      
      var $16 = HEAP[$fromLim_addr] + -2;
      
      
      
      
      
      if ((HEAP[$16] & 248) == 216) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      var $23 = HEAP[$fromLim_addr] + -2;
      HEAP[$fromLim_addr] = $23;
      __label__ = 3;
      break;
     case 3:
      __label__ = 5;
      break;
     case 4:
      
      var $25 = HEAP[HEAP[$toP_addr]];
      
      
      
      
      
      
      
      
      
      
      
      
      var $38 = HEAP[HEAP[HEAP[$fromP_addr]]] << 8 & 65535 | HEAP[HEAP[HEAP[$fromP_addr]] + 1];
      HEAP[$25] = $38;
      var $39 = $25 + 2;
      var $40 = HEAP[$toP_addr];
      HEAP[$40] = $39;
      
      
      var $43 = HEAP[HEAP[$fromP_addr]] + 2;
      var $44 = HEAP[$fromP_addr];
      HEAP[$44] = $43;
      __label__ = 5;
      break;
     case 5:
      
      
      
      
      if (HEAP[HEAP[$fromP_addr]] == HEAP[$fromLim_addr]) {
        __label__ = 7;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 6:
      
      
      
      
      if (HEAP[HEAP[$toP_addr]] != HEAP[$toLim_addr]) {
        __label__ = 4;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 7:
      __label__ = 8;
      break;
     case 8:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _little2_scanComment($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_514 = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 32;
        break;
      }
     case 1:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 45) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      var $12 = HEAP[$nextTokPtr_addr];
      var $13 = HEAP[$ptr_addr];
      HEAP[$12] = $13;
      HEAP[$0] = 0;
      __label__ = 33;
      break;
     case 4:
      
      var $15 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $15;
      __label__ = 31;
      break;
     case 5:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      
      
      
      
      
      
      
      
      var $28 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_514] = $28;
      __label__ = 8;
      break;
     case 7:
      
      
      
      
      
      
      
      
      var $37 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $38 = HEAP[HEAP[$ptr_addr]] & 255;
      var $39 = _unicode_byte_type($37, $38);
      HEAP[$iftmp_514] = $39;
      __label__ = 8;
      break;
     case 8:
      var $40 = HEAP[$iftmp_514];
      if ($40 == 0) {
        __label__ = 18;
        break;
      } else if ($40 == 1) {
        __label__ = 18;
        break;
      } else if ($40 == 5) {
        __label__ = 9;
        break;
      } else if ($40 == 6) {
        __label__ = 12;
        break;
      } else if ($40 == 7) {
        __label__ = 15;
        break;
      } else if ($40 == 8) {
        __label__ = 18;
        break;
      } else if ($40 == 27) {
        __label__ = 19;
        break;
      } else {
        __label__ = 30;
        break;
      }
     case 9:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      HEAP[$0] = -2;
      __label__ = 33;
      break;
     case 11:
      
      var $48 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $48;
      __label__ = 31;
      break;
     case 12:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      HEAP[$0] = -2;
      __label__ = 33;
      break;
     case 14:
      
      var $56 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $56;
      __label__ = 31;
      break;
     case 15:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      HEAP[$0] = -2;
      __label__ = 33;
      break;
     case 17:
      
      var $64 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $64;
      __label__ = 31;
      break;
     case 18:
      var $65 = HEAP[$nextTokPtr_addr];
      var $66 = HEAP[$ptr_addr];
      HEAP[$65] = $66;
      HEAP[$0] = 0;
      __label__ = 33;
      break;
     case 19:
      
      var $68 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $68;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 20;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 20:
      HEAP[$0] = -1;
      __label__ = 33;
      break;
     case 21:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 22;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 22:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 45) {
        __label__ = 23;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 23:
      
      var $81 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $81;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 24;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 24:
      HEAP[$0] = -1;
      __label__ = 33;
      break;
     case 25:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] != 0) {
        __label__ = 27;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 26:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 62) {
        __label__ = 27;
        break;
      } else {
        __label__ = 28;
        break;
      }
     case 27:
      var $93 = HEAP[$nextTokPtr_addr];
      var $94 = HEAP[$ptr_addr];
      HEAP[$93] = $94;
      HEAP[$0] = 0;
      __label__ = 33;
      break;
     case 28:
      
      var $96 = HEAP[$ptr_addr] + 2;
      var $97 = HEAP[$nextTokPtr_addr];
      HEAP[$97] = $96;
      HEAP[$0] = 13;
      __label__ = 33;
      break;
     case 29:
      __label__ = 31;
      break;
     case 30:
      
      var $99 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $99;
      __label__ = 31;
      break;
     case 31:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 5;
        break;
      } else {
        __label__ = 32;
        break;
      }
     case 32:
      HEAP[$0] = -1;
      __label__ = 33;
      break;
     case 33:
      var $103 = HEAP[$0];
      HEAP[$retval] = $103;
      __label__ = 34;
      break;
     case 34:
      var $retval33 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval33;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _little2_scanDecl($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 36;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_526 = __stackBase__ + 20;
      var $iftmp_524 = __stackBase__ + 24;
      var $iftmp_522 = __stackBase__ + 28;
      var $0 = __stackBase__ + 32;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -1;
      __label__ = 26;
      break;
     case 2:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      
      
      
      
      
      
      
      var $16 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_522] = $16;
      __label__ = 5;
      break;
     case 4:
      
      
      
      
      
      
      
      
      var $25 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $26 = HEAP[HEAP[$ptr_addr]] & 255;
      var $27 = _unicode_byte_type($25, $26);
      HEAP[$iftmp_522] = $27;
      __label__ = 5;
      break;
     case 5:
      var $28 = HEAP[$iftmp_522];
      if ($28 == 20) {
        __label__ = 7;
        break;
      } else if ($28 == 22) {
        __label__ = 8;
        break;
      } else if ($28 == 24) {
        __label__ = 8;
        break;
      } else if ($28 == 27) {
        __label__ = 6;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 6:
      
      var $30 = HEAP[$ptr_addr] + 2;
      var $31 = HEAP[$enc_addr];
      var $32 = HEAP[$end_addr];
      var $33 = HEAP[$nextTokPtr_addr];
      var $34 = _little2_scanComment($31, $30, $32, $33);
      HEAP[$0] = $34;
      __label__ = 26;
      break;
     case 7:
      
      var $36 = HEAP[$ptr_addr] + 2;
      var $37 = HEAP[$nextTokPtr_addr];
      HEAP[$37] = $36;
      HEAP[$0] = 33;
      __label__ = 26;
      break;
     case 8:
      
      var $39 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $39;
      __label__ = 24;
      break;
     case 9:
      var $40 = HEAP[$nextTokPtr_addr];
      var $41 = HEAP[$ptr_addr];
      HEAP[$40] = $41;
      HEAP[$0] = 0;
      __label__ = 26;
      break;
     case 10:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      
      
      
      
      
      
      
      
      var $54 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_524] = $54;
      __label__ = 13;
      break;
     case 12:
      
      
      
      
      
      
      
      
      var $63 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $64 = HEAP[HEAP[$ptr_addr]] & 255;
      var $65 = _unicode_byte_type($63, $64);
      HEAP[$iftmp_524] = $65;
      __label__ = 13;
      break;
     case 13:
      var $66 = HEAP[$iftmp_524];
      if ($66 == 9) {
        __label__ = 21;
        break;
      } else if ($66 == 10) {
        __label__ = 21;
        break;
      } else if ($66 == 21) {
        __label__ = 21;
        break;
      } else if ($66 == 22) {
        __label__ = 22;
        break;
      } else if ($66 == 24) {
        __label__ = 22;
        break;
      } else if ($66 == 30) {
        __label__ = 14;
        break;
      } else {
        __label__ = 23;
        break;
      }
     case 14:
      
      
      
      
      if (HEAP[$ptr_addr] + 2 == HEAP[$end_addr]) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      HEAP[$0] = -1;
      __label__ = 26;
      break;
     case 16:
      
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 2 + 1] == 0) {
        __label__ = 17;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 17:
      
      
      
      
      
      
      
      
      
      var $85 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 2]];
      HEAP[$iftmp_526] = $85;
      __label__ = 19;
      break;
     case 18:
      
      
      
      
      
      
      
      
      
      
      var $96 = HEAP[HEAP[$ptr_addr] + 2 + 1] & 255;
      var $97 = HEAP[HEAP[$ptr_addr] + 2] & 255;
      var $98 = _unicode_byte_type($96, $97);
      HEAP[$iftmp_526] = $98;
      __label__ = 19;
      break;
     case 19:
      var $99 = HEAP[$iftmp_526];
      if ($99 == 9) {
        __label__ = 20;
        break;
      } else if ($99 == 10) {
        __label__ = 20;
        break;
      } else if ($99 == 21) {
        __label__ = 20;
        break;
      } else if ($99 == 30) {
        __label__ = 20;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 20:
      var $100 = HEAP[$nextTokPtr_addr];
      var $101 = HEAP[$ptr_addr];
      HEAP[$100] = $101;
      HEAP[$0] = 0;
      __label__ = 26;
      break;
     case 21:
      var $102 = HEAP[$nextTokPtr_addr];
      var $103 = HEAP[$ptr_addr];
      HEAP[$102] = $103;
      HEAP[$0] = 16;
      __label__ = 26;
      break;
     case 22:
      
      var $105 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $105;
      __label__ = 24;
      break;
     case 23:
      var $106 = HEAP[$nextTokPtr_addr];
      var $107 = HEAP[$ptr_addr];
      HEAP[$106] = $107;
      HEAP[$0] = 0;
      __label__ = 26;
      break;
     case 24:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 10;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 25:
      HEAP[$0] = -1;
      __label__ = 26;
      break;
     case 26:
      var $111 = HEAP[$0];
      HEAP[$retval] = $111;
      __label__ = 27;
      break;
     case 27:
      var $retval26 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval26;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _little2_checkPiTarget($enc, $ptr, $end, $tokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 40;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $tokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_532 = __stackBase__ + 20;
      var $iftmp_531 = __stackBase__ + 24;
      var $iftmp_530 = __stackBase__ + 28;
      var $0 = __stackBase__ + 32;
      var $upper = __stackBase__ + 36;
      
      HEAP[__stackBase__] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$tokPtr_addr] = $tokPtr;
      HEAP[$upper] = 0;
      var $1 = HEAP[$tokPtr_addr];
      HEAP[$1] = 11;
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] != 6) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = 1;
      __label__ = 26;
      break;
     case 2:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      
      
      var $15 = HEAP[HEAP[$ptr_addr]];
      HEAP[$iftmp_530] = $15;
      __label__ = 5;
      break;
     case 4:
      HEAP[$iftmp_530] = -1;
      __label__ = 5;
      break;
     case 5:
      var $16 = HEAP[$iftmp_530];
      if ($16 == 88) {
        __label__ = 7;
        break;
      } else if ($16 == 120) {
        __label__ = 6;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 6:
      __label__ = 9;
      break;
     case 7:
      HEAP[$upper] = 1;
      __label__ = 9;
      break;
     case 8:
      HEAP[$0] = 1;
      __label__ = 26;
      break;
     case 9:
      
      var $18 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $18;
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      
      
      
      var $26 = HEAP[HEAP[$ptr_addr]];
      HEAP[$iftmp_531] = $26;
      __label__ = 12;
      break;
     case 11:
      HEAP[$iftmp_531] = -1;
      __label__ = 12;
      break;
     case 12:
      var $27 = HEAP[$iftmp_531];
      if ($27 == 77) {
        __label__ = 14;
        break;
      } else if ($27 == 109) {
        __label__ = 13;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 13:
      __label__ = 16;
      break;
     case 14:
      HEAP[$upper] = 1;
      __label__ = 16;
      break;
     case 15:
      HEAP[$0] = 1;
      __label__ = 26;
      break;
     case 16:
      
      var $29 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $29;
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 17;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 17:
      
      
      
      var $37 = HEAP[HEAP[$ptr_addr]];
      HEAP[$iftmp_532] = $37;
      __label__ = 19;
      break;
     case 18:
      HEAP[$iftmp_532] = -1;
      __label__ = 19;
      break;
     case 19:
      var $38 = HEAP[$iftmp_532];
      if ($38 == 76) {
        __label__ = 21;
        break;
      } else if ($38 == 108) {
        __label__ = 20;
        break;
      } else {
        __label__ = 22;
        break;
      }
     case 20:
      __label__ = 23;
      break;
     case 21:
      HEAP[$upper] = 1;
      __label__ = 23;
      break;
     case 22:
      HEAP[$0] = 1;
      __label__ = 26;
      break;
     case 23:
      
      
      if (HEAP[$upper] != 0) {
        __label__ = 24;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 24:
      HEAP[$0] = 0;
      __label__ = 26;
      break;
     case 25:
      var $41 = HEAP[$tokPtr_addr];
      HEAP[$41] = 12;
      HEAP[$0] = 1;
      __label__ = 26;
      break;
     case 26:
      var $42 = HEAP[$0];
      HEAP[$retval] = $42;
      __label__ = 27;
      break;
     case 27:
      var $retval26 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval26;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _little2_scanPi($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 44;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 44);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_549 = __stackBase__ + 20;
      var $iftmp_541 = __stackBase__ + 24;
      var $iftmp_533 = __stackBase__ + 28;
      var $0 = __stackBase__ + 32;
      var $tok = __stackBase__ + 36;
      var $target = __stackBase__ + 40;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      var $1 = HEAP[$ptr_addr];
      HEAP[$target] = $1;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -1;
      __label__ = 71;
      break;
     case 2:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      
      
      
      
      
      
      
      var $17 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_533] = $17;
      __label__ = 5;
      break;
     case 4:
      
      
      
      
      
      
      
      
      var $26 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $27 = HEAP[HEAP[$ptr_addr]] & 255;
      var $28 = _unicode_byte_type($26, $27);
      HEAP[$iftmp_533] = $28;
      __label__ = 5;
      break;
     case 5:
      var $29 = HEAP[$iftmp_533];
      if ($29 == 5) {
        __label__ = 9;
        break;
      } else if ($29 == 6) {
        __label__ = 12;
        break;
      } else if ($29 == 7) {
        __label__ = 15;
        break;
      } else if ($29 == 22) {
        __label__ = 8;
        break;
      } else if ($29 == 24) {
        __label__ = 8;
        break;
      } else if ($29 == 29) {
        __label__ = 6;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 6:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_nmstrtPages + HEAP[HEAP[$ptr_addr] + 1]] << 3) + (HEAP[HEAP[$ptr_addr]] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr]] & 31)) == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      var $54 = HEAP[$nextTokPtr_addr];
      var $55 = HEAP[$ptr_addr];
      HEAP[$54] = $55;
      HEAP[$0] = 0;
      __label__ = 71;
      break;
     case 8:
      
      var $57 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $57;
      __label__ = 69;
      break;
     case 9:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      HEAP[$0] = -2;
      __label__ = 71;
      break;
     case 11:
      var $64 = HEAP[$nextTokPtr_addr];
      var $65 = HEAP[$ptr_addr];
      HEAP[$64] = $65;
      HEAP[$0] = 0;
      __label__ = 71;
      break;
     case 12:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      HEAP[$0] = -2;
      __label__ = 71;
      break;
     case 14:
      var $72 = HEAP[$nextTokPtr_addr];
      var $73 = HEAP[$ptr_addr];
      HEAP[$72] = $73;
      HEAP[$0] = 0;
      __label__ = 71;
      break;
     case 15:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      HEAP[$0] = -2;
      __label__ = 71;
      break;
     case 17:
      var $80 = HEAP[$nextTokPtr_addr];
      var $81 = HEAP[$ptr_addr];
      HEAP[$80] = $81;
      HEAP[$0] = 0;
      __label__ = 71;
      break;
     case 18:
      var $82 = HEAP[$nextTokPtr_addr];
      var $83 = HEAP[$ptr_addr];
      HEAP[$82] = $83;
      HEAP[$0] = 0;
      __label__ = 71;
      break;
     case 19:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 20;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 20:
      
      
      
      
      
      
      
      
      var $96 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_541] = $96;
      __label__ = 22;
      break;
     case 21:
      
      
      
      
      
      
      
      
      var $105 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $106 = HEAP[HEAP[$ptr_addr]] & 255;
      var $107 = _unicode_byte_type($105, $106);
      HEAP[$iftmp_541] = $107;
      __label__ = 22;
      break;
     case 22:
      var $108 = HEAP[$iftmp_541];
      if ($108 == 5) {
        __label__ = 26;
        break;
      } else if ($108 == 6) {
        __label__ = 29;
        break;
      } else if ($108 == 7) {
        __label__ = 32;
        break;
      } else if ($108 == 9) {
        __label__ = 35;
        break;
      } else if ($108 == 10) {
        __label__ = 35;
        break;
      } else if ($108 == 15) {
        __label__ = 61;
        break;
      } else if ($108 == 21) {
        __label__ = 35;
        break;
      } else if ($108 == 22) {
        __label__ = 25;
        break;
      } else if ($108 == 24) {
        __label__ = 25;
        break;
      } else if ($108 == 25) {
        __label__ = 25;
        break;
      } else if ($108 == 26) {
        __label__ = 25;
        break;
      } else if ($108 == 27) {
        __label__ = 25;
        break;
      } else if ($108 == 29) {
        __label__ = 23;
        break;
      } else {
        __label__ = 68;
        break;
      }
     case 23:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_namePages + HEAP[HEAP[$ptr_addr] + 1]] << 3) + (HEAP[HEAP[$ptr_addr]] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr]] & 31)) == 0) {
        __label__ = 24;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 24:
      var $133 = HEAP[$nextTokPtr_addr];
      var $134 = HEAP[$ptr_addr];
      HEAP[$133] = $134;
      HEAP[$0] = 0;
      __label__ = 71;
      break;
     case 25:
      
      var $136 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $136;
      __label__ = 69;
      break;
     case 26:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 27;
        break;
      } else {
        __label__ = 28;
        break;
      }
     case 27:
      HEAP[$0] = -2;
      __label__ = 71;
      break;
     case 28:
      var $143 = HEAP[$nextTokPtr_addr];
      var $144 = HEAP[$ptr_addr];
      HEAP[$143] = $144;
      HEAP[$0] = 0;
      __label__ = 71;
      break;
     case 29:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 30;
        break;
      } else {
        __label__ = 31;
        break;
      }
     case 30:
      HEAP[$0] = -2;
      __label__ = 71;
      break;
     case 31:
      var $151 = HEAP[$nextTokPtr_addr];
      var $152 = HEAP[$ptr_addr];
      HEAP[$151] = $152;
      HEAP[$0] = 0;
      __label__ = 71;
      break;
     case 32:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 33;
        break;
      } else {
        __label__ = 34;
        break;
      }
     case 33:
      HEAP[$0] = -2;
      __label__ = 71;
      break;
     case 34:
      var $159 = HEAP[$nextTokPtr_addr];
      var $160 = HEAP[$ptr_addr];
      HEAP[$159] = $160;
      HEAP[$0] = 0;
      __label__ = 71;
      break;
     case 35:
      var $161 = HEAP[$enc_addr];
      var $162 = HEAP[$target];
      var $163 = HEAP[$ptr_addr];
      var $164 = _little2_checkPiTarget($161, $162, $163, $tok);
      
      if ($164 == 0) {
        __label__ = 36;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 36:
      var $166 = HEAP[$nextTokPtr_addr];
      var $167 = HEAP[$ptr_addr];
      HEAP[$166] = $167;
      HEAP[$0] = 0;
      __label__ = 71;
      break;
     case 37:
      
      var $169 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $169;
      __label__ = 59;
      break;
     case 38:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 39;
        break;
      } else {
        __label__ = 40;
        break;
      }
     case 39:
      
      
      
      
      
      
      
      
      var $182 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_549] = $182;
      __label__ = 41;
      break;
     case 40:
      
      
      
      
      
      
      
      
      var $191 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $192 = HEAP[HEAP[$ptr_addr]] & 255;
      var $193 = _unicode_byte_type($191, $192);
      HEAP[$iftmp_549] = $193;
      __label__ = 41;
      break;
     case 41:
      var $194 = HEAP[$iftmp_549];
      if ($194 == 0) {
        __label__ = 51;
        break;
      } else if ($194 == 1) {
        __label__ = 51;
        break;
      } else if ($194 == 5) {
        __label__ = 42;
        break;
      } else if ($194 == 6) {
        __label__ = 45;
        break;
      } else if ($194 == 7) {
        __label__ = 48;
        break;
      } else if ($194 == 8) {
        __label__ = 51;
        break;
      } else if ($194 == 15) {
        __label__ = 52;
        break;
      } else {
        __label__ = 58;
        break;
      }
     case 42:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 43;
        break;
      } else {
        __label__ = 44;
        break;
      }
     case 43:
      HEAP[$0] = -2;
      __label__ = 71;
      break;
     case 44:
      
      var $202 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $202;
      __label__ = 59;
      break;
     case 45:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 46;
        break;
      } else {
        __label__ = 47;
        break;
      }
     case 46:
      HEAP[$0] = -2;
      __label__ = 71;
      break;
     case 47:
      
      var $210 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $210;
      __label__ = 59;
      break;
     case 48:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 49;
        break;
      } else {
        __label__ = 50;
        break;
      }
     case 49:
      HEAP[$0] = -2;
      __label__ = 71;
      break;
     case 50:
      
      var $218 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $218;
      __label__ = 59;
      break;
     case 51:
      var $219 = HEAP[$nextTokPtr_addr];
      var $220 = HEAP[$ptr_addr];
      HEAP[$219] = $220;
      HEAP[$0] = 0;
      __label__ = 71;
      break;
     case 52:
      
      var $222 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $222;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 53;
        break;
      } else {
        __label__ = 54;
        break;
      }
     case 53:
      HEAP[$0] = -1;
      __label__ = 71;
      break;
     case 54:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 55;
        break;
      } else {
        __label__ = 57;
        break;
      }
     case 55:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 62) {
        __label__ = 56;
        break;
      } else {
        __label__ = 57;
        break;
      }
     case 56:
      
      var $235 = HEAP[$ptr_addr] + 2;
      var $236 = HEAP[$nextTokPtr_addr];
      HEAP[$236] = $235;
      var $237 = HEAP[$tok];
      HEAP[$0] = $237;
      __label__ = 71;
      break;
     case 57:
      __label__ = 59;
      break;
     case 58:
      
      var $239 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $239;
      __label__ = 59;
      break;
     case 59:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 38;
        break;
      } else {
        __label__ = 60;
        break;
      }
     case 60:
      HEAP[$0] = -1;
      __label__ = 71;
      break;
     case 61:
      var $243 = HEAP[$enc_addr];
      var $244 = HEAP[$target];
      var $245 = HEAP[$ptr_addr];
      var $246 = _little2_checkPiTarget($243, $244, $245, $tok);
      
      if ($246 == 0) {
        __label__ = 62;
        break;
      } else {
        __label__ = 63;
        break;
      }
     case 62:
      var $248 = HEAP[$nextTokPtr_addr];
      var $249 = HEAP[$ptr_addr];
      HEAP[$248] = $249;
      HEAP[$0] = 0;
      __label__ = 71;
      break;
     case 63:
      
      var $251 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $251;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 64;
        break;
      } else {
        __label__ = 65;
        break;
      }
     case 64:
      HEAP[$0] = -1;
      __label__ = 71;
      break;
     case 65:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 66;
        break;
      } else {
        __label__ = 68;
        break;
      }
     case 66:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 62) {
        __label__ = 67;
        break;
      } else {
        __label__ = 68;
        break;
      }
     case 67:
      
      var $264 = HEAP[$ptr_addr] + 2;
      var $265 = HEAP[$nextTokPtr_addr];
      HEAP[$265] = $264;
      var $266 = HEAP[$tok];
      HEAP[$0] = $266;
      __label__ = 71;
      break;
     case 68:
      var $267 = HEAP[$nextTokPtr_addr];
      var $268 = HEAP[$ptr_addr];
      HEAP[$267] = $268;
      HEAP[$0] = 0;
      __label__ = 71;
      break;
     case 69:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 19;
        break;
      } else {
        __label__ = 70;
        break;
      }
     case 70:
      HEAP[$0] = -1;
      __label__ = 71;
      break;
     case 71:
      var $272 = HEAP[$0];
      HEAP[$retval] = $272;
      __label__ = 72;
      break;
     case 72:
      var $retval71 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval71;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _little2_scanCdataSection($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $i = __stackBase__ + 24;
      
      HEAP[__stackBase__] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 11) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -1;
      __label__ = 9;
      break;
     case 2:
      HEAP[$i] = 0;
      __label__ = 7;
      break;
     case 3:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] != 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 4:
      
      
      
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != HEAP[_CDATA_LSQB_5469 + HEAP[$i]]) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      var $18 = HEAP[$nextTokPtr_addr];
      var $19 = HEAP[$ptr_addr];
      HEAP[$18] = $19;
      HEAP[$0] = 0;
      __label__ = 9;
      break;
     case 6:
      
      var $21 = HEAP[$i] + 1;
      HEAP[$i] = $21;
      
      var $23 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $23;
      __label__ = 7;
      break;
     case 7:
      
      
      if (HEAP[$i] <= 5) {
        __label__ = 3;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 8:
      var $26 = HEAP[$nextTokPtr_addr];
      var $27 = HEAP[$ptr_addr];
      HEAP[$26] = $27;
      HEAP[$0] = 8;
      __label__ = 9;
      break;
     case 9:
      var $28 = HEAP[$0];
      HEAP[$retval] = $28;
      __label__ = 10;
      break;
     case 10:
      var $retval9 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval9;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _little2_cdataSectionTok($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 37;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 37);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_573 = __stackBase__ + 20;
      var $iftmp_565 = __stackBase__ + 24;
      var $iftmp_563 = __stackBase__ + 25;
      var $0 = __stackBase__ + 29;
      var $n = __stackBase__ + 33;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -4;
      __label__ = 58;
      break;
     case 2:
      
      
      
      
      var $8 = HEAP[$end_addr] - HEAP[$ptr_addr];
      HEAP[$n] = $8;
      
      
      
      
      if ((HEAP[$n] & 1 & 255) != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 3:
      
      var $13 = HEAP[$n] & -2;
      HEAP[$n] = $13;
      
      
      if (HEAP[$n] == 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      HEAP[$0] = -1;
      __label__ = 58;
      break;
     case 5:
      
      
      var $18 = HEAP[$ptr_addr] + HEAP[$n];
      HEAP[$end_addr] = $18;
      __label__ = 6;
      break;
     case 6:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      
      
      
      
      
      
      
      
      var $31 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_563] = $31;
      __label__ = 9;
      break;
     case 8:
      
      
      
      
      
      
      
      
      var $40 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $41 = HEAP[HEAP[$ptr_addr]] & 255;
      var $42 = _unicode_byte_type($40, $41);
      HEAP[$iftmp_563] = $42;
      __label__ = 9;
      break;
     case 9:
      var $43 = HEAP[$iftmp_563];
      if ($43 == 0) {
        __label__ = 38;
        break;
      } else if ($43 == 1) {
        __label__ = 38;
        break;
      } else if ($43 == 4) {
        __label__ = 10;
        break;
      } else if ($43 == 5) {
        __label__ = 29;
        break;
      } else if ($43 == 6) {
        __label__ = 32;
        break;
      } else if ($43 == 7) {
        __label__ = 35;
        break;
      } else if ($43 == 8) {
        __label__ = 38;
        break;
      } else if ($43 == 9) {
        __label__ = 20;
        break;
      } else if ($43 == 10) {
        __label__ = 28;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 10:
      
      var $45 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $45;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      HEAP[$0] = -1;
      __label__ = 58;
      break;
     case 12:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] != 0) {
        __label__ = 40;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 13:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 93) {
        __label__ = 40;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 14:
      
      var $58 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $58;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      HEAP[$0] = -1;
      __label__ = 58;
      break;
     case 16:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] != 0) {
        __label__ = 18;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 17:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 62) {
        __label__ = 18;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 18:
      
      var $71 = HEAP[$ptr_addr] + -2;
      HEAP[$ptr_addr] = $71;
      __label__ = 40;
      break;
     case 19:
      
      var $73 = HEAP[$ptr_addr] + 2;
      var $74 = HEAP[$nextTokPtr_addr];
      HEAP[$74] = $73;
      HEAP[$0] = 40;
      __label__ = 58;
      break;
     case 20:
      
      var $76 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $76;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 21;
        break;
      } else {
        __label__ = 22;
        break;
      }
     case 21:
      HEAP[$0] = -1;
      __label__ = 58;
      break;
     case 22:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 23;
        break;
      } else {
        __label__ = 24;
        break;
      }
     case 23:
      
      
      
      
      
      
      
      
      
      var $93 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]] == 10;
      HEAP[$iftmp_565] = $93;
      __label__ = 25;
      break;
     case 24:
      
      
      
      
      
      
      
      
      var $102 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $103 = HEAP[HEAP[$ptr_addr]] & 255;
      var $104 = _unicode_byte_type($102, $103);
      
      var $106 = $104 == 10;
      HEAP[$iftmp_565] = $106;
      __label__ = 25;
      break;
     case 25:
      
      
      if (HEAP[$iftmp_565] != 0) {
        __label__ = 26;
        break;
      } else {
        __label__ = 27;
        break;
      }
     case 26:
      
      var $109 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $109;
      __label__ = 27;
      break;
     case 27:
      var $110 = HEAP[$nextTokPtr_addr];
      var $111 = HEAP[$ptr_addr];
      HEAP[$110] = $111;
      HEAP[$0] = 7;
      __label__ = 58;
      break;
     case 28:
      
      var $113 = HEAP[$ptr_addr] + 2;
      var $114 = HEAP[$nextTokPtr_addr];
      HEAP[$114] = $113;
      HEAP[$0] = 7;
      __label__ = 58;
      break;
     case 29:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 30;
        break;
      } else {
        __label__ = 31;
        break;
      }
     case 30:
      HEAP[$0] = -2;
      __label__ = 58;
      break;
     case 31:
      
      var $122 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $122;
      __label__ = 40;
      break;
     case 32:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 33;
        break;
      } else {
        __label__ = 34;
        break;
      }
     case 33:
      HEAP[$0] = -2;
      __label__ = 58;
      break;
     case 34:
      
      var $130 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $130;
      __label__ = 40;
      break;
     case 35:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 36;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 36:
      HEAP[$0] = -2;
      __label__ = 58;
      break;
     case 37:
      
      var $138 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $138;
      __label__ = 40;
      break;
     case 38:
      var $139 = HEAP[$nextTokPtr_addr];
      var $140 = HEAP[$ptr_addr];
      HEAP[$139] = $140;
      HEAP[$0] = 0;
      __label__ = 58;
      break;
     case 39:
      
      var $142 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $142;
      __label__ = 40;
      break;
     case 40:
      __label__ = 56;
      break;
     case 41:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 42;
        break;
      } else {
        __label__ = 43;
        break;
      }
     case 42:
      
      
      
      
      
      
      
      
      var $155 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_573] = $155;
      __label__ = 44;
      break;
     case 43:
      
      
      
      
      
      
      
      
      var $164 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $165 = HEAP[HEAP[$ptr_addr]] & 255;
      var $166 = _unicode_byte_type($164, $165);
      HEAP[$iftmp_573] = $166;
      __label__ = 44;
      break;
     case 44:
      var $167 = HEAP[$iftmp_573];
      if ($167 == 0) {
        __label__ = 54;
        break;
      } else if ($167 == 1) {
        __label__ = 54;
        break;
      } else if ($167 == 4) {
        __label__ = 54;
        break;
      } else if ($167 == 5) {
        __label__ = 45;
        break;
      } else if ($167 == 6) {
        __label__ = 48;
        break;
      } else if ($167 == 7) {
        __label__ = 51;
        break;
      } else if ($167 == 8) {
        __label__ = 54;
        break;
      } else if ($167 == 9) {
        __label__ = 54;
        break;
      } else if ($167 == 10) {
        __label__ = 54;
        break;
      } else {
        __label__ = 55;
        break;
      }
     case 45:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 46;
        break;
      } else {
        __label__ = 47;
        break;
      }
     case 46:
      var $174 = HEAP[$nextTokPtr_addr];
      var $175 = HEAP[$ptr_addr];
      HEAP[$174] = $175;
      HEAP[$0] = 6;
      __label__ = 58;
      break;
     case 47:
      
      var $177 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $177;
      __label__ = 56;
      break;
     case 48:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 49;
        break;
      } else {
        __label__ = 50;
        break;
      }
     case 49:
      var $184 = HEAP[$nextTokPtr_addr];
      var $185 = HEAP[$ptr_addr];
      HEAP[$184] = $185;
      HEAP[$0] = 6;
      __label__ = 58;
      break;
     case 50:
      
      var $187 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $187;
      __label__ = 56;
      break;
     case 51:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 52;
        break;
      } else {
        __label__ = 53;
        break;
      }
     case 52:
      var $194 = HEAP[$nextTokPtr_addr];
      var $195 = HEAP[$ptr_addr];
      HEAP[$194] = $195;
      HEAP[$0] = 6;
      __label__ = 58;
      break;
     case 53:
      
      var $197 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $197;
      __label__ = 56;
      break;
     case 54:
      var $198 = HEAP[$nextTokPtr_addr];
      var $199 = HEAP[$ptr_addr];
      HEAP[$198] = $199;
      HEAP[$0] = 6;
      __label__ = 58;
      break;
     case 55:
      
      var $201 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $201;
      __label__ = 56;
      break;
     case 56:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 41;
        break;
      } else {
        __label__ = 57;
        break;
      }
     case 57:
      var $205 = HEAP[$nextTokPtr_addr];
      var $206 = HEAP[$ptr_addr];
      HEAP[$205] = $206;
      HEAP[$0] = 6;
      __label__ = 58;
      break;
     case 58:
      var $207 = HEAP[$0];
      HEAP[$retval] = $207;
      __label__ = 59;
      break;
     case 59:
      var $retval59 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval59;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _little2_scanEndTag($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 36;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_597 = __stackBase__ + 20;
      var $iftmp_589 = __stackBase__ + 24;
      var $iftmp_581 = __stackBase__ + 28;
      var $0 = __stackBase__ + 32;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -1;
      __label__ = 50;
      break;
     case 2:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      
      
      
      
      
      
      
      var $16 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_581] = $16;
      __label__ = 5;
      break;
     case 4:
      
      
      
      
      
      
      
      
      var $25 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $26 = HEAP[HEAP[$ptr_addr]] & 255;
      var $27 = _unicode_byte_type($25, $26);
      HEAP[$iftmp_581] = $27;
      __label__ = 5;
      break;
     case 5:
      var $28 = HEAP[$iftmp_581];
      if ($28 == 5) {
        __label__ = 9;
        break;
      } else if ($28 == 6) {
        __label__ = 12;
        break;
      } else if ($28 == 7) {
        __label__ = 15;
        break;
      } else if ($28 == 22) {
        __label__ = 8;
        break;
      } else if ($28 == 24) {
        __label__ = 8;
        break;
      } else if ($28 == 29) {
        __label__ = 6;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 6:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_nmstrtPages + HEAP[HEAP[$ptr_addr] + 1]] << 3) + (HEAP[HEAP[$ptr_addr]] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr]] & 31)) == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      var $53 = HEAP[$nextTokPtr_addr];
      var $54 = HEAP[$ptr_addr];
      HEAP[$53] = $54;
      HEAP[$0] = 0;
      __label__ = 50;
      break;
     case 8:
      
      var $56 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $56;
      __label__ = 48;
      break;
     case 9:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      HEAP[$0] = -2;
      __label__ = 50;
      break;
     case 11:
      var $63 = HEAP[$nextTokPtr_addr];
      var $64 = HEAP[$ptr_addr];
      HEAP[$63] = $64;
      HEAP[$0] = 0;
      __label__ = 50;
      break;
     case 12:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      HEAP[$0] = -2;
      __label__ = 50;
      break;
     case 14:
      var $71 = HEAP[$nextTokPtr_addr];
      var $72 = HEAP[$ptr_addr];
      HEAP[$71] = $72;
      HEAP[$0] = 0;
      __label__ = 50;
      break;
     case 15:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      HEAP[$0] = -2;
      __label__ = 50;
      break;
     case 17:
      var $79 = HEAP[$nextTokPtr_addr];
      var $80 = HEAP[$ptr_addr];
      HEAP[$79] = $80;
      HEAP[$0] = 0;
      __label__ = 50;
      break;
     case 18:
      var $81 = HEAP[$nextTokPtr_addr];
      var $82 = HEAP[$ptr_addr];
      HEAP[$81] = $82;
      HEAP[$0] = 0;
      __label__ = 50;
      break;
     case 19:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 20;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 20:
      
      
      
      
      
      
      
      
      var $95 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_589] = $95;
      __label__ = 22;
      break;
     case 21:
      
      
      
      
      
      
      
      
      var $104 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $105 = HEAP[HEAP[$ptr_addr]] & 255;
      var $106 = _unicode_byte_type($104, $105);
      HEAP[$iftmp_589] = $106;
      __label__ = 22;
      break;
     case 22:
      var $107 = HEAP[$iftmp_589];
      if ($107 == 5) {
        __label__ = 26;
        break;
      } else if ($107 == 6) {
        __label__ = 29;
        break;
      } else if ($107 == 7) {
        __label__ = 32;
        break;
      } else if ($107 == 9) {
        __label__ = 35;
        break;
      } else if ($107 == 10) {
        __label__ = 35;
        break;
      } else if ($107 == 11) {
        __label__ = 46;
        break;
      } else if ($107 == 21) {
        __label__ = 35;
        break;
      } else if ($107 == 22) {
        __label__ = 25;
        break;
      } else if ($107 == 23) {
        __label__ = 45;
        break;
      } else if ($107 == 24) {
        __label__ = 25;
        break;
      } else if ($107 == 25) {
        __label__ = 25;
        break;
      } else if ($107 == 26) {
        __label__ = 25;
        break;
      } else if ($107 == 27) {
        __label__ = 25;
        break;
      } else if ($107 == 29) {
        __label__ = 23;
        break;
      } else {
        __label__ = 47;
        break;
      }
     case 23:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_namePages + HEAP[HEAP[$ptr_addr] + 1]] << 3) + (HEAP[HEAP[$ptr_addr]] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr]] & 31)) == 0) {
        __label__ = 24;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 24:
      var $132 = HEAP[$nextTokPtr_addr];
      var $133 = HEAP[$ptr_addr];
      HEAP[$132] = $133;
      HEAP[$0] = 0;
      __label__ = 50;
      break;
     case 25:
      
      var $135 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $135;
      __label__ = 48;
      break;
     case 26:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 27;
        break;
      } else {
        __label__ = 28;
        break;
      }
     case 27:
      HEAP[$0] = -2;
      __label__ = 50;
      break;
     case 28:
      var $142 = HEAP[$nextTokPtr_addr];
      var $143 = HEAP[$ptr_addr];
      HEAP[$142] = $143;
      HEAP[$0] = 0;
      __label__ = 50;
      break;
     case 29:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 30;
        break;
      } else {
        __label__ = 31;
        break;
      }
     case 30:
      HEAP[$0] = -2;
      __label__ = 50;
      break;
     case 31:
      var $150 = HEAP[$nextTokPtr_addr];
      var $151 = HEAP[$ptr_addr];
      HEAP[$150] = $151;
      HEAP[$0] = 0;
      __label__ = 50;
      break;
     case 32:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 33;
        break;
      } else {
        __label__ = 34;
        break;
      }
     case 33:
      HEAP[$0] = -2;
      __label__ = 50;
      break;
     case 34:
      var $158 = HEAP[$nextTokPtr_addr];
      var $159 = HEAP[$ptr_addr];
      HEAP[$158] = $159;
      HEAP[$0] = 0;
      __label__ = 50;
      break;
     case 35:
      
      var $161 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $161;
      __label__ = 43;
      break;
     case 36:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 37;
        break;
      } else {
        __label__ = 38;
        break;
      }
     case 37:
      
      
      
      
      
      
      
      
      var $174 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_597] = $174;
      __label__ = 39;
      break;
     case 38:
      
      
      
      
      
      
      
      
      var $183 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $184 = HEAP[HEAP[$ptr_addr]] & 255;
      var $185 = _unicode_byte_type($183, $184);
      HEAP[$iftmp_597] = $185;
      __label__ = 39;
      break;
     case 39:
      var $186 = HEAP[$iftmp_597];
      if ($186 == 9) {
        __label__ = 40;
        break;
      } else if ($186 == 10) {
        __label__ = 40;
        break;
      } else if ($186 == 11) {
        __label__ = 41;
        break;
      } else if ($186 == 21) {
        __label__ = 40;
        break;
      } else {
        __label__ = 42;
        break;
      }
     case 40:
      
      var $188 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $188;
      __label__ = 43;
      break;
     case 41:
      
      var $190 = HEAP[$ptr_addr] + 2;
      var $191 = HEAP[$nextTokPtr_addr];
      HEAP[$191] = $190;
      HEAP[$0] = 5;
      __label__ = 50;
      break;
     case 42:
      var $192 = HEAP[$nextTokPtr_addr];
      var $193 = HEAP[$ptr_addr];
      HEAP[$192] = $193;
      HEAP[$0] = 0;
      __label__ = 50;
      break;
     case 43:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 36;
        break;
      } else {
        __label__ = 44;
        break;
      }
     case 44:
      HEAP[$0] = -1;
      __label__ = 50;
      break;
     case 45:
      
      var $198 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $198;
      __label__ = 48;
      break;
     case 46:
      
      var $200 = HEAP[$ptr_addr] + 2;
      var $201 = HEAP[$nextTokPtr_addr];
      HEAP[$201] = $200;
      HEAP[$0] = 5;
      __label__ = 50;
      break;
     case 47:
      var $202 = HEAP[$nextTokPtr_addr];
      var $203 = HEAP[$ptr_addr];
      HEAP[$202] = $203;
      HEAP[$0] = 0;
      __label__ = 50;
      break;
     case 48:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 19;
        break;
      } else {
        __label__ = 49;
        break;
      }
     case 49:
      HEAP[$0] = -1;
      __label__ = 50;
      break;
     case 50:
      var $207 = HEAP[$0];
      HEAP[$retval] = $207;
      __label__ = 51;
      break;
     case 51:
      var $retval50 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval50;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _little2_scanHexCharRef($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 32;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_601 = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      var $iftmp_599 = __stackBase__ + 28;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 1:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      
      
      
      
      
      
      
      var $16 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_599] = $16;
      __label__ = 4;
      break;
     case 3:
      
      
      
      
      
      
      
      
      var $25 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $26 = HEAP[HEAP[$ptr_addr]] & 255;
      var $27 = _unicode_byte_type($25, $26);
      HEAP[$iftmp_599] = $27;
      __label__ = 4;
      break;
     case 4:
      var $28 = HEAP[$iftmp_599];
      if ($28 == 24) {
        __label__ = 5;
        break;
      } else if ($28 == 25) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      
      var $30 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $30;
      __label__ = 14;
      break;
     case 6:
      var $31 = HEAP[$nextTokPtr_addr];
      var $32 = HEAP[$ptr_addr];
      HEAP[$31] = $32;
      HEAP[$0] = 0;
      __label__ = 16;
      break;
     case 7:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      
      
      
      
      
      
      
      
      var $45 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_601] = $45;
      __label__ = 10;
      break;
     case 9:
      
      
      
      
      
      
      
      
      var $54 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $55 = HEAP[HEAP[$ptr_addr]] & 255;
      var $56 = _unicode_byte_type($54, $55);
      HEAP[$iftmp_601] = $56;
      __label__ = 10;
      break;
     case 10:
      var $57 = HEAP[$iftmp_601];
      if ($57 == 18) {
        __label__ = 12;
        break;
      } else if ($57 == 24) {
        __label__ = 11;
        break;
      } else if ($57 == 25) {
        __label__ = 11;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 11:
      
      var $59 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $59;
      __label__ = 14;
      break;
     case 12:
      
      var $61 = HEAP[$ptr_addr] + 2;
      var $62 = HEAP[$nextTokPtr_addr];
      HEAP[$62] = $61;
      HEAP[$0] = 10;
      __label__ = 16;
      break;
     case 13:
      var $63 = HEAP[$nextTokPtr_addr];
      var $64 = HEAP[$ptr_addr];
      HEAP[$63] = $64;
      HEAP[$0] = 0;
      __label__ = 16;
      break;
     case 14:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 7;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 15:
      HEAP[$0] = -1;
      __label__ = 16;
      break;
     case 16:
      var $68 = HEAP[$0];
      HEAP[$retval] = $68;
      __label__ = 17;
      break;
     case 17:
      var $retval16 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval16;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _little2_scanCharRef($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 32;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_605 = __stackBase__ + 20;
      var $iftmp_603 = __stackBase__ + 24;
      var $0 = __stackBase__ + 28;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 1:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 2:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 120) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      var $13 = HEAP[$ptr_addr] + 2;
      var $14 = HEAP[$enc_addr];
      var $15 = HEAP[$end_addr];
      var $16 = HEAP[$nextTokPtr_addr];
      var $17 = _little2_scanHexCharRef($14, $13, $15, $16);
      HEAP[$0] = $17;
      __label__ = 19;
      break;
     case 4:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      
      
      
      
      
      
      
      
      var $30 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_603] = $30;
      __label__ = 7;
      break;
     case 6:
      
      
      
      
      
      
      
      
      var $39 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $40 = HEAP[HEAP[$ptr_addr]] & 255;
      var $41 = _unicode_byte_type($39, $40);
      HEAP[$iftmp_603] = $41;
      __label__ = 7;
      break;
     case 7:
      
      if (HEAP[$iftmp_603] == 25) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      
      var $44 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $44;
      __label__ = 17;
      break;
     case 9:
      var $45 = HEAP[$nextTokPtr_addr];
      var $46 = HEAP[$ptr_addr];
      HEAP[$45] = $46;
      HEAP[$0] = 0;
      __label__ = 19;
      break;
     case 10:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      
      
      
      
      
      
      
      
      var $59 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_605] = $59;
      __label__ = 13;
      break;
     case 12:
      
      
      
      
      
      
      
      
      var $68 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $69 = HEAP[HEAP[$ptr_addr]] & 255;
      var $70 = _unicode_byte_type($68, $69);
      HEAP[$iftmp_605] = $70;
      __label__ = 13;
      break;
     case 13:
      var $71 = HEAP[$iftmp_605];
      if ($71 == 18) {
        __label__ = 15;
        break;
      } else if ($71 == 25) {
        __label__ = 14;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 14:
      
      var $73 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $73;
      __label__ = 17;
      break;
     case 15:
      
      var $75 = HEAP[$ptr_addr] + 2;
      var $76 = HEAP[$nextTokPtr_addr];
      HEAP[$76] = $75;
      HEAP[$0] = 10;
      __label__ = 19;
      break;
     case 16:
      var $77 = HEAP[$nextTokPtr_addr];
      var $78 = HEAP[$ptr_addr];
      HEAP[$77] = $78;
      HEAP[$0] = 0;
      __label__ = 19;
      break;
     case 17:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 10;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 18:
      HEAP[$0] = -1;
      __label__ = 19;
      break;
     case 19:
      var $82 = HEAP[$0];
      HEAP[$retval] = $82;
      __label__ = 20;
      break;
     case 20:
      var $retval19 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval19;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _little2_scanRef($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 32;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_615 = __stackBase__ + 20;
      var $iftmp_607 = __stackBase__ + 24;
      var $0 = __stackBase__ + 28;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -1;
      __label__ = 40;
      break;
     case 2:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      
      
      
      
      
      
      
      var $16 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_607] = $16;
      __label__ = 5;
      break;
     case 4:
      
      
      
      
      
      
      
      
      var $25 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $26 = HEAP[HEAP[$ptr_addr]] & 255;
      var $27 = _unicode_byte_type($25, $26);
      HEAP[$iftmp_607] = $27;
      __label__ = 5;
      break;
     case 5:
      var $28 = HEAP[$iftmp_607];
      if ($28 == 5) {
        __label__ = 9;
        break;
      } else if ($28 == 6) {
        __label__ = 12;
        break;
      } else if ($28 == 7) {
        __label__ = 15;
        break;
      } else if ($28 == 19) {
        __label__ = 18;
        break;
      } else if ($28 == 22) {
        __label__ = 8;
        break;
      } else if ($28 == 24) {
        __label__ = 8;
        break;
      } else if ($28 == 29) {
        __label__ = 6;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 6:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_nmstrtPages + HEAP[HEAP[$ptr_addr] + 1]] << 3) + (HEAP[HEAP[$ptr_addr]] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr]] & 31)) == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      var $53 = HEAP[$nextTokPtr_addr];
      var $54 = HEAP[$ptr_addr];
      HEAP[$53] = $54;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 8:
      
      var $56 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $56;
      __label__ = 38;
      break;
     case 9:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      HEAP[$0] = -2;
      __label__ = 40;
      break;
     case 11:
      var $63 = HEAP[$nextTokPtr_addr];
      var $64 = HEAP[$ptr_addr];
      HEAP[$63] = $64;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 12:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      HEAP[$0] = -2;
      __label__ = 40;
      break;
     case 14:
      var $71 = HEAP[$nextTokPtr_addr];
      var $72 = HEAP[$ptr_addr];
      HEAP[$71] = $72;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 15:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      HEAP[$0] = -2;
      __label__ = 40;
      break;
     case 17:
      var $79 = HEAP[$nextTokPtr_addr];
      var $80 = HEAP[$ptr_addr];
      HEAP[$79] = $80;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 18:
      
      var $82 = HEAP[$ptr_addr] + 2;
      var $83 = HEAP[$enc_addr];
      var $84 = HEAP[$end_addr];
      var $85 = HEAP[$nextTokPtr_addr];
      var $86 = _little2_scanCharRef($83, $82, $84, $85);
      HEAP[$0] = $86;
      __label__ = 40;
      break;
     case 19:
      var $87 = HEAP[$nextTokPtr_addr];
      var $88 = HEAP[$ptr_addr];
      HEAP[$87] = $88;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 20:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 21;
        break;
      } else {
        __label__ = 22;
        break;
      }
     case 21:
      
      
      
      
      
      
      
      
      var $101 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_615] = $101;
      __label__ = 23;
      break;
     case 22:
      
      
      
      
      
      
      
      
      var $110 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $111 = HEAP[HEAP[$ptr_addr]] & 255;
      var $112 = _unicode_byte_type($110, $111);
      HEAP[$iftmp_615] = $112;
      __label__ = 23;
      break;
     case 23:
      var $113 = HEAP[$iftmp_615];
      if ($113 == 5) {
        __label__ = 27;
        break;
      } else if ($113 == 6) {
        __label__ = 30;
        break;
      } else if ($113 == 7) {
        __label__ = 33;
        break;
      } else if ($113 == 18) {
        __label__ = 36;
        break;
      } else if ($113 == 22) {
        __label__ = 26;
        break;
      } else if ($113 == 24) {
        __label__ = 26;
        break;
      } else if ($113 == 25) {
        __label__ = 26;
        break;
      } else if ($113 == 26) {
        __label__ = 26;
        break;
      } else if ($113 == 27) {
        __label__ = 26;
        break;
      } else if ($113 == 29) {
        __label__ = 24;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 24:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_namePages + HEAP[HEAP[$ptr_addr] + 1]] << 3) + (HEAP[HEAP[$ptr_addr]] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr]] & 31)) == 0) {
        __label__ = 25;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 25:
      var $138 = HEAP[$nextTokPtr_addr];
      var $139 = HEAP[$ptr_addr];
      HEAP[$138] = $139;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 26:
      
      var $141 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $141;
      __label__ = 38;
      break;
     case 27:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 28;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 28:
      HEAP[$0] = -2;
      __label__ = 40;
      break;
     case 29:
      var $148 = HEAP[$nextTokPtr_addr];
      var $149 = HEAP[$ptr_addr];
      HEAP[$148] = $149;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 30:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 31;
        break;
      } else {
        __label__ = 32;
        break;
      }
     case 31:
      HEAP[$0] = -2;
      __label__ = 40;
      break;
     case 32:
      var $156 = HEAP[$nextTokPtr_addr];
      var $157 = HEAP[$ptr_addr];
      HEAP[$156] = $157;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 33:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 34;
        break;
      } else {
        __label__ = 35;
        break;
      }
     case 34:
      HEAP[$0] = -2;
      __label__ = 40;
      break;
     case 35:
      var $164 = HEAP[$nextTokPtr_addr];
      var $165 = HEAP[$ptr_addr];
      HEAP[$164] = $165;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 36:
      
      var $167 = HEAP[$ptr_addr] + 2;
      var $168 = HEAP[$nextTokPtr_addr];
      HEAP[$168] = $167;
      HEAP[$0] = 9;
      __label__ = 40;
      break;
     case 37:
      var $169 = HEAP[$nextTokPtr_addr];
      var $170 = HEAP[$ptr_addr];
      HEAP[$169] = $170;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 38:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 20;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 39:
      HEAP[$0] = -1;
      __label__ = 40;
      break;
     case 40:
      var $174 = HEAP[$0];
      HEAP[$retval] = $174;
      __label__ = 41;
      break;
     case 41:
      var $retval40 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval40;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _little2_scanAtts($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 72;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 72);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_736 = __stackBase__ + 20;
      var $iftmp_727 = __stackBase__ + 24;
      var $iftmp_699 = __stackBase__ + 28;
      var $iftmp_690 = __stackBase__ + 32;
      var $iftmp_681 = __stackBase__ + 36;
      var $iftmp_652 = __stackBase__ + 40;
      var $0 = __stackBase__ + 44;
      var $iftmp_623 = __stackBase__ + 48;
      var $hadColon = __stackBase__ + 52;
      var $t = __stackBase__ + 56;
      var $open = __stackBase__ + 60;
      var $t59 = __stackBase__ + 64;
      var $tok = __stackBase__ + 68;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      HEAP[$hadColon] = 0;
      __label__ = 122;
      break;
     case 1:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      
      
      
      
      
      
      
      var $13 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_623] = $13;
      __label__ = 4;
      break;
     case 3:
      
      
      
      
      
      
      
      
      var $22 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $23 = HEAP[HEAP[$ptr_addr]] & 255;
      var $24 = _unicode_byte_type($22, $23);
      HEAP[$iftmp_623] = $24;
      __label__ = 4;
      break;
     case 4:
      var $25 = HEAP[$iftmp_623];
      if ($25 == 5) {
        __label__ = 8;
        break;
      } else if ($25 == 6) {
        __label__ = 11;
        break;
      } else if ($25 == 7) {
        __label__ = 14;
        break;
      } else if ($25 == 9) {
        __label__ = 38;
        break;
      } else if ($25 == 10) {
        __label__ = 38;
        break;
      } else if ($25 == 14) {
        __label__ = 47;
        break;
      } else if ($25 == 21) {
        __label__ = 38;
        break;
      } else if ($25 == 22) {
        __label__ = 7;
        break;
      } else if ($25 == 23) {
        __label__ = 17;
        break;
      } else if ($25 == 24) {
        __label__ = 7;
        break;
      } else if ($25 == 25) {
        __label__ = 7;
        break;
      } else if ($25 == 26) {
        __label__ = 7;
        break;
      } else if ($25 == 27) {
        __label__ = 7;
        break;
      } else if ($25 == 29) {
        __label__ = 5;
        break;
      } else {
        __label__ = 121;
        break;
      }
     case 5:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_namePages + HEAP[HEAP[$ptr_addr] + 1]] << 3) + (HEAP[HEAP[$ptr_addr]] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr]] & 31)) == 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      var $50 = HEAP[$ptr_addr];
      var $51 = HEAP[$nextTokPtr_addr];
      HEAP[$51] = $50;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 7:
      
      var $53 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $53;
      __label__ = 122;
      break;
     case 8:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      HEAP[$0] = -2;
      __label__ = 124;
      break;
     case 10:
      var $60 = HEAP[$ptr_addr];
      var $61 = HEAP[$nextTokPtr_addr];
      HEAP[$61] = $60;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 11:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      HEAP[$0] = -2;
      __label__ = 124;
      break;
     case 13:
      var $68 = HEAP[$ptr_addr];
      var $69 = HEAP[$nextTokPtr_addr];
      HEAP[$69] = $68;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 14:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      HEAP[$0] = -2;
      __label__ = 124;
      break;
     case 16:
      var $76 = HEAP[$ptr_addr];
      var $77 = HEAP[$nextTokPtr_addr];
      HEAP[$77] = $76;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 17:
      
      
      if (HEAP[$hadColon] != 0) {
        __label__ = 18;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 18:
      var $80 = HEAP[$ptr_addr];
      var $81 = HEAP[$nextTokPtr_addr];
      HEAP[$81] = $80;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 19:
      HEAP[$hadColon] = 1;
      
      var $83 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $83;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 20;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 20:
      HEAP[$0] = -1;
      __label__ = 124;
      break;
     case 21:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 22;
        break;
      } else {
        __label__ = 23;
        break;
      }
     case 22:
      
      
      
      
      
      
      
      
      var $99 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_652] = $99;
      __label__ = 24;
      break;
     case 23:
      
      
      
      
      
      
      
      
      var $108 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $109 = HEAP[HEAP[$ptr_addr]] & 255;
      var $110 = _unicode_byte_type($108, $109);
      HEAP[$iftmp_652] = $110;
      __label__ = 24;
      break;
     case 24:
      var $111 = HEAP[$iftmp_652];
      if ($111 == 5) {
        __label__ = 28;
        break;
      } else if ($111 == 6) {
        __label__ = 31;
        break;
      } else if ($111 == 7) {
        __label__ = 34;
        break;
      } else if ($111 == 22) {
        __label__ = 27;
        break;
      } else if ($111 == 24) {
        __label__ = 27;
        break;
      } else if ($111 == 29) {
        __label__ = 25;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 25:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_nmstrtPages + HEAP[HEAP[$ptr_addr] + 1]] << 3) + (HEAP[HEAP[$ptr_addr]] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr]] & 31)) == 0) {
        __label__ = 26;
        break;
      } else {
        __label__ = 27;
        break;
      }
     case 26:
      var $136 = HEAP[$ptr_addr];
      var $137 = HEAP[$nextTokPtr_addr];
      HEAP[$137] = $136;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 27:
      
      var $139 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $139;
      __label__ = 122;
      break;
     case 28:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 29;
        break;
      } else {
        __label__ = 30;
        break;
      }
     case 29:
      HEAP[$0] = -2;
      __label__ = 124;
      break;
     case 30:
      var $146 = HEAP[$ptr_addr];
      var $147 = HEAP[$nextTokPtr_addr];
      HEAP[$147] = $146;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 31:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 32;
        break;
      } else {
        __label__ = 33;
        break;
      }
     case 32:
      HEAP[$0] = -2;
      __label__ = 124;
      break;
     case 33:
      var $154 = HEAP[$ptr_addr];
      var $155 = HEAP[$nextTokPtr_addr];
      HEAP[$155] = $154;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 34:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 35;
        break;
      } else {
        __label__ = 36;
        break;
      }
     case 35:
      HEAP[$0] = -2;
      __label__ = 124;
      break;
     case 36:
      var $162 = HEAP[$ptr_addr];
      var $163 = HEAP[$nextTokPtr_addr];
      HEAP[$163] = $162;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 37:
      var $164 = HEAP[$ptr_addr];
      var $165 = HEAP[$nextTokPtr_addr];
      HEAP[$165] = $164;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 38:
      
      var $167 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $167;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 39;
        break;
      } else {
        __label__ = 40;
        break;
      }
     case 39:
      HEAP[$0] = -1;
      __label__ = 124;
      break;
     case 40:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 41;
        break;
      } else {
        __label__ = 42;
        break;
      }
     case 41:
      
      
      
      
      
      
      
      
      var $183 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_681] = $183;
      __label__ = 43;
      break;
     case 42:
      
      
      
      
      
      
      
      
      var $192 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $193 = HEAP[HEAP[$ptr_addr]] & 255;
      var $194 = _unicode_byte_type($192, $193);
      HEAP[$iftmp_681] = $194;
      __label__ = 43;
      break;
     case 43:
      var $195 = HEAP[$iftmp_681];
      HEAP[$t] = $195;
      
      
      if (HEAP[$t] == 14) {
        __label__ = 47;
        break;
      } else {
        __label__ = 44;
        break;
      }
     case 44:
      var $198 = HEAP[$t];
      if ($198 == 9) {
        __label__ = 45;
        break;
      } else if ($198 == 10) {
        __label__ = 45;
        break;
      } else if ($198 == 21) {
        __label__ = 45;
        break;
      } else {
        __label__ = 46;
        break;
      }
     case 45:
      __label__ = 38;
      break;
     case 46:
      var $199 = HEAP[$ptr_addr];
      var $200 = HEAP[$nextTokPtr_addr];
      HEAP[$200] = $199;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 47:
      HEAP[$hadColon] = 0;
      __label__ = 48;
      break;
     case 48:
      
      var $202 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $202;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 49;
        break;
      } else {
        __label__ = 50;
        break;
      }
     case 49:
      HEAP[$0] = -1;
      __label__ = 124;
      break;
     case 50:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 51;
        break;
      } else {
        __label__ = 52;
        break;
      }
     case 51:
      
      
      
      
      
      
      
      
      var $218 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_690] = $218;
      __label__ = 53;
      break;
     case 52:
      
      
      
      
      
      
      
      
      var $227 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $228 = HEAP[HEAP[$ptr_addr]] & 255;
      var $229 = _unicode_byte_type($227, $228);
      HEAP[$iftmp_690] = $229;
      __label__ = 53;
      break;
     case 53:
      var $230 = HEAP[$iftmp_690];
      HEAP[$open] = $230;
      
      
      if (HEAP[$open] == 12) {
        __label__ = 58;
        break;
      } else {
        __label__ = 54;
        break;
      }
     case 54:
      
      
      if (HEAP[$open] == 13) {
        __label__ = 58;
        break;
      } else {
        __label__ = 55;
        break;
      }
     case 55:
      var $235 = HEAP[$open];
      if ($235 == 9) {
        __label__ = 56;
        break;
      } else if ($235 == 10) {
        __label__ = 56;
        break;
      } else if ($235 == 21) {
        __label__ = 56;
        break;
      } else {
        __label__ = 57;
        break;
      }
     case 56:
      __label__ = 48;
      break;
     case 57:
      var $236 = HEAP[$ptr_addr];
      var $237 = HEAP[$nextTokPtr_addr];
      HEAP[$237] = $236;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 58:
      
      var $239 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $239;
      __label__ = 59;
      break;
     case 59:
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 60;
        break;
      } else {
        __label__ = 61;
        break;
      }
     case 60:
      HEAP[$0] = -1;
      __label__ = 124;
      break;
     case 61:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 62;
        break;
      } else {
        __label__ = 63;
        break;
      }
     case 62:
      
      
      
      
      
      
      
      
      var $255 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_699] = $255;
      __label__ = 64;
      break;
     case 63:
      
      
      
      
      
      
      
      
      var $264 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $265 = HEAP[HEAP[$ptr_addr]] & 255;
      var $266 = _unicode_byte_type($264, $265);
      HEAP[$iftmp_699] = $266;
      __label__ = 64;
      break;
     case 64:
      var $267 = HEAP[$iftmp_699];
      HEAP[$t59] = $267;
      
      
      
      if (HEAP[$t59] == HEAP[$open]) {
        __label__ = 84;
        break;
      } else {
        __label__ = 65;
        break;
      }
     case 65:
      var $271 = HEAP[$t59];
      if ($271 == 0) {
        __label__ = 75;
        break;
      } else if ($271 == 1) {
        __label__ = 75;
        break;
      } else if ($271 == 2) {
        __label__ = 81;
        break;
      } else if ($271 == 3) {
        __label__ = 76;
        break;
      } else if ($271 == 5) {
        __label__ = 66;
        break;
      } else if ($271 == 6) {
        __label__ = 69;
        break;
      } else if ($271 == 7) {
        __label__ = 72;
        break;
      } else if ($271 == 8) {
        __label__ = 75;
        break;
      } else {
        __label__ = 82;
        break;
      }
     case 66:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 67;
        break;
      } else {
        __label__ = 68;
        break;
      }
     case 67:
      HEAP[$0] = -2;
      __label__ = 124;
      break;
     case 68:
      
      var $279 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $279;
      __label__ = 83;
      break;
     case 69:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 70;
        break;
      } else {
        __label__ = 71;
        break;
      }
     case 70:
      HEAP[$0] = -2;
      __label__ = 124;
      break;
     case 71:
      
      var $287 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $287;
      __label__ = 83;
      break;
     case 72:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 73;
        break;
      } else {
        __label__ = 74;
        break;
      }
     case 73:
      HEAP[$0] = -2;
      __label__ = 124;
      break;
     case 74:
      
      var $295 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $295;
      __label__ = 83;
      break;
     case 75:
      var $296 = HEAP[$ptr_addr];
      var $297 = HEAP[$nextTokPtr_addr];
      HEAP[$297] = $296;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 76:
      
      var $299 = HEAP[$ptr_addr] + 2;
      var $300 = HEAP[$enc_addr];
      var $301 = HEAP[$end_addr];
      var $302 = _little2_scanRef($300, $299, $301, $ptr_addr);
      HEAP[$tok] = $302;
      
      
      if (HEAP[$tok] <= 0) {
        __label__ = 77;
        break;
      } else {
        __label__ = 80;
        break;
      }
     case 77:
      
      
      if (HEAP[$tok] == 0) {
        __label__ = 78;
        break;
      } else {
        __label__ = 79;
        break;
      }
     case 78:
      var $307 = HEAP[$ptr_addr];
      var $308 = HEAP[$nextTokPtr_addr];
      HEAP[$308] = $307;
      __label__ = 79;
      break;
     case 79:
      var $309 = HEAP[$tok];
      HEAP[$0] = $309;
      __label__ = 124;
      break;
     case 80:
      __label__ = 83;
      break;
     case 81:
      var $310 = HEAP[$ptr_addr];
      var $311 = HEAP[$nextTokPtr_addr];
      HEAP[$311] = $310;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 82:
      
      var $313 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $313;
      __label__ = 83;
      break;
     case 83:
      __label__ = 59;
      break;
     case 84:
      
      var $315 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $315;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 85;
        break;
      } else {
        __label__ = 86;
        break;
      }
     case 85:
      HEAP[$0] = -1;
      __label__ = 124;
      break;
     case 86:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 87;
        break;
      } else {
        __label__ = 88;
        break;
      }
     case 87:
      
      
      
      
      
      
      
      
      var $331 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_727] = $331;
      __label__ = 89;
      break;
     case 88:
      
      
      
      
      
      
      
      
      var $340 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $341 = HEAP[HEAP[$ptr_addr]] & 255;
      var $342 = _unicode_byte_type($340, $341);
      HEAP[$iftmp_727] = $342;
      __label__ = 89;
      break;
     case 89:
      var $343 = HEAP[$iftmp_727];
      if ($343 == 9) {
        __label__ = 90;
        break;
      } else if ($343 == 10) {
        __label__ = 90;
        break;
      } else if ($343 == 11) {
        __label__ = 92;
        break;
      } else if ($343 == 17) {
        __label__ = 91;
        break;
      } else if ($343 == 21) {
        __label__ = 90;
        break;
      } else {
        __label__ = 93;
        break;
      }
     case 90:
      __label__ = 94;
      break;
     case 91:
      __label__ = 114;
      break;
     case 92:
      __label__ = 113;
      break;
     case 93:
      var $344 = HEAP[$ptr_addr];
      var $345 = HEAP[$nextTokPtr_addr];
      HEAP[$345] = $344;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 94:
      
      var $347 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $347;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 95;
        break;
      } else {
        __label__ = 96;
        break;
      }
     case 95:
      HEAP[$0] = -1;
      __label__ = 124;
      break;
     case 96:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 97;
        break;
      } else {
        __label__ = 98;
        break;
      }
     case 97:
      
      
      
      
      
      
      
      
      var $363 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_736] = $363;
      __label__ = 99;
      break;
     case 98:
      
      
      
      
      
      
      
      
      var $372 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $373 = HEAP[HEAP[$ptr_addr]] & 255;
      var $374 = _unicode_byte_type($372, $373);
      HEAP[$iftmp_736] = $374;
      __label__ = 99;
      break;
     case 99:
      var $375 = HEAP[$iftmp_736];
      if ($375 == 5) {
        __label__ = 103;
        break;
      } else if ($375 == 6) {
        __label__ = 106;
        break;
      } else if ($375 == 7) {
        __label__ = 109;
        break;
      } else if ($375 == 9) {
        __label__ = 112;
        break;
      } else if ($375 == 10) {
        __label__ = 112;
        break;
      } else if ($375 == 11) {
        __label__ = 113;
        break;
      } else if ($375 == 17) {
        __label__ = 114;
        break;
      } else if ($375 == 21) {
        __label__ = 112;
        break;
      } else if ($375 == 22) {
        __label__ = 102;
        break;
      } else if ($375 == 24) {
        __label__ = 102;
        break;
      } else if ($375 == 29) {
        __label__ = 100;
        break;
      } else {
        __label__ = 120;
        break;
      }
     case 100:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_nmstrtPages + HEAP[HEAP[$ptr_addr] + 1]] << 3) + (HEAP[HEAP[$ptr_addr]] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr]] & 31)) == 0) {
        __label__ = 101;
        break;
      } else {
        __label__ = 102;
        break;
      }
     case 101:
      var $400 = HEAP[$ptr_addr];
      var $401 = HEAP[$nextTokPtr_addr];
      HEAP[$401] = $400;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 102:
      
      var $403 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $403;
      __label__ = 122;
      break;
     case 103:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 104;
        break;
      } else {
        __label__ = 105;
        break;
      }
     case 104:
      HEAP[$0] = -2;
      __label__ = 124;
      break;
     case 105:
      var $410 = HEAP[$ptr_addr];
      var $411 = HEAP[$nextTokPtr_addr];
      HEAP[$411] = $410;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 106:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 107;
        break;
      } else {
        __label__ = 108;
        break;
      }
     case 107:
      HEAP[$0] = -2;
      __label__ = 124;
      break;
     case 108:
      var $418 = HEAP[$ptr_addr];
      var $419 = HEAP[$nextTokPtr_addr];
      HEAP[$419] = $418;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 109:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 110;
        break;
      } else {
        __label__ = 111;
        break;
      }
     case 110:
      HEAP[$0] = -2;
      __label__ = 124;
      break;
     case 111:
      var $426 = HEAP[$ptr_addr];
      var $427 = HEAP[$nextTokPtr_addr];
      HEAP[$427] = $426;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 112:
      __label__ = 94;
      break;
     case 113:
      
      var $429 = HEAP[$ptr_addr] + 2;
      var $430 = HEAP[$nextTokPtr_addr];
      HEAP[$430] = $429;
      HEAP[$0] = 1;
      __label__ = 124;
      break;
     case 114:
      
      var $432 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $432;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 115;
        break;
      } else {
        __label__ = 116;
        break;
      }
     case 115:
      HEAP[$0] = -1;
      __label__ = 124;
      break;
     case 116:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] != 0) {
        __label__ = 118;
        break;
      } else {
        __label__ = 117;
        break;
      }
     case 117:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 62) {
        __label__ = 118;
        break;
      } else {
        __label__ = 119;
        break;
      }
     case 118:
      var $444 = HEAP[$ptr_addr];
      var $445 = HEAP[$nextTokPtr_addr];
      HEAP[$445] = $444;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 119:
      
      var $447 = HEAP[$ptr_addr] + 2;
      var $448 = HEAP[$nextTokPtr_addr];
      HEAP[$448] = $447;
      HEAP[$0] = 3;
      __label__ = 124;
      break;
     case 120:
      var $449 = HEAP[$ptr_addr];
      var $450 = HEAP[$nextTokPtr_addr];
      HEAP[$450] = $449;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 121:
      var $451 = HEAP[$ptr_addr];
      var $452 = HEAP[$nextTokPtr_addr];
      HEAP[$452] = $451;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 122:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 123;
        break;
      }
     case 123:
      HEAP[$0] = -1;
      __label__ = 124;
      break;
     case 124:
      var $456 = HEAP[$0];
      HEAP[$retval] = $456;
      __label__ = 125;
      break;
     case 125:
      var $retval123 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval123;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _little2_scanLt($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 48;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 48);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_798 = __stackBase__ + 20;
      var $iftmp_790 = __stackBase__ + 24;
      var $iftmp_782 = __stackBase__ + 28;
      var $iftmp_780 = __stackBase__ + 32;
      var $iftmp_772 = __stackBase__ + 36;
      var $0 = __stackBase__ + 40;
      var $hadColon = __stackBase__ + 44;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -1;
      __label__ = 100;
      break;
     case 2:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      
      
      
      
      
      
      
      var $16 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_772] = $16;
      __label__ = 5;
      break;
     case 4:
      
      
      
      
      
      
      
      
      var $25 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $26 = HEAP[HEAP[$ptr_addr]] & 255;
      var $27 = _unicode_byte_type($25, $26);
      HEAP[$iftmp_772] = $27;
      __label__ = 5;
      break;
     case 5:
      var $28 = HEAP[$iftmp_772];
      if ($28 == 5) {
        __label__ = 9;
        break;
      } else if ($28 == 6) {
        __label__ = 12;
        break;
      } else if ($28 == 7) {
        __label__ = 15;
        break;
      } else if ($28 == 15) {
        __label__ = 27;
        break;
      } else if ($28 == 16) {
        __label__ = 18;
        break;
      } else if ($28 == 17) {
        __label__ = 28;
        break;
      } else if ($28 == 22) {
        __label__ = 8;
        break;
      } else if ($28 == 24) {
        __label__ = 8;
        break;
      } else if ($28 == 29) {
        __label__ = 6;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 6:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_nmstrtPages + HEAP[HEAP[$ptr_addr] + 1]] << 3) + (HEAP[HEAP[$ptr_addr]] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr]] & 31)) == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      var $53 = HEAP[$nextTokPtr_addr];
      var $54 = HEAP[$ptr_addr];
      HEAP[$53] = $54;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 8:
      
      var $56 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $56;
      HEAP[$hadColon] = 0;
      __label__ = 98;
      break;
     case 9:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      HEAP[$0] = -2;
      __label__ = 100;
      break;
     case 11:
      var $63 = HEAP[$nextTokPtr_addr];
      var $64 = HEAP[$ptr_addr];
      HEAP[$63] = $64;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 12:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      HEAP[$0] = -2;
      __label__ = 100;
      break;
     case 14:
      var $71 = HEAP[$nextTokPtr_addr];
      var $72 = HEAP[$ptr_addr];
      HEAP[$71] = $72;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 15:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      HEAP[$0] = -2;
      __label__ = 100;
      break;
     case 17:
      var $79 = HEAP[$nextTokPtr_addr];
      var $80 = HEAP[$ptr_addr];
      HEAP[$79] = $80;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 18:
      
      var $82 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $82;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 19;
        break;
      } else {
        __label__ = 20;
        break;
      }
     case 19:
      HEAP[$0] = -1;
      __label__ = 100;
      break;
     case 20:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 21;
        break;
      } else {
        __label__ = 22;
        break;
      }
     case 21:
      
      
      
      
      
      
      
      
      var $98 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_780] = $98;
      __label__ = 23;
      break;
     case 22:
      
      
      
      
      
      
      
      
      var $107 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $108 = HEAP[HEAP[$ptr_addr]] & 255;
      var $109 = _unicode_byte_type($107, $108);
      HEAP[$iftmp_780] = $109;
      __label__ = 23;
      break;
     case 23:
      var $110 = HEAP[$iftmp_780];
      if ($110 == 20) {
        __label__ = 25;
        break;
      } else if ($110 == 27) {
        __label__ = 24;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 24:
      
      var $112 = HEAP[$ptr_addr] + 2;
      var $113 = HEAP[$enc_addr];
      var $114 = HEAP[$end_addr];
      var $115 = HEAP[$nextTokPtr_addr];
      var $116 = _little2_scanComment($113, $112, $114, $115);
      HEAP[$0] = $116;
      __label__ = 100;
      break;
     case 25:
      
      var $118 = HEAP[$ptr_addr] + 2;
      var $119 = HEAP[$enc_addr];
      var $120 = HEAP[$end_addr];
      var $121 = HEAP[$nextTokPtr_addr];
      var $122 = _little2_scanCdataSection($119, $118, $120, $121);
      HEAP[$0] = $122;
      __label__ = 100;
      break;
     case 26:
      var $123 = HEAP[$nextTokPtr_addr];
      var $124 = HEAP[$ptr_addr];
      HEAP[$123] = $124;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 27:
      
      var $126 = HEAP[$ptr_addr] + 2;
      var $127 = HEAP[$enc_addr];
      var $128 = HEAP[$end_addr];
      var $129 = HEAP[$nextTokPtr_addr];
      var $130 = _little2_scanPi($127, $126, $128, $129);
      HEAP[$0] = $130;
      __label__ = 100;
      break;
     case 28:
      
      var $132 = HEAP[$ptr_addr] + 2;
      var $133 = HEAP[$enc_addr];
      var $134 = HEAP[$end_addr];
      var $135 = HEAP[$nextTokPtr_addr];
      var $136 = _little2_scanEndTag($133, $132, $134, $135);
      HEAP[$0] = $136;
      __label__ = 100;
      break;
     case 29:
      var $137 = HEAP[$nextTokPtr_addr];
      var $138 = HEAP[$ptr_addr];
      HEAP[$137] = $138;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 30:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 31;
        break;
      } else {
        __label__ = 32;
        break;
      }
     case 31:
      
      
      
      
      
      
      
      
      var $151 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_782] = $151;
      __label__ = 33;
      break;
     case 32:
      
      
      
      
      
      
      
      
      var $160 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $161 = HEAP[HEAP[$ptr_addr]] & 255;
      var $162 = _unicode_byte_type($160, $161);
      HEAP[$iftmp_782] = $162;
      __label__ = 33;
      break;
     case 33:
      var $163 = HEAP[$iftmp_782];
      if ($163 == 5) {
        __label__ = 37;
        break;
      } else if ($163 == 6) {
        __label__ = 40;
        break;
      } else if ($163 == 7) {
        __label__ = 43;
        break;
      } else if ($163 == 9) {
        __label__ = 67;
        break;
      } else if ($163 == 10) {
        __label__ = 67;
        break;
      } else if ($163 == 11) {
        __label__ = 90;
        break;
      } else if ($163 == 17) {
        __label__ = 91;
        break;
      } else if ($163 == 21) {
        __label__ = 67;
        break;
      } else if ($163 == 22) {
        __label__ = 36;
        break;
      } else if ($163 == 23) {
        __label__ = 46;
        break;
      } else if ($163 == 24) {
        __label__ = 36;
        break;
      } else if ($163 == 25) {
        __label__ = 36;
        break;
      } else if ($163 == 26) {
        __label__ = 36;
        break;
      } else if ($163 == 27) {
        __label__ = 36;
        break;
      } else if ($163 == 29) {
        __label__ = 34;
        break;
      } else {
        __label__ = 97;
        break;
      }
     case 34:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_namePages + HEAP[HEAP[$ptr_addr] + 1]] << 3) + (HEAP[HEAP[$ptr_addr]] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr]] & 31)) == 0) {
        __label__ = 35;
        break;
      } else {
        __label__ = 36;
        break;
      }
     case 35:
      var $188 = HEAP[$nextTokPtr_addr];
      var $189 = HEAP[$ptr_addr];
      HEAP[$188] = $189;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 36:
      
      var $191 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $191;
      __label__ = 98;
      break;
     case 37:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 38;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 38:
      HEAP[$0] = -2;
      __label__ = 100;
      break;
     case 39:
      var $198 = HEAP[$nextTokPtr_addr];
      var $199 = HEAP[$ptr_addr];
      HEAP[$198] = $199;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 40:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 41;
        break;
      } else {
        __label__ = 42;
        break;
      }
     case 41:
      HEAP[$0] = -2;
      __label__ = 100;
      break;
     case 42:
      var $206 = HEAP[$nextTokPtr_addr];
      var $207 = HEAP[$ptr_addr];
      HEAP[$206] = $207;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 43:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 44;
        break;
      } else {
        __label__ = 45;
        break;
      }
     case 44:
      HEAP[$0] = -2;
      __label__ = 100;
      break;
     case 45:
      var $214 = HEAP[$nextTokPtr_addr];
      var $215 = HEAP[$ptr_addr];
      HEAP[$214] = $215;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 46:
      
      
      if (HEAP[$hadColon] != 0) {
        __label__ = 47;
        break;
      } else {
        __label__ = 48;
        break;
      }
     case 47:
      var $218 = HEAP[$nextTokPtr_addr];
      var $219 = HEAP[$ptr_addr];
      HEAP[$218] = $219;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 48:
      HEAP[$hadColon] = 1;
      
      var $221 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $221;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 49;
        break;
      } else {
        __label__ = 50;
        break;
      }
     case 49:
      HEAP[$0] = -1;
      __label__ = 100;
      break;
     case 50:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 51;
        break;
      } else {
        __label__ = 52;
        break;
      }
     case 51:
      
      
      
      
      
      
      
      
      var $237 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_790] = $237;
      __label__ = 53;
      break;
     case 52:
      
      
      
      
      
      
      
      
      var $246 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $247 = HEAP[HEAP[$ptr_addr]] & 255;
      var $248 = _unicode_byte_type($246, $247);
      HEAP[$iftmp_790] = $248;
      __label__ = 53;
      break;
     case 53:
      var $249 = HEAP[$iftmp_790];
      if ($249 == 5) {
        __label__ = 57;
        break;
      } else if ($249 == 6) {
        __label__ = 60;
        break;
      } else if ($249 == 7) {
        __label__ = 63;
        break;
      } else if ($249 == 22) {
        __label__ = 56;
        break;
      } else if ($249 == 24) {
        __label__ = 56;
        break;
      } else if ($249 == 29) {
        __label__ = 54;
        break;
      } else {
        __label__ = 66;
        break;
      }
     case 54:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_nmstrtPages + HEAP[HEAP[$ptr_addr] + 1]] << 3) + (HEAP[HEAP[$ptr_addr]] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr]] & 31)) == 0) {
        __label__ = 55;
        break;
      } else {
        __label__ = 56;
        break;
      }
     case 55:
      var $274 = HEAP[$nextTokPtr_addr];
      var $275 = HEAP[$ptr_addr];
      HEAP[$274] = $275;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 56:
      
      var $277 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $277;
      __label__ = 98;
      break;
     case 57:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 58;
        break;
      } else {
        __label__ = 59;
        break;
      }
     case 58:
      HEAP[$0] = -2;
      __label__ = 100;
      break;
     case 59:
      var $284 = HEAP[$nextTokPtr_addr];
      var $285 = HEAP[$ptr_addr];
      HEAP[$284] = $285;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 60:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 61;
        break;
      } else {
        __label__ = 62;
        break;
      }
     case 61:
      HEAP[$0] = -2;
      __label__ = 100;
      break;
     case 62:
      var $292 = HEAP[$nextTokPtr_addr];
      var $293 = HEAP[$ptr_addr];
      HEAP[$292] = $293;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 63:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 64;
        break;
      } else {
        __label__ = 65;
        break;
      }
     case 64:
      HEAP[$0] = -2;
      __label__ = 100;
      break;
     case 65:
      var $300 = HEAP[$nextTokPtr_addr];
      var $301 = HEAP[$ptr_addr];
      HEAP[$300] = $301;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 66:
      var $302 = HEAP[$nextTokPtr_addr];
      var $303 = HEAP[$ptr_addr];
      HEAP[$302] = $303;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 67:
      
      var $305 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $305;
      __label__ = 88;
      break;
     case 68:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 69;
        break;
      } else {
        __label__ = 70;
        break;
      }
     case 69:
      
      
      
      
      
      
      
      
      var $318 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_798] = $318;
      __label__ = 71;
      break;
     case 70:
      
      
      
      
      
      
      
      
      var $327 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $328 = HEAP[HEAP[$ptr_addr]] & 255;
      var $329 = _unicode_byte_type($327, $328);
      HEAP[$iftmp_798] = $329;
      __label__ = 71;
      break;
     case 71:
      var $330 = HEAP[$iftmp_798];
      if ($330 == 5) {
        __label__ = 75;
        break;
      } else if ($330 == 6) {
        __label__ = 78;
        break;
      } else if ($330 == 7) {
        __label__ = 81;
        break;
      } else if ($330 == 9) {
        __label__ = 86;
        break;
      } else if ($330 == 10) {
        __label__ = 86;
        break;
      } else if ($330 == 11) {
        __label__ = 84;
        break;
      } else if ($330 == 17) {
        __label__ = 85;
        break;
      } else if ($330 == 21) {
        __label__ = 86;
        break;
      } else if ($330 == 22) {
        __label__ = 74;
        break;
      } else if ($330 == 24) {
        __label__ = 74;
        break;
      } else if ($330 == 29) {
        __label__ = 72;
        break;
      } else {
        __label__ = 87;
        break;
      }
     case 72:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_nmstrtPages + HEAP[HEAP[$ptr_addr] + 1]] << 3) + (HEAP[HEAP[$ptr_addr]] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr]] & 31)) == 0) {
        __label__ = 73;
        break;
      } else {
        __label__ = 74;
        break;
      }
     case 73:
      var $355 = HEAP[$nextTokPtr_addr];
      var $356 = HEAP[$ptr_addr];
      HEAP[$355] = $356;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 74:
      
      var $358 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $358;
      var $359 = HEAP[$enc_addr];
      var $360 = HEAP[$ptr_addr];
      var $361 = HEAP[$end_addr];
      var $362 = HEAP[$nextTokPtr_addr];
      var $363 = _little2_scanAtts($359, $360, $361, $362);
      HEAP[$0] = $363;
      __label__ = 100;
      break;
     case 75:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 76;
        break;
      } else {
        __label__ = 77;
        break;
      }
     case 76:
      HEAP[$0] = -2;
      __label__ = 100;
      break;
     case 77:
      var $370 = HEAP[$nextTokPtr_addr];
      var $371 = HEAP[$ptr_addr];
      HEAP[$370] = $371;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 78:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 79;
        break;
      } else {
        __label__ = 80;
        break;
      }
     case 79:
      HEAP[$0] = -2;
      __label__ = 100;
      break;
     case 80:
      var $378 = HEAP[$nextTokPtr_addr];
      var $379 = HEAP[$ptr_addr];
      HEAP[$378] = $379;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 81:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 82;
        break;
      } else {
        __label__ = 83;
        break;
      }
     case 82:
      HEAP[$0] = -2;
      __label__ = 100;
      break;
     case 83:
      var $386 = HEAP[$nextTokPtr_addr];
      var $387 = HEAP[$ptr_addr];
      HEAP[$386] = $387;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 84:
      __label__ = 90;
      break;
     case 85:
      __label__ = 91;
      break;
     case 86:
      
      var $389 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $389;
      __label__ = 88;
      break;
     case 87:
      var $390 = HEAP[$nextTokPtr_addr];
      var $391 = HEAP[$ptr_addr];
      HEAP[$390] = $391;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 88:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 68;
        break;
      } else {
        __label__ = 89;
        break;
      }
     case 89:
      HEAP[$0] = -1;
      __label__ = 100;
      break;
     case 90:
      
      var $396 = HEAP[$ptr_addr] + 2;
      var $397 = HEAP[$nextTokPtr_addr];
      HEAP[$397] = $396;
      HEAP[$0] = 2;
      __label__ = 100;
      break;
     case 91:
      
      var $399 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $399;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 92;
        break;
      } else {
        __label__ = 93;
        break;
      }
     case 92:
      HEAP[$0] = -1;
      __label__ = 100;
      break;
     case 93:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] != 0) {
        __label__ = 95;
        break;
      } else {
        __label__ = 94;
        break;
      }
     case 94:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 62) {
        __label__ = 95;
        break;
      } else {
        __label__ = 96;
        break;
      }
     case 95:
      var $411 = HEAP[$nextTokPtr_addr];
      var $412 = HEAP[$ptr_addr];
      HEAP[$411] = $412;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 96:
      
      var $414 = HEAP[$ptr_addr] + 2;
      var $415 = HEAP[$nextTokPtr_addr];
      HEAP[$415] = $414;
      HEAP[$0] = 4;
      __label__ = 100;
      break;
     case 97:
      var $416 = HEAP[$nextTokPtr_addr];
      var $417 = HEAP[$ptr_addr];
      HEAP[$416] = $417;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 98:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 30;
        break;
      } else {
        __label__ = 99;
        break;
      }
     case 99:
      HEAP[$0] = -1;
      __label__ = 100;
      break;
     case 100:
      var $421 = HEAP[$0];
      HEAP[$retval] = $421;
      __label__ = 101;
      break;
     case 101:
      var $retval98 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval98;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _little2_contentTok($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 37;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 37);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_819 = __stackBase__ + 20;
      var $iftmp_811 = __stackBase__ + 24;
      var $iftmp_809 = __stackBase__ + 25;
      var $0 = __stackBase__ + 29;
      var $n = __stackBase__ + 33;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -4;
      __label__ = 69;
      break;
     case 2:
      
      
      
      
      var $8 = HEAP[$end_addr] - HEAP[$ptr_addr];
      HEAP[$n] = $8;
      
      
      
      
      if ((HEAP[$n] & 1 & 255) != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 3:
      
      var $13 = HEAP[$n] & -2;
      HEAP[$n] = $13;
      
      
      if (HEAP[$n] == 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      HEAP[$0] = -1;
      __label__ = 69;
      break;
     case 5:
      
      
      var $18 = HEAP[$ptr_addr] + HEAP[$n];
      HEAP[$end_addr] = $18;
      __label__ = 6;
      break;
     case 6:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      
      
      
      
      
      
      
      
      var $31 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_809] = $31;
      __label__ = 9;
      break;
     case 8:
      
      
      
      
      
      
      
      
      var $40 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $41 = HEAP[HEAP[$ptr_addr]] & 255;
      var $42 = _unicode_byte_type($40, $41);
      HEAP[$iftmp_809] = $42;
      __label__ = 9;
      break;
     case 9:
      var $43 = HEAP[$iftmp_809];
      if ($43 == 0) {
        __label__ = 40;
        break;
      } else if ($43 == 1) {
        __label__ = 40;
        break;
      } else if ($43 == 2) {
        __label__ = 10;
        break;
      } else if ($43 == 3) {
        __label__ = 11;
        break;
      } else if ($43 == 4) {
        __label__ = 21;
        break;
      } else if ($43 == 5) {
        __label__ = 31;
        break;
      } else if ($43 == 6) {
        __label__ = 34;
        break;
      } else if ($43 == 7) {
        __label__ = 37;
        break;
      } else if ($43 == 8) {
        __label__ = 40;
        break;
      } else if ($43 == 9) {
        __label__ = 12;
        break;
      } else if ($43 == 10) {
        __label__ = 20;
        break;
      } else {
        __label__ = 41;
        break;
      }
     case 10:
      
      var $45 = HEAP[$ptr_addr] + 2;
      var $46 = HEAP[$enc_addr];
      var $47 = HEAP[$end_addr];
      var $48 = HEAP[$nextTokPtr_addr];
      var $49 = _little2_scanLt($46, $45, $47, $48);
      HEAP[$0] = $49;
      __label__ = 69;
      break;
     case 11:
      
      var $51 = HEAP[$ptr_addr] + 2;
      var $52 = HEAP[$enc_addr];
      var $53 = HEAP[$end_addr];
      var $54 = HEAP[$nextTokPtr_addr];
      var $55 = _little2_scanRef($52, $51, $53, $54);
      HEAP[$0] = $55;
      __label__ = 69;
      break;
     case 12:
      
      var $57 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $57;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      HEAP[$0] = -3;
      __label__ = 69;
      break;
     case 14:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      
      
      
      
      
      
      
      
      
      var $74 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]] == 10;
      HEAP[$iftmp_811] = $74;
      __label__ = 17;
      break;
     case 16:
      
      
      
      
      
      
      
      
      var $83 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $84 = HEAP[HEAP[$ptr_addr]] & 255;
      var $85 = _unicode_byte_type($83, $84);
      
      var $87 = $85 == 10;
      HEAP[$iftmp_811] = $87;
      __label__ = 17;
      break;
     case 17:
      
      
      if (HEAP[$iftmp_811] != 0) {
        __label__ = 18;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 18:
      
      var $90 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $90;
      __label__ = 19;
      break;
     case 19:
      var $91 = HEAP[$nextTokPtr_addr];
      var $92 = HEAP[$ptr_addr];
      HEAP[$91] = $92;
      HEAP[$0] = 7;
      __label__ = 69;
      break;
     case 20:
      
      var $94 = HEAP[$ptr_addr] + 2;
      var $95 = HEAP[$nextTokPtr_addr];
      HEAP[$95] = $94;
      HEAP[$0] = 7;
      __label__ = 69;
      break;
     case 21:
      
      var $97 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $97;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 22;
        break;
      } else {
        __label__ = 23;
        break;
      }
     case 22:
      HEAP[$0] = -5;
      __label__ = 69;
      break;
     case 23:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] != 0) {
        __label__ = 42;
        break;
      } else {
        __label__ = 24;
        break;
      }
     case 24:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 93) {
        __label__ = 42;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 25:
      
      var $110 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $110;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 26;
        break;
      } else {
        __label__ = 27;
        break;
      }
     case 26:
      HEAP[$0] = -5;
      __label__ = 69;
      break;
     case 27:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] != 0) {
        __label__ = 29;
        break;
      } else {
        __label__ = 28;
        break;
      }
     case 28:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 62) {
        __label__ = 29;
        break;
      } else {
        __label__ = 30;
        break;
      }
     case 29:
      
      var $123 = HEAP[$ptr_addr] + -2;
      HEAP[$ptr_addr] = $123;
      __label__ = 42;
      break;
     case 30:
      var $124 = HEAP[$nextTokPtr_addr];
      var $125 = HEAP[$ptr_addr];
      HEAP[$124] = $125;
      HEAP[$0] = 0;
      __label__ = 69;
      break;
     case 31:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 32;
        break;
      } else {
        __label__ = 33;
        break;
      }
     case 32:
      HEAP[$0] = -2;
      __label__ = 69;
      break;
     case 33:
      
      var $133 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $133;
      __label__ = 42;
      break;
     case 34:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 35;
        break;
      } else {
        __label__ = 36;
        break;
      }
     case 35:
      HEAP[$0] = -2;
      __label__ = 69;
      break;
     case 36:
      
      var $141 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $141;
      __label__ = 42;
      break;
     case 37:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 38;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 38:
      HEAP[$0] = -2;
      __label__ = 69;
      break;
     case 39:
      
      var $149 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $149;
      __label__ = 42;
      break;
     case 40:
      var $150 = HEAP[$nextTokPtr_addr];
      var $151 = HEAP[$ptr_addr];
      HEAP[$150] = $151;
      HEAP[$0] = 0;
      __label__ = 69;
      break;
     case 41:
      
      var $153 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $153;
      __label__ = 42;
      break;
     case 42:
      __label__ = 67;
      break;
     case 43:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 44;
        break;
      } else {
        __label__ = 45;
        break;
      }
     case 44:
      
      
      
      
      
      
      
      
      var $166 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_819] = $166;
      __label__ = 46;
      break;
     case 45:
      
      
      
      
      
      
      
      
      var $175 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $176 = HEAP[HEAP[$ptr_addr]] & 255;
      var $177 = _unicode_byte_type($175, $176);
      HEAP[$iftmp_819] = $177;
      __label__ = 46;
      break;
     case 46:
      var $178 = HEAP[$iftmp_819];
      if ($178 == 0) {
        __label__ = 65;
        break;
      } else if ($178 == 1) {
        __label__ = 65;
        break;
      } else if ($178 == 2) {
        __label__ = 65;
        break;
      } else if ($178 == 3) {
        __label__ = 65;
        break;
      } else if ($178 == 4) {
        __label__ = 56;
        break;
      } else if ($178 == 5) {
        __label__ = 47;
        break;
      } else if ($178 == 6) {
        __label__ = 50;
        break;
      } else if ($178 == 7) {
        __label__ = 53;
        break;
      } else if ($178 == 8) {
        __label__ = 65;
        break;
      } else if ($178 == 9) {
        __label__ = 65;
        break;
      } else if ($178 == 10) {
        __label__ = 65;
        break;
      } else {
        __label__ = 66;
        break;
      }
     case 47:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 48;
        break;
      } else {
        __label__ = 49;
        break;
      }
     case 48:
      var $185 = HEAP[$nextTokPtr_addr];
      var $186 = HEAP[$ptr_addr];
      HEAP[$185] = $186;
      HEAP[$0] = 6;
      __label__ = 69;
      break;
     case 49:
      
      var $188 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $188;
      __label__ = 67;
      break;
     case 50:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 51;
        break;
      } else {
        __label__ = 52;
        break;
      }
     case 51:
      var $195 = HEAP[$nextTokPtr_addr];
      var $196 = HEAP[$ptr_addr];
      HEAP[$195] = $196;
      HEAP[$0] = 6;
      __label__ = 69;
      break;
     case 52:
      
      var $198 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $198;
      __label__ = 67;
      break;
     case 53:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 54;
        break;
      } else {
        __label__ = 55;
        break;
      }
     case 54:
      var $205 = HEAP[$nextTokPtr_addr];
      var $206 = HEAP[$ptr_addr];
      HEAP[$205] = $206;
      HEAP[$0] = 6;
      __label__ = 69;
      break;
     case 55:
      
      var $208 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $208;
      __label__ = 67;
      break;
     case 56:
      
      
      
      
      if (HEAP[$ptr_addr] + 2 != HEAP[$end_addr]) {
        __label__ = 57;
        break;
      } else {
        __label__ = 65;
        break;
      }
     case 57:
      
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 2 + 1] != 0) {
        __label__ = 59;
        break;
      } else {
        __label__ = 58;
        break;
      }
     case 58:
      
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 2] != 93) {
        __label__ = 59;
        break;
      } else {
        __label__ = 60;
        break;
      }
     case 59:
      
      var $224 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $224;
      __label__ = 67;
      break;
     case 60:
      
      
      
      
      if (HEAP[$ptr_addr] + 4 != HEAP[$end_addr]) {
        __label__ = 61;
        break;
      } else {
        __label__ = 65;
        break;
      }
     case 61:
      
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 4 + 1] != 0) {
        __label__ = 63;
        break;
      } else {
        __label__ = 62;
        break;
      }
     case 62:
      
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 4] != 62) {
        __label__ = 63;
        break;
      } else {
        __label__ = 64;
        break;
      }
     case 63:
      
      var $240 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $240;
      __label__ = 67;
      break;
     case 64:
      
      var $242 = HEAP[$ptr_addr] + 4;
      var $243 = HEAP[$nextTokPtr_addr];
      HEAP[$243] = $242;
      HEAP[$0] = 0;
      __label__ = 69;
      break;
     case 65:
      var $244 = HEAP[$nextTokPtr_addr];
      var $245 = HEAP[$ptr_addr];
      HEAP[$244] = $245;
      HEAP[$0] = 6;
      __label__ = 69;
      break;
     case 66:
      
      var $247 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $247;
      __label__ = 67;
      break;
     case 67:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 43;
        break;
      } else {
        __label__ = 68;
        break;
      }
     case 68:
      var $251 = HEAP[$nextTokPtr_addr];
      var $252 = HEAP[$ptr_addr];
      HEAP[$251] = $252;
      HEAP[$0] = 6;
      __label__ = 69;
      break;
     case 69:
      var $253 = HEAP[$0];
      HEAP[$retval] = $253;
      __label__ = 70;
      break;
     case 70:
      var $retval70 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval70;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _little2_scanPercent($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 32;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_835 = __stackBase__ + 20;
      var $iftmp_827 = __stackBase__ + 24;
      var $0 = __stackBase__ + 28;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -22;
      __label__ = 40;
      break;
     case 2:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      
      
      
      
      
      
      
      var $16 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_827] = $16;
      __label__ = 5;
      break;
     case 4:
      
      
      
      
      
      
      
      
      var $25 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $26 = HEAP[HEAP[$ptr_addr]] & 255;
      var $27 = _unicode_byte_type($25, $26);
      HEAP[$iftmp_827] = $27;
      __label__ = 5;
      break;
     case 5:
      var $28 = HEAP[$iftmp_827];
      if ($28 == 5) {
        __label__ = 9;
        break;
      } else if ($28 == 6) {
        __label__ = 12;
        break;
      } else if ($28 == 7) {
        __label__ = 15;
        break;
      } else if ($28 == 9) {
        __label__ = 18;
        break;
      } else if ($28 == 10) {
        __label__ = 18;
        break;
      } else if ($28 == 21) {
        __label__ = 18;
        break;
      } else if ($28 == 22) {
        __label__ = 8;
        break;
      } else if ($28 == 24) {
        __label__ = 8;
        break;
      } else if ($28 == 29) {
        __label__ = 6;
        break;
      } else if ($28 == 30) {
        __label__ = 18;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 6:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_nmstrtPages + HEAP[HEAP[$ptr_addr] + 1]] << 3) + (HEAP[HEAP[$ptr_addr]] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr]] & 31)) == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      var $53 = HEAP[$nextTokPtr_addr];
      var $54 = HEAP[$ptr_addr];
      HEAP[$53] = $54;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 8:
      
      var $56 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $56;
      __label__ = 38;
      break;
     case 9:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      HEAP[$0] = -2;
      __label__ = 40;
      break;
     case 11:
      var $63 = HEAP[$nextTokPtr_addr];
      var $64 = HEAP[$ptr_addr];
      HEAP[$63] = $64;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 12:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      HEAP[$0] = -2;
      __label__ = 40;
      break;
     case 14:
      var $71 = HEAP[$nextTokPtr_addr];
      var $72 = HEAP[$ptr_addr];
      HEAP[$71] = $72;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 15:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      HEAP[$0] = -2;
      __label__ = 40;
      break;
     case 17:
      var $79 = HEAP[$nextTokPtr_addr];
      var $80 = HEAP[$ptr_addr];
      HEAP[$79] = $80;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 18:
      var $81 = HEAP[$nextTokPtr_addr];
      var $82 = HEAP[$ptr_addr];
      HEAP[$81] = $82;
      HEAP[$0] = 22;
      __label__ = 40;
      break;
     case 19:
      var $83 = HEAP[$nextTokPtr_addr];
      var $84 = HEAP[$ptr_addr];
      HEAP[$83] = $84;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 20:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 21;
        break;
      } else {
        __label__ = 22;
        break;
      }
     case 21:
      
      
      
      
      
      
      
      
      var $97 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_835] = $97;
      __label__ = 23;
      break;
     case 22:
      
      
      
      
      
      
      
      
      var $106 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $107 = HEAP[HEAP[$ptr_addr]] & 255;
      var $108 = _unicode_byte_type($106, $107);
      HEAP[$iftmp_835] = $108;
      __label__ = 23;
      break;
     case 23:
      var $109 = HEAP[$iftmp_835];
      if ($109 == 5) {
        __label__ = 27;
        break;
      } else if ($109 == 6) {
        __label__ = 30;
        break;
      } else if ($109 == 7) {
        __label__ = 33;
        break;
      } else if ($109 == 18) {
        __label__ = 36;
        break;
      } else if ($109 == 22) {
        __label__ = 26;
        break;
      } else if ($109 == 24) {
        __label__ = 26;
        break;
      } else if ($109 == 25) {
        __label__ = 26;
        break;
      } else if ($109 == 26) {
        __label__ = 26;
        break;
      } else if ($109 == 27) {
        __label__ = 26;
        break;
      } else if ($109 == 29) {
        __label__ = 24;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 24:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_namePages + HEAP[HEAP[$ptr_addr] + 1]] << 3) + (HEAP[HEAP[$ptr_addr]] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr]] & 31)) == 0) {
        __label__ = 25;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 25:
      var $134 = HEAP[$nextTokPtr_addr];
      var $135 = HEAP[$ptr_addr];
      HEAP[$134] = $135;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 26:
      
      var $137 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $137;
      __label__ = 38;
      break;
     case 27:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 28;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 28:
      HEAP[$0] = -2;
      __label__ = 40;
      break;
     case 29:
      var $144 = HEAP[$nextTokPtr_addr];
      var $145 = HEAP[$ptr_addr];
      HEAP[$144] = $145;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 30:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 31;
        break;
      } else {
        __label__ = 32;
        break;
      }
     case 31:
      HEAP[$0] = -2;
      __label__ = 40;
      break;
     case 32:
      var $152 = HEAP[$nextTokPtr_addr];
      var $153 = HEAP[$ptr_addr];
      HEAP[$152] = $153;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 33:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 34;
        break;
      } else {
        __label__ = 35;
        break;
      }
     case 34:
      HEAP[$0] = -2;
      __label__ = 40;
      break;
     case 35:
      var $160 = HEAP[$nextTokPtr_addr];
      var $161 = HEAP[$ptr_addr];
      HEAP[$160] = $161;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 36:
      
      var $163 = HEAP[$ptr_addr] + 2;
      var $164 = HEAP[$nextTokPtr_addr];
      HEAP[$164] = $163;
      HEAP[$0] = 28;
      __label__ = 40;
      break;
     case 37:
      var $165 = HEAP[$nextTokPtr_addr];
      var $166 = HEAP[$ptr_addr];
      HEAP[$165] = $166;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 38:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 20;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 39:
      HEAP[$0] = -1;
      __label__ = 40;
      break;
     case 40:
      var $170 = HEAP[$0];
      HEAP[$retval] = $170;
      __label__ = 41;
      break;
     case 41:
      var $retval40 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval40;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _little2_scanPoundName($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 32;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_851 = __stackBase__ + 20;
      var $iftmp_843 = __stackBase__ + 24;
      var $0 = __stackBase__ + 28;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -1;
      __label__ = 39;
      break;
     case 2:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      
      
      
      
      
      
      
      var $16 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_843] = $16;
      __label__ = 5;
      break;
     case 4:
      
      
      
      
      
      
      
      
      var $25 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $26 = HEAP[HEAP[$ptr_addr]] & 255;
      var $27 = _unicode_byte_type($25, $26);
      HEAP[$iftmp_843] = $27;
      __label__ = 5;
      break;
     case 5:
      var $28 = HEAP[$iftmp_843];
      if ($28 == 5) {
        __label__ = 9;
        break;
      } else if ($28 == 6) {
        __label__ = 12;
        break;
      } else if ($28 == 7) {
        __label__ = 15;
        break;
      } else if ($28 == 22) {
        __label__ = 8;
        break;
      } else if ($28 == 24) {
        __label__ = 8;
        break;
      } else if ($28 == 29) {
        __label__ = 6;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 6:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_nmstrtPages + HEAP[HEAP[$ptr_addr] + 1]] << 3) + (HEAP[HEAP[$ptr_addr]] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr]] & 31)) == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      var $53 = HEAP[$nextTokPtr_addr];
      var $54 = HEAP[$ptr_addr];
      HEAP[$53] = $54;
      HEAP[$0] = 0;
      __label__ = 39;
      break;
     case 8:
      
      var $56 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $56;
      __label__ = 37;
      break;
     case 9:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      HEAP[$0] = -2;
      __label__ = 39;
      break;
     case 11:
      var $63 = HEAP[$nextTokPtr_addr];
      var $64 = HEAP[$ptr_addr];
      HEAP[$63] = $64;
      HEAP[$0] = 0;
      __label__ = 39;
      break;
     case 12:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      HEAP[$0] = -2;
      __label__ = 39;
      break;
     case 14:
      var $71 = HEAP[$nextTokPtr_addr];
      var $72 = HEAP[$ptr_addr];
      HEAP[$71] = $72;
      HEAP[$0] = 0;
      __label__ = 39;
      break;
     case 15:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      HEAP[$0] = -2;
      __label__ = 39;
      break;
     case 17:
      var $79 = HEAP[$nextTokPtr_addr];
      var $80 = HEAP[$ptr_addr];
      HEAP[$79] = $80;
      HEAP[$0] = 0;
      __label__ = 39;
      break;
     case 18:
      var $81 = HEAP[$nextTokPtr_addr];
      var $82 = HEAP[$ptr_addr];
      HEAP[$81] = $82;
      HEAP[$0] = 0;
      __label__ = 39;
      break;
     case 19:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 20;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 20:
      
      
      
      
      
      
      
      
      var $95 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_851] = $95;
      __label__ = 22;
      break;
     case 21:
      
      
      
      
      
      
      
      
      var $104 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $105 = HEAP[HEAP[$ptr_addr]] & 255;
      var $106 = _unicode_byte_type($104, $105);
      HEAP[$iftmp_851] = $106;
      __label__ = 22;
      break;
     case 22:
      var $107 = HEAP[$iftmp_851];
      if ($107 == 5) {
        __label__ = 26;
        break;
      } else if ($107 == 6) {
        __label__ = 29;
        break;
      } else if ($107 == 7) {
        __label__ = 32;
        break;
      } else if ($107 == 9) {
        __label__ = 35;
        break;
      } else if ($107 == 10) {
        __label__ = 35;
        break;
      } else if ($107 == 11) {
        __label__ = 35;
        break;
      } else if ($107 == 21) {
        __label__ = 35;
        break;
      } else if ($107 == 22) {
        __label__ = 25;
        break;
      } else if ($107 == 24) {
        __label__ = 25;
        break;
      } else if ($107 == 25) {
        __label__ = 25;
        break;
      } else if ($107 == 26) {
        __label__ = 25;
        break;
      } else if ($107 == 27) {
        __label__ = 25;
        break;
      } else if ($107 == 29) {
        __label__ = 23;
        break;
      } else if ($107 == 30) {
        __label__ = 35;
        break;
      } else if ($107 == 32) {
        __label__ = 35;
        break;
      } else if ($107 == 36) {
        __label__ = 35;
        break;
      } else {
        __label__ = 36;
        break;
      }
     case 23:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_namePages + HEAP[HEAP[$ptr_addr] + 1]] << 3) + (HEAP[HEAP[$ptr_addr]] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr]] & 31)) == 0) {
        __label__ = 24;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 24:
      var $132 = HEAP[$nextTokPtr_addr];
      var $133 = HEAP[$ptr_addr];
      HEAP[$132] = $133;
      HEAP[$0] = 0;
      __label__ = 39;
      break;
     case 25:
      
      var $135 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $135;
      __label__ = 37;
      break;
     case 26:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 27;
        break;
      } else {
        __label__ = 28;
        break;
      }
     case 27:
      HEAP[$0] = -2;
      __label__ = 39;
      break;
     case 28:
      var $142 = HEAP[$nextTokPtr_addr];
      var $143 = HEAP[$ptr_addr];
      HEAP[$142] = $143;
      HEAP[$0] = 0;
      __label__ = 39;
      break;
     case 29:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 30;
        break;
      } else {
        __label__ = 31;
        break;
      }
     case 30:
      HEAP[$0] = -2;
      __label__ = 39;
      break;
     case 31:
      var $150 = HEAP[$nextTokPtr_addr];
      var $151 = HEAP[$ptr_addr];
      HEAP[$150] = $151;
      HEAP[$0] = 0;
      __label__ = 39;
      break;
     case 32:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 33;
        break;
      } else {
        __label__ = 34;
        break;
      }
     case 33:
      HEAP[$0] = -2;
      __label__ = 39;
      break;
     case 34:
      var $158 = HEAP[$nextTokPtr_addr];
      var $159 = HEAP[$ptr_addr];
      HEAP[$158] = $159;
      HEAP[$0] = 0;
      __label__ = 39;
      break;
     case 35:
      var $160 = HEAP[$nextTokPtr_addr];
      var $161 = HEAP[$ptr_addr];
      HEAP[$160] = $161;
      HEAP[$0] = 20;
      __label__ = 39;
      break;
     case 36:
      var $162 = HEAP[$nextTokPtr_addr];
      var $163 = HEAP[$ptr_addr];
      HEAP[$162] = $163;
      HEAP[$0] = 0;
      __label__ = 39;
      break;
     case 37:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 19;
        break;
      } else {
        __label__ = 38;
        break;
      }
     case 38:
      HEAP[$0] = -20;
      __label__ = 39;
      break;
     case 39:
      var $167 = HEAP[$0];
      HEAP[$retval] = $167;
      __label__ = 40;
      break;
     case 40:
      var $retval39 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval39;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _little2_scanLit($open, $enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 40;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $open_addr = __stackBase__;
      var $enc_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $nextTokPtr_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $iftmp_867 = __stackBase__ + 24;
      var $0 = __stackBase__ + 28;
      var $iftmp_859 = __stackBase__ + 32;
      var $t = __stackBase__ + 36;
      
      HEAP[$open_addr] = $open;
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      __label__ = 25;
      break;
     case 1:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      
      
      
      
      
      
      
      var $13 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_859] = $13;
      __label__ = 4;
      break;
     case 3:
      
      
      
      
      
      
      
      
      var $22 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $23 = HEAP[HEAP[$ptr_addr]] & 255;
      var $24 = _unicode_byte_type($22, $23);
      HEAP[$iftmp_859] = $24;
      __label__ = 4;
      break;
     case 4:
      var $25 = HEAP[$iftmp_859];
      HEAP[$t] = $25;
      var $26 = HEAP[$t];
      if ($26 == 0) {
        __label__ = 14;
        break;
      } else if ($26 == 1) {
        __label__ = 14;
        break;
      } else if ($26 == 5) {
        __label__ = 5;
        break;
      } else if ($26 == 6) {
        __label__ = 8;
        break;
      } else if ($26 == 7) {
        __label__ = 11;
        break;
      } else if ($26 == 8) {
        __label__ = 14;
        break;
      } else if ($26 == 12) {
        __label__ = 15;
        break;
      } else if ($26 == 13) {
        __label__ = 15;
        break;
      } else {
        __label__ = 24;
        break;
      }
     case 5:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      HEAP[$0] = -2;
      __label__ = 27;
      break;
     case 7:
      
      var $34 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $34;
      __label__ = 25;
      break;
     case 8:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      HEAP[$0] = -2;
      __label__ = 27;
      break;
     case 10:
      
      var $42 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $42;
      __label__ = 25;
      break;
     case 11:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      HEAP[$0] = -2;
      __label__ = 27;
      break;
     case 13:
      
      var $50 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $50;
      __label__ = 25;
      break;
     case 14:
      var $51 = HEAP[$nextTokPtr_addr];
      var $52 = HEAP[$ptr_addr];
      HEAP[$51] = $52;
      HEAP[$0] = 0;
      __label__ = 27;
      break;
     case 15:
      
      var $54 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $54;
      
      
      
      if (HEAP[$t] != HEAP[$open_addr]) {
        __label__ = 25;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 16:
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 17;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 17:
      HEAP[$0] = -27;
      __label__ = 27;
      break;
     case 18:
      var $61 = HEAP[$nextTokPtr_addr];
      var $62 = HEAP[$ptr_addr];
      HEAP[$61] = $62;
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 19;
        break;
      } else {
        __label__ = 20;
        break;
      }
     case 19:
      
      
      
      
      
      
      
      
      var $75 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_867] = $75;
      __label__ = 21;
      break;
     case 20:
      
      
      
      
      
      
      
      
      var $84 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $85 = HEAP[HEAP[$ptr_addr]] & 255;
      var $86 = _unicode_byte_type($84, $85);
      HEAP[$iftmp_867] = $86;
      __label__ = 21;
      break;
     case 21:
      var $87 = HEAP[$iftmp_867];
      if ($87 == 9) {
        __label__ = 22;
        break;
      } else if ($87 == 10) {
        __label__ = 22;
        break;
      } else if ($87 == 11) {
        __label__ = 22;
        break;
      } else if ($87 == 20) {
        __label__ = 22;
        break;
      } else if ($87 == 21) {
        __label__ = 22;
        break;
      } else if ($87 == 30) {
        __label__ = 22;
        break;
      } else {
        __label__ = 23;
        break;
      }
     case 22:
      HEAP[$0] = 27;
      __label__ = 27;
      break;
     case 23:
      HEAP[$0] = 0;
      __label__ = 27;
      break;
     case 24:
      
      var $89 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $89;
      __label__ = 25;
      break;
     case 25:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 26:
      HEAP[$0] = -1;
      __label__ = 27;
      break;
     case 27:
      var $93 = HEAP[$0];
      HEAP[$retval] = $93;
      __label__ = 28;
      break;
     case 28:
      var $retval27 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval27;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _little2_prologTok($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 56;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 56);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_894 = __stackBase__ + 20;
      var $iftmp_886 = __stackBase__ + 24;
      var $iftmp_878 = __stackBase__ + 28;
      var $iftmp_876 = __stackBase__ + 32;
      var $iftmp_874 = __stackBase__ + 36;
      var $iftmp_872 = __stackBase__ + 40;
      var $0 = __stackBase__ + 44;
      var $tok = __stackBase__ + 48;
      var $n = __stackBase__ + 52;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -4;
      __label__ = 131;
      break;
     case 2:
      
      
      
      
      var $8 = HEAP[$end_addr] - HEAP[$ptr_addr];
      HEAP[$n] = $8;
      
      
      
      
      if ((HEAP[$n] & 1 & 255) != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 3:
      
      var $13 = HEAP[$n] & -2;
      HEAP[$n] = $13;
      
      
      if (HEAP[$n] == 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      HEAP[$0] = -1;
      __label__ = 131;
      break;
     case 5:
      
      
      var $18 = HEAP[$ptr_addr] + HEAP[$n];
      HEAP[$end_addr] = $18;
      __label__ = 6;
      break;
     case 6:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      
      
      
      
      
      
      
      
      var $31 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_872] = $31;
      __label__ = 9;
      break;
     case 8:
      
      
      
      
      
      
      
      
      var $40 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $41 = HEAP[HEAP[$ptr_addr]] & 255;
      var $42 = _unicode_byte_type($40, $41);
      HEAP[$iftmp_872] = $42;
      __label__ = 9;
      break;
     case 9:
      var $43 = HEAP[$iftmp_872];
      if ($43 == 2) {
        __label__ = 12;
        break;
      } else if ($43 == 4) {
        __label__ = 37;
        break;
      } else if ($43 == 5) {
        __label__ = 62;
        break;
      } else if ($43 == 6) {
        __label__ = 65;
        break;
      } else if ($43 == 7) {
        __label__ = 68;
        break;
      } else if ($43 == 9) {
        __label__ = 22;
        break;
      } else if ($43 == 10) {
        __label__ = 24;
        break;
      } else if ($43 == 11) {
        __label__ = 60;
        break;
      } else if ($43 == 12) {
        __label__ = 10;
        break;
      } else if ($43 == 13) {
        __label__ = 11;
        break;
      } else if ($43 == 19) {
        __label__ = 61;
        break;
      } else if ($43 == 20) {
        __label__ = 36;
        break;
      } else if ($43 == 21) {
        __label__ = 24;
        break;
      } else if ($43 == 22) {
        __label__ = 71;
        break;
      } else if ($43 == 23) {
        __label__ = 72;
        break;
      } else if ($43 == 24) {
        __label__ = 71;
        break;
      } else if ($43 == 25) {
        __label__ = 72;
        break;
      } else if ($43 == 26) {
        __label__ = 72;
        break;
      } else if ($43 == 27) {
        __label__ = 72;
        break;
      } else if ($43 == 29) {
        __label__ = 73;
        break;
      } else if ($43 == 30) {
        __label__ = 34;
        break;
      } else if ($43 == 31) {
        __label__ = 47;
        break;
      } else if ($43 == 32) {
        __label__ = 48;
        break;
      } else if ($43 == 35) {
        __label__ = 35;
        break;
      } else if ($43 == 36) {
        __label__ = 59;
        break;
      } else {
        __label__ = 77;
        break;
      }
     case 10:
      
      var $45 = HEAP[$ptr_addr] + 2;
      var $46 = HEAP[$enc_addr];
      var $47 = HEAP[$end_addr];
      var $48 = HEAP[$nextTokPtr_addr];
      var $49 = _little2_scanLit(12, $46, $45, $47, $48);
      HEAP[$0] = $49;
      __label__ = 131;
      break;
     case 11:
      
      var $51 = HEAP[$ptr_addr] + 2;
      var $52 = HEAP[$enc_addr];
      var $53 = HEAP[$end_addr];
      var $54 = HEAP[$nextTokPtr_addr];
      var $55 = _little2_scanLit(13, $52, $51, $53, $54);
      HEAP[$0] = $55;
      __label__ = 131;
      break;
     case 12:
      
      var $57 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $57;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      HEAP[$0] = -1;
      __label__ = 131;
      break;
     case 14:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      
      
      
      
      
      
      
      
      var $73 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_874] = $73;
      __label__ = 17;
      break;
     case 16:
      
      
      
      
      
      
      
      
      var $82 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $83 = HEAP[HEAP[$ptr_addr]] & 255;
      var $84 = _unicode_byte_type($82, $83);
      HEAP[$iftmp_874] = $84;
      __label__ = 17;
      break;
     case 17:
      var $85 = HEAP[$iftmp_874];
      if ($85 == 5) {
        __label__ = 20;
        break;
      } else if ($85 == 6) {
        __label__ = 20;
        break;
      } else if ($85 == 7) {
        __label__ = 20;
        break;
      } else if ($85 == 15) {
        __label__ = 19;
        break;
      } else if ($85 == 16) {
        __label__ = 18;
        break;
      } else if ($85 == 22) {
        __label__ = 20;
        break;
      } else if ($85 == 24) {
        __label__ = 20;
        break;
      } else if ($85 == 29) {
        __label__ = 20;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 18:
      
      var $87 = HEAP[$ptr_addr] + 2;
      var $88 = HEAP[$enc_addr];
      var $89 = HEAP[$end_addr];
      var $90 = HEAP[$nextTokPtr_addr];
      var $91 = _little2_scanDecl($88, $87, $89, $90);
      HEAP[$0] = $91;
      __label__ = 131;
      break;
     case 19:
      
      var $93 = HEAP[$ptr_addr] + 2;
      var $94 = HEAP[$enc_addr];
      var $95 = HEAP[$end_addr];
      var $96 = HEAP[$nextTokPtr_addr];
      var $97 = _little2_scanPi($94, $93, $95, $96);
      HEAP[$0] = $97;
      __label__ = 131;
      break;
     case 20:
      
      var $99 = HEAP[$ptr_addr] + -2;
      var $100 = HEAP[$nextTokPtr_addr];
      HEAP[$100] = $99;
      HEAP[$0] = 29;
      __label__ = 131;
      break;
     case 21:
      var $101 = HEAP[$nextTokPtr_addr];
      var $102 = HEAP[$ptr_addr];
      HEAP[$101] = $102;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 22:
      
      
      
      
      if (HEAP[$ptr_addr] + 2 == HEAP[$end_addr]) {
        __label__ = 23;
        break;
      } else {
        __label__ = 24;
        break;
      }
     case 23:
      var $107 = HEAP[$nextTokPtr_addr];
      var $108 = HEAP[$end_addr];
      HEAP[$107] = $108;
      HEAP[$0] = -15;
      __label__ = 131;
      break;
     case 24:
      
      var $110 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $110;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 33;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 25:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 26;
        break;
      } else {
        __label__ = 27;
        break;
      }
     case 26:
      
      
      
      
      
      
      
      
      var $126 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_876] = $126;
      __label__ = 28;
      break;
     case 27:
      
      
      
      
      
      
      
      
      var $135 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $136 = HEAP[HEAP[$ptr_addr]] & 255;
      var $137 = _unicode_byte_type($135, $136);
      HEAP[$iftmp_876] = $137;
      __label__ = 28;
      break;
     case 28:
      var $138 = HEAP[$iftmp_876];
      if ($138 == 9) {
        __label__ = 30;
        break;
      } else if ($138 == 10) {
        __label__ = 29;
        break;
      } else if ($138 == 21) {
        __label__ = 29;
        break;
      } else {
        __label__ = 31;
        break;
      }
     case 29:
      __label__ = 32;
      break;
     case 30:
      
      
      
      
      if (HEAP[$ptr_addr] + 2 != HEAP[$end_addr]) {
        __label__ = 32;
        break;
      } else {
        __label__ = 31;
        break;
      }
     case 31:
      var $143 = HEAP[$nextTokPtr_addr];
      var $144 = HEAP[$ptr_addr];
      HEAP[$143] = $144;
      HEAP[$0] = 15;
      __label__ = 131;
      break;
     case 32:
      __label__ = 24;
      break;
     case 33:
      var $145 = HEAP[$nextTokPtr_addr];
      var $146 = HEAP[$ptr_addr];
      HEAP[$145] = $146;
      HEAP[$0] = 15;
      __label__ = 131;
      break;
     case 34:
      
      var $148 = HEAP[$ptr_addr] + 2;
      var $149 = HEAP[$enc_addr];
      var $150 = HEAP[$end_addr];
      var $151 = HEAP[$nextTokPtr_addr];
      var $152 = _little2_scanPercent($149, $148, $150, $151);
      HEAP[$0] = $152;
      __label__ = 131;
      break;
     case 35:
      
      var $154 = HEAP[$ptr_addr] + 2;
      var $155 = HEAP[$nextTokPtr_addr];
      HEAP[$155] = $154;
      HEAP[$0] = 38;
      __label__ = 131;
      break;
     case 36:
      
      var $157 = HEAP[$ptr_addr] + 2;
      var $158 = HEAP[$nextTokPtr_addr];
      HEAP[$158] = $157;
      HEAP[$0] = 25;
      __label__ = 131;
      break;
     case 37:
      
      var $160 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $160;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 38;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 38:
      HEAP[$0] = -26;
      __label__ = 131;
      break;
     case 39:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 40;
        break;
      } else {
        __label__ = 46;
        break;
      }
     case 40:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 93) {
        __label__ = 41;
        break;
      } else {
        __label__ = 46;
        break;
      }
     case 41:
      
      
      
      
      if (HEAP[$ptr_addr] + 2 == HEAP[$end_addr]) {
        __label__ = 42;
        break;
      } else {
        __label__ = 43;
        break;
      }
     case 42:
      HEAP[$0] = -1;
      __label__ = 131;
      break;
     case 43:
      
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 2 + 1] == 0) {
        __label__ = 44;
        break;
      } else {
        __label__ = 46;
        break;
      }
     case 44:
      
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 2] == 62) {
        __label__ = 45;
        break;
      } else {
        __label__ = 46;
        break;
      }
     case 45:
      
      var $187 = HEAP[$ptr_addr] + 4;
      var $188 = HEAP[$nextTokPtr_addr];
      HEAP[$188] = $187;
      HEAP[$0] = 34;
      __label__ = 131;
      break;
     case 46:
      var $189 = HEAP[$nextTokPtr_addr];
      var $190 = HEAP[$ptr_addr];
      HEAP[$189] = $190;
      HEAP[$0] = 26;
      __label__ = 131;
      break;
     case 47:
      
      var $192 = HEAP[$ptr_addr] + 2;
      var $193 = HEAP[$nextTokPtr_addr];
      HEAP[$193] = $192;
      HEAP[$0] = 23;
      __label__ = 131;
      break;
     case 48:
      
      var $195 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $195;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 49;
        break;
      } else {
        __label__ = 50;
        break;
      }
     case 49:
      HEAP[$0] = -24;
      __label__ = 131;
      break;
     case 50:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 51;
        break;
      } else {
        __label__ = 52;
        break;
      }
     case 51:
      
      
      
      
      
      
      
      
      var $211 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_878] = $211;
      __label__ = 53;
      break;
     case 52:
      
      
      
      
      
      
      
      
      var $220 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $221 = HEAP[HEAP[$ptr_addr]] & 255;
      var $222 = _unicode_byte_type($220, $221);
      HEAP[$iftmp_878] = $222;
      __label__ = 53;
      break;
     case 53:
      var $223 = HEAP[$iftmp_878];
      if ($223 == 9) {
        __label__ = 57;
        break;
      } else if ($223 == 10) {
        __label__ = 57;
        break;
      } else if ($223 == 11) {
        __label__ = 57;
        break;
      } else if ($223 == 15) {
        __label__ = 55;
        break;
      } else if ($223 == 21) {
        __label__ = 57;
        break;
      } else if ($223 == 32) {
        __label__ = 57;
        break;
      } else if ($223 == 33) {
        __label__ = 54;
        break;
      } else if ($223 == 34) {
        __label__ = 56;
        break;
      } else if ($223 == 35) {
        __label__ = 57;
        break;
      } else if ($223 == 36) {
        __label__ = 57;
        break;
      } else {
        __label__ = 58;
        break;
      }
     case 54:
      
      var $225 = HEAP[$ptr_addr] + 2;
      var $226 = HEAP[$nextTokPtr_addr];
      HEAP[$226] = $225;
      HEAP[$0] = 36;
      __label__ = 131;
      break;
     case 55:
      
      var $228 = HEAP[$ptr_addr] + 2;
      var $229 = HEAP[$nextTokPtr_addr];
      HEAP[$229] = $228;
      HEAP[$0] = 35;
      __label__ = 131;
      break;
     case 56:
      
      var $231 = HEAP[$ptr_addr] + 2;
      var $232 = HEAP[$nextTokPtr_addr];
      HEAP[$232] = $231;
      HEAP[$0] = 37;
      __label__ = 131;
      break;
     case 57:
      var $233 = HEAP[$nextTokPtr_addr];
      var $234 = HEAP[$ptr_addr];
      HEAP[$233] = $234;
      HEAP[$0] = 24;
      __label__ = 131;
      break;
     case 58:
      var $235 = HEAP[$nextTokPtr_addr];
      var $236 = HEAP[$ptr_addr];
      HEAP[$235] = $236;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 59:
      
      var $238 = HEAP[$ptr_addr] + 2;
      var $239 = HEAP[$nextTokPtr_addr];
      HEAP[$239] = $238;
      HEAP[$0] = 21;
      __label__ = 131;
      break;
     case 60:
      
      var $241 = HEAP[$ptr_addr] + 2;
      var $242 = HEAP[$nextTokPtr_addr];
      HEAP[$242] = $241;
      HEAP[$0] = 17;
      __label__ = 131;
      break;
     case 61:
      
      var $244 = HEAP[$ptr_addr] + 2;
      var $245 = HEAP[$enc_addr];
      var $246 = HEAP[$end_addr];
      var $247 = HEAP[$nextTokPtr_addr];
      var $248 = _little2_scanPoundName($245, $244, $246, $247);
      HEAP[$0] = $248;
      __label__ = 131;
      break;
     case 62:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 63;
        break;
      } else {
        __label__ = 64;
        break;
      }
     case 63:
      HEAP[$0] = -2;
      __label__ = 131;
      break;
     case 64:
      var $255 = HEAP[$nextTokPtr_addr];
      var $256 = HEAP[$ptr_addr];
      HEAP[$255] = $256;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 65:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 66;
        break;
      } else {
        __label__ = 67;
        break;
      }
     case 66:
      HEAP[$0] = -2;
      __label__ = 131;
      break;
     case 67:
      var $263 = HEAP[$nextTokPtr_addr];
      var $264 = HEAP[$ptr_addr];
      HEAP[$263] = $264;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 68:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 69;
        break;
      } else {
        __label__ = 70;
        break;
      }
     case 69:
      HEAP[$0] = -2;
      __label__ = 131;
      break;
     case 70:
      var $271 = HEAP[$nextTokPtr_addr];
      var $272 = HEAP[$ptr_addr];
      HEAP[$271] = $272;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 71:
      HEAP[$tok] = 18;
      
      var $274 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $274;
      __label__ = 78;
      break;
     case 72:
      HEAP[$tok] = 19;
      
      var $276 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $276;
      __label__ = 78;
      break;
     case 73:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_nmstrtPages + HEAP[HEAP[$ptr_addr] + 1]] << 3) + (HEAP[HEAP[$ptr_addr]] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr]] & 31)) != 0) {
        __label__ = 74;
        break;
      } else {
        __label__ = 75;
        break;
      }
     case 74:
      
      var $302 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $302;
      HEAP[$tok] = 18;
      __label__ = 78;
      break;
     case 75:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_namePages + HEAP[HEAP[$ptr_addr] + 1]] << 3) + (HEAP[HEAP[$ptr_addr]] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr]] & 31)) != 0) {
        __label__ = 76;
        break;
      } else {
        __label__ = 77;
        break;
      }
     case 76:
      
      var $328 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $328;
      HEAP[$tok] = 19;
      __label__ = 78;
      break;
     case 77:
      var $329 = HEAP[$nextTokPtr_addr];
      var $330 = HEAP[$ptr_addr];
      HEAP[$329] = $330;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 78:
      __label__ = 129;
      break;
     case 79:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 80;
        break;
      } else {
        __label__ = 81;
        break;
      }
     case 80:
      
      
      
      
      
      
      
      
      var $343 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_886] = $343;
      __label__ = 82;
      break;
     case 81:
      
      
      
      
      
      
      
      
      var $352 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $353 = HEAP[HEAP[$ptr_addr]] & 255;
      var $354 = _unicode_byte_type($352, $353);
      HEAP[$iftmp_886] = $354;
      __label__ = 82;
      break;
     case 82:
      var $355 = HEAP[$iftmp_886];
      if ($355 == 5) {
        __label__ = 86;
        break;
      } else if ($355 == 6) {
        __label__ = 89;
        break;
      } else if ($355 == 7) {
        __label__ = 92;
        break;
      } else if ($355 == 9) {
        __label__ = 95;
        break;
      } else if ($355 == 10) {
        __label__ = 95;
        break;
      } else if ($355 == 11) {
        __label__ = 95;
        break;
      } else if ($355 == 15) {
        __label__ = 125;
        break;
      } else if ($355 == 20) {
        __label__ = 95;
        break;
      } else if ($355 == 21) {
        __label__ = 95;
        break;
      } else if ($355 == 22) {
        __label__ = 85;
        break;
      } else if ($355 == 23) {
        __label__ = 96;
        break;
      } else if ($355 == 24) {
        __label__ = 85;
        break;
      } else if ($355 == 25) {
        __label__ = 85;
        break;
      } else if ($355 == 26) {
        __label__ = 85;
        break;
      } else if ($355 == 27) {
        __label__ = 85;
        break;
      } else if ($355 == 29) {
        __label__ = 83;
        break;
      } else if ($355 == 30) {
        __label__ = 95;
        break;
      } else if ($355 == 32) {
        __label__ = 95;
        break;
      } else if ($355 == 33) {
        __label__ = 122;
        break;
      } else if ($355 == 34) {
        __label__ = 119;
        break;
      } else if ($355 == 35) {
        __label__ = 95;
        break;
      } else if ($355 == 36) {
        __label__ = 95;
        break;
      } else {
        __label__ = 128;
        break;
      }
     case 83:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_namePages + HEAP[HEAP[$ptr_addr] + 1]] << 3) + (HEAP[HEAP[$ptr_addr]] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr]] & 31)) == 0) {
        __label__ = 84;
        break;
      } else {
        __label__ = 85;
        break;
      }
     case 84:
      var $380 = HEAP[$nextTokPtr_addr];
      var $381 = HEAP[$ptr_addr];
      HEAP[$380] = $381;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 85:
      
      var $383 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $383;
      __label__ = 129;
      break;
     case 86:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 87;
        break;
      } else {
        __label__ = 88;
        break;
      }
     case 87:
      HEAP[$0] = -2;
      __label__ = 131;
      break;
     case 88:
      var $390 = HEAP[$nextTokPtr_addr];
      var $391 = HEAP[$ptr_addr];
      HEAP[$390] = $391;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 89:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 90;
        break;
      } else {
        __label__ = 91;
        break;
      }
     case 90:
      HEAP[$0] = -2;
      __label__ = 131;
      break;
     case 91:
      var $398 = HEAP[$nextTokPtr_addr];
      var $399 = HEAP[$ptr_addr];
      HEAP[$398] = $399;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 92:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 93;
        break;
      } else {
        __label__ = 94;
        break;
      }
     case 93:
      HEAP[$0] = -2;
      __label__ = 131;
      break;
     case 94:
      var $406 = HEAP[$nextTokPtr_addr];
      var $407 = HEAP[$ptr_addr];
      HEAP[$406] = $407;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 95:
      var $408 = HEAP[$nextTokPtr_addr];
      var $409 = HEAP[$ptr_addr];
      HEAP[$408] = $409;
      var $410 = HEAP[$tok];
      HEAP[$0] = $410;
      __label__ = 131;
      break;
     case 96:
      
      var $412 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $412;
      var $413 = HEAP[$tok];
      if ($413 == 18) {
        __label__ = 97;
        break;
      } else if ($413 == 41) {
        __label__ = 117;
        break;
      } else {
        __label__ = 118;
        break;
      }
     case 97:
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 98;
        break;
      } else {
        __label__ = 99;
        break;
      }
     case 98:
      HEAP[$0] = -1;
      __label__ = 131;
      break;
     case 99:
      HEAP[$tok] = 41;
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 100;
        break;
      } else {
        __label__ = 101;
        break;
      }
     case 100:
      
      
      
      
      
      
      
      
      var $429 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_894] = $429;
      __label__ = 102;
      break;
     case 101:
      
      
      
      
      
      
      
      
      var $438 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $439 = HEAP[HEAP[$ptr_addr]] & 255;
      var $440 = _unicode_byte_type($438, $439);
      HEAP[$iftmp_894] = $440;
      __label__ = 102;
      break;
     case 102:
      var $441 = HEAP[$iftmp_894];
      if ($441 == 5) {
        __label__ = 106;
        break;
      } else if ($441 == 6) {
        __label__ = 109;
        break;
      } else if ($441 == 7) {
        __label__ = 112;
        break;
      } else if ($441 == 22) {
        __label__ = 105;
        break;
      } else if ($441 == 24) {
        __label__ = 105;
        break;
      } else if ($441 == 25) {
        __label__ = 105;
        break;
      } else if ($441 == 26) {
        __label__ = 105;
        break;
      } else if ($441 == 27) {
        __label__ = 105;
        break;
      } else if ($441 == 29) {
        __label__ = 103;
        break;
      } else {
        __label__ = 115;
        break;
      }
     case 103:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_namePages + HEAP[HEAP[$ptr_addr] + 1]] << 3) + (HEAP[HEAP[$ptr_addr]] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr]] & 31)) == 0) {
        __label__ = 104;
        break;
      } else {
        __label__ = 105;
        break;
      }
     case 104:
      var $466 = HEAP[$nextTokPtr_addr];
      var $467 = HEAP[$ptr_addr];
      HEAP[$466] = $467;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 105:
      
      var $469 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $469;
      __label__ = 116;
      break;
     case 106:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 107;
        break;
      } else {
        __label__ = 108;
        break;
      }
     case 107:
      HEAP[$0] = -2;
      __label__ = 131;
      break;
     case 108:
      var $476 = HEAP[$nextTokPtr_addr];
      var $477 = HEAP[$ptr_addr];
      HEAP[$476] = $477;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 109:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 110;
        break;
      } else {
        __label__ = 111;
        break;
      }
     case 110:
      HEAP[$0] = -2;
      __label__ = 131;
      break;
     case 111:
      var $484 = HEAP[$nextTokPtr_addr];
      var $485 = HEAP[$ptr_addr];
      HEAP[$484] = $485;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 112:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 113;
        break;
      } else {
        __label__ = 114;
        break;
      }
     case 113:
      HEAP[$0] = -2;
      __label__ = 131;
      break;
     case 114:
      var $492 = HEAP[$nextTokPtr_addr];
      var $493 = HEAP[$ptr_addr];
      HEAP[$492] = $493;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 115:
      HEAP[$tok] = 19;
      __label__ = 116;
      break;
     case 116:
      __label__ = 118;
      break;
     case 117:
      HEAP[$tok] = 19;
      __label__ = 118;
      break;
     case 118:
      __label__ = 129;
      break;
     case 119:
      
      
      if (HEAP[$tok] == 19) {
        __label__ = 120;
        break;
      } else {
        __label__ = 121;
        break;
      }
     case 120:
      var $496 = HEAP[$nextTokPtr_addr];
      var $497 = HEAP[$ptr_addr];
      HEAP[$496] = $497;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 121:
      
      var $499 = HEAP[$ptr_addr] + 2;
      var $500 = HEAP[$nextTokPtr_addr];
      HEAP[$500] = $499;
      HEAP[$0] = 32;
      __label__ = 131;
      break;
     case 122:
      
      
      if (HEAP[$tok] == 19) {
        __label__ = 123;
        break;
      } else {
        __label__ = 124;
        break;
      }
     case 123:
      var $503 = HEAP[$nextTokPtr_addr];
      var $504 = HEAP[$ptr_addr];
      HEAP[$503] = $504;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 124:
      
      var $506 = HEAP[$ptr_addr] + 2;
      var $507 = HEAP[$nextTokPtr_addr];
      HEAP[$507] = $506;
      HEAP[$0] = 31;
      __label__ = 131;
      break;
     case 125:
      
      
      if (HEAP[$tok] == 19) {
        __label__ = 126;
        break;
      } else {
        __label__ = 127;
        break;
      }
     case 126:
      var $510 = HEAP[$nextTokPtr_addr];
      var $511 = HEAP[$ptr_addr];
      HEAP[$510] = $511;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 127:
      
      var $513 = HEAP[$ptr_addr] + 2;
      var $514 = HEAP[$nextTokPtr_addr];
      HEAP[$514] = $513;
      HEAP[$0] = 30;
      __label__ = 131;
      break;
     case 128:
      var $515 = HEAP[$nextTokPtr_addr];
      var $516 = HEAP[$ptr_addr];
      HEAP[$515] = $516;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 129:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 79;
        break;
      } else {
        __label__ = 130;
        break;
      }
     case 130:
      
      var $521 = 0 - HEAP[$tok];
      HEAP[$0] = $521;
      __label__ = 131;
      break;
     case 131:
      var $522 = HEAP[$0];
      HEAP[$retval] = $522;
      __label__ = 132;
      break;
     case 132:
      var $retval131 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval131;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _little2_attributeValueTok($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 33;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 33);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_904 = __stackBase__ + 20;
      var $iftmp_902 = __stackBase__ + 21;
      var $0 = __stackBase__ + 25;
      var $start = __stackBase__ + 29;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -4;
      __label__ = 33;
      break;
     case 2:
      var $4 = HEAP[$ptr_addr];
      HEAP[$start] = $4;
      __label__ = 31;
      break;
     case 3:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      
      
      
      
      
      
      
      
      var $17 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_902] = $17;
      __label__ = 6;
      break;
     case 5:
      
      
      
      
      
      
      
      
      var $26 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $27 = HEAP[HEAP[$ptr_addr]] & 255;
      var $28 = _unicode_byte_type($26, $27);
      HEAP[$iftmp_902] = $28;
      __label__ = 6;
      break;
     case 6:
      var $29 = HEAP[$iftmp_902];
      if ($29 == 2) {
        __label__ = 13;
        break;
      } else if ($29 == 3) {
        __label__ = 10;
        break;
      } else if ($29 == 5) {
        __label__ = 7;
        break;
      } else if ($29 == 6) {
        __label__ = 8;
        break;
      } else if ($29 == 7) {
        __label__ = 9;
        break;
      } else if ($29 == 9) {
        __label__ = 17;
        break;
      } else if ($29 == 10) {
        __label__ = 14;
        break;
      } else if ($29 == 21) {
        __label__ = 27;
        break;
      } else {
        __label__ = 30;
        break;
      }
     case 7:
      
      var $31 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $31;
      __label__ = 31;
      break;
     case 8:
      
      var $33 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $33;
      __label__ = 31;
      break;
     case 9:
      
      var $35 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $35;
      __label__ = 31;
      break;
     case 10:
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$start]) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      
      var $40 = HEAP[$ptr_addr] + 2;
      var $41 = HEAP[$enc_addr];
      var $42 = HEAP[$end_addr];
      var $43 = HEAP[$nextTokPtr_addr];
      var $44 = _little2_scanRef($41, $40, $42, $43);
      HEAP[$0] = $44;
      __label__ = 33;
      break;
     case 12:
      var $45 = HEAP[$nextTokPtr_addr];
      var $46 = HEAP[$ptr_addr];
      HEAP[$45] = $46;
      HEAP[$0] = 6;
      __label__ = 33;
      break;
     case 13:
      var $47 = HEAP[$nextTokPtr_addr];
      var $48 = HEAP[$ptr_addr];
      HEAP[$47] = $48;
      HEAP[$0] = 0;
      __label__ = 33;
      break;
     case 14:
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$start]) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      
      var $53 = HEAP[$ptr_addr] + 2;
      var $54 = HEAP[$nextTokPtr_addr];
      HEAP[$54] = $53;
      HEAP[$0] = 7;
      __label__ = 33;
      break;
     case 16:
      var $55 = HEAP[$nextTokPtr_addr];
      var $56 = HEAP[$ptr_addr];
      HEAP[$55] = $56;
      HEAP[$0] = 6;
      __label__ = 33;
      break;
     case 17:
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$start]) {
        __label__ = 18;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 18:
      
      var $61 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $61;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 19;
        break;
      } else {
        __label__ = 20;
        break;
      }
     case 19:
      HEAP[$0] = -3;
      __label__ = 33;
      break;
     case 20:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 21;
        break;
      } else {
        __label__ = 22;
        break;
      }
     case 21:
      
      
      
      
      
      
      
      
      
      var $78 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]] == 10;
      HEAP[$iftmp_904] = $78;
      __label__ = 23;
      break;
     case 22:
      
      
      
      
      
      
      
      
      var $87 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $88 = HEAP[HEAP[$ptr_addr]] & 255;
      var $89 = _unicode_byte_type($87, $88);
      
      var $91 = $89 == 10;
      HEAP[$iftmp_904] = $91;
      __label__ = 23;
      break;
     case 23:
      
      
      if (HEAP[$iftmp_904] != 0) {
        __label__ = 24;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 24:
      
      var $94 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $94;
      __label__ = 25;
      break;
     case 25:
      var $95 = HEAP[$nextTokPtr_addr];
      var $96 = HEAP[$ptr_addr];
      HEAP[$95] = $96;
      HEAP[$0] = 7;
      __label__ = 33;
      break;
     case 26:
      var $97 = HEAP[$nextTokPtr_addr];
      var $98 = HEAP[$ptr_addr];
      HEAP[$97] = $98;
      HEAP[$0] = 6;
      __label__ = 33;
      break;
     case 27:
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$start]) {
        __label__ = 28;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 28:
      
      var $103 = HEAP[$ptr_addr] + 2;
      var $104 = HEAP[$nextTokPtr_addr];
      HEAP[$104] = $103;
      HEAP[$0] = 39;
      __label__ = 33;
      break;
     case 29:
      var $105 = HEAP[$nextTokPtr_addr];
      var $106 = HEAP[$ptr_addr];
      HEAP[$105] = $106;
      HEAP[$0] = 6;
      __label__ = 33;
      break;
     case 30:
      
      var $108 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $108;
      __label__ = 31;
      break;
     case 31:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 3;
        break;
      } else {
        __label__ = 32;
        break;
      }
     case 32:
      var $112 = HEAP[$nextTokPtr_addr];
      var $113 = HEAP[$ptr_addr];
      HEAP[$112] = $113;
      HEAP[$0] = 6;
      __label__ = 33;
      break;
     case 33:
      var $114 = HEAP[$0];
      HEAP[$retval] = $114;
      __label__ = 34;
      break;
     case 34:
      var $retval33 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval33;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _little2_entityValueTok($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 41;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 41);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_909 = __stackBase__ + 20;
      var $iftmp_908 = __stackBase__ + 21;
      var $iftmp_906 = __stackBase__ + 25;
      var $0 = __stackBase__ + 29;
      var $start = __stackBase__ + 33;
      var $tok = __stackBase__ + 37;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -4;
      __label__ = 35;
      break;
     case 2:
      var $4 = HEAP[$ptr_addr];
      HEAP[$start] = $4;
      __label__ = 33;
      break;
     case 3:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      
      
      
      
      
      
      
      
      var $17 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_906] = $17;
      __label__ = 6;
      break;
     case 5:
      
      
      
      
      
      
      
      
      var $26 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $27 = HEAP[HEAP[$ptr_addr]] & 255;
      var $28 = _unicode_byte_type($26, $27);
      HEAP[$iftmp_906] = $28;
      __label__ = 6;
      break;
     case 6:
      var $29 = HEAP[$iftmp_906];
      if ($29 == 3) {
        __label__ = 10;
        break;
      } else if ($29 == 5) {
        __label__ = 7;
        break;
      } else if ($29 == 6) {
        __label__ = 8;
        break;
      } else if ($29 == 7) {
        __label__ = 9;
        break;
      } else if ($29 == 9) {
        __label__ = 22;
        break;
      } else if ($29 == 10) {
        __label__ = 19;
        break;
      } else if ($29 == 30) {
        __label__ = 13;
        break;
      } else {
        __label__ = 32;
        break;
      }
     case 7:
      
      var $31 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $31;
      __label__ = 33;
      break;
     case 8:
      
      var $33 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $33;
      __label__ = 33;
      break;
     case 9:
      
      var $35 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $35;
      __label__ = 33;
      break;
     case 10:
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$start]) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      
      var $40 = HEAP[$ptr_addr] + 2;
      var $41 = HEAP[$enc_addr];
      var $42 = HEAP[$end_addr];
      var $43 = HEAP[$nextTokPtr_addr];
      var $44 = _little2_scanRef($41, $40, $42, $43);
      HEAP[$0] = $44;
      __label__ = 35;
      break;
     case 12:
      var $45 = HEAP[$nextTokPtr_addr];
      var $46 = HEAP[$ptr_addr];
      HEAP[$45] = $46;
      HEAP[$0] = 6;
      __label__ = 35;
      break;
     case 13:
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$start]) {
        __label__ = 14;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 14:
      
      var $51 = HEAP[$ptr_addr] + 2;
      var $52 = HEAP[$enc_addr];
      var $53 = HEAP[$end_addr];
      var $54 = HEAP[$nextTokPtr_addr];
      var $55 = _little2_scanPercent($52, $51, $53, $54);
      HEAP[$tok] = $55;
      
      
      if (HEAP[$tok] != 22) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      var $58 = HEAP[$tok];
      HEAP[$iftmp_908] = $58;
      __label__ = 17;
      break;
     case 16:
      HEAP[$iftmp_908] = 0;
      __label__ = 17;
      break;
     case 17:
      var $59 = HEAP[$iftmp_908];
      HEAP[$0] = $59;
      __label__ = 35;
      break;
     case 18:
      var $60 = HEAP[$nextTokPtr_addr];
      var $61 = HEAP[$ptr_addr];
      HEAP[$60] = $61;
      HEAP[$0] = 6;
      __label__ = 35;
      break;
     case 19:
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$start]) {
        __label__ = 20;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 20:
      
      var $66 = HEAP[$ptr_addr] + 2;
      var $67 = HEAP[$nextTokPtr_addr];
      HEAP[$67] = $66;
      HEAP[$0] = 7;
      __label__ = 35;
      break;
     case 21:
      var $68 = HEAP[$nextTokPtr_addr];
      var $69 = HEAP[$ptr_addr];
      HEAP[$68] = $69;
      HEAP[$0] = 6;
      __label__ = 35;
      break;
     case 22:
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$start]) {
        __label__ = 23;
        break;
      } else {
        __label__ = 31;
        break;
      }
     case 23:
      
      var $74 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $74;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 24;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 24:
      HEAP[$0] = -3;
      __label__ = 35;
      break;
     case 25:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 26;
        break;
      } else {
        __label__ = 27;
        break;
      }
     case 26:
      
      
      
      
      
      
      
      
      
      var $91 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]] == 10;
      HEAP[$iftmp_909] = $91;
      __label__ = 28;
      break;
     case 27:
      
      
      
      
      
      
      
      
      var $100 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $101 = HEAP[HEAP[$ptr_addr]] & 255;
      var $102 = _unicode_byte_type($100, $101);
      
      var $104 = $102 == 10;
      HEAP[$iftmp_909] = $104;
      __label__ = 28;
      break;
     case 28:
      
      
      if (HEAP[$iftmp_909] != 0) {
        __label__ = 29;
        break;
      } else {
        __label__ = 30;
        break;
      }
     case 29:
      
      var $107 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $107;
      __label__ = 30;
      break;
     case 30:
      var $108 = HEAP[$nextTokPtr_addr];
      var $109 = HEAP[$ptr_addr];
      HEAP[$108] = $109;
      HEAP[$0] = 7;
      __label__ = 35;
      break;
     case 31:
      var $110 = HEAP[$nextTokPtr_addr];
      var $111 = HEAP[$ptr_addr];
      HEAP[$110] = $111;
      HEAP[$0] = 6;
      __label__ = 35;
      break;
     case 32:
      
      var $113 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $113;
      __label__ = 33;
      break;
     case 33:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 3;
        break;
      } else {
        __label__ = 34;
        break;
      }
     case 34:
      var $117 = HEAP[$nextTokPtr_addr];
      var $118 = HEAP[$ptr_addr];
      HEAP[$117] = $118;
      HEAP[$0] = 6;
      __label__ = 35;
      break;
     case 35:
      var $119 = HEAP[$0];
      HEAP[$retval] = $119;
      __label__ = 36;
      break;
     case 36:
      var $retval35 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval35;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _little2_ignoreSectionTok($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 36;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $iftmp_914 = __stackBase__ + 24;
      var $level = __stackBase__ + 28;
      var $n = __stackBase__ + 32;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      HEAP[$level] = 0;
      
      
      
      
      var $5 = HEAP[$end_addr] - HEAP[$ptr_addr];
      HEAP[$n] = $5;
      
      
      
      
      if ((HEAP[$n] & 1 & 255) != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      
      var $10 = HEAP[$n] & -2;
      HEAP[$n] = $10;
      
      
      var $13 = HEAP[$ptr_addr] + HEAP[$n];
      HEAP[$end_addr] = $13;
      __label__ = 2;
      break;
     case 2:
      __label__ = 40;
      break;
     case 3:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      
      
      
      
      
      
      
      
      var $26 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_914] = $26;
      __label__ = 6;
      break;
     case 5:
      
      
      
      
      
      
      
      
      var $35 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $36 = HEAP[HEAP[$ptr_addr]] & 255;
      var $37 = _unicode_byte_type($35, $36);
      HEAP[$iftmp_914] = $37;
      __label__ = 6;
      break;
     case 6:
      var $38 = HEAP[$iftmp_914];
      if ($38 == 0) {
        __label__ = 16;
        break;
      } else if ($38 == 1) {
        __label__ = 16;
        break;
      } else if ($38 == 2) {
        __label__ = 17;
        break;
      } else if ($38 == 4) {
        __label__ = 27;
        break;
      } else if ($38 == 5) {
        __label__ = 7;
        break;
      } else if ($38 == 6) {
        __label__ = 10;
        break;
      } else if ($38 == 7) {
        __label__ = 13;
        break;
      } else if ($38 == 8) {
        __label__ = 16;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 7:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      HEAP[$0] = -2;
      __label__ = 42;
      break;
     case 9:
      
      var $46 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $46;
      __label__ = 40;
      break;
     case 10:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      HEAP[$0] = -2;
      __label__ = 42;
      break;
     case 12:
      
      var $54 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $54;
      __label__ = 40;
      break;
     case 13:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 14;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 14:
      HEAP[$0] = -2;
      __label__ = 42;
      break;
     case 15:
      
      var $62 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $62;
      __label__ = 40;
      break;
     case 16:
      var $63 = HEAP[$nextTokPtr_addr];
      var $64 = HEAP[$ptr_addr];
      HEAP[$63] = $64;
      HEAP[$0] = 0;
      __label__ = 42;
      break;
     case 17:
      
      var $66 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $66;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 18;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 18:
      HEAP[$0] = -1;
      __label__ = 42;
      break;
     case 19:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 20;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 20:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 33) {
        __label__ = 21;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 21:
      
      var $79 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $79;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 22;
        break;
      } else {
        __label__ = 23;
        break;
      }
     case 22:
      HEAP[$0] = -1;
      __label__ = 42;
      break;
     case 23:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 24;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 24:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 91) {
        __label__ = 25;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 25:
      
      var $92 = HEAP[$level] + 1;
      HEAP[$level] = $92;
      
      var $94 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $94;
      __label__ = 26;
      break;
     case 26:
      __label__ = 40;
      break;
     case 27:
      
      var $96 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $96;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 28;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 28:
      HEAP[$0] = -1;
      __label__ = 42;
      break;
     case 29:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 30;
        break;
      } else {
        __label__ = 38;
        break;
      }
     case 30:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 93) {
        __label__ = 31;
        break;
      } else {
        __label__ = 38;
        break;
      }
     case 31:
      
      var $109 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $109;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 32;
        break;
      } else {
        __label__ = 33;
        break;
      }
     case 32:
      HEAP[$0] = -1;
      __label__ = 42;
      break;
     case 33:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 34;
        break;
      } else {
        __label__ = 38;
        break;
      }
     case 34:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 62) {
        __label__ = 35;
        break;
      } else {
        __label__ = 38;
        break;
      }
     case 35:
      
      var $122 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $122;
      
      
      if (HEAP[$level] == 0) {
        __label__ = 36;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 36:
      var $125 = HEAP[$nextTokPtr_addr];
      var $126 = HEAP[$ptr_addr];
      HEAP[$125] = $126;
      HEAP[$0] = 42;
      __label__ = 42;
      break;
     case 37:
      
      var $128 = HEAP[$level] - 1;
      HEAP[$level] = $128;
      __label__ = 38;
      break;
     case 38:
      __label__ = 40;
      break;
     case 39:
      
      var $130 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $130;
      __label__ = 40;
      break;
     case 40:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 3;
        break;
      } else {
        __label__ = 41;
        break;
      }
     case 41:
      HEAP[$0] = -1;
      __label__ = 42;
      break;
     case 42:
      var $134 = HEAP[$0];
      HEAP[$retval] = $134;
      __label__ = 43;
      break;
     case 43:
      var $retval42 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval42;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _little2_isPublicId($enc, $ptr, $end, $badPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 32;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $badPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_924 = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      var $iftmp_922 = __stackBase__ + 28;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$badPtr_addr] = $badPtr;
      
      var $2 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $2;
      
      var $4 = HEAP[$end_addr] + -2;
      HEAP[$end_addr] = $4;
      __label__ = 19;
      break;
     case 1:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      
      
      
      
      
      
      
      var $17 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_922] = $17;
      __label__ = 4;
      break;
     case 3:
      
      
      
      
      
      
      
      
      var $26 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $27 = HEAP[HEAP[$ptr_addr]] & 255;
      var $28 = _unicode_byte_type($26, $27);
      HEAP[$iftmp_922] = $28;
      __label__ = 4;
      break;
     case 4:
      var $29 = HEAP[$iftmp_922];
      if ($29 == 9) {
        __label__ = 5;
        break;
      } else if ($29 == 10) {
        __label__ = 5;
        break;
      } else if ($29 == 13) {
        __label__ = 5;
        break;
      } else if ($29 == 14) {
        __label__ = 5;
        break;
      } else if ($29 == 15) {
        __label__ = 5;
        break;
      } else if ($29 == 16) {
        __label__ = 5;
        break;
      } else if ($29 == 17) {
        __label__ = 5;
        break;
      } else if ($29 == 18) {
        __label__ = 5;
        break;
      } else if ($29 == 19) {
        __label__ = 5;
        break;
      } else if ($29 == 21) {
        __label__ = 6;
        break;
      } else if ($29 == 22) {
        __label__ = 10;
        break;
      } else if ($29 == 23) {
        __label__ = 5;
        break;
      } else if ($29 == 24) {
        __label__ = 5;
        break;
      } else if ($29 == 25) {
        __label__ = 5;
        break;
      } else if ($29 == 26) {
        __label__ = 10;
        break;
      } else if ($29 == 27) {
        __label__ = 5;
        break;
      } else if ($29 == 30) {
        __label__ = 5;
        break;
      } else if ($29 == 31) {
        __label__ = 5;
        break;
      } else if ($29 == 32) {
        __label__ = 5;
        break;
      } else if ($29 == 33) {
        __label__ = 5;
        break;
      } else if ($29 == 34) {
        __label__ = 5;
        break;
      } else if ($29 == 35) {
        __label__ = 5;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 5:
      __label__ = 18;
      break;
     case 6:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 7:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 9) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      var $38 = HEAP[$badPtr_addr];
      var $39 = HEAP[$ptr_addr];
      HEAP[$38] = $39;
      HEAP[$0] = 0;
      __label__ = 21;
      break;
     case 9:
      __label__ = 18;
      break;
     case 10:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      
      
      
      
      var $48 = HEAP[HEAP[$ptr_addr]] & -128;
      
      if ($48 == 0) {
        __label__ = 18;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 12:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      
      
      
      var $57 = HEAP[HEAP[$ptr_addr]];
      HEAP[$iftmp_924] = $57;
      __label__ = 15;
      break;
     case 14:
      HEAP[$iftmp_924] = -1;
      __label__ = 15;
      break;
     case 15:
      var $58 = HEAP[$iftmp_924];
      if ($58 == 36) {
        __label__ = 16;
        break;
      } else if ($58 == 64) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      __label__ = 18;
      break;
     case 17:
      var $59 = HEAP[$badPtr_addr];
      var $60 = HEAP[$ptr_addr];
      HEAP[$59] = $60;
      HEAP[$0] = 0;
      __label__ = 21;
      break;
     case 18:
      
      var $62 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $62;
      __label__ = 19;
      break;
     case 19:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 20;
        break;
      }
     case 20:
      HEAP[$0] = 1;
      __label__ = 21;
      break;
     case 21:
      var $66 = HEAP[$0];
      HEAP[$retval] = $66;
      __label__ = 22;
      break;
     case 22:
      var $retval21 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval21;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _little2_getAtts($enc, $ptr, $attsMax, $atts) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 44;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 44);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $attsMax_addr = __stackBase__ + 8;
      var $atts_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $iftmp_927 = __stackBase__ + 24;
      var $iftmp_925 = __stackBase__ + 28;
      var $state = __stackBase__ + 32;
      var $nAtts = __stackBase__ + 36;
      var $open = __stackBase__ + 40;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$attsMax_addr] = $attsMax;
      HEAP[$atts_addr] = $atts;
      HEAP[$state] = 1;
      HEAP[$nAtts] = 0;
      HEAP[$open] = 0;
      
      var $2 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $2;
      __label__ = 1;
      break;
     case 1:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      
      
      
      
      
      
      
      var $15 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_925] = $15;
      __label__ = 4;
      break;
     case 3:
      
      
      
      
      
      
      
      
      var $24 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $25 = HEAP[HEAP[$ptr_addr]] & 255;
      var $26 = _unicode_byte_type($24, $25);
      HEAP[$iftmp_925] = $26;
      __label__ = 4;
      break;
     case 4:
      var $27 = HEAP[$iftmp_925];
      if ($27 == 3) {
        __label__ = 43;
        break;
      } else if ($27 == 5) {
        __label__ = 5;
        break;
      } else if ($27 == 6) {
        __label__ = 10;
        break;
      } else if ($27 == 7) {
        __label__ = 15;
        break;
      } else if ($27 == 9) {
        __label__ = 62;
        break;
      } else if ($27 == 10) {
        __label__ = 62;
        break;
      } else if ($27 == 11) {
        __label__ = 68;
        break;
      } else if ($27 == 12) {
        __label__ = 25;
        break;
      } else if ($27 == 13) {
        __label__ = 34;
        break;
      } else if ($27 == 17) {
        __label__ = 68;
        break;
      } else if ($27 == 21) {
        __label__ = 46;
        break;
      } else if ($27 == 22) {
        __label__ = 20;
        break;
      } else if ($27 == 24) {
        __label__ = 20;
        break;
      } else if ($27 == 29) {
        __label__ = 20;
        break;
      } else {
        __label__ = 70;
        break;
      }
     case 5:
      
      
      if (HEAP[$state] == 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 6:
      
      
      
      if (HEAP[$nAtts] < HEAP[$attsMax_addr]) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      
      
      
      var $36 = HEAP[$atts_addr] + 16 * HEAP[$nAtts];
      var $37 = HEAP[$ptr_addr];
      HEAP[$36] = $37;
      
      
      
      var $41 = HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 12;
      HEAP[$41] = 1;
      __label__ = 8;
      break;
     case 8:
      HEAP[$state] = 1;
      __label__ = 9;
      break;
     case 9:
      
      var $43 = HEAP[$ptr_addr];
      HEAP[$ptr_addr] = $43;
      __label__ = 70;
      break;
     case 10:
      
      
      if (HEAP[$state] == 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 11:
      
      
      
      if (HEAP[$nAtts] < HEAP[$attsMax_addr]) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      
      
      
      var $52 = HEAP[$atts_addr] + 16 * HEAP[$nAtts];
      var $53 = HEAP[$ptr_addr];
      HEAP[$52] = $53;
      
      
      
      var $57 = HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 12;
      HEAP[$57] = 1;
      __label__ = 13;
      break;
     case 13:
      HEAP[$state] = 1;
      __label__ = 14;
      break;
     case 14:
      
      var $59 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $59;
      __label__ = 70;
      break;
     case 15:
      
      
      if (HEAP[$state] == 0) {
        __label__ = 16;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 16:
      
      
      
      if (HEAP[$nAtts] < HEAP[$attsMax_addr]) {
        __label__ = 17;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 17:
      
      
      
      var $68 = HEAP[$atts_addr] + 16 * HEAP[$nAtts];
      var $69 = HEAP[$ptr_addr];
      HEAP[$68] = $69;
      
      
      
      var $73 = HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 12;
      HEAP[$73] = 1;
      __label__ = 18;
      break;
     case 18:
      HEAP[$state] = 1;
      __label__ = 19;
      break;
     case 19:
      
      var $75 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $75;
      __label__ = 70;
      break;
     case 20:
      
      
      if (HEAP[$state] == 0) {
        __label__ = 21;
        break;
      } else {
        __label__ = 24;
        break;
      }
     case 21:
      
      
      
      if (HEAP[$nAtts] < HEAP[$attsMax_addr]) {
        __label__ = 22;
        break;
      } else {
        __label__ = 23;
        break;
      }
     case 22:
      
      
      
      var $84 = HEAP[$atts_addr] + 16 * HEAP[$nAtts];
      var $85 = HEAP[$ptr_addr];
      HEAP[$84] = $85;
      
      
      
      var $89 = HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 12;
      HEAP[$89] = 1;
      __label__ = 23;
      break;
     case 23:
      HEAP[$state] = 1;
      __label__ = 24;
      break;
     case 24:
      __label__ = 70;
      break;
     case 25:
      
      
      if (HEAP[$state] != 2) {
        __label__ = 26;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 26:
      
      
      
      if (HEAP[$nAtts] < HEAP[$attsMax_addr]) {
        __label__ = 27;
        break;
      } else {
        __label__ = 28;
        break;
      }
     case 27:
      
      
      
      
      var $99 = HEAP[$ptr_addr] + 2;
      var $100 = HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 4;
      HEAP[$100] = $99;
      __label__ = 28;
      break;
     case 28:
      HEAP[$state] = 2;
      HEAP[$open] = 12;
      __label__ = 33;
      break;
     case 29:
      
      
      if (HEAP[$open] == 12) {
        __label__ = 30;
        break;
      } else {
        __label__ = 33;
        break;
      }
     case 30:
      HEAP[$state] = 0;
      
      
      
      if (HEAP[$nAtts] < HEAP[$attsMax_addr]) {
        __label__ = 31;
        break;
      } else {
        __label__ = 32;
        break;
      }
     case 31:
      
      
      
      var $109 = HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 8;
      var $110 = HEAP[$ptr_addr];
      HEAP[$109] = $110;
      __label__ = 32;
      break;
     case 32:
      
      var $112 = HEAP[$nAtts] + 1;
      HEAP[$nAtts] = $112;
      __label__ = 33;
      break;
     case 33:
      __label__ = 70;
      break;
     case 34:
      
      
      if (HEAP[$state] != 2) {
        __label__ = 35;
        break;
      } else {
        __label__ = 38;
        break;
      }
     case 35:
      
      
      
      if (HEAP[$nAtts] < HEAP[$attsMax_addr]) {
        __label__ = 36;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 36:
      
      
      
      
      var $122 = HEAP[$ptr_addr] + 2;
      var $123 = HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 4;
      HEAP[$123] = $122;
      __label__ = 37;
      break;
     case 37:
      HEAP[$state] = 2;
      HEAP[$open] = 13;
      __label__ = 42;
      break;
     case 38:
      
      
      if (HEAP[$open] == 13) {
        __label__ = 39;
        break;
      } else {
        __label__ = 42;
        break;
      }
     case 39:
      HEAP[$state] = 0;
      
      
      
      if (HEAP[$nAtts] < HEAP[$attsMax_addr]) {
        __label__ = 40;
        break;
      } else {
        __label__ = 41;
        break;
      }
     case 40:
      
      
      
      var $132 = HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 8;
      var $133 = HEAP[$ptr_addr];
      HEAP[$132] = $133;
      __label__ = 41;
      break;
     case 41:
      
      var $135 = HEAP[$nAtts] + 1;
      HEAP[$nAtts] = $135;
      __label__ = 42;
      break;
     case 42:
      __label__ = 70;
      break;
     case 43:
      
      
      
      if (HEAP[$nAtts] < HEAP[$attsMax_addr]) {
        __label__ = 44;
        break;
      } else {
        __label__ = 45;
        break;
      }
     case 44:
      
      
      
      var $142 = HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 12;
      HEAP[$142] = 0;
      __label__ = 45;
      break;
     case 45:
      __label__ = 70;
      break;
     case 46:
      
      
      if (HEAP[$state] == 1) {
        __label__ = 47;
        break;
      } else {
        __label__ = 48;
        break;
      }
     case 47:
      HEAP[$state] = 0;
      __label__ = 61;
      break;
     case 48:
      
      
      if (HEAP[$state] == 2) {
        __label__ = 49;
        break;
      } else {
        __label__ = 61;
        break;
      }
     case 49:
      
      
      
      if (HEAP[$nAtts] < HEAP[$attsMax_addr]) {
        __label__ = 50;
        break;
      } else {
        __label__ = 61;
        break;
      }
     case 50:
      
      
      
      
      
      
      if (HEAP[HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 12] != 0) {
        __label__ = 51;
        break;
      } else {
        __label__ = 61;
        break;
      }
     case 51:
      
      
      
      
      
      
      
      if (HEAP[HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 4] == HEAP[$ptr_addr]) {
        __label__ = 60;
        break;
      } else {
        __label__ = 52;
        break;
      }
     case 52:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] != 0) {
        __label__ = 60;
        break;
      } else {
        __label__ = 53;
        break;
      }
     case 53:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 32) {
        __label__ = 60;
        break;
      } else {
        __label__ = 54;
        break;
      }
     case 54:
      
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 2 + 1] != 0) {
        __label__ = 56;
        break;
      } else {
        __label__ = 55;
        break;
      }
     case 55:
      
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 2] == 32) {
        __label__ = 60;
        break;
      } else {
        __label__ = 56;
        break;
      }
     case 56:
      
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 2 + 1] == 0) {
        __label__ = 57;
        break;
      } else {
        __label__ = 58;
        break;
      }
     case 57:
      
      
      
      
      
      
      
      
      
      var $195 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 2]];
      HEAP[$iftmp_927] = $195;
      __label__ = 59;
      break;
     case 58:
      
      
      
      
      
      
      
      
      
      
      var $206 = HEAP[HEAP[$ptr_addr] + 2 + 1] & 255;
      var $207 = HEAP[HEAP[$ptr_addr] + 2] & 255;
      var $208 = _unicode_byte_type($206, $207);
      HEAP[$iftmp_927] = $208;
      __label__ = 59;
      break;
     case 59:
      
      
      
      if (HEAP[$iftmp_927] == HEAP[$open]) {
        __label__ = 60;
        break;
      } else {
        __label__ = 61;
        break;
      }
     case 60:
      
      
      
      var $215 = HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 12;
      HEAP[$215] = 0;
      __label__ = 61;
      break;
     case 61:
      __label__ = 70;
      break;
     case 62:
      
      
      if (HEAP[$state] == 1) {
        __label__ = 63;
        break;
      } else {
        __label__ = 64;
        break;
      }
     case 63:
      HEAP[$state] = 0;
      __label__ = 67;
      break;
     case 64:
      
      
      if (HEAP[$state] == 2) {
        __label__ = 65;
        break;
      } else {
        __label__ = 67;
        break;
      }
     case 65:
      
      
      
      if (HEAP[$nAtts] < HEAP[$attsMax_addr]) {
        __label__ = 66;
        break;
      } else {
        __label__ = 67;
        break;
      }
     case 66:
      
      
      
      var $226 = HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 12;
      HEAP[$226] = 0;
      __label__ = 67;
      break;
     case 67:
      __label__ = 70;
      break;
     case 68:
      
      
      if (HEAP[$state] != 2) {
        __label__ = 69;
        break;
      } else {
        __label__ = 70;
        break;
      }
     case 69:
      var $229 = HEAP[$nAtts];
      HEAP[$0] = $229;
      var $230 = HEAP[$0];
      HEAP[$retval] = $230;
      __label__ = 71;
      break;
     case 70:
      
      var $232 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $232;
      __label__ = 1;
      break;
     case 71:
      var $retval70 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval70;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _little2_charRefNumber($enc, $ptr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 36;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $ptr_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $iftmp_930 = __stackBase__ + 12;
      var $0 = __stackBase__ + 16;
      var $iftmp_929 = __stackBase__ + 20;
      var $result = __stackBase__ + 24;
      var $c = __stackBase__ + 28;
      var $c17 = __stackBase__ + 32;
      
      HEAP[__stackBase__] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$result] = 0;
      
      var $2 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $2;
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] != 0) {
        __label__ = 16;
        break;
      } else {
        __label__ = 1;
        break;
      }
     case 1:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 120) {
        __label__ = 16;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      
      var $12 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $12;
      __label__ = 13;
      break;
     case 3:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      
      
      
      var $20 = HEAP[HEAP[$ptr_addr]];
      HEAP[$iftmp_929] = $20;
      __label__ = 6;
      break;
     case 5:
      HEAP[$iftmp_929] = -1;
      __label__ = 6;
      break;
     case 6:
      var $21 = HEAP[$iftmp_929];
      HEAP[$c] = $21;
      var $22 = HEAP[$c];
      if ($22 == 48) {
        __label__ = 7;
        break;
      } else if ($22 == 49) {
        __label__ = 7;
        break;
      } else if ($22 == 50) {
        __label__ = 7;
        break;
      } else if ($22 == 51) {
        __label__ = 7;
        break;
      } else if ($22 == 52) {
        __label__ = 7;
        break;
      } else if ($22 == 53) {
        __label__ = 7;
        break;
      } else if ($22 == 54) {
        __label__ = 7;
        break;
      } else if ($22 == 55) {
        __label__ = 7;
        break;
      } else if ($22 == 56) {
        __label__ = 7;
        break;
      } else if ($22 == 57) {
        __label__ = 7;
        break;
      } else if ($22 == 65) {
        __label__ = 8;
        break;
      } else if ($22 == 66) {
        __label__ = 8;
        break;
      } else if ($22 == 67) {
        __label__ = 8;
        break;
      } else if ($22 == 68) {
        __label__ = 8;
        break;
      } else if ($22 == 69) {
        __label__ = 8;
        break;
      } else if ($22 == 70) {
        __label__ = 8;
        break;
      } else if ($22 == 97) {
        __label__ = 9;
        break;
      } else if ($22 == 98) {
        __label__ = 9;
        break;
      } else if ($22 == 99) {
        __label__ = 9;
        break;
      } else if ($22 == 100) {
        __label__ = 9;
        break;
      } else if ($22 == 101) {
        __label__ = 9;
        break;
      } else if ($22 == 102) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 7:
      
      var $24 = HEAP[$result] << 4;
      HEAP[$result] = $24;
      
      
      
      var $28 = HEAP[$c] - 48 | HEAP[$result];
      HEAP[$result] = $28;
      __label__ = 10;
      break;
     case 8:
      
      var $30 = HEAP[$result] << 4;
      HEAP[$result] = $30;
      
      
      
      var $34 = HEAP[$c] - 55 + HEAP[$result];
      HEAP[$result] = $34;
      __label__ = 10;
      break;
     case 9:
      
      var $36 = HEAP[$result] << 4;
      HEAP[$result] = $36;
      
      
      
      var $40 = HEAP[$c] - 87 + HEAP[$result];
      HEAP[$result] = $40;
      __label__ = 10;
      break;
     case 10:
      
      
      if (HEAP[$result] > 1114111) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      HEAP[$0] = -1;
      __label__ = 26;
      break;
     case 12:
      
      var $44 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $44;
      __label__ = 13;
      break;
     case 13:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 14:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 59) {
        __label__ = 3;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 15:
      __label__ = 25;
      break;
     case 16:
      __label__ = 23;
      break;
     case 17:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 18;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 18:
      
      
      
      var $60 = HEAP[HEAP[$ptr_addr]];
      HEAP[$iftmp_930] = $60;
      __label__ = 20;
      break;
     case 19:
      HEAP[$iftmp_930] = -1;
      __label__ = 20;
      break;
     case 20:
      var $61 = HEAP[$iftmp_930];
      HEAP[$c17] = $61;
      
      var $63 = HEAP[$result] * 10;
      HEAP[$result] = $63;
      
      
      
      var $67 = HEAP[$c17] - 48 + HEAP[$result];
      HEAP[$result] = $67;
      
      
      if (HEAP[$result] > 1114111) {
        __label__ = 21;
        break;
      } else {
        __label__ = 22;
        break;
      }
     case 21:
      HEAP[$0] = -1;
      __label__ = 26;
      break;
     case 22:
      
      var $71 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $71;
      __label__ = 23;
      break;
     case 23:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] != 0) {
        __label__ = 17;
        break;
      } else {
        __label__ = 24;
        break;
      }
     case 24:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 59) {
        __label__ = 17;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 25:
      var $80 = HEAP[$result];
      var $81 = _checkCharRefNumber($80);
      HEAP[$0] = $81;
      __label__ = 26;
      break;
     case 26:
      var $82 = HEAP[$0];
      HEAP[$retval] = $82;
      __label__ = 27;
      break;
     case 27:
      var $retval27 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval27;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _little2_predefinedEntityName($enc, $ptr, $end) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $retval = __stackBase__ + 12;
      var $iftmp_934 = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $iftmp_933 = __stackBase__ + 24;
      
      HEAP[__stackBase__] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      
      
      
      
      
      var $6 = (HEAP[$end_addr] - HEAP[$ptr_addr]) / 2 | 0;
      if ($6 == 2) {
        __label__ = 1;
        break;
      } else if ($6 == 3) {
        __label__ = 10;
        break;
      } else if ($6 == 4) {
        __label__ = 18;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 1:
      
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 2 + 1] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 2:
      
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 2] == 116) {
        __label__ = 3;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 3:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      
      
      
      var $24 = HEAP[HEAP[$ptr_addr]];
      HEAP[$iftmp_933] = $24;
      __label__ = 6;
      break;
     case 5:
      HEAP[$iftmp_933] = -1;
      __label__ = 6;
      break;
     case 6:
      var $25 = HEAP[$iftmp_933];
      if ($25 == 103) {
        __label__ = 8;
        break;
      } else if ($25 == 108) {
        __label__ = 7;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 7:
      HEAP[$0] = 60;
      __label__ = 38;
      break;
     case 8:
      HEAP[$0] = 62;
      __label__ = 38;
      break;
     case 9:
      __label__ = 37;
      break;
     case 10:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 11:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 97) {
        __label__ = 12;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 12:
      
      var $35 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $35;
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 13:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 109) {
        __label__ = 14;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 14:
      
      var $45 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $45;
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 15;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 15:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 112) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      HEAP[$0] = 38;
      __label__ = 38;
      break;
     case 17:
      __label__ = 37;
      break;
     case 18:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 19;
        break;
      } else {
        __label__ = 20;
        break;
      }
     case 19:
      
      
      
      var $61 = HEAP[HEAP[$ptr_addr]];
      HEAP[$iftmp_934] = $61;
      __label__ = 21;
      break;
     case 20:
      HEAP[$iftmp_934] = -1;
      __label__ = 21;
      break;
     case 21:
      var $62 = HEAP[$iftmp_934];
      if ($62 == 97) {
        __label__ = 30;
        break;
      } else if ($62 == 113) {
        __label__ = 22;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 22:
      
      var $64 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $64;
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 23;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 23:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 117) {
        __label__ = 24;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 24:
      
      var $74 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $74;
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 25;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 25:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 111) {
        __label__ = 26;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 26:
      
      var $84 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $84;
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 27;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 27:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 116) {
        __label__ = 28;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 28:
      HEAP[$0] = 34;
      __label__ = 38;
      break;
     case 29:
      __label__ = 37;
      break;
     case 30:
      
      var $94 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $94;
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 31;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 31:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 112) {
        __label__ = 32;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 32:
      
      var $104 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $104;
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 33;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 33:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 111) {
        __label__ = 34;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 34:
      
      var $114 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $114;
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 35;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 35:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 115) {
        __label__ = 36;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 36:
      HEAP[$0] = 39;
      __label__ = 38;
      break;
     case 37:
      HEAP[$0] = 0;
      __label__ = 38;
      break;
     case 38:
      var $123 = HEAP[$0];
      HEAP[$retval] = $123;
      __label__ = 39;
      break;
     case 39:
      var $retval38 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval38;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _little2_sameName($enc, $ptr1, $ptr2) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr1_addr = __stackBase__ + 4;
      var $ptr2_addr = __stackBase__ + 8;
      var $retval = __stackBase__ + 12;
      var $iftmp_937 = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $iftmp_935 = __stackBase__ + 24;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr1_addr] = $ptr1;
      HEAP[$ptr2_addr] = $ptr2;
      __label__ = 1;
      break;
     case 1:
      
      
      
      
      if (HEAP[HEAP[$ptr1_addr] + 1] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      
      
      
      
      
      
      
      var $13 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr1_addr]]];
      HEAP[$iftmp_935] = $13;
      __label__ = 4;
      break;
     case 3:
      
      
      
      
      
      
      
      
      var $22 = HEAP[HEAP[$ptr1_addr] + 1] & 255;
      var $23 = HEAP[HEAP[$ptr1_addr]] & 255;
      var $24 = _unicode_byte_type($22, $23);
      HEAP[$iftmp_935] = $24;
      __label__ = 4;
      break;
     case 4:
      var $25 = HEAP[$iftmp_935];
      if ($25 == 5) {
        __label__ = 9;
        break;
      } else if ($25 == 6) {
        __label__ = 7;
        break;
      } else if ($25 == 7) {
        __label__ = 5;
        break;
      } else if ($25 == 22) {
        __label__ = 14;
        break;
      } else if ($25 == 23) {
        __label__ = 14;
        break;
      } else if ($25 == 24) {
        __label__ = 14;
        break;
      } else if ($25 == 25) {
        __label__ = 14;
        break;
      } else if ($25 == 26) {
        __label__ = 14;
        break;
      } else if ($25 == 27) {
        __label__ = 14;
        break;
      } else if ($25 == 29) {
        __label__ = 14;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 5:
      
      
      
      
      
      var $31 = HEAP[HEAP[$ptr1_addr]] != HEAP[HEAP[$ptr2_addr]];
      
      var $33 = HEAP[$ptr1_addr] + 1;
      HEAP[$ptr1_addr] = $33;
      
      var $35 = HEAP[$ptr2_addr] + 1;
      HEAP[$ptr2_addr] = $35;
      
      if ($31 != 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      HEAP[$0] = 0;
      __label__ = 26;
      break;
     case 7:
      
      
      
      
      
      var $41 = HEAP[HEAP[$ptr1_addr]] != HEAP[HEAP[$ptr2_addr]];
      
      var $43 = HEAP[$ptr1_addr] + 1;
      HEAP[$ptr1_addr] = $43;
      
      var $45 = HEAP[$ptr2_addr] + 1;
      HEAP[$ptr2_addr] = $45;
      
      if ($41 != 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      HEAP[$0] = 0;
      __label__ = 26;
      break;
     case 9:
      
      
      
      
      
      var $51 = HEAP[HEAP[$ptr1_addr]] != HEAP[HEAP[$ptr2_addr]];
      
      var $53 = HEAP[$ptr1_addr] + 1;
      HEAP[$ptr1_addr] = $53;
      
      var $55 = HEAP[$ptr2_addr] + 1;
      HEAP[$ptr2_addr] = $55;
      
      if ($51 != 0) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      HEAP[$0] = 0;
      __label__ = 26;
      break;
     case 11:
      
      
      
      
      
      var $61 = HEAP[HEAP[$ptr1_addr]] != HEAP[HEAP[$ptr2_addr]];
      
      var $63 = HEAP[$ptr1_addr] + 1;
      HEAP[$ptr1_addr] = $63;
      
      var $65 = HEAP[$ptr2_addr] + 1;
      HEAP[$ptr2_addr] = $65;
      
      if ($61 != 0) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      HEAP[$0] = 0;
      __label__ = 26;
      break;
     case 13:
      __label__ = 25;
      break;
     case 14:
      
      
      
      
      
      var $71 = HEAP[HEAP[$ptr2_addr]] != HEAP[HEAP[$ptr1_addr]];
      
      var $73 = HEAP[$ptr2_addr] + 1;
      HEAP[$ptr2_addr] = $73;
      
      var $75 = HEAP[$ptr1_addr] + 1;
      HEAP[$ptr1_addr] = $75;
      
      if ($71 != 0) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      HEAP[$0] = 0;
      __label__ = 26;
      break;
     case 16:
      
      
      
      
      
      var $81 = HEAP[HEAP[$ptr2_addr]] != HEAP[HEAP[$ptr1_addr]];
      
      var $83 = HEAP[$ptr2_addr] + 1;
      HEAP[$ptr2_addr] = $83;
      
      var $85 = HEAP[$ptr1_addr] + 1;
      HEAP[$ptr1_addr] = $85;
      
      if ($81 != 0) {
        __label__ = 17;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 17:
      HEAP[$0] = 0;
      __label__ = 26;
      break;
     case 18:
      __label__ = 25;
      break;
     case 19:
      
      
      
      
      if (HEAP[HEAP[$ptr2_addr] + 1] == 0) {
        __label__ = 20;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 20:
      
      
      
      
      
      
      
      
      var $98 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr2_addr]]];
      HEAP[$iftmp_937] = $98;
      __label__ = 22;
      break;
     case 21:
      
      
      
      
      
      
      
      
      var $107 = HEAP[HEAP[$ptr2_addr] + 1] & 255;
      var $108 = HEAP[HEAP[$ptr2_addr]] & 255;
      var $109 = _unicode_byte_type($107, $108);
      HEAP[$iftmp_937] = $109;
      __label__ = 22;
      break;
     case 22:
      var $110 = HEAP[$iftmp_937];
      if ($110 == 5) {
        __label__ = 23;
        break;
      } else if ($110 == 6) {
        __label__ = 23;
        break;
      } else if ($110 == 7) {
        __label__ = 23;
        break;
      } else if ($110 == 22) {
        __label__ = 23;
        break;
      } else if ($110 == 23) {
        __label__ = 23;
        break;
      } else if ($110 == 24) {
        __label__ = 23;
        break;
      } else if ($110 == 25) {
        __label__ = 23;
        break;
      } else if ($110 == 26) {
        __label__ = 23;
        break;
      } else if ($110 == 27) {
        __label__ = 23;
        break;
      } else if ($110 == 29) {
        __label__ = 23;
        break;
      } else {
        __label__ = 24;
        break;
      }
     case 23:
      HEAP[$0] = 0;
      __label__ = 26;
      break;
     case 24:
      HEAP[$0] = 1;
      __label__ = 26;
      break;
     case 25:
      __label__ = 1;
      break;
     case 26:
      var $111 = HEAP[$0];
      HEAP[$retval] = $111;
      __label__ = 27;
      break;
     case 27:
      var $retval31 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval31;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _little2_nameMatchesAscii($enc, $ptr1, $end1, $ptr2) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 24;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $ptr1_addr = __stackBase__ + 4;
      var $end1_addr = __stackBase__ + 8;
      var $ptr2_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      
      HEAP[__stackBase__] = $enc;
      HEAP[$ptr1_addr] = $ptr1;
      HEAP[$end1_addr] = $end1;
      HEAP[$ptr2_addr] = $ptr2;
      __label__ = 7;
      break;
     case 1:
      
      
      
      if (HEAP[$ptr1_addr] == HEAP[$end1_addr]) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      HEAP[$0] = 0;
      __label__ = 9;
      break;
     case 3:
      
      
      
      
      if (HEAP[HEAP[$ptr1_addr] + 1] != 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 4:
      
      
      
      
      
      
      if (HEAP[HEAP[$ptr1_addr]] != HEAP[HEAP[$ptr2_addr]]) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      HEAP[$0] = 0;
      __label__ = 9;
      break;
     case 6:
      
      var $15 = HEAP[$ptr1_addr] + 2;
      HEAP[$ptr1_addr] = $15;
      
      var $17 = HEAP[$ptr2_addr] + 1;
      HEAP[$ptr2_addr] = $17;
      __label__ = 7;
      break;
     case 7:
      
      
      
      if (HEAP[HEAP[$ptr2_addr]] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 8:
      
      
      
      var $24 = HEAP[$ptr1_addr] == HEAP[$end1_addr];
      HEAP[$0] = $24;
      __label__ = 9;
      break;
     case 9:
      var $25 = HEAP[$0];
      HEAP[$retval] = $25;
      __label__ = 10;
      break;
     case 10:
      var $retval9 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval9;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _little2_nameLength($enc, $ptr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 24;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      var $iftmp_939 = __stackBase__ + 16;
      var $start = __stackBase__ + 20;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      var $1 = HEAP[$ptr_addr];
      HEAP[$start] = $1;
      __label__ = 1;
      break;
     case 1:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      
      
      
      
      
      
      
      var $14 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_939] = $14;
      __label__ = 4;
      break;
     case 3:
      
      
      
      
      
      
      
      
      var $23 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $24 = HEAP[HEAP[$ptr_addr]] & 255;
      var $25 = _unicode_byte_type($23, $24);
      HEAP[$iftmp_939] = $25;
      __label__ = 4;
      break;
     case 4:
      var $26 = HEAP[$iftmp_939];
      if ($26 == 5) {
        __label__ = 5;
        break;
      } else if ($26 == 6) {
        __label__ = 6;
        break;
      } else if ($26 == 7) {
        __label__ = 7;
        break;
      } else if ($26 == 22) {
        __label__ = 8;
        break;
      } else if ($26 == 23) {
        __label__ = 8;
        break;
      } else if ($26 == 24) {
        __label__ = 8;
        break;
      } else if ($26 == 25) {
        __label__ = 8;
        break;
      } else if ($26 == 26) {
        __label__ = 8;
        break;
      } else if ($26 == 27) {
        __label__ = 8;
        break;
      } else if ($26 == 29) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 5:
      
      var $28 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $28;
      __label__ = 10;
      break;
     case 6:
      
      var $30 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $30;
      __label__ = 10;
      break;
     case 7:
      
      var $32 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $32;
      __label__ = 10;
      break;
     case 8:
      
      var $34 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $34;
      __label__ = 10;
      break;
     case 9:
      
      
      
      
      var $39 = HEAP[$ptr_addr] - HEAP[$start];
      HEAP[$0] = $39;
      var $40 = HEAP[$0];
      HEAP[$retval] = $40;
      __label__ = 11;
      break;
     case 10:
      __label__ = 1;
      break;
     case 11:
      var $retval10 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval10;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _little2_skipS($enc, $ptr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 20;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      var $iftmp_943 = __stackBase__ + 16;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      __label__ = 1;
      break;
     case 1:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      
      
      
      
      
      
      
      var $13 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_943] = $13;
      __label__ = 4;
      break;
     case 3:
      
      
      
      
      
      
      
      
      var $22 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $23 = HEAP[HEAP[$ptr_addr]] & 255;
      var $24 = _unicode_byte_type($22, $23);
      HEAP[$iftmp_943] = $24;
      __label__ = 4;
      break;
     case 4:
      var $25 = HEAP[$iftmp_943];
      if ($25 == 9) {
        __label__ = 5;
        break;
      } else if ($25 == 10) {
        __label__ = 5;
        break;
      } else if ($25 == 21) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      
      var $27 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $27;
      __label__ = 1;
      break;
     case 6:
      var $28 = HEAP[$ptr_addr];
      HEAP[$0] = $28;
      var $29 = HEAP[$0];
      HEAP[$retval] = $29;
      __label__ = 7;
      break;
     case 7:
      var $retval6 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval6;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _little2_updatePosition($enc, $ptr, $end, $pos) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 21;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 21);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $pos_addr = __stackBase__ + 12;
      var $iftmp_947 = __stackBase__ + 16;
      var $iftmp_945 = __stackBase__ + 17;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$pos_addr] = $pos;
      __label__ = 18;
      break;
     case 1:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      
      
      
      
      
      
      
      var $12 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]];
      HEAP[$iftmp_945] = $12;
      __label__ = 4;
      break;
     case 3:
      
      
      
      
      
      
      
      
      var $21 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $22 = HEAP[HEAP[$ptr_addr]] & 255;
      var $23 = _unicode_byte_type($21, $22);
      HEAP[$iftmp_945] = $23;
      __label__ = 4;
      break;
     case 4:
      var $24 = HEAP[$iftmp_945];
      if ($24 == 5) {
        __label__ = 5;
        break;
      } else if ($24 == 6) {
        __label__ = 6;
        break;
      } else if ($24 == 7) {
        __label__ = 7;
        break;
      } else if ($24 == 9) {
        __label__ = 9;
        break;
      } else if ($24 == 10) {
        __label__ = 8;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 5:
      
      var $26 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $26;
      __label__ = 17;
      break;
     case 6:
      
      var $28 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $28;
      __label__ = 17;
      break;
     case 7:
      
      var $30 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $30;
      __label__ = 17;
      break;
     case 8:
      
      var $32 = HEAP[$pos_addr] + 4;
      HEAP[$32] = -1;
      
      
      
      var $36 = HEAP[HEAP[$pos_addr]] + 1;
      
      var $38 = HEAP[$pos_addr];
      HEAP[$38] = $36;
      
      var $40 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $40;
      __label__ = 17;
      break;
     case 9:
      
      
      
      var $44 = HEAP[HEAP[$pos_addr]] + 1;
      
      var $46 = HEAP[$pos_addr];
      HEAP[$46] = $44;
      
      var $48 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $48;
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 10;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 10:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      
      
      
      
      
      
      
      
      
      var $65 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr]]] == 10;
      HEAP[$iftmp_947] = $65;
      __label__ = 13;
      break;
     case 12:
      
      
      
      
      
      
      
      
      var $74 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $75 = HEAP[HEAP[$ptr_addr]] & 255;
      var $76 = _unicode_byte_type($74, $75);
      
      var $78 = $76 == 10;
      HEAP[$iftmp_947] = $78;
      __label__ = 13;
      break;
     case 13:
      
      
      if (HEAP[$iftmp_947] != 0) {
        __label__ = 14;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 14:
      
      var $81 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $81;
      __label__ = 15;
      break;
     case 15:
      
      var $83 = HEAP[$pos_addr] + 4;
      HEAP[$83] = -1;
      __label__ = 17;
      break;
     case 16:
      
      var $85 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $85;
      __label__ = 17;
      break;
     case 17:
      
      
      
      var $89 = HEAP[HEAP[$pos_addr] + 4] + 1;
      
      var $91 = HEAP[$pos_addr] + 4;
      HEAP[$91] = $89;
      __label__ = 18;
      break;
     case 18:
      
      
      
      if (HEAP[$ptr_addr] < HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 19:
      __label__ = 20;
      break;
     case 20:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _big2_scanComment($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_949 = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 32;
        break;
      }
     case 1:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] != 45) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      var $12 = HEAP[$nextTokPtr_addr];
      var $13 = HEAP[$ptr_addr];
      HEAP[$12] = $13;
      HEAP[$0] = 0;
      __label__ = 33;
      break;
     case 4:
      
      var $15 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $15;
      __label__ = 31;
      break;
     case 5:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      
      
      
      
      
      
      
      
      
      var $29 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_949] = $29;
      __label__ = 8;
      break;
     case 7:
      
      
      
      
      
      
      
      
      var $38 = HEAP[HEAP[$ptr_addr]] & 255;
      var $39 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $40 = _unicode_byte_type($38, $39);
      HEAP[$iftmp_949] = $40;
      __label__ = 8;
      break;
     case 8:
      var $41 = HEAP[$iftmp_949];
      if ($41 == 0) {
        __label__ = 18;
        break;
      } else if ($41 == 1) {
        __label__ = 18;
        break;
      } else if ($41 == 5) {
        __label__ = 9;
        break;
      } else if ($41 == 6) {
        __label__ = 12;
        break;
      } else if ($41 == 7) {
        __label__ = 15;
        break;
      } else if ($41 == 8) {
        __label__ = 18;
        break;
      } else if ($41 == 27) {
        __label__ = 19;
        break;
      } else {
        __label__ = 30;
        break;
      }
     case 9:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      HEAP[$0] = -2;
      __label__ = 33;
      break;
     case 11:
      
      var $49 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $49;
      __label__ = 31;
      break;
     case 12:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      HEAP[$0] = -2;
      __label__ = 33;
      break;
     case 14:
      
      var $57 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $57;
      __label__ = 31;
      break;
     case 15:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      HEAP[$0] = -2;
      __label__ = 33;
      break;
     case 17:
      
      var $65 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $65;
      __label__ = 31;
      break;
     case 18:
      var $66 = HEAP[$nextTokPtr_addr];
      var $67 = HEAP[$ptr_addr];
      HEAP[$66] = $67;
      HEAP[$0] = 0;
      __label__ = 33;
      break;
     case 19:
      
      var $69 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $69;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 20;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 20:
      HEAP[$0] = -1;
      __label__ = 33;
      break;
     case 21:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 22;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 22:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 45) {
        __label__ = 23;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 23:
      
      var $82 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $82;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 24;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 24:
      HEAP[$0] = -1;
      __label__ = 33;
      break;
     case 25:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 0) {
        __label__ = 27;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 26:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] != 62) {
        __label__ = 27;
        break;
      } else {
        __label__ = 28;
        break;
      }
     case 27:
      var $94 = HEAP[$nextTokPtr_addr];
      var $95 = HEAP[$ptr_addr];
      HEAP[$94] = $95;
      HEAP[$0] = 0;
      __label__ = 33;
      break;
     case 28:
      
      var $97 = HEAP[$ptr_addr] + 2;
      var $98 = HEAP[$nextTokPtr_addr];
      HEAP[$98] = $97;
      HEAP[$0] = 13;
      __label__ = 33;
      break;
     case 29:
      __label__ = 31;
      break;
     case 30:
      
      var $100 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $100;
      __label__ = 31;
      break;
     case 31:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 5;
        break;
      } else {
        __label__ = 32;
        break;
      }
     case 32:
      HEAP[$0] = -1;
      __label__ = 33;
      break;
     case 33:
      var $104 = HEAP[$0];
      HEAP[$retval] = $104;
      __label__ = 34;
      break;
     case 34:
      var $retval33 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval33;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _big2_scanDecl($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 36;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_961 = __stackBase__ + 20;
      var $iftmp_959 = __stackBase__ + 24;
      var $iftmp_957 = __stackBase__ + 28;
      var $0 = __stackBase__ + 32;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -1;
      __label__ = 26;
      break;
     case 2:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      
      
      
      
      
      
      
      
      var $17 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_957] = $17;
      __label__ = 5;
      break;
     case 4:
      
      
      
      
      
      
      
      
      var $26 = HEAP[HEAP[$ptr_addr]] & 255;
      var $27 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $28 = _unicode_byte_type($26, $27);
      HEAP[$iftmp_957] = $28;
      __label__ = 5;
      break;
     case 5:
      var $29 = HEAP[$iftmp_957];
      if ($29 == 20) {
        __label__ = 7;
        break;
      } else if ($29 == 22) {
        __label__ = 8;
        break;
      } else if ($29 == 24) {
        __label__ = 8;
        break;
      } else if ($29 == 27) {
        __label__ = 6;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 6:
      
      var $31 = HEAP[$ptr_addr] + 2;
      var $32 = HEAP[$enc_addr];
      var $33 = HEAP[$end_addr];
      var $34 = HEAP[$nextTokPtr_addr];
      var $35 = _big2_scanComment($32, $31, $33, $34);
      HEAP[$0] = $35;
      __label__ = 26;
      break;
     case 7:
      
      var $37 = HEAP[$ptr_addr] + 2;
      var $38 = HEAP[$nextTokPtr_addr];
      HEAP[$38] = $37;
      HEAP[$0] = 33;
      __label__ = 26;
      break;
     case 8:
      
      var $40 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $40;
      __label__ = 24;
      break;
     case 9:
      var $41 = HEAP[$nextTokPtr_addr];
      var $42 = HEAP[$ptr_addr];
      HEAP[$41] = $42;
      HEAP[$0] = 0;
      __label__ = 26;
      break;
     case 10:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      
      
      
      
      
      
      
      
      
      var $56 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_959] = $56;
      __label__ = 13;
      break;
     case 12:
      
      
      
      
      
      
      
      
      var $65 = HEAP[HEAP[$ptr_addr]] & 255;
      var $66 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $67 = _unicode_byte_type($65, $66);
      HEAP[$iftmp_959] = $67;
      __label__ = 13;
      break;
     case 13:
      var $68 = HEAP[$iftmp_959];
      if ($68 == 9) {
        __label__ = 21;
        break;
      } else if ($68 == 10) {
        __label__ = 21;
        break;
      } else if ($68 == 21) {
        __label__ = 21;
        break;
      } else if ($68 == 22) {
        __label__ = 22;
        break;
      } else if ($68 == 24) {
        __label__ = 22;
        break;
      } else if ($68 == 30) {
        __label__ = 14;
        break;
      } else {
        __label__ = 23;
        break;
      }
     case 14:
      
      
      
      
      if (HEAP[$ptr_addr] + 2 == HEAP[$end_addr]) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      HEAP[$0] = -1;
      __label__ = 26;
      break;
     case 16:
      
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 2] == 0) {
        __label__ = 17;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 17:
      
      
      
      
      
      
      
      
      
      
      var $88 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 2 + 1]];
      HEAP[$iftmp_961] = $88;
      __label__ = 19;
      break;
     case 18:
      
      
      
      
      
      
      
      
      
      
      var $99 = HEAP[HEAP[$ptr_addr] + 2] & 255;
      var $100 = HEAP[HEAP[$ptr_addr] + 2 + 1] & 255;
      var $101 = _unicode_byte_type($99, $100);
      HEAP[$iftmp_961] = $101;
      __label__ = 19;
      break;
     case 19:
      var $102 = HEAP[$iftmp_961];
      if ($102 == 9) {
        __label__ = 20;
        break;
      } else if ($102 == 10) {
        __label__ = 20;
        break;
      } else if ($102 == 21) {
        __label__ = 20;
        break;
      } else if ($102 == 30) {
        __label__ = 20;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 20:
      var $103 = HEAP[$nextTokPtr_addr];
      var $104 = HEAP[$ptr_addr];
      HEAP[$103] = $104;
      HEAP[$0] = 0;
      __label__ = 26;
      break;
     case 21:
      var $105 = HEAP[$nextTokPtr_addr];
      var $106 = HEAP[$ptr_addr];
      HEAP[$105] = $106;
      HEAP[$0] = 16;
      __label__ = 26;
      break;
     case 22:
      
      var $108 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $108;
      __label__ = 24;
      break;
     case 23:
      var $109 = HEAP[$nextTokPtr_addr];
      var $110 = HEAP[$ptr_addr];
      HEAP[$109] = $110;
      HEAP[$0] = 0;
      __label__ = 26;
      break;
     case 24:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 10;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 25:
      HEAP[$0] = -1;
      __label__ = 26;
      break;
     case 26:
      var $114 = HEAP[$0];
      HEAP[$retval] = $114;
      __label__ = 27;
      break;
     case 27:
      var $retval26 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval26;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _big2_checkPiTarget($enc, $ptr, $end, $tokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 40;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $tokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_967 = __stackBase__ + 20;
      var $iftmp_966 = __stackBase__ + 24;
      var $iftmp_965 = __stackBase__ + 28;
      var $0 = __stackBase__ + 32;
      var $upper = __stackBase__ + 36;
      
      HEAP[__stackBase__] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$tokPtr_addr] = $tokPtr;
      HEAP[$upper] = 0;
      var $1 = HEAP[$tokPtr_addr];
      HEAP[$1] = 11;
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] != 6) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = 1;
      __label__ = 26;
      break;
     case 2:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      
      
      var $15 = HEAP[HEAP[$ptr_addr] + 1];
      HEAP[$iftmp_965] = $15;
      __label__ = 5;
      break;
     case 4:
      HEAP[$iftmp_965] = -1;
      __label__ = 5;
      break;
     case 5:
      var $16 = HEAP[$iftmp_965];
      if ($16 == 88) {
        __label__ = 7;
        break;
      } else if ($16 == 120) {
        __label__ = 6;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 6:
      __label__ = 9;
      break;
     case 7:
      HEAP[$upper] = 1;
      __label__ = 9;
      break;
     case 8:
      HEAP[$0] = 1;
      __label__ = 26;
      break;
     case 9:
      
      var $18 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $18;
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      
      
      
      var $26 = HEAP[HEAP[$ptr_addr] + 1];
      HEAP[$iftmp_966] = $26;
      __label__ = 12;
      break;
     case 11:
      HEAP[$iftmp_966] = -1;
      __label__ = 12;
      break;
     case 12:
      var $27 = HEAP[$iftmp_966];
      if ($27 == 77) {
        __label__ = 14;
        break;
      } else if ($27 == 109) {
        __label__ = 13;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 13:
      __label__ = 16;
      break;
     case 14:
      HEAP[$upper] = 1;
      __label__ = 16;
      break;
     case 15:
      HEAP[$0] = 1;
      __label__ = 26;
      break;
     case 16:
      
      var $29 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $29;
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 17;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 17:
      
      
      
      var $37 = HEAP[HEAP[$ptr_addr] + 1];
      HEAP[$iftmp_967] = $37;
      __label__ = 19;
      break;
     case 18:
      HEAP[$iftmp_967] = -1;
      __label__ = 19;
      break;
     case 19:
      var $38 = HEAP[$iftmp_967];
      if ($38 == 76) {
        __label__ = 21;
        break;
      } else if ($38 == 108) {
        __label__ = 20;
        break;
      } else {
        __label__ = 22;
        break;
      }
     case 20:
      __label__ = 23;
      break;
     case 21:
      HEAP[$upper] = 1;
      __label__ = 23;
      break;
     case 22:
      HEAP[$0] = 1;
      __label__ = 26;
      break;
     case 23:
      
      
      if (HEAP[$upper] != 0) {
        __label__ = 24;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 24:
      HEAP[$0] = 0;
      __label__ = 26;
      break;
     case 25:
      var $41 = HEAP[$tokPtr_addr];
      HEAP[$41] = 12;
      HEAP[$0] = 1;
      __label__ = 26;
      break;
     case 26:
      var $42 = HEAP[$0];
      HEAP[$retval] = $42;
      __label__ = 27;
      break;
     case 27:
      var $retval26 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval26;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _big2_scanPi($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 44;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 44);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_984 = __stackBase__ + 20;
      var $iftmp_976 = __stackBase__ + 24;
      var $iftmp_968 = __stackBase__ + 28;
      var $0 = __stackBase__ + 32;
      var $tok = __stackBase__ + 36;
      var $target = __stackBase__ + 40;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      var $1 = HEAP[$ptr_addr];
      HEAP[$target] = $1;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -1;
      __label__ = 71;
      break;
     case 2:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      
      
      
      
      
      
      
      
      var $18 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_968] = $18;
      __label__ = 5;
      break;
     case 4:
      
      
      
      
      
      
      
      
      var $27 = HEAP[HEAP[$ptr_addr]] & 255;
      var $28 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $29 = _unicode_byte_type($27, $28);
      HEAP[$iftmp_968] = $29;
      __label__ = 5;
      break;
     case 5:
      var $30 = HEAP[$iftmp_968];
      if ($30 == 5) {
        __label__ = 9;
        break;
      } else if ($30 == 6) {
        __label__ = 12;
        break;
      } else if ($30 == 7) {
        __label__ = 15;
        break;
      } else if ($30 == 22) {
        __label__ = 8;
        break;
      } else if ($30 == 24) {
        __label__ = 8;
        break;
      } else if ($30 == 29) {
        __label__ = 6;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 6:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_nmstrtPages + HEAP[HEAP[$ptr_addr]]] << 3) + (HEAP[HEAP[$ptr_addr] + 1] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr] + 1] & 31)) == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      var $55 = HEAP[$nextTokPtr_addr];
      var $56 = HEAP[$ptr_addr];
      HEAP[$55] = $56;
      HEAP[$0] = 0;
      __label__ = 71;
      break;
     case 8:
      
      var $58 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $58;
      __label__ = 69;
      break;
     case 9:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      HEAP[$0] = -2;
      __label__ = 71;
      break;
     case 11:
      var $65 = HEAP[$nextTokPtr_addr];
      var $66 = HEAP[$ptr_addr];
      HEAP[$65] = $66;
      HEAP[$0] = 0;
      __label__ = 71;
      break;
     case 12:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      HEAP[$0] = -2;
      __label__ = 71;
      break;
     case 14:
      var $73 = HEAP[$nextTokPtr_addr];
      var $74 = HEAP[$ptr_addr];
      HEAP[$73] = $74;
      HEAP[$0] = 0;
      __label__ = 71;
      break;
     case 15:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      HEAP[$0] = -2;
      __label__ = 71;
      break;
     case 17:
      var $81 = HEAP[$nextTokPtr_addr];
      var $82 = HEAP[$ptr_addr];
      HEAP[$81] = $82;
      HEAP[$0] = 0;
      __label__ = 71;
      break;
     case 18:
      var $83 = HEAP[$nextTokPtr_addr];
      var $84 = HEAP[$ptr_addr];
      HEAP[$83] = $84;
      HEAP[$0] = 0;
      __label__ = 71;
      break;
     case 19:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 20;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 20:
      
      
      
      
      
      
      
      
      
      var $98 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_976] = $98;
      __label__ = 22;
      break;
     case 21:
      
      
      
      
      
      
      
      
      var $107 = HEAP[HEAP[$ptr_addr]] & 255;
      var $108 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $109 = _unicode_byte_type($107, $108);
      HEAP[$iftmp_976] = $109;
      __label__ = 22;
      break;
     case 22:
      var $110 = HEAP[$iftmp_976];
      if ($110 == 5) {
        __label__ = 26;
        break;
      } else if ($110 == 6) {
        __label__ = 29;
        break;
      } else if ($110 == 7) {
        __label__ = 32;
        break;
      } else if ($110 == 9) {
        __label__ = 35;
        break;
      } else if ($110 == 10) {
        __label__ = 35;
        break;
      } else if ($110 == 15) {
        __label__ = 61;
        break;
      } else if ($110 == 21) {
        __label__ = 35;
        break;
      } else if ($110 == 22) {
        __label__ = 25;
        break;
      } else if ($110 == 24) {
        __label__ = 25;
        break;
      } else if ($110 == 25) {
        __label__ = 25;
        break;
      } else if ($110 == 26) {
        __label__ = 25;
        break;
      } else if ($110 == 27) {
        __label__ = 25;
        break;
      } else if ($110 == 29) {
        __label__ = 23;
        break;
      } else {
        __label__ = 68;
        break;
      }
     case 23:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_namePages + HEAP[HEAP[$ptr_addr]]] << 3) + (HEAP[HEAP[$ptr_addr] + 1] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr] + 1] & 31)) == 0) {
        __label__ = 24;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 24:
      var $135 = HEAP[$nextTokPtr_addr];
      var $136 = HEAP[$ptr_addr];
      HEAP[$135] = $136;
      HEAP[$0] = 0;
      __label__ = 71;
      break;
     case 25:
      
      var $138 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $138;
      __label__ = 69;
      break;
     case 26:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 27;
        break;
      } else {
        __label__ = 28;
        break;
      }
     case 27:
      HEAP[$0] = -2;
      __label__ = 71;
      break;
     case 28:
      var $145 = HEAP[$nextTokPtr_addr];
      var $146 = HEAP[$ptr_addr];
      HEAP[$145] = $146;
      HEAP[$0] = 0;
      __label__ = 71;
      break;
     case 29:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 30;
        break;
      } else {
        __label__ = 31;
        break;
      }
     case 30:
      HEAP[$0] = -2;
      __label__ = 71;
      break;
     case 31:
      var $153 = HEAP[$nextTokPtr_addr];
      var $154 = HEAP[$ptr_addr];
      HEAP[$153] = $154;
      HEAP[$0] = 0;
      __label__ = 71;
      break;
     case 32:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 33;
        break;
      } else {
        __label__ = 34;
        break;
      }
     case 33:
      HEAP[$0] = -2;
      __label__ = 71;
      break;
     case 34:
      var $161 = HEAP[$nextTokPtr_addr];
      var $162 = HEAP[$ptr_addr];
      HEAP[$161] = $162;
      HEAP[$0] = 0;
      __label__ = 71;
      break;
     case 35:
      var $163 = HEAP[$enc_addr];
      var $164 = HEAP[$target];
      var $165 = HEAP[$ptr_addr];
      var $166 = _big2_checkPiTarget($163, $164, $165, $tok);
      
      if ($166 == 0) {
        __label__ = 36;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 36:
      var $168 = HEAP[$nextTokPtr_addr];
      var $169 = HEAP[$ptr_addr];
      HEAP[$168] = $169;
      HEAP[$0] = 0;
      __label__ = 71;
      break;
     case 37:
      
      var $171 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $171;
      __label__ = 59;
      break;
     case 38:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 39;
        break;
      } else {
        __label__ = 40;
        break;
      }
     case 39:
      
      
      
      
      
      
      
      
      
      var $185 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_984] = $185;
      __label__ = 41;
      break;
     case 40:
      
      
      
      
      
      
      
      
      var $194 = HEAP[HEAP[$ptr_addr]] & 255;
      var $195 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $196 = _unicode_byte_type($194, $195);
      HEAP[$iftmp_984] = $196;
      __label__ = 41;
      break;
     case 41:
      var $197 = HEAP[$iftmp_984];
      if ($197 == 0) {
        __label__ = 51;
        break;
      } else if ($197 == 1) {
        __label__ = 51;
        break;
      } else if ($197 == 5) {
        __label__ = 42;
        break;
      } else if ($197 == 6) {
        __label__ = 45;
        break;
      } else if ($197 == 7) {
        __label__ = 48;
        break;
      } else if ($197 == 8) {
        __label__ = 51;
        break;
      } else if ($197 == 15) {
        __label__ = 52;
        break;
      } else {
        __label__ = 58;
        break;
      }
     case 42:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 43;
        break;
      } else {
        __label__ = 44;
        break;
      }
     case 43:
      HEAP[$0] = -2;
      __label__ = 71;
      break;
     case 44:
      
      var $205 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $205;
      __label__ = 59;
      break;
     case 45:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 46;
        break;
      } else {
        __label__ = 47;
        break;
      }
     case 46:
      HEAP[$0] = -2;
      __label__ = 71;
      break;
     case 47:
      
      var $213 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $213;
      __label__ = 59;
      break;
     case 48:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 49;
        break;
      } else {
        __label__ = 50;
        break;
      }
     case 49:
      HEAP[$0] = -2;
      __label__ = 71;
      break;
     case 50:
      
      var $221 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $221;
      __label__ = 59;
      break;
     case 51:
      var $222 = HEAP[$nextTokPtr_addr];
      var $223 = HEAP[$ptr_addr];
      HEAP[$222] = $223;
      HEAP[$0] = 0;
      __label__ = 71;
      break;
     case 52:
      
      var $225 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $225;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 53;
        break;
      } else {
        __label__ = 54;
        break;
      }
     case 53:
      HEAP[$0] = -1;
      __label__ = 71;
      break;
     case 54:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 55;
        break;
      } else {
        __label__ = 57;
        break;
      }
     case 55:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 62) {
        __label__ = 56;
        break;
      } else {
        __label__ = 57;
        break;
      }
     case 56:
      
      var $238 = HEAP[$ptr_addr] + 2;
      var $239 = HEAP[$nextTokPtr_addr];
      HEAP[$239] = $238;
      var $240 = HEAP[$tok];
      HEAP[$0] = $240;
      __label__ = 71;
      break;
     case 57:
      __label__ = 59;
      break;
     case 58:
      
      var $242 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $242;
      __label__ = 59;
      break;
     case 59:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 38;
        break;
      } else {
        __label__ = 60;
        break;
      }
     case 60:
      HEAP[$0] = -1;
      __label__ = 71;
      break;
     case 61:
      var $246 = HEAP[$enc_addr];
      var $247 = HEAP[$target];
      var $248 = HEAP[$ptr_addr];
      var $249 = _big2_checkPiTarget($246, $247, $248, $tok);
      
      if ($249 == 0) {
        __label__ = 62;
        break;
      } else {
        __label__ = 63;
        break;
      }
     case 62:
      var $251 = HEAP[$nextTokPtr_addr];
      var $252 = HEAP[$ptr_addr];
      HEAP[$251] = $252;
      HEAP[$0] = 0;
      __label__ = 71;
      break;
     case 63:
      
      var $254 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $254;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 64;
        break;
      } else {
        __label__ = 65;
        break;
      }
     case 64:
      HEAP[$0] = -1;
      __label__ = 71;
      break;
     case 65:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 66;
        break;
      } else {
        __label__ = 68;
        break;
      }
     case 66:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 62) {
        __label__ = 67;
        break;
      } else {
        __label__ = 68;
        break;
      }
     case 67:
      
      var $267 = HEAP[$ptr_addr] + 2;
      var $268 = HEAP[$nextTokPtr_addr];
      HEAP[$268] = $267;
      var $269 = HEAP[$tok];
      HEAP[$0] = $269;
      __label__ = 71;
      break;
     case 68:
      var $270 = HEAP[$nextTokPtr_addr];
      var $271 = HEAP[$ptr_addr];
      HEAP[$270] = $271;
      HEAP[$0] = 0;
      __label__ = 71;
      break;
     case 69:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 19;
        break;
      } else {
        __label__ = 70;
        break;
      }
     case 70:
      HEAP[$0] = -1;
      __label__ = 71;
      break;
     case 71:
      var $275 = HEAP[$0];
      HEAP[$retval] = $275;
      __label__ = 72;
      break;
     case 72:
      var $retval71 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval71;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _big2_scanCdataSection($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $i = __stackBase__ + 24;
      
      HEAP[__stackBase__] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 11) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -1;
      __label__ = 9;
      break;
     case 2:
      HEAP[$i] = 0;
      __label__ = 7;
      break;
     case 3:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 4:
      
      
      
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] != HEAP[_CDATA_LSQB_9063 + HEAP[$i]]) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      var $18 = HEAP[$nextTokPtr_addr];
      var $19 = HEAP[$ptr_addr];
      HEAP[$18] = $19;
      HEAP[$0] = 0;
      __label__ = 9;
      break;
     case 6:
      
      var $21 = HEAP[$i] + 1;
      HEAP[$i] = $21;
      
      var $23 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $23;
      __label__ = 7;
      break;
     case 7:
      
      
      if (HEAP[$i] <= 5) {
        __label__ = 3;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 8:
      var $26 = HEAP[$nextTokPtr_addr];
      var $27 = HEAP[$ptr_addr];
      HEAP[$26] = $27;
      HEAP[$0] = 8;
      __label__ = 9;
      break;
     case 9:
      var $28 = HEAP[$0];
      HEAP[$retval] = $28;
      __label__ = 10;
      break;
     case 10:
      var $retval9 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval9;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _big2_cdataSectionTok($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 37;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 37);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_1008 = __stackBase__ + 20;
      var $iftmp_1000 = __stackBase__ + 24;
      var $iftmp_998 = __stackBase__ + 25;
      var $0 = __stackBase__ + 29;
      var $n = __stackBase__ + 33;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -4;
      __label__ = 58;
      break;
     case 2:
      
      
      
      
      var $8 = HEAP[$end_addr] - HEAP[$ptr_addr];
      HEAP[$n] = $8;
      
      
      
      
      if ((HEAP[$n] & 1 & 255) != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 3:
      
      var $13 = HEAP[$n] & -2;
      HEAP[$n] = $13;
      
      
      if (HEAP[$n] == 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      HEAP[$0] = -1;
      __label__ = 58;
      break;
     case 5:
      
      
      var $18 = HEAP[$ptr_addr] + HEAP[$n];
      HEAP[$end_addr] = $18;
      __label__ = 6;
      break;
     case 6:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      
      
      
      
      
      
      
      
      
      var $32 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_998] = $32;
      __label__ = 9;
      break;
     case 8:
      
      
      
      
      
      
      
      
      var $41 = HEAP[HEAP[$ptr_addr]] & 255;
      var $42 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $43 = _unicode_byte_type($41, $42);
      HEAP[$iftmp_998] = $43;
      __label__ = 9;
      break;
     case 9:
      var $44 = HEAP[$iftmp_998];
      if ($44 == 0) {
        __label__ = 38;
        break;
      } else if ($44 == 1) {
        __label__ = 38;
        break;
      } else if ($44 == 4) {
        __label__ = 10;
        break;
      } else if ($44 == 5) {
        __label__ = 29;
        break;
      } else if ($44 == 6) {
        __label__ = 32;
        break;
      } else if ($44 == 7) {
        __label__ = 35;
        break;
      } else if ($44 == 8) {
        __label__ = 38;
        break;
      } else if ($44 == 9) {
        __label__ = 20;
        break;
      } else if ($44 == 10) {
        __label__ = 28;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 10:
      
      var $46 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $46;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      HEAP[$0] = -1;
      __label__ = 58;
      break;
     case 12:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 0) {
        __label__ = 40;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 13:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] != 93) {
        __label__ = 40;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 14:
      
      var $59 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $59;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      HEAP[$0] = -1;
      __label__ = 58;
      break;
     case 16:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 0) {
        __label__ = 18;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 17:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] != 62) {
        __label__ = 18;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 18:
      
      var $72 = HEAP[$ptr_addr] + -2;
      HEAP[$ptr_addr] = $72;
      __label__ = 40;
      break;
     case 19:
      
      var $74 = HEAP[$ptr_addr] + 2;
      var $75 = HEAP[$nextTokPtr_addr];
      HEAP[$75] = $74;
      HEAP[$0] = 40;
      __label__ = 58;
      break;
     case 20:
      
      var $77 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $77;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 21;
        break;
      } else {
        __label__ = 22;
        break;
      }
     case 21:
      HEAP[$0] = -1;
      __label__ = 58;
      break;
     case 22:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 23;
        break;
      } else {
        __label__ = 24;
        break;
      }
     case 23:
      
      
      
      
      
      
      
      
      
      
      var $95 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]] == 10;
      HEAP[$iftmp_1000] = $95;
      __label__ = 25;
      break;
     case 24:
      
      
      
      
      
      
      
      
      var $104 = HEAP[HEAP[$ptr_addr]] & 255;
      var $105 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $106 = _unicode_byte_type($104, $105);
      
      var $108 = $106 == 10;
      HEAP[$iftmp_1000] = $108;
      __label__ = 25;
      break;
     case 25:
      
      
      if (HEAP[$iftmp_1000] != 0) {
        __label__ = 26;
        break;
      } else {
        __label__ = 27;
        break;
      }
     case 26:
      
      var $111 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $111;
      __label__ = 27;
      break;
     case 27:
      var $112 = HEAP[$nextTokPtr_addr];
      var $113 = HEAP[$ptr_addr];
      HEAP[$112] = $113;
      HEAP[$0] = 7;
      __label__ = 58;
      break;
     case 28:
      
      var $115 = HEAP[$ptr_addr] + 2;
      var $116 = HEAP[$nextTokPtr_addr];
      HEAP[$116] = $115;
      HEAP[$0] = 7;
      __label__ = 58;
      break;
     case 29:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 30;
        break;
      } else {
        __label__ = 31;
        break;
      }
     case 30:
      HEAP[$0] = -2;
      __label__ = 58;
      break;
     case 31:
      
      var $124 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $124;
      __label__ = 40;
      break;
     case 32:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 33;
        break;
      } else {
        __label__ = 34;
        break;
      }
     case 33:
      HEAP[$0] = -2;
      __label__ = 58;
      break;
     case 34:
      
      var $132 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $132;
      __label__ = 40;
      break;
     case 35:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 36;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 36:
      HEAP[$0] = -2;
      __label__ = 58;
      break;
     case 37:
      
      var $140 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $140;
      __label__ = 40;
      break;
     case 38:
      var $141 = HEAP[$nextTokPtr_addr];
      var $142 = HEAP[$ptr_addr];
      HEAP[$141] = $142;
      HEAP[$0] = 0;
      __label__ = 58;
      break;
     case 39:
      
      var $144 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $144;
      __label__ = 40;
      break;
     case 40:
      __label__ = 56;
      break;
     case 41:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 42;
        break;
      } else {
        __label__ = 43;
        break;
      }
     case 42:
      
      
      
      
      
      
      
      
      
      var $158 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1008] = $158;
      __label__ = 44;
      break;
     case 43:
      
      
      
      
      
      
      
      
      var $167 = HEAP[HEAP[$ptr_addr]] & 255;
      var $168 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $169 = _unicode_byte_type($167, $168);
      HEAP[$iftmp_1008] = $169;
      __label__ = 44;
      break;
     case 44:
      var $170 = HEAP[$iftmp_1008];
      if ($170 == 0) {
        __label__ = 54;
        break;
      } else if ($170 == 1) {
        __label__ = 54;
        break;
      } else if ($170 == 4) {
        __label__ = 54;
        break;
      } else if ($170 == 5) {
        __label__ = 45;
        break;
      } else if ($170 == 6) {
        __label__ = 48;
        break;
      } else if ($170 == 7) {
        __label__ = 51;
        break;
      } else if ($170 == 8) {
        __label__ = 54;
        break;
      } else if ($170 == 9) {
        __label__ = 54;
        break;
      } else if ($170 == 10) {
        __label__ = 54;
        break;
      } else {
        __label__ = 55;
        break;
      }
     case 45:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 46;
        break;
      } else {
        __label__ = 47;
        break;
      }
     case 46:
      var $177 = HEAP[$nextTokPtr_addr];
      var $178 = HEAP[$ptr_addr];
      HEAP[$177] = $178;
      HEAP[$0] = 6;
      __label__ = 58;
      break;
     case 47:
      
      var $180 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $180;
      __label__ = 56;
      break;
     case 48:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 49;
        break;
      } else {
        __label__ = 50;
        break;
      }
     case 49:
      var $187 = HEAP[$nextTokPtr_addr];
      var $188 = HEAP[$ptr_addr];
      HEAP[$187] = $188;
      HEAP[$0] = 6;
      __label__ = 58;
      break;
     case 50:
      
      var $190 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $190;
      __label__ = 56;
      break;
     case 51:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 52;
        break;
      } else {
        __label__ = 53;
        break;
      }
     case 52:
      var $197 = HEAP[$nextTokPtr_addr];
      var $198 = HEAP[$ptr_addr];
      HEAP[$197] = $198;
      HEAP[$0] = 6;
      __label__ = 58;
      break;
     case 53:
      
      var $200 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $200;
      __label__ = 56;
      break;
     case 54:
      var $201 = HEAP[$nextTokPtr_addr];
      var $202 = HEAP[$ptr_addr];
      HEAP[$201] = $202;
      HEAP[$0] = 6;
      __label__ = 58;
      break;
     case 55:
      
      var $204 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $204;
      __label__ = 56;
      break;
     case 56:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 41;
        break;
      } else {
        __label__ = 57;
        break;
      }
     case 57:
      var $208 = HEAP[$nextTokPtr_addr];
      var $209 = HEAP[$ptr_addr];
      HEAP[$208] = $209;
      HEAP[$0] = 6;
      __label__ = 58;
      break;
     case 58:
      var $210 = HEAP[$0];
      HEAP[$retval] = $210;
      __label__ = 59;
      break;
     case 59:
      var $retval59 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval59;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _big2_scanEndTag($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 36;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_1032 = __stackBase__ + 20;
      var $iftmp_1024 = __stackBase__ + 24;
      var $iftmp_1016 = __stackBase__ + 28;
      var $0 = __stackBase__ + 32;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -1;
      __label__ = 50;
      break;
     case 2:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      
      
      
      
      
      
      
      
      var $17 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1016] = $17;
      __label__ = 5;
      break;
     case 4:
      
      
      
      
      
      
      
      
      var $26 = HEAP[HEAP[$ptr_addr]] & 255;
      var $27 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $28 = _unicode_byte_type($26, $27);
      HEAP[$iftmp_1016] = $28;
      __label__ = 5;
      break;
     case 5:
      var $29 = HEAP[$iftmp_1016];
      if ($29 == 5) {
        __label__ = 9;
        break;
      } else if ($29 == 6) {
        __label__ = 12;
        break;
      } else if ($29 == 7) {
        __label__ = 15;
        break;
      } else if ($29 == 22) {
        __label__ = 8;
        break;
      } else if ($29 == 24) {
        __label__ = 8;
        break;
      } else if ($29 == 29) {
        __label__ = 6;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 6:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_nmstrtPages + HEAP[HEAP[$ptr_addr]]] << 3) + (HEAP[HEAP[$ptr_addr] + 1] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr] + 1] & 31)) == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      var $54 = HEAP[$nextTokPtr_addr];
      var $55 = HEAP[$ptr_addr];
      HEAP[$54] = $55;
      HEAP[$0] = 0;
      __label__ = 50;
      break;
     case 8:
      
      var $57 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $57;
      __label__ = 48;
      break;
     case 9:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      HEAP[$0] = -2;
      __label__ = 50;
      break;
     case 11:
      var $64 = HEAP[$nextTokPtr_addr];
      var $65 = HEAP[$ptr_addr];
      HEAP[$64] = $65;
      HEAP[$0] = 0;
      __label__ = 50;
      break;
     case 12:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      HEAP[$0] = -2;
      __label__ = 50;
      break;
     case 14:
      var $72 = HEAP[$nextTokPtr_addr];
      var $73 = HEAP[$ptr_addr];
      HEAP[$72] = $73;
      HEAP[$0] = 0;
      __label__ = 50;
      break;
     case 15:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      HEAP[$0] = -2;
      __label__ = 50;
      break;
     case 17:
      var $80 = HEAP[$nextTokPtr_addr];
      var $81 = HEAP[$ptr_addr];
      HEAP[$80] = $81;
      HEAP[$0] = 0;
      __label__ = 50;
      break;
     case 18:
      var $82 = HEAP[$nextTokPtr_addr];
      var $83 = HEAP[$ptr_addr];
      HEAP[$82] = $83;
      HEAP[$0] = 0;
      __label__ = 50;
      break;
     case 19:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 20;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 20:
      
      
      
      
      
      
      
      
      
      var $97 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1024] = $97;
      __label__ = 22;
      break;
     case 21:
      
      
      
      
      
      
      
      
      var $106 = HEAP[HEAP[$ptr_addr]] & 255;
      var $107 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $108 = _unicode_byte_type($106, $107);
      HEAP[$iftmp_1024] = $108;
      __label__ = 22;
      break;
     case 22:
      var $109 = HEAP[$iftmp_1024];
      if ($109 == 5) {
        __label__ = 26;
        break;
      } else if ($109 == 6) {
        __label__ = 29;
        break;
      } else if ($109 == 7) {
        __label__ = 32;
        break;
      } else if ($109 == 9) {
        __label__ = 35;
        break;
      } else if ($109 == 10) {
        __label__ = 35;
        break;
      } else if ($109 == 11) {
        __label__ = 46;
        break;
      } else if ($109 == 21) {
        __label__ = 35;
        break;
      } else if ($109 == 22) {
        __label__ = 25;
        break;
      } else if ($109 == 23) {
        __label__ = 45;
        break;
      } else if ($109 == 24) {
        __label__ = 25;
        break;
      } else if ($109 == 25) {
        __label__ = 25;
        break;
      } else if ($109 == 26) {
        __label__ = 25;
        break;
      } else if ($109 == 27) {
        __label__ = 25;
        break;
      } else if ($109 == 29) {
        __label__ = 23;
        break;
      } else {
        __label__ = 47;
        break;
      }
     case 23:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_namePages + HEAP[HEAP[$ptr_addr]]] << 3) + (HEAP[HEAP[$ptr_addr] + 1] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr] + 1] & 31)) == 0) {
        __label__ = 24;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 24:
      var $134 = HEAP[$nextTokPtr_addr];
      var $135 = HEAP[$ptr_addr];
      HEAP[$134] = $135;
      HEAP[$0] = 0;
      __label__ = 50;
      break;
     case 25:
      
      var $137 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $137;
      __label__ = 48;
      break;
     case 26:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 27;
        break;
      } else {
        __label__ = 28;
        break;
      }
     case 27:
      HEAP[$0] = -2;
      __label__ = 50;
      break;
     case 28:
      var $144 = HEAP[$nextTokPtr_addr];
      var $145 = HEAP[$ptr_addr];
      HEAP[$144] = $145;
      HEAP[$0] = 0;
      __label__ = 50;
      break;
     case 29:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 30;
        break;
      } else {
        __label__ = 31;
        break;
      }
     case 30:
      HEAP[$0] = -2;
      __label__ = 50;
      break;
     case 31:
      var $152 = HEAP[$nextTokPtr_addr];
      var $153 = HEAP[$ptr_addr];
      HEAP[$152] = $153;
      HEAP[$0] = 0;
      __label__ = 50;
      break;
     case 32:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 33;
        break;
      } else {
        __label__ = 34;
        break;
      }
     case 33:
      HEAP[$0] = -2;
      __label__ = 50;
      break;
     case 34:
      var $160 = HEAP[$nextTokPtr_addr];
      var $161 = HEAP[$ptr_addr];
      HEAP[$160] = $161;
      HEAP[$0] = 0;
      __label__ = 50;
      break;
     case 35:
      
      var $163 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $163;
      __label__ = 43;
      break;
     case 36:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 37;
        break;
      } else {
        __label__ = 38;
        break;
      }
     case 37:
      
      
      
      
      
      
      
      
      
      var $177 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1032] = $177;
      __label__ = 39;
      break;
     case 38:
      
      
      
      
      
      
      
      
      var $186 = HEAP[HEAP[$ptr_addr]] & 255;
      var $187 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $188 = _unicode_byte_type($186, $187);
      HEAP[$iftmp_1032] = $188;
      __label__ = 39;
      break;
     case 39:
      var $189 = HEAP[$iftmp_1032];
      if ($189 == 9) {
        __label__ = 40;
        break;
      } else if ($189 == 10) {
        __label__ = 40;
        break;
      } else if ($189 == 11) {
        __label__ = 41;
        break;
      } else if ($189 == 21) {
        __label__ = 40;
        break;
      } else {
        __label__ = 42;
        break;
      }
     case 40:
      
      var $191 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $191;
      __label__ = 43;
      break;
     case 41:
      
      var $193 = HEAP[$ptr_addr] + 2;
      var $194 = HEAP[$nextTokPtr_addr];
      HEAP[$194] = $193;
      HEAP[$0] = 5;
      __label__ = 50;
      break;
     case 42:
      var $195 = HEAP[$nextTokPtr_addr];
      var $196 = HEAP[$ptr_addr];
      HEAP[$195] = $196;
      HEAP[$0] = 0;
      __label__ = 50;
      break;
     case 43:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 36;
        break;
      } else {
        __label__ = 44;
        break;
      }
     case 44:
      HEAP[$0] = -1;
      __label__ = 50;
      break;
     case 45:
      
      var $201 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $201;
      __label__ = 48;
      break;
     case 46:
      
      var $203 = HEAP[$ptr_addr] + 2;
      var $204 = HEAP[$nextTokPtr_addr];
      HEAP[$204] = $203;
      HEAP[$0] = 5;
      __label__ = 50;
      break;
     case 47:
      var $205 = HEAP[$nextTokPtr_addr];
      var $206 = HEAP[$ptr_addr];
      HEAP[$205] = $206;
      HEAP[$0] = 0;
      __label__ = 50;
      break;
     case 48:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 19;
        break;
      } else {
        __label__ = 49;
        break;
      }
     case 49:
      HEAP[$0] = -1;
      __label__ = 50;
      break;
     case 50:
      var $210 = HEAP[$0];
      HEAP[$retval] = $210;
      __label__ = 51;
      break;
     case 51:
      var $retval50 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval50;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _big2_scanHexCharRef($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 32;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_1036 = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      var $iftmp_1034 = __stackBase__ + 28;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 1:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      
      
      
      
      
      
      
      
      var $17 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1034] = $17;
      __label__ = 4;
      break;
     case 3:
      
      
      
      
      
      
      
      
      var $26 = HEAP[HEAP[$ptr_addr]] & 255;
      var $27 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $28 = _unicode_byte_type($26, $27);
      HEAP[$iftmp_1034] = $28;
      __label__ = 4;
      break;
     case 4:
      var $29 = HEAP[$iftmp_1034];
      if ($29 == 24) {
        __label__ = 5;
        break;
      } else if ($29 == 25) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      
      var $31 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $31;
      __label__ = 14;
      break;
     case 6:
      var $32 = HEAP[$nextTokPtr_addr];
      var $33 = HEAP[$ptr_addr];
      HEAP[$32] = $33;
      HEAP[$0] = 0;
      __label__ = 16;
      break;
     case 7:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      
      
      
      
      
      
      
      
      
      var $47 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1036] = $47;
      __label__ = 10;
      break;
     case 9:
      
      
      
      
      
      
      
      
      var $56 = HEAP[HEAP[$ptr_addr]] & 255;
      var $57 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $58 = _unicode_byte_type($56, $57);
      HEAP[$iftmp_1036] = $58;
      __label__ = 10;
      break;
     case 10:
      var $59 = HEAP[$iftmp_1036];
      if ($59 == 18) {
        __label__ = 12;
        break;
      } else if ($59 == 24) {
        __label__ = 11;
        break;
      } else if ($59 == 25) {
        __label__ = 11;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 11:
      
      var $61 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $61;
      __label__ = 14;
      break;
     case 12:
      
      var $63 = HEAP[$ptr_addr] + 2;
      var $64 = HEAP[$nextTokPtr_addr];
      HEAP[$64] = $63;
      HEAP[$0] = 10;
      __label__ = 16;
      break;
     case 13:
      var $65 = HEAP[$nextTokPtr_addr];
      var $66 = HEAP[$ptr_addr];
      HEAP[$65] = $66;
      HEAP[$0] = 0;
      __label__ = 16;
      break;
     case 14:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 7;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 15:
      HEAP[$0] = -1;
      __label__ = 16;
      break;
     case 16:
      var $70 = HEAP[$0];
      HEAP[$retval] = $70;
      __label__ = 17;
      break;
     case 17:
      var $retval16 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval16;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _big2_scanCharRef($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 32;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_1040 = __stackBase__ + 20;
      var $iftmp_1038 = __stackBase__ + 24;
      var $0 = __stackBase__ + 28;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 1:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 2:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 120) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      var $13 = HEAP[$ptr_addr] + 2;
      var $14 = HEAP[$enc_addr];
      var $15 = HEAP[$end_addr];
      var $16 = HEAP[$nextTokPtr_addr];
      var $17 = _big2_scanHexCharRef($14, $13, $15, $16);
      HEAP[$0] = $17;
      __label__ = 19;
      break;
     case 4:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      
      
      
      
      
      
      
      
      
      var $31 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1038] = $31;
      __label__ = 7;
      break;
     case 6:
      
      
      
      
      
      
      
      
      var $40 = HEAP[HEAP[$ptr_addr]] & 255;
      var $41 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $42 = _unicode_byte_type($40, $41);
      HEAP[$iftmp_1038] = $42;
      __label__ = 7;
      break;
     case 7:
      
      if (HEAP[$iftmp_1038] == 25) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      
      var $45 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $45;
      __label__ = 17;
      break;
     case 9:
      var $46 = HEAP[$nextTokPtr_addr];
      var $47 = HEAP[$ptr_addr];
      HEAP[$46] = $47;
      HEAP[$0] = 0;
      __label__ = 19;
      break;
     case 10:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      
      
      
      
      
      
      
      
      
      var $61 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1040] = $61;
      __label__ = 13;
      break;
     case 12:
      
      
      
      
      
      
      
      
      var $70 = HEAP[HEAP[$ptr_addr]] & 255;
      var $71 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $72 = _unicode_byte_type($70, $71);
      HEAP[$iftmp_1040] = $72;
      __label__ = 13;
      break;
     case 13:
      var $73 = HEAP[$iftmp_1040];
      if ($73 == 18) {
        __label__ = 15;
        break;
      } else if ($73 == 25) {
        __label__ = 14;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 14:
      
      var $75 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $75;
      __label__ = 17;
      break;
     case 15:
      
      var $77 = HEAP[$ptr_addr] + 2;
      var $78 = HEAP[$nextTokPtr_addr];
      HEAP[$78] = $77;
      HEAP[$0] = 10;
      __label__ = 19;
      break;
     case 16:
      var $79 = HEAP[$nextTokPtr_addr];
      var $80 = HEAP[$ptr_addr];
      HEAP[$79] = $80;
      HEAP[$0] = 0;
      __label__ = 19;
      break;
     case 17:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 10;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 18:
      HEAP[$0] = -1;
      __label__ = 19;
      break;
     case 19:
      var $84 = HEAP[$0];
      HEAP[$retval] = $84;
      __label__ = 20;
      break;
     case 20:
      var $retval19 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval19;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _big2_scanRef($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 32;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_1050 = __stackBase__ + 20;
      var $iftmp_1042 = __stackBase__ + 24;
      var $0 = __stackBase__ + 28;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -1;
      __label__ = 40;
      break;
     case 2:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      
      
      
      
      
      
      
      
      var $17 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1042] = $17;
      __label__ = 5;
      break;
     case 4:
      
      
      
      
      
      
      
      
      var $26 = HEAP[HEAP[$ptr_addr]] & 255;
      var $27 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $28 = _unicode_byte_type($26, $27);
      HEAP[$iftmp_1042] = $28;
      __label__ = 5;
      break;
     case 5:
      var $29 = HEAP[$iftmp_1042];
      if ($29 == 5) {
        __label__ = 9;
        break;
      } else if ($29 == 6) {
        __label__ = 12;
        break;
      } else if ($29 == 7) {
        __label__ = 15;
        break;
      } else if ($29 == 19) {
        __label__ = 18;
        break;
      } else if ($29 == 22) {
        __label__ = 8;
        break;
      } else if ($29 == 24) {
        __label__ = 8;
        break;
      } else if ($29 == 29) {
        __label__ = 6;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 6:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_nmstrtPages + HEAP[HEAP[$ptr_addr]]] << 3) + (HEAP[HEAP[$ptr_addr] + 1] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr] + 1] & 31)) == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      var $54 = HEAP[$nextTokPtr_addr];
      var $55 = HEAP[$ptr_addr];
      HEAP[$54] = $55;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 8:
      
      var $57 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $57;
      __label__ = 38;
      break;
     case 9:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      HEAP[$0] = -2;
      __label__ = 40;
      break;
     case 11:
      var $64 = HEAP[$nextTokPtr_addr];
      var $65 = HEAP[$ptr_addr];
      HEAP[$64] = $65;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 12:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      HEAP[$0] = -2;
      __label__ = 40;
      break;
     case 14:
      var $72 = HEAP[$nextTokPtr_addr];
      var $73 = HEAP[$ptr_addr];
      HEAP[$72] = $73;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 15:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      HEAP[$0] = -2;
      __label__ = 40;
      break;
     case 17:
      var $80 = HEAP[$nextTokPtr_addr];
      var $81 = HEAP[$ptr_addr];
      HEAP[$80] = $81;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 18:
      
      var $83 = HEAP[$ptr_addr] + 2;
      var $84 = HEAP[$enc_addr];
      var $85 = HEAP[$end_addr];
      var $86 = HEAP[$nextTokPtr_addr];
      var $87 = _big2_scanCharRef($84, $83, $85, $86);
      HEAP[$0] = $87;
      __label__ = 40;
      break;
     case 19:
      var $88 = HEAP[$nextTokPtr_addr];
      var $89 = HEAP[$ptr_addr];
      HEAP[$88] = $89;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 20:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 21;
        break;
      } else {
        __label__ = 22;
        break;
      }
     case 21:
      
      
      
      
      
      
      
      
      
      var $103 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1050] = $103;
      __label__ = 23;
      break;
     case 22:
      
      
      
      
      
      
      
      
      var $112 = HEAP[HEAP[$ptr_addr]] & 255;
      var $113 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $114 = _unicode_byte_type($112, $113);
      HEAP[$iftmp_1050] = $114;
      __label__ = 23;
      break;
     case 23:
      var $115 = HEAP[$iftmp_1050];
      if ($115 == 5) {
        __label__ = 27;
        break;
      } else if ($115 == 6) {
        __label__ = 30;
        break;
      } else if ($115 == 7) {
        __label__ = 33;
        break;
      } else if ($115 == 18) {
        __label__ = 36;
        break;
      } else if ($115 == 22) {
        __label__ = 26;
        break;
      } else if ($115 == 24) {
        __label__ = 26;
        break;
      } else if ($115 == 25) {
        __label__ = 26;
        break;
      } else if ($115 == 26) {
        __label__ = 26;
        break;
      } else if ($115 == 27) {
        __label__ = 26;
        break;
      } else if ($115 == 29) {
        __label__ = 24;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 24:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_namePages + HEAP[HEAP[$ptr_addr]]] << 3) + (HEAP[HEAP[$ptr_addr] + 1] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr] + 1] & 31)) == 0) {
        __label__ = 25;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 25:
      var $140 = HEAP[$nextTokPtr_addr];
      var $141 = HEAP[$ptr_addr];
      HEAP[$140] = $141;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 26:
      
      var $143 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $143;
      __label__ = 38;
      break;
     case 27:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 28;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 28:
      HEAP[$0] = -2;
      __label__ = 40;
      break;
     case 29:
      var $150 = HEAP[$nextTokPtr_addr];
      var $151 = HEAP[$ptr_addr];
      HEAP[$150] = $151;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 30:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 31;
        break;
      } else {
        __label__ = 32;
        break;
      }
     case 31:
      HEAP[$0] = -2;
      __label__ = 40;
      break;
     case 32:
      var $158 = HEAP[$nextTokPtr_addr];
      var $159 = HEAP[$ptr_addr];
      HEAP[$158] = $159;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 33:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 34;
        break;
      } else {
        __label__ = 35;
        break;
      }
     case 34:
      HEAP[$0] = -2;
      __label__ = 40;
      break;
     case 35:
      var $166 = HEAP[$nextTokPtr_addr];
      var $167 = HEAP[$ptr_addr];
      HEAP[$166] = $167;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 36:
      
      var $169 = HEAP[$ptr_addr] + 2;
      var $170 = HEAP[$nextTokPtr_addr];
      HEAP[$170] = $169;
      HEAP[$0] = 9;
      __label__ = 40;
      break;
     case 37:
      var $171 = HEAP[$nextTokPtr_addr];
      var $172 = HEAP[$ptr_addr];
      HEAP[$171] = $172;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 38:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 20;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 39:
      HEAP[$0] = -1;
      __label__ = 40;
      break;
     case 40:
      var $176 = HEAP[$0];
      HEAP[$retval] = $176;
      __label__ = 41;
      break;
     case 41:
      var $retval40 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval40;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _big2_scanAtts($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 72;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 72);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_1171 = __stackBase__ + 20;
      var $iftmp_1162 = __stackBase__ + 24;
      var $iftmp_1134 = __stackBase__ + 28;
      var $iftmp_1125 = __stackBase__ + 32;
      var $iftmp_1116 = __stackBase__ + 36;
      var $iftmp_1087 = __stackBase__ + 40;
      var $0 = __stackBase__ + 44;
      var $iftmp_1058 = __stackBase__ + 48;
      var $hadColon = __stackBase__ + 52;
      var $t = __stackBase__ + 56;
      var $open = __stackBase__ + 60;
      var $t59 = __stackBase__ + 64;
      var $tok = __stackBase__ + 68;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      HEAP[$hadColon] = 0;
      __label__ = 122;
      break;
     case 1:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      
      
      
      
      
      
      
      
      var $14 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1058] = $14;
      __label__ = 4;
      break;
     case 3:
      
      
      
      
      
      
      
      
      var $23 = HEAP[HEAP[$ptr_addr]] & 255;
      var $24 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $25 = _unicode_byte_type($23, $24);
      HEAP[$iftmp_1058] = $25;
      __label__ = 4;
      break;
     case 4:
      var $26 = HEAP[$iftmp_1058];
      if ($26 == 5) {
        __label__ = 8;
        break;
      } else if ($26 == 6) {
        __label__ = 11;
        break;
      } else if ($26 == 7) {
        __label__ = 14;
        break;
      } else if ($26 == 9) {
        __label__ = 38;
        break;
      } else if ($26 == 10) {
        __label__ = 38;
        break;
      } else if ($26 == 14) {
        __label__ = 47;
        break;
      } else if ($26 == 21) {
        __label__ = 38;
        break;
      } else if ($26 == 22) {
        __label__ = 7;
        break;
      } else if ($26 == 23) {
        __label__ = 17;
        break;
      } else if ($26 == 24) {
        __label__ = 7;
        break;
      } else if ($26 == 25) {
        __label__ = 7;
        break;
      } else if ($26 == 26) {
        __label__ = 7;
        break;
      } else if ($26 == 27) {
        __label__ = 7;
        break;
      } else if ($26 == 29) {
        __label__ = 5;
        break;
      } else {
        __label__ = 121;
        break;
      }
     case 5:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_namePages + HEAP[HEAP[$ptr_addr]]] << 3) + (HEAP[HEAP[$ptr_addr] + 1] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr] + 1] & 31)) == 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      var $51 = HEAP[$ptr_addr];
      var $52 = HEAP[$nextTokPtr_addr];
      HEAP[$52] = $51;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 7:
      
      var $54 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $54;
      __label__ = 122;
      break;
     case 8:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      HEAP[$0] = -2;
      __label__ = 124;
      break;
     case 10:
      var $61 = HEAP[$ptr_addr];
      var $62 = HEAP[$nextTokPtr_addr];
      HEAP[$62] = $61;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 11:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      HEAP[$0] = -2;
      __label__ = 124;
      break;
     case 13:
      var $69 = HEAP[$ptr_addr];
      var $70 = HEAP[$nextTokPtr_addr];
      HEAP[$70] = $69;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 14:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      HEAP[$0] = -2;
      __label__ = 124;
      break;
     case 16:
      var $77 = HEAP[$ptr_addr];
      var $78 = HEAP[$nextTokPtr_addr];
      HEAP[$78] = $77;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 17:
      
      
      if (HEAP[$hadColon] != 0) {
        __label__ = 18;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 18:
      var $81 = HEAP[$ptr_addr];
      var $82 = HEAP[$nextTokPtr_addr];
      HEAP[$82] = $81;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 19:
      HEAP[$hadColon] = 1;
      
      var $84 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $84;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 20;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 20:
      HEAP[$0] = -1;
      __label__ = 124;
      break;
     case 21:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 22;
        break;
      } else {
        __label__ = 23;
        break;
      }
     case 22:
      
      
      
      
      
      
      
      
      
      var $101 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1087] = $101;
      __label__ = 24;
      break;
     case 23:
      
      
      
      
      
      
      
      
      var $110 = HEAP[HEAP[$ptr_addr]] & 255;
      var $111 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $112 = _unicode_byte_type($110, $111);
      HEAP[$iftmp_1087] = $112;
      __label__ = 24;
      break;
     case 24:
      var $113 = HEAP[$iftmp_1087];
      if ($113 == 5) {
        __label__ = 28;
        break;
      } else if ($113 == 6) {
        __label__ = 31;
        break;
      } else if ($113 == 7) {
        __label__ = 34;
        break;
      } else if ($113 == 22) {
        __label__ = 27;
        break;
      } else if ($113 == 24) {
        __label__ = 27;
        break;
      } else if ($113 == 29) {
        __label__ = 25;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 25:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_nmstrtPages + HEAP[HEAP[$ptr_addr]]] << 3) + (HEAP[HEAP[$ptr_addr] + 1] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr] + 1] & 31)) == 0) {
        __label__ = 26;
        break;
      } else {
        __label__ = 27;
        break;
      }
     case 26:
      var $138 = HEAP[$ptr_addr];
      var $139 = HEAP[$nextTokPtr_addr];
      HEAP[$139] = $138;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 27:
      
      var $141 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $141;
      __label__ = 122;
      break;
     case 28:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 29;
        break;
      } else {
        __label__ = 30;
        break;
      }
     case 29:
      HEAP[$0] = -2;
      __label__ = 124;
      break;
     case 30:
      var $148 = HEAP[$ptr_addr];
      var $149 = HEAP[$nextTokPtr_addr];
      HEAP[$149] = $148;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 31:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 32;
        break;
      } else {
        __label__ = 33;
        break;
      }
     case 32:
      HEAP[$0] = -2;
      __label__ = 124;
      break;
     case 33:
      var $156 = HEAP[$ptr_addr];
      var $157 = HEAP[$nextTokPtr_addr];
      HEAP[$157] = $156;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 34:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 35;
        break;
      } else {
        __label__ = 36;
        break;
      }
     case 35:
      HEAP[$0] = -2;
      __label__ = 124;
      break;
     case 36:
      var $164 = HEAP[$ptr_addr];
      var $165 = HEAP[$nextTokPtr_addr];
      HEAP[$165] = $164;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 37:
      var $166 = HEAP[$ptr_addr];
      var $167 = HEAP[$nextTokPtr_addr];
      HEAP[$167] = $166;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 38:
      
      var $169 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $169;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 39;
        break;
      } else {
        __label__ = 40;
        break;
      }
     case 39:
      HEAP[$0] = -1;
      __label__ = 124;
      break;
     case 40:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 41;
        break;
      } else {
        __label__ = 42;
        break;
      }
     case 41:
      
      
      
      
      
      
      
      
      
      var $186 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1116] = $186;
      __label__ = 43;
      break;
     case 42:
      
      
      
      
      
      
      
      
      var $195 = HEAP[HEAP[$ptr_addr]] & 255;
      var $196 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $197 = _unicode_byte_type($195, $196);
      HEAP[$iftmp_1116] = $197;
      __label__ = 43;
      break;
     case 43:
      var $198 = HEAP[$iftmp_1116];
      HEAP[$t] = $198;
      
      
      if (HEAP[$t] == 14) {
        __label__ = 47;
        break;
      } else {
        __label__ = 44;
        break;
      }
     case 44:
      var $201 = HEAP[$t];
      if ($201 == 9) {
        __label__ = 45;
        break;
      } else if ($201 == 10) {
        __label__ = 45;
        break;
      } else if ($201 == 21) {
        __label__ = 45;
        break;
      } else {
        __label__ = 46;
        break;
      }
     case 45:
      __label__ = 38;
      break;
     case 46:
      var $202 = HEAP[$ptr_addr];
      var $203 = HEAP[$nextTokPtr_addr];
      HEAP[$203] = $202;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 47:
      HEAP[$hadColon] = 0;
      __label__ = 48;
      break;
     case 48:
      
      var $205 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $205;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 49;
        break;
      } else {
        __label__ = 50;
        break;
      }
     case 49:
      HEAP[$0] = -1;
      __label__ = 124;
      break;
     case 50:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 51;
        break;
      } else {
        __label__ = 52;
        break;
      }
     case 51:
      
      
      
      
      
      
      
      
      
      var $222 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1125] = $222;
      __label__ = 53;
      break;
     case 52:
      
      
      
      
      
      
      
      
      var $231 = HEAP[HEAP[$ptr_addr]] & 255;
      var $232 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $233 = _unicode_byte_type($231, $232);
      HEAP[$iftmp_1125] = $233;
      __label__ = 53;
      break;
     case 53:
      var $234 = HEAP[$iftmp_1125];
      HEAP[$open] = $234;
      
      
      if (HEAP[$open] == 12) {
        __label__ = 58;
        break;
      } else {
        __label__ = 54;
        break;
      }
     case 54:
      
      
      if (HEAP[$open] == 13) {
        __label__ = 58;
        break;
      } else {
        __label__ = 55;
        break;
      }
     case 55:
      var $239 = HEAP[$open];
      if ($239 == 9) {
        __label__ = 56;
        break;
      } else if ($239 == 10) {
        __label__ = 56;
        break;
      } else if ($239 == 21) {
        __label__ = 56;
        break;
      } else {
        __label__ = 57;
        break;
      }
     case 56:
      __label__ = 48;
      break;
     case 57:
      var $240 = HEAP[$ptr_addr];
      var $241 = HEAP[$nextTokPtr_addr];
      HEAP[$241] = $240;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 58:
      
      var $243 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $243;
      __label__ = 59;
      break;
     case 59:
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 60;
        break;
      } else {
        __label__ = 61;
        break;
      }
     case 60:
      HEAP[$0] = -1;
      __label__ = 124;
      break;
     case 61:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 62;
        break;
      } else {
        __label__ = 63;
        break;
      }
     case 62:
      
      
      
      
      
      
      
      
      
      var $260 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1134] = $260;
      __label__ = 64;
      break;
     case 63:
      
      
      
      
      
      
      
      
      var $269 = HEAP[HEAP[$ptr_addr]] & 255;
      var $270 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $271 = _unicode_byte_type($269, $270);
      HEAP[$iftmp_1134] = $271;
      __label__ = 64;
      break;
     case 64:
      var $272 = HEAP[$iftmp_1134];
      HEAP[$t59] = $272;
      
      
      
      if (HEAP[$t59] == HEAP[$open]) {
        __label__ = 84;
        break;
      } else {
        __label__ = 65;
        break;
      }
     case 65:
      var $276 = HEAP[$t59];
      if ($276 == 0) {
        __label__ = 75;
        break;
      } else if ($276 == 1) {
        __label__ = 75;
        break;
      } else if ($276 == 2) {
        __label__ = 81;
        break;
      } else if ($276 == 3) {
        __label__ = 76;
        break;
      } else if ($276 == 5) {
        __label__ = 66;
        break;
      } else if ($276 == 6) {
        __label__ = 69;
        break;
      } else if ($276 == 7) {
        __label__ = 72;
        break;
      } else if ($276 == 8) {
        __label__ = 75;
        break;
      } else {
        __label__ = 82;
        break;
      }
     case 66:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 67;
        break;
      } else {
        __label__ = 68;
        break;
      }
     case 67:
      HEAP[$0] = -2;
      __label__ = 124;
      break;
     case 68:
      
      var $284 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $284;
      __label__ = 83;
      break;
     case 69:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 70;
        break;
      } else {
        __label__ = 71;
        break;
      }
     case 70:
      HEAP[$0] = -2;
      __label__ = 124;
      break;
     case 71:
      
      var $292 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $292;
      __label__ = 83;
      break;
     case 72:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 73;
        break;
      } else {
        __label__ = 74;
        break;
      }
     case 73:
      HEAP[$0] = -2;
      __label__ = 124;
      break;
     case 74:
      
      var $300 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $300;
      __label__ = 83;
      break;
     case 75:
      var $301 = HEAP[$ptr_addr];
      var $302 = HEAP[$nextTokPtr_addr];
      HEAP[$302] = $301;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 76:
      
      var $304 = HEAP[$ptr_addr] + 2;
      var $305 = HEAP[$enc_addr];
      var $306 = HEAP[$end_addr];
      var $307 = _big2_scanRef($305, $304, $306, $ptr_addr);
      HEAP[$tok] = $307;
      
      
      if (HEAP[$tok] <= 0) {
        __label__ = 77;
        break;
      } else {
        __label__ = 80;
        break;
      }
     case 77:
      
      
      if (HEAP[$tok] == 0) {
        __label__ = 78;
        break;
      } else {
        __label__ = 79;
        break;
      }
     case 78:
      var $312 = HEAP[$ptr_addr];
      var $313 = HEAP[$nextTokPtr_addr];
      HEAP[$313] = $312;
      __label__ = 79;
      break;
     case 79:
      var $314 = HEAP[$tok];
      HEAP[$0] = $314;
      __label__ = 124;
      break;
     case 80:
      __label__ = 83;
      break;
     case 81:
      var $315 = HEAP[$ptr_addr];
      var $316 = HEAP[$nextTokPtr_addr];
      HEAP[$316] = $315;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 82:
      
      var $318 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $318;
      __label__ = 83;
      break;
     case 83:
      __label__ = 59;
      break;
     case 84:
      
      var $320 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $320;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 85;
        break;
      } else {
        __label__ = 86;
        break;
      }
     case 85:
      HEAP[$0] = -1;
      __label__ = 124;
      break;
     case 86:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 87;
        break;
      } else {
        __label__ = 88;
        break;
      }
     case 87:
      
      
      
      
      
      
      
      
      
      var $337 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1162] = $337;
      __label__ = 89;
      break;
     case 88:
      
      
      
      
      
      
      
      
      var $346 = HEAP[HEAP[$ptr_addr]] & 255;
      var $347 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $348 = _unicode_byte_type($346, $347);
      HEAP[$iftmp_1162] = $348;
      __label__ = 89;
      break;
     case 89:
      var $349 = HEAP[$iftmp_1162];
      if ($349 == 9) {
        __label__ = 90;
        break;
      } else if ($349 == 10) {
        __label__ = 90;
        break;
      } else if ($349 == 11) {
        __label__ = 92;
        break;
      } else if ($349 == 17) {
        __label__ = 91;
        break;
      } else if ($349 == 21) {
        __label__ = 90;
        break;
      } else {
        __label__ = 93;
        break;
      }
     case 90:
      __label__ = 94;
      break;
     case 91:
      __label__ = 114;
      break;
     case 92:
      __label__ = 113;
      break;
     case 93:
      var $350 = HEAP[$ptr_addr];
      var $351 = HEAP[$nextTokPtr_addr];
      HEAP[$351] = $350;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 94:
      
      var $353 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $353;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 95;
        break;
      } else {
        __label__ = 96;
        break;
      }
     case 95:
      HEAP[$0] = -1;
      __label__ = 124;
      break;
     case 96:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 97;
        break;
      } else {
        __label__ = 98;
        break;
      }
     case 97:
      
      
      
      
      
      
      
      
      
      var $370 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1171] = $370;
      __label__ = 99;
      break;
     case 98:
      
      
      
      
      
      
      
      
      var $379 = HEAP[HEAP[$ptr_addr]] & 255;
      var $380 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $381 = _unicode_byte_type($379, $380);
      HEAP[$iftmp_1171] = $381;
      __label__ = 99;
      break;
     case 99:
      var $382 = HEAP[$iftmp_1171];
      if ($382 == 5) {
        __label__ = 103;
        break;
      } else if ($382 == 6) {
        __label__ = 106;
        break;
      } else if ($382 == 7) {
        __label__ = 109;
        break;
      } else if ($382 == 9) {
        __label__ = 112;
        break;
      } else if ($382 == 10) {
        __label__ = 112;
        break;
      } else if ($382 == 11) {
        __label__ = 113;
        break;
      } else if ($382 == 17) {
        __label__ = 114;
        break;
      } else if ($382 == 21) {
        __label__ = 112;
        break;
      } else if ($382 == 22) {
        __label__ = 102;
        break;
      } else if ($382 == 24) {
        __label__ = 102;
        break;
      } else if ($382 == 29) {
        __label__ = 100;
        break;
      } else {
        __label__ = 120;
        break;
      }
     case 100:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_nmstrtPages + HEAP[HEAP[$ptr_addr]]] << 3) + (HEAP[HEAP[$ptr_addr] + 1] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr] + 1] & 31)) == 0) {
        __label__ = 101;
        break;
      } else {
        __label__ = 102;
        break;
      }
     case 101:
      var $407 = HEAP[$ptr_addr];
      var $408 = HEAP[$nextTokPtr_addr];
      HEAP[$408] = $407;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 102:
      
      var $410 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $410;
      __label__ = 122;
      break;
     case 103:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 104;
        break;
      } else {
        __label__ = 105;
        break;
      }
     case 104:
      HEAP[$0] = -2;
      __label__ = 124;
      break;
     case 105:
      var $417 = HEAP[$ptr_addr];
      var $418 = HEAP[$nextTokPtr_addr];
      HEAP[$418] = $417;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 106:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 107;
        break;
      } else {
        __label__ = 108;
        break;
      }
     case 107:
      HEAP[$0] = -2;
      __label__ = 124;
      break;
     case 108:
      var $425 = HEAP[$ptr_addr];
      var $426 = HEAP[$nextTokPtr_addr];
      HEAP[$426] = $425;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 109:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 110;
        break;
      } else {
        __label__ = 111;
        break;
      }
     case 110:
      HEAP[$0] = -2;
      __label__ = 124;
      break;
     case 111:
      var $433 = HEAP[$ptr_addr];
      var $434 = HEAP[$nextTokPtr_addr];
      HEAP[$434] = $433;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 112:
      __label__ = 94;
      break;
     case 113:
      
      var $436 = HEAP[$ptr_addr] + 2;
      var $437 = HEAP[$nextTokPtr_addr];
      HEAP[$437] = $436;
      HEAP[$0] = 1;
      __label__ = 124;
      break;
     case 114:
      
      var $439 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $439;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 115;
        break;
      } else {
        __label__ = 116;
        break;
      }
     case 115:
      HEAP[$0] = -1;
      __label__ = 124;
      break;
     case 116:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 0) {
        __label__ = 118;
        break;
      } else {
        __label__ = 117;
        break;
      }
     case 117:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] != 62) {
        __label__ = 118;
        break;
      } else {
        __label__ = 119;
        break;
      }
     case 118:
      var $451 = HEAP[$ptr_addr];
      var $452 = HEAP[$nextTokPtr_addr];
      HEAP[$452] = $451;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 119:
      
      var $454 = HEAP[$ptr_addr] + 2;
      var $455 = HEAP[$nextTokPtr_addr];
      HEAP[$455] = $454;
      HEAP[$0] = 3;
      __label__ = 124;
      break;
     case 120:
      var $456 = HEAP[$ptr_addr];
      var $457 = HEAP[$nextTokPtr_addr];
      HEAP[$457] = $456;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 121:
      var $458 = HEAP[$ptr_addr];
      var $459 = HEAP[$nextTokPtr_addr];
      HEAP[$459] = $458;
      HEAP[$0] = 0;
      __label__ = 124;
      break;
     case 122:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 123;
        break;
      }
     case 123:
      HEAP[$0] = -1;
      __label__ = 124;
      break;
     case 124:
      var $463 = HEAP[$0];
      HEAP[$retval] = $463;
      __label__ = 125;
      break;
     case 125:
      var $retval123 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval123;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _big2_scanLt($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 48;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 48);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_1233 = __stackBase__ + 20;
      var $iftmp_1225 = __stackBase__ + 24;
      var $iftmp_1217 = __stackBase__ + 28;
      var $iftmp_1215 = __stackBase__ + 32;
      var $iftmp_1207 = __stackBase__ + 36;
      var $0 = __stackBase__ + 40;
      var $hadColon = __stackBase__ + 44;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -1;
      __label__ = 100;
      break;
     case 2:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      
      
      
      
      
      
      
      
      var $17 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1207] = $17;
      __label__ = 5;
      break;
     case 4:
      
      
      
      
      
      
      
      
      var $26 = HEAP[HEAP[$ptr_addr]] & 255;
      var $27 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $28 = _unicode_byte_type($26, $27);
      HEAP[$iftmp_1207] = $28;
      __label__ = 5;
      break;
     case 5:
      var $29 = HEAP[$iftmp_1207];
      if ($29 == 5) {
        __label__ = 9;
        break;
      } else if ($29 == 6) {
        __label__ = 12;
        break;
      } else if ($29 == 7) {
        __label__ = 15;
        break;
      } else if ($29 == 15) {
        __label__ = 27;
        break;
      } else if ($29 == 16) {
        __label__ = 18;
        break;
      } else if ($29 == 17) {
        __label__ = 28;
        break;
      } else if ($29 == 22) {
        __label__ = 8;
        break;
      } else if ($29 == 24) {
        __label__ = 8;
        break;
      } else if ($29 == 29) {
        __label__ = 6;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 6:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_nmstrtPages + HEAP[HEAP[$ptr_addr]]] << 3) + (HEAP[HEAP[$ptr_addr] + 1] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr] + 1] & 31)) == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      var $54 = HEAP[$nextTokPtr_addr];
      var $55 = HEAP[$ptr_addr];
      HEAP[$54] = $55;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 8:
      
      var $57 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $57;
      HEAP[$hadColon] = 0;
      __label__ = 98;
      break;
     case 9:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      HEAP[$0] = -2;
      __label__ = 100;
      break;
     case 11:
      var $64 = HEAP[$nextTokPtr_addr];
      var $65 = HEAP[$ptr_addr];
      HEAP[$64] = $65;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 12:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      HEAP[$0] = -2;
      __label__ = 100;
      break;
     case 14:
      var $72 = HEAP[$nextTokPtr_addr];
      var $73 = HEAP[$ptr_addr];
      HEAP[$72] = $73;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 15:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      HEAP[$0] = -2;
      __label__ = 100;
      break;
     case 17:
      var $80 = HEAP[$nextTokPtr_addr];
      var $81 = HEAP[$ptr_addr];
      HEAP[$80] = $81;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 18:
      
      var $83 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $83;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 19;
        break;
      } else {
        __label__ = 20;
        break;
      }
     case 19:
      HEAP[$0] = -1;
      __label__ = 100;
      break;
     case 20:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 21;
        break;
      } else {
        __label__ = 22;
        break;
      }
     case 21:
      
      
      
      
      
      
      
      
      
      var $100 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1215] = $100;
      __label__ = 23;
      break;
     case 22:
      
      
      
      
      
      
      
      
      var $109 = HEAP[HEAP[$ptr_addr]] & 255;
      var $110 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $111 = _unicode_byte_type($109, $110);
      HEAP[$iftmp_1215] = $111;
      __label__ = 23;
      break;
     case 23:
      var $112 = HEAP[$iftmp_1215];
      if ($112 == 20) {
        __label__ = 25;
        break;
      } else if ($112 == 27) {
        __label__ = 24;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 24:
      
      var $114 = HEAP[$ptr_addr] + 2;
      var $115 = HEAP[$enc_addr];
      var $116 = HEAP[$end_addr];
      var $117 = HEAP[$nextTokPtr_addr];
      var $118 = _big2_scanComment($115, $114, $116, $117);
      HEAP[$0] = $118;
      __label__ = 100;
      break;
     case 25:
      
      var $120 = HEAP[$ptr_addr] + 2;
      var $121 = HEAP[$enc_addr];
      var $122 = HEAP[$end_addr];
      var $123 = HEAP[$nextTokPtr_addr];
      var $124 = _big2_scanCdataSection($121, $120, $122, $123);
      HEAP[$0] = $124;
      __label__ = 100;
      break;
     case 26:
      var $125 = HEAP[$nextTokPtr_addr];
      var $126 = HEAP[$ptr_addr];
      HEAP[$125] = $126;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 27:
      
      var $128 = HEAP[$ptr_addr] + 2;
      var $129 = HEAP[$enc_addr];
      var $130 = HEAP[$end_addr];
      var $131 = HEAP[$nextTokPtr_addr];
      var $132 = _big2_scanPi($129, $128, $130, $131);
      HEAP[$0] = $132;
      __label__ = 100;
      break;
     case 28:
      
      var $134 = HEAP[$ptr_addr] + 2;
      var $135 = HEAP[$enc_addr];
      var $136 = HEAP[$end_addr];
      var $137 = HEAP[$nextTokPtr_addr];
      var $138 = _big2_scanEndTag($135, $134, $136, $137);
      HEAP[$0] = $138;
      __label__ = 100;
      break;
     case 29:
      var $139 = HEAP[$nextTokPtr_addr];
      var $140 = HEAP[$ptr_addr];
      HEAP[$139] = $140;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 30:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 31;
        break;
      } else {
        __label__ = 32;
        break;
      }
     case 31:
      
      
      
      
      
      
      
      
      
      var $154 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1217] = $154;
      __label__ = 33;
      break;
     case 32:
      
      
      
      
      
      
      
      
      var $163 = HEAP[HEAP[$ptr_addr]] & 255;
      var $164 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $165 = _unicode_byte_type($163, $164);
      HEAP[$iftmp_1217] = $165;
      __label__ = 33;
      break;
     case 33:
      var $166 = HEAP[$iftmp_1217];
      if ($166 == 5) {
        __label__ = 37;
        break;
      } else if ($166 == 6) {
        __label__ = 40;
        break;
      } else if ($166 == 7) {
        __label__ = 43;
        break;
      } else if ($166 == 9) {
        __label__ = 67;
        break;
      } else if ($166 == 10) {
        __label__ = 67;
        break;
      } else if ($166 == 11) {
        __label__ = 90;
        break;
      } else if ($166 == 17) {
        __label__ = 91;
        break;
      } else if ($166 == 21) {
        __label__ = 67;
        break;
      } else if ($166 == 22) {
        __label__ = 36;
        break;
      } else if ($166 == 23) {
        __label__ = 46;
        break;
      } else if ($166 == 24) {
        __label__ = 36;
        break;
      } else if ($166 == 25) {
        __label__ = 36;
        break;
      } else if ($166 == 26) {
        __label__ = 36;
        break;
      } else if ($166 == 27) {
        __label__ = 36;
        break;
      } else if ($166 == 29) {
        __label__ = 34;
        break;
      } else {
        __label__ = 97;
        break;
      }
     case 34:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_namePages + HEAP[HEAP[$ptr_addr]]] << 3) + (HEAP[HEAP[$ptr_addr] + 1] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr] + 1] & 31)) == 0) {
        __label__ = 35;
        break;
      } else {
        __label__ = 36;
        break;
      }
     case 35:
      var $191 = HEAP[$nextTokPtr_addr];
      var $192 = HEAP[$ptr_addr];
      HEAP[$191] = $192;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 36:
      
      var $194 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $194;
      __label__ = 98;
      break;
     case 37:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 38;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 38:
      HEAP[$0] = -2;
      __label__ = 100;
      break;
     case 39:
      var $201 = HEAP[$nextTokPtr_addr];
      var $202 = HEAP[$ptr_addr];
      HEAP[$201] = $202;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 40:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 41;
        break;
      } else {
        __label__ = 42;
        break;
      }
     case 41:
      HEAP[$0] = -2;
      __label__ = 100;
      break;
     case 42:
      var $209 = HEAP[$nextTokPtr_addr];
      var $210 = HEAP[$ptr_addr];
      HEAP[$209] = $210;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 43:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 44;
        break;
      } else {
        __label__ = 45;
        break;
      }
     case 44:
      HEAP[$0] = -2;
      __label__ = 100;
      break;
     case 45:
      var $217 = HEAP[$nextTokPtr_addr];
      var $218 = HEAP[$ptr_addr];
      HEAP[$217] = $218;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 46:
      
      
      if (HEAP[$hadColon] != 0) {
        __label__ = 47;
        break;
      } else {
        __label__ = 48;
        break;
      }
     case 47:
      var $221 = HEAP[$nextTokPtr_addr];
      var $222 = HEAP[$ptr_addr];
      HEAP[$221] = $222;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 48:
      HEAP[$hadColon] = 1;
      
      var $224 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $224;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 49;
        break;
      } else {
        __label__ = 50;
        break;
      }
     case 49:
      HEAP[$0] = -1;
      __label__ = 100;
      break;
     case 50:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 51;
        break;
      } else {
        __label__ = 52;
        break;
      }
     case 51:
      
      
      
      
      
      
      
      
      
      var $241 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1225] = $241;
      __label__ = 53;
      break;
     case 52:
      
      
      
      
      
      
      
      
      var $250 = HEAP[HEAP[$ptr_addr]] & 255;
      var $251 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $252 = _unicode_byte_type($250, $251);
      HEAP[$iftmp_1225] = $252;
      __label__ = 53;
      break;
     case 53:
      var $253 = HEAP[$iftmp_1225];
      if ($253 == 5) {
        __label__ = 57;
        break;
      } else if ($253 == 6) {
        __label__ = 60;
        break;
      } else if ($253 == 7) {
        __label__ = 63;
        break;
      } else if ($253 == 22) {
        __label__ = 56;
        break;
      } else if ($253 == 24) {
        __label__ = 56;
        break;
      } else if ($253 == 29) {
        __label__ = 54;
        break;
      } else {
        __label__ = 66;
        break;
      }
     case 54:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_nmstrtPages + HEAP[HEAP[$ptr_addr]]] << 3) + (HEAP[HEAP[$ptr_addr] + 1] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr] + 1] & 31)) == 0) {
        __label__ = 55;
        break;
      } else {
        __label__ = 56;
        break;
      }
     case 55:
      var $278 = HEAP[$nextTokPtr_addr];
      var $279 = HEAP[$ptr_addr];
      HEAP[$278] = $279;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 56:
      
      var $281 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $281;
      __label__ = 98;
      break;
     case 57:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 58;
        break;
      } else {
        __label__ = 59;
        break;
      }
     case 58:
      HEAP[$0] = -2;
      __label__ = 100;
      break;
     case 59:
      var $288 = HEAP[$nextTokPtr_addr];
      var $289 = HEAP[$ptr_addr];
      HEAP[$288] = $289;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 60:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 61;
        break;
      } else {
        __label__ = 62;
        break;
      }
     case 61:
      HEAP[$0] = -2;
      __label__ = 100;
      break;
     case 62:
      var $296 = HEAP[$nextTokPtr_addr];
      var $297 = HEAP[$ptr_addr];
      HEAP[$296] = $297;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 63:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 64;
        break;
      } else {
        __label__ = 65;
        break;
      }
     case 64:
      HEAP[$0] = -2;
      __label__ = 100;
      break;
     case 65:
      var $304 = HEAP[$nextTokPtr_addr];
      var $305 = HEAP[$ptr_addr];
      HEAP[$304] = $305;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 66:
      var $306 = HEAP[$nextTokPtr_addr];
      var $307 = HEAP[$ptr_addr];
      HEAP[$306] = $307;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 67:
      
      var $309 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $309;
      __label__ = 88;
      break;
     case 68:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 69;
        break;
      } else {
        __label__ = 70;
        break;
      }
     case 69:
      
      
      
      
      
      
      
      
      
      var $323 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1233] = $323;
      __label__ = 71;
      break;
     case 70:
      
      
      
      
      
      
      
      
      var $332 = HEAP[HEAP[$ptr_addr]] & 255;
      var $333 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $334 = _unicode_byte_type($332, $333);
      HEAP[$iftmp_1233] = $334;
      __label__ = 71;
      break;
     case 71:
      var $335 = HEAP[$iftmp_1233];
      if ($335 == 5) {
        __label__ = 75;
        break;
      } else if ($335 == 6) {
        __label__ = 78;
        break;
      } else if ($335 == 7) {
        __label__ = 81;
        break;
      } else if ($335 == 9) {
        __label__ = 86;
        break;
      } else if ($335 == 10) {
        __label__ = 86;
        break;
      } else if ($335 == 11) {
        __label__ = 84;
        break;
      } else if ($335 == 17) {
        __label__ = 85;
        break;
      } else if ($335 == 21) {
        __label__ = 86;
        break;
      } else if ($335 == 22) {
        __label__ = 74;
        break;
      } else if ($335 == 24) {
        __label__ = 74;
        break;
      } else if ($335 == 29) {
        __label__ = 72;
        break;
      } else {
        __label__ = 87;
        break;
      }
     case 72:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_nmstrtPages + HEAP[HEAP[$ptr_addr]]] << 3) + (HEAP[HEAP[$ptr_addr] + 1] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr] + 1] & 31)) == 0) {
        __label__ = 73;
        break;
      } else {
        __label__ = 74;
        break;
      }
     case 73:
      var $360 = HEAP[$nextTokPtr_addr];
      var $361 = HEAP[$ptr_addr];
      HEAP[$360] = $361;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 74:
      
      var $363 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $363;
      var $364 = HEAP[$enc_addr];
      var $365 = HEAP[$ptr_addr];
      var $366 = HEAP[$end_addr];
      var $367 = HEAP[$nextTokPtr_addr];
      var $368 = _big2_scanAtts($364, $365, $366, $367);
      HEAP[$0] = $368;
      __label__ = 100;
      break;
     case 75:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 76;
        break;
      } else {
        __label__ = 77;
        break;
      }
     case 76:
      HEAP[$0] = -2;
      __label__ = 100;
      break;
     case 77:
      var $375 = HEAP[$nextTokPtr_addr];
      var $376 = HEAP[$ptr_addr];
      HEAP[$375] = $376;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 78:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 79;
        break;
      } else {
        __label__ = 80;
        break;
      }
     case 79:
      HEAP[$0] = -2;
      __label__ = 100;
      break;
     case 80:
      var $383 = HEAP[$nextTokPtr_addr];
      var $384 = HEAP[$ptr_addr];
      HEAP[$383] = $384;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 81:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 82;
        break;
      } else {
        __label__ = 83;
        break;
      }
     case 82:
      HEAP[$0] = -2;
      __label__ = 100;
      break;
     case 83:
      var $391 = HEAP[$nextTokPtr_addr];
      var $392 = HEAP[$ptr_addr];
      HEAP[$391] = $392;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 84:
      __label__ = 90;
      break;
     case 85:
      __label__ = 91;
      break;
     case 86:
      
      var $394 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $394;
      __label__ = 88;
      break;
     case 87:
      var $395 = HEAP[$nextTokPtr_addr];
      var $396 = HEAP[$ptr_addr];
      HEAP[$395] = $396;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 88:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 68;
        break;
      } else {
        __label__ = 89;
        break;
      }
     case 89:
      HEAP[$0] = -1;
      __label__ = 100;
      break;
     case 90:
      
      var $401 = HEAP[$ptr_addr] + 2;
      var $402 = HEAP[$nextTokPtr_addr];
      HEAP[$402] = $401;
      HEAP[$0] = 2;
      __label__ = 100;
      break;
     case 91:
      
      var $404 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $404;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 92;
        break;
      } else {
        __label__ = 93;
        break;
      }
     case 92:
      HEAP[$0] = -1;
      __label__ = 100;
      break;
     case 93:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 0) {
        __label__ = 95;
        break;
      } else {
        __label__ = 94;
        break;
      }
     case 94:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] != 62) {
        __label__ = 95;
        break;
      } else {
        __label__ = 96;
        break;
      }
     case 95:
      var $416 = HEAP[$nextTokPtr_addr];
      var $417 = HEAP[$ptr_addr];
      HEAP[$416] = $417;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 96:
      
      var $419 = HEAP[$ptr_addr] + 2;
      var $420 = HEAP[$nextTokPtr_addr];
      HEAP[$420] = $419;
      HEAP[$0] = 4;
      __label__ = 100;
      break;
     case 97:
      var $421 = HEAP[$nextTokPtr_addr];
      var $422 = HEAP[$ptr_addr];
      HEAP[$421] = $422;
      HEAP[$0] = 0;
      __label__ = 100;
      break;
     case 98:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 30;
        break;
      } else {
        __label__ = 99;
        break;
      }
     case 99:
      HEAP[$0] = -1;
      __label__ = 100;
      break;
     case 100:
      var $426 = HEAP[$0];
      HEAP[$retval] = $426;
      __label__ = 101;
      break;
     case 101:
      var $retval98 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval98;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _big2_contentTok($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 37;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 37);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_1254 = __stackBase__ + 20;
      var $iftmp_1246 = __stackBase__ + 24;
      var $iftmp_1244 = __stackBase__ + 25;
      var $0 = __stackBase__ + 29;
      var $n = __stackBase__ + 33;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -4;
      __label__ = 69;
      break;
     case 2:
      
      
      
      
      var $8 = HEAP[$end_addr] - HEAP[$ptr_addr];
      HEAP[$n] = $8;
      
      
      
      
      if ((HEAP[$n] & 1 & 255) != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 3:
      
      var $13 = HEAP[$n] & -2;
      HEAP[$n] = $13;
      
      
      if (HEAP[$n] == 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      HEAP[$0] = -1;
      __label__ = 69;
      break;
     case 5:
      
      
      var $18 = HEAP[$ptr_addr] + HEAP[$n];
      HEAP[$end_addr] = $18;
      __label__ = 6;
      break;
     case 6:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      
      
      
      
      
      
      
      
      
      var $32 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1244] = $32;
      __label__ = 9;
      break;
     case 8:
      
      
      
      
      
      
      
      
      var $41 = HEAP[HEAP[$ptr_addr]] & 255;
      var $42 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $43 = _unicode_byte_type($41, $42);
      HEAP[$iftmp_1244] = $43;
      __label__ = 9;
      break;
     case 9:
      var $44 = HEAP[$iftmp_1244];
      if ($44 == 0) {
        __label__ = 40;
        break;
      } else if ($44 == 1) {
        __label__ = 40;
        break;
      } else if ($44 == 2) {
        __label__ = 10;
        break;
      } else if ($44 == 3) {
        __label__ = 11;
        break;
      } else if ($44 == 4) {
        __label__ = 21;
        break;
      } else if ($44 == 5) {
        __label__ = 31;
        break;
      } else if ($44 == 6) {
        __label__ = 34;
        break;
      } else if ($44 == 7) {
        __label__ = 37;
        break;
      } else if ($44 == 8) {
        __label__ = 40;
        break;
      } else if ($44 == 9) {
        __label__ = 12;
        break;
      } else if ($44 == 10) {
        __label__ = 20;
        break;
      } else {
        __label__ = 41;
        break;
      }
     case 10:
      
      var $46 = HEAP[$ptr_addr] + 2;
      var $47 = HEAP[$enc_addr];
      var $48 = HEAP[$end_addr];
      var $49 = HEAP[$nextTokPtr_addr];
      var $50 = _big2_scanLt($47, $46, $48, $49);
      HEAP[$0] = $50;
      __label__ = 69;
      break;
     case 11:
      
      var $52 = HEAP[$ptr_addr] + 2;
      var $53 = HEAP[$enc_addr];
      var $54 = HEAP[$end_addr];
      var $55 = HEAP[$nextTokPtr_addr];
      var $56 = _big2_scanRef($53, $52, $54, $55);
      HEAP[$0] = $56;
      __label__ = 69;
      break;
     case 12:
      
      var $58 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $58;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      HEAP[$0] = -3;
      __label__ = 69;
      break;
     case 14:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      
      
      
      
      
      
      
      
      
      
      var $76 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]] == 10;
      HEAP[$iftmp_1246] = $76;
      __label__ = 17;
      break;
     case 16:
      
      
      
      
      
      
      
      
      var $85 = HEAP[HEAP[$ptr_addr]] & 255;
      var $86 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $87 = _unicode_byte_type($85, $86);
      
      var $89 = $87 == 10;
      HEAP[$iftmp_1246] = $89;
      __label__ = 17;
      break;
     case 17:
      
      
      if (HEAP[$iftmp_1246] != 0) {
        __label__ = 18;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 18:
      
      var $92 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $92;
      __label__ = 19;
      break;
     case 19:
      var $93 = HEAP[$nextTokPtr_addr];
      var $94 = HEAP[$ptr_addr];
      HEAP[$93] = $94;
      HEAP[$0] = 7;
      __label__ = 69;
      break;
     case 20:
      
      var $96 = HEAP[$ptr_addr] + 2;
      var $97 = HEAP[$nextTokPtr_addr];
      HEAP[$97] = $96;
      HEAP[$0] = 7;
      __label__ = 69;
      break;
     case 21:
      
      var $99 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $99;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 22;
        break;
      } else {
        __label__ = 23;
        break;
      }
     case 22:
      HEAP[$0] = -5;
      __label__ = 69;
      break;
     case 23:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 0) {
        __label__ = 42;
        break;
      } else {
        __label__ = 24;
        break;
      }
     case 24:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] != 93) {
        __label__ = 42;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 25:
      
      var $112 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $112;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 26;
        break;
      } else {
        __label__ = 27;
        break;
      }
     case 26:
      HEAP[$0] = -5;
      __label__ = 69;
      break;
     case 27:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 0) {
        __label__ = 29;
        break;
      } else {
        __label__ = 28;
        break;
      }
     case 28:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] != 62) {
        __label__ = 29;
        break;
      } else {
        __label__ = 30;
        break;
      }
     case 29:
      
      var $125 = HEAP[$ptr_addr] + -2;
      HEAP[$ptr_addr] = $125;
      __label__ = 42;
      break;
     case 30:
      var $126 = HEAP[$nextTokPtr_addr];
      var $127 = HEAP[$ptr_addr];
      HEAP[$126] = $127;
      HEAP[$0] = 0;
      __label__ = 69;
      break;
     case 31:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 32;
        break;
      } else {
        __label__ = 33;
        break;
      }
     case 32:
      HEAP[$0] = -2;
      __label__ = 69;
      break;
     case 33:
      
      var $135 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $135;
      __label__ = 42;
      break;
     case 34:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 35;
        break;
      } else {
        __label__ = 36;
        break;
      }
     case 35:
      HEAP[$0] = -2;
      __label__ = 69;
      break;
     case 36:
      
      var $143 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $143;
      __label__ = 42;
      break;
     case 37:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 38;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 38:
      HEAP[$0] = -2;
      __label__ = 69;
      break;
     case 39:
      
      var $151 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $151;
      __label__ = 42;
      break;
     case 40:
      var $152 = HEAP[$nextTokPtr_addr];
      var $153 = HEAP[$ptr_addr];
      HEAP[$152] = $153;
      HEAP[$0] = 0;
      __label__ = 69;
      break;
     case 41:
      
      var $155 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $155;
      __label__ = 42;
      break;
     case 42:
      __label__ = 67;
      break;
     case 43:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 44;
        break;
      } else {
        __label__ = 45;
        break;
      }
     case 44:
      
      
      
      
      
      
      
      
      
      var $169 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1254] = $169;
      __label__ = 46;
      break;
     case 45:
      
      
      
      
      
      
      
      
      var $178 = HEAP[HEAP[$ptr_addr]] & 255;
      var $179 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $180 = _unicode_byte_type($178, $179);
      HEAP[$iftmp_1254] = $180;
      __label__ = 46;
      break;
     case 46:
      var $181 = HEAP[$iftmp_1254];
      if ($181 == 0) {
        __label__ = 65;
        break;
      } else if ($181 == 1) {
        __label__ = 65;
        break;
      } else if ($181 == 2) {
        __label__ = 65;
        break;
      } else if ($181 == 3) {
        __label__ = 65;
        break;
      } else if ($181 == 4) {
        __label__ = 56;
        break;
      } else if ($181 == 5) {
        __label__ = 47;
        break;
      } else if ($181 == 6) {
        __label__ = 50;
        break;
      } else if ($181 == 7) {
        __label__ = 53;
        break;
      } else if ($181 == 8) {
        __label__ = 65;
        break;
      } else if ($181 == 9) {
        __label__ = 65;
        break;
      } else if ($181 == 10) {
        __label__ = 65;
        break;
      } else {
        __label__ = 66;
        break;
      }
     case 47:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 48;
        break;
      } else {
        __label__ = 49;
        break;
      }
     case 48:
      var $188 = HEAP[$nextTokPtr_addr];
      var $189 = HEAP[$ptr_addr];
      HEAP[$188] = $189;
      HEAP[$0] = 6;
      __label__ = 69;
      break;
     case 49:
      
      var $191 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $191;
      __label__ = 67;
      break;
     case 50:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 51;
        break;
      } else {
        __label__ = 52;
        break;
      }
     case 51:
      var $198 = HEAP[$nextTokPtr_addr];
      var $199 = HEAP[$ptr_addr];
      HEAP[$198] = $199;
      HEAP[$0] = 6;
      __label__ = 69;
      break;
     case 52:
      
      var $201 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $201;
      __label__ = 67;
      break;
     case 53:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 54;
        break;
      } else {
        __label__ = 55;
        break;
      }
     case 54:
      var $208 = HEAP[$nextTokPtr_addr];
      var $209 = HEAP[$ptr_addr];
      HEAP[$208] = $209;
      HEAP[$0] = 6;
      __label__ = 69;
      break;
     case 55:
      
      var $211 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $211;
      __label__ = 67;
      break;
     case 56:
      
      
      
      
      if (HEAP[$ptr_addr] + 2 != HEAP[$end_addr]) {
        __label__ = 57;
        break;
      } else {
        __label__ = 65;
        break;
      }
     case 57:
      
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 2] != 0) {
        __label__ = 59;
        break;
      } else {
        __label__ = 58;
        break;
      }
     case 58:
      
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 2 + 1] != 93) {
        __label__ = 59;
        break;
      } else {
        __label__ = 60;
        break;
      }
     case 59:
      
      var $227 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $227;
      __label__ = 67;
      break;
     case 60:
      
      
      
      
      if (HEAP[$ptr_addr] + 4 != HEAP[$end_addr]) {
        __label__ = 61;
        break;
      } else {
        __label__ = 65;
        break;
      }
     case 61:
      
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 4] != 0) {
        __label__ = 63;
        break;
      } else {
        __label__ = 62;
        break;
      }
     case 62:
      
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 4 + 1] != 62) {
        __label__ = 63;
        break;
      } else {
        __label__ = 64;
        break;
      }
     case 63:
      
      var $243 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $243;
      __label__ = 67;
      break;
     case 64:
      
      var $245 = HEAP[$ptr_addr] + 4;
      var $246 = HEAP[$nextTokPtr_addr];
      HEAP[$246] = $245;
      HEAP[$0] = 0;
      __label__ = 69;
      break;
     case 65:
      var $247 = HEAP[$nextTokPtr_addr];
      var $248 = HEAP[$ptr_addr];
      HEAP[$247] = $248;
      HEAP[$0] = 6;
      __label__ = 69;
      break;
     case 66:
      
      var $250 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $250;
      __label__ = 67;
      break;
     case 67:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 43;
        break;
      } else {
        __label__ = 68;
        break;
      }
     case 68:
      var $254 = HEAP[$nextTokPtr_addr];
      var $255 = HEAP[$ptr_addr];
      HEAP[$254] = $255;
      HEAP[$0] = 6;
      __label__ = 69;
      break;
     case 69:
      var $256 = HEAP[$0];
      HEAP[$retval] = $256;
      __label__ = 70;
      break;
     case 70:
      var $retval70 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval70;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _big2_scanPercent($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 32;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_1270 = __stackBase__ + 20;
      var $iftmp_1262 = __stackBase__ + 24;
      var $0 = __stackBase__ + 28;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -22;
      __label__ = 40;
      break;
     case 2:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      
      
      
      
      
      
      
      
      var $17 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1262] = $17;
      __label__ = 5;
      break;
     case 4:
      
      
      
      
      
      
      
      
      var $26 = HEAP[HEAP[$ptr_addr]] & 255;
      var $27 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $28 = _unicode_byte_type($26, $27);
      HEAP[$iftmp_1262] = $28;
      __label__ = 5;
      break;
     case 5:
      var $29 = HEAP[$iftmp_1262];
      if ($29 == 5) {
        __label__ = 9;
        break;
      } else if ($29 == 6) {
        __label__ = 12;
        break;
      } else if ($29 == 7) {
        __label__ = 15;
        break;
      } else if ($29 == 9) {
        __label__ = 18;
        break;
      } else if ($29 == 10) {
        __label__ = 18;
        break;
      } else if ($29 == 21) {
        __label__ = 18;
        break;
      } else if ($29 == 22) {
        __label__ = 8;
        break;
      } else if ($29 == 24) {
        __label__ = 8;
        break;
      } else if ($29 == 29) {
        __label__ = 6;
        break;
      } else if ($29 == 30) {
        __label__ = 18;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 6:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_nmstrtPages + HEAP[HEAP[$ptr_addr]]] << 3) + (HEAP[HEAP[$ptr_addr] + 1] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr] + 1] & 31)) == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      var $54 = HEAP[$nextTokPtr_addr];
      var $55 = HEAP[$ptr_addr];
      HEAP[$54] = $55;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 8:
      
      var $57 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $57;
      __label__ = 38;
      break;
     case 9:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      HEAP[$0] = -2;
      __label__ = 40;
      break;
     case 11:
      var $64 = HEAP[$nextTokPtr_addr];
      var $65 = HEAP[$ptr_addr];
      HEAP[$64] = $65;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 12:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      HEAP[$0] = -2;
      __label__ = 40;
      break;
     case 14:
      var $72 = HEAP[$nextTokPtr_addr];
      var $73 = HEAP[$ptr_addr];
      HEAP[$72] = $73;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 15:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      HEAP[$0] = -2;
      __label__ = 40;
      break;
     case 17:
      var $80 = HEAP[$nextTokPtr_addr];
      var $81 = HEAP[$ptr_addr];
      HEAP[$80] = $81;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 18:
      var $82 = HEAP[$nextTokPtr_addr];
      var $83 = HEAP[$ptr_addr];
      HEAP[$82] = $83;
      HEAP[$0] = 22;
      __label__ = 40;
      break;
     case 19:
      var $84 = HEAP[$nextTokPtr_addr];
      var $85 = HEAP[$ptr_addr];
      HEAP[$84] = $85;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 20:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 21;
        break;
      } else {
        __label__ = 22;
        break;
      }
     case 21:
      
      
      
      
      
      
      
      
      
      var $99 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1270] = $99;
      __label__ = 23;
      break;
     case 22:
      
      
      
      
      
      
      
      
      var $108 = HEAP[HEAP[$ptr_addr]] & 255;
      var $109 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $110 = _unicode_byte_type($108, $109);
      HEAP[$iftmp_1270] = $110;
      __label__ = 23;
      break;
     case 23:
      var $111 = HEAP[$iftmp_1270];
      if ($111 == 5) {
        __label__ = 27;
        break;
      } else if ($111 == 6) {
        __label__ = 30;
        break;
      } else if ($111 == 7) {
        __label__ = 33;
        break;
      } else if ($111 == 18) {
        __label__ = 36;
        break;
      } else if ($111 == 22) {
        __label__ = 26;
        break;
      } else if ($111 == 24) {
        __label__ = 26;
        break;
      } else if ($111 == 25) {
        __label__ = 26;
        break;
      } else if ($111 == 26) {
        __label__ = 26;
        break;
      } else if ($111 == 27) {
        __label__ = 26;
        break;
      } else if ($111 == 29) {
        __label__ = 24;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 24:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_namePages + HEAP[HEAP[$ptr_addr]]] << 3) + (HEAP[HEAP[$ptr_addr] + 1] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr] + 1] & 31)) == 0) {
        __label__ = 25;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 25:
      var $136 = HEAP[$nextTokPtr_addr];
      var $137 = HEAP[$ptr_addr];
      HEAP[$136] = $137;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 26:
      
      var $139 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $139;
      __label__ = 38;
      break;
     case 27:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 28;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 28:
      HEAP[$0] = -2;
      __label__ = 40;
      break;
     case 29:
      var $146 = HEAP[$nextTokPtr_addr];
      var $147 = HEAP[$ptr_addr];
      HEAP[$146] = $147;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 30:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 31;
        break;
      } else {
        __label__ = 32;
        break;
      }
     case 31:
      HEAP[$0] = -2;
      __label__ = 40;
      break;
     case 32:
      var $154 = HEAP[$nextTokPtr_addr];
      var $155 = HEAP[$ptr_addr];
      HEAP[$154] = $155;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 33:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 34;
        break;
      } else {
        __label__ = 35;
        break;
      }
     case 34:
      HEAP[$0] = -2;
      __label__ = 40;
      break;
     case 35:
      var $162 = HEAP[$nextTokPtr_addr];
      var $163 = HEAP[$ptr_addr];
      HEAP[$162] = $163;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 36:
      
      var $165 = HEAP[$ptr_addr] + 2;
      var $166 = HEAP[$nextTokPtr_addr];
      HEAP[$166] = $165;
      HEAP[$0] = 28;
      __label__ = 40;
      break;
     case 37:
      var $167 = HEAP[$nextTokPtr_addr];
      var $168 = HEAP[$ptr_addr];
      HEAP[$167] = $168;
      HEAP[$0] = 0;
      __label__ = 40;
      break;
     case 38:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 20;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 39:
      HEAP[$0] = -1;
      __label__ = 40;
      break;
     case 40:
      var $172 = HEAP[$0];
      HEAP[$retval] = $172;
      __label__ = 41;
      break;
     case 41:
      var $retval40 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval40;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _big2_scanPoundName($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 32;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_1286 = __stackBase__ + 20;
      var $iftmp_1278 = __stackBase__ + 24;
      var $0 = __stackBase__ + 28;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -1;
      __label__ = 39;
      break;
     case 2:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      
      
      
      
      
      
      
      
      var $17 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1278] = $17;
      __label__ = 5;
      break;
     case 4:
      
      
      
      
      
      
      
      
      var $26 = HEAP[HEAP[$ptr_addr]] & 255;
      var $27 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $28 = _unicode_byte_type($26, $27);
      HEAP[$iftmp_1278] = $28;
      __label__ = 5;
      break;
     case 5:
      var $29 = HEAP[$iftmp_1278];
      if ($29 == 5) {
        __label__ = 9;
        break;
      } else if ($29 == 6) {
        __label__ = 12;
        break;
      } else if ($29 == 7) {
        __label__ = 15;
        break;
      } else if ($29 == 22) {
        __label__ = 8;
        break;
      } else if ($29 == 24) {
        __label__ = 8;
        break;
      } else if ($29 == 29) {
        __label__ = 6;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 6:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_nmstrtPages + HEAP[HEAP[$ptr_addr]]] << 3) + (HEAP[HEAP[$ptr_addr] + 1] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr] + 1] & 31)) == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      var $54 = HEAP[$nextTokPtr_addr];
      var $55 = HEAP[$ptr_addr];
      HEAP[$54] = $55;
      HEAP[$0] = 0;
      __label__ = 39;
      break;
     case 8:
      
      var $57 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $57;
      __label__ = 37;
      break;
     case 9:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      HEAP[$0] = -2;
      __label__ = 39;
      break;
     case 11:
      var $64 = HEAP[$nextTokPtr_addr];
      var $65 = HEAP[$ptr_addr];
      HEAP[$64] = $65;
      HEAP[$0] = 0;
      __label__ = 39;
      break;
     case 12:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      HEAP[$0] = -2;
      __label__ = 39;
      break;
     case 14:
      var $72 = HEAP[$nextTokPtr_addr];
      var $73 = HEAP[$ptr_addr];
      HEAP[$72] = $73;
      HEAP[$0] = 0;
      __label__ = 39;
      break;
     case 15:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      HEAP[$0] = -2;
      __label__ = 39;
      break;
     case 17:
      var $80 = HEAP[$nextTokPtr_addr];
      var $81 = HEAP[$ptr_addr];
      HEAP[$80] = $81;
      HEAP[$0] = 0;
      __label__ = 39;
      break;
     case 18:
      var $82 = HEAP[$nextTokPtr_addr];
      var $83 = HEAP[$ptr_addr];
      HEAP[$82] = $83;
      HEAP[$0] = 0;
      __label__ = 39;
      break;
     case 19:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 20;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 20:
      
      
      
      
      
      
      
      
      
      var $97 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1286] = $97;
      __label__ = 22;
      break;
     case 21:
      
      
      
      
      
      
      
      
      var $106 = HEAP[HEAP[$ptr_addr]] & 255;
      var $107 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $108 = _unicode_byte_type($106, $107);
      HEAP[$iftmp_1286] = $108;
      __label__ = 22;
      break;
     case 22:
      var $109 = HEAP[$iftmp_1286];
      if ($109 == 5) {
        __label__ = 26;
        break;
      } else if ($109 == 6) {
        __label__ = 29;
        break;
      } else if ($109 == 7) {
        __label__ = 32;
        break;
      } else if ($109 == 9) {
        __label__ = 35;
        break;
      } else if ($109 == 10) {
        __label__ = 35;
        break;
      } else if ($109 == 11) {
        __label__ = 35;
        break;
      } else if ($109 == 21) {
        __label__ = 35;
        break;
      } else if ($109 == 22) {
        __label__ = 25;
        break;
      } else if ($109 == 24) {
        __label__ = 25;
        break;
      } else if ($109 == 25) {
        __label__ = 25;
        break;
      } else if ($109 == 26) {
        __label__ = 25;
        break;
      } else if ($109 == 27) {
        __label__ = 25;
        break;
      } else if ($109 == 29) {
        __label__ = 23;
        break;
      } else if ($109 == 30) {
        __label__ = 35;
        break;
      } else if ($109 == 32) {
        __label__ = 35;
        break;
      } else if ($109 == 36) {
        __label__ = 35;
        break;
      } else {
        __label__ = 36;
        break;
      }
     case 23:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_namePages + HEAP[HEAP[$ptr_addr]]] << 3) + (HEAP[HEAP[$ptr_addr] + 1] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr] + 1] & 31)) == 0) {
        __label__ = 24;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 24:
      var $134 = HEAP[$nextTokPtr_addr];
      var $135 = HEAP[$ptr_addr];
      HEAP[$134] = $135;
      HEAP[$0] = 0;
      __label__ = 39;
      break;
     case 25:
      
      var $137 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $137;
      __label__ = 37;
      break;
     case 26:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 27;
        break;
      } else {
        __label__ = 28;
        break;
      }
     case 27:
      HEAP[$0] = -2;
      __label__ = 39;
      break;
     case 28:
      var $144 = HEAP[$nextTokPtr_addr];
      var $145 = HEAP[$ptr_addr];
      HEAP[$144] = $145;
      HEAP[$0] = 0;
      __label__ = 39;
      break;
     case 29:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 30;
        break;
      } else {
        __label__ = 31;
        break;
      }
     case 30:
      HEAP[$0] = -2;
      __label__ = 39;
      break;
     case 31:
      var $152 = HEAP[$nextTokPtr_addr];
      var $153 = HEAP[$ptr_addr];
      HEAP[$152] = $153;
      HEAP[$0] = 0;
      __label__ = 39;
      break;
     case 32:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 33;
        break;
      } else {
        __label__ = 34;
        break;
      }
     case 33:
      HEAP[$0] = -2;
      __label__ = 39;
      break;
     case 34:
      var $160 = HEAP[$nextTokPtr_addr];
      var $161 = HEAP[$ptr_addr];
      HEAP[$160] = $161;
      HEAP[$0] = 0;
      __label__ = 39;
      break;
     case 35:
      var $162 = HEAP[$nextTokPtr_addr];
      var $163 = HEAP[$ptr_addr];
      HEAP[$162] = $163;
      HEAP[$0] = 20;
      __label__ = 39;
      break;
     case 36:
      var $164 = HEAP[$nextTokPtr_addr];
      var $165 = HEAP[$ptr_addr];
      HEAP[$164] = $165;
      HEAP[$0] = 0;
      __label__ = 39;
      break;
     case 37:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 19;
        break;
      } else {
        __label__ = 38;
        break;
      }
     case 38:
      HEAP[$0] = -20;
      __label__ = 39;
      break;
     case 39:
      var $169 = HEAP[$0];
      HEAP[$retval] = $169;
      __label__ = 40;
      break;
     case 40:
      var $retval39 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval39;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _big2_scanLit($open, $enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 40;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $open_addr = __stackBase__;
      var $enc_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $nextTokPtr_addr = __stackBase__ + 16;
      var $retval = __stackBase__ + 20;
      var $iftmp_1302 = __stackBase__ + 24;
      var $0 = __stackBase__ + 28;
      var $iftmp_1294 = __stackBase__ + 32;
      var $t = __stackBase__ + 36;
      
      HEAP[$open_addr] = $open;
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      __label__ = 25;
      break;
     case 1:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      
      
      
      
      
      
      
      
      var $14 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1294] = $14;
      __label__ = 4;
      break;
     case 3:
      
      
      
      
      
      
      
      
      var $23 = HEAP[HEAP[$ptr_addr]] & 255;
      var $24 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $25 = _unicode_byte_type($23, $24);
      HEAP[$iftmp_1294] = $25;
      __label__ = 4;
      break;
     case 4:
      var $26 = HEAP[$iftmp_1294];
      HEAP[$t] = $26;
      var $27 = HEAP[$t];
      if ($27 == 0) {
        __label__ = 14;
        break;
      } else if ($27 == 1) {
        __label__ = 14;
        break;
      } else if ($27 == 5) {
        __label__ = 5;
        break;
      } else if ($27 == 6) {
        __label__ = 8;
        break;
      } else if ($27 == 7) {
        __label__ = 11;
        break;
      } else if ($27 == 8) {
        __label__ = 14;
        break;
      } else if ($27 == 12) {
        __label__ = 15;
        break;
      } else if ($27 == 13) {
        __label__ = 15;
        break;
      } else {
        __label__ = 24;
        break;
      }
     case 5:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      HEAP[$0] = -2;
      __label__ = 27;
      break;
     case 7:
      
      var $35 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $35;
      __label__ = 25;
      break;
     case 8:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      HEAP[$0] = -2;
      __label__ = 27;
      break;
     case 10:
      
      var $43 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $43;
      __label__ = 25;
      break;
     case 11:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      HEAP[$0] = -2;
      __label__ = 27;
      break;
     case 13:
      
      var $51 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $51;
      __label__ = 25;
      break;
     case 14:
      var $52 = HEAP[$nextTokPtr_addr];
      var $53 = HEAP[$ptr_addr];
      HEAP[$52] = $53;
      HEAP[$0] = 0;
      __label__ = 27;
      break;
     case 15:
      
      var $55 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $55;
      
      
      
      if (HEAP[$t] != HEAP[$open_addr]) {
        __label__ = 25;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 16:
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 17;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 17:
      HEAP[$0] = -27;
      __label__ = 27;
      break;
     case 18:
      var $62 = HEAP[$nextTokPtr_addr];
      var $63 = HEAP[$ptr_addr];
      HEAP[$62] = $63;
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 19;
        break;
      } else {
        __label__ = 20;
        break;
      }
     case 19:
      
      
      
      
      
      
      
      
      
      var $77 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1302] = $77;
      __label__ = 21;
      break;
     case 20:
      
      
      
      
      
      
      
      
      var $86 = HEAP[HEAP[$ptr_addr]] & 255;
      var $87 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $88 = _unicode_byte_type($86, $87);
      HEAP[$iftmp_1302] = $88;
      __label__ = 21;
      break;
     case 21:
      var $89 = HEAP[$iftmp_1302];
      if ($89 == 9) {
        __label__ = 22;
        break;
      } else if ($89 == 10) {
        __label__ = 22;
        break;
      } else if ($89 == 11) {
        __label__ = 22;
        break;
      } else if ($89 == 20) {
        __label__ = 22;
        break;
      } else if ($89 == 21) {
        __label__ = 22;
        break;
      } else if ($89 == 30) {
        __label__ = 22;
        break;
      } else {
        __label__ = 23;
        break;
      }
     case 22:
      HEAP[$0] = 27;
      __label__ = 27;
      break;
     case 23:
      HEAP[$0] = 0;
      __label__ = 27;
      break;
     case 24:
      
      var $91 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $91;
      __label__ = 25;
      break;
     case 25:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 26:
      HEAP[$0] = -1;
      __label__ = 27;
      break;
     case 27:
      var $95 = HEAP[$0];
      HEAP[$retval] = $95;
      __label__ = 28;
      break;
     case 28:
      var $retval27 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval27;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _big2_prologTok($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 56;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 56);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_1329 = __stackBase__ + 20;
      var $iftmp_1321 = __stackBase__ + 24;
      var $iftmp_1313 = __stackBase__ + 28;
      var $iftmp_1311 = __stackBase__ + 32;
      var $iftmp_1309 = __stackBase__ + 36;
      var $iftmp_1307 = __stackBase__ + 40;
      var $0 = __stackBase__ + 44;
      var $tok = __stackBase__ + 48;
      var $n = __stackBase__ + 52;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -4;
      __label__ = 131;
      break;
     case 2:
      
      
      
      
      var $8 = HEAP[$end_addr] - HEAP[$ptr_addr];
      HEAP[$n] = $8;
      
      
      
      
      if ((HEAP[$n] & 1 & 255) != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 3:
      
      var $13 = HEAP[$n] & -2;
      HEAP[$n] = $13;
      
      
      if (HEAP[$n] == 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      HEAP[$0] = -1;
      __label__ = 131;
      break;
     case 5:
      
      
      var $18 = HEAP[$ptr_addr] + HEAP[$n];
      HEAP[$end_addr] = $18;
      __label__ = 6;
      break;
     case 6:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      
      
      
      
      
      
      
      
      
      var $32 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1307] = $32;
      __label__ = 9;
      break;
     case 8:
      
      
      
      
      
      
      
      
      var $41 = HEAP[HEAP[$ptr_addr]] & 255;
      var $42 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $43 = _unicode_byte_type($41, $42);
      HEAP[$iftmp_1307] = $43;
      __label__ = 9;
      break;
     case 9:
      var $44 = HEAP[$iftmp_1307];
      if ($44 == 2) {
        __label__ = 12;
        break;
      } else if ($44 == 4) {
        __label__ = 37;
        break;
      } else if ($44 == 5) {
        __label__ = 62;
        break;
      } else if ($44 == 6) {
        __label__ = 65;
        break;
      } else if ($44 == 7) {
        __label__ = 68;
        break;
      } else if ($44 == 9) {
        __label__ = 22;
        break;
      } else if ($44 == 10) {
        __label__ = 24;
        break;
      } else if ($44 == 11) {
        __label__ = 60;
        break;
      } else if ($44 == 12) {
        __label__ = 10;
        break;
      } else if ($44 == 13) {
        __label__ = 11;
        break;
      } else if ($44 == 19) {
        __label__ = 61;
        break;
      } else if ($44 == 20) {
        __label__ = 36;
        break;
      } else if ($44 == 21) {
        __label__ = 24;
        break;
      } else if ($44 == 22) {
        __label__ = 71;
        break;
      } else if ($44 == 23) {
        __label__ = 72;
        break;
      } else if ($44 == 24) {
        __label__ = 71;
        break;
      } else if ($44 == 25) {
        __label__ = 72;
        break;
      } else if ($44 == 26) {
        __label__ = 72;
        break;
      } else if ($44 == 27) {
        __label__ = 72;
        break;
      } else if ($44 == 29) {
        __label__ = 73;
        break;
      } else if ($44 == 30) {
        __label__ = 34;
        break;
      } else if ($44 == 31) {
        __label__ = 47;
        break;
      } else if ($44 == 32) {
        __label__ = 48;
        break;
      } else if ($44 == 35) {
        __label__ = 35;
        break;
      } else if ($44 == 36) {
        __label__ = 59;
        break;
      } else {
        __label__ = 77;
        break;
      }
     case 10:
      
      var $46 = HEAP[$ptr_addr] + 2;
      var $47 = HEAP[$enc_addr];
      var $48 = HEAP[$end_addr];
      var $49 = HEAP[$nextTokPtr_addr];
      var $50 = _big2_scanLit(12, $47, $46, $48, $49);
      HEAP[$0] = $50;
      __label__ = 131;
      break;
     case 11:
      
      var $52 = HEAP[$ptr_addr] + 2;
      var $53 = HEAP[$enc_addr];
      var $54 = HEAP[$end_addr];
      var $55 = HEAP[$nextTokPtr_addr];
      var $56 = _big2_scanLit(13, $53, $52, $54, $55);
      HEAP[$0] = $56;
      __label__ = 131;
      break;
     case 12:
      
      var $58 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $58;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      HEAP[$0] = -1;
      __label__ = 131;
      break;
     case 14:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      
      
      
      
      
      
      
      
      
      var $75 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1309] = $75;
      __label__ = 17;
      break;
     case 16:
      
      
      
      
      
      
      
      
      var $84 = HEAP[HEAP[$ptr_addr]] & 255;
      var $85 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $86 = _unicode_byte_type($84, $85);
      HEAP[$iftmp_1309] = $86;
      __label__ = 17;
      break;
     case 17:
      var $87 = HEAP[$iftmp_1309];
      if ($87 == 5) {
        __label__ = 20;
        break;
      } else if ($87 == 6) {
        __label__ = 20;
        break;
      } else if ($87 == 7) {
        __label__ = 20;
        break;
      } else if ($87 == 15) {
        __label__ = 19;
        break;
      } else if ($87 == 16) {
        __label__ = 18;
        break;
      } else if ($87 == 22) {
        __label__ = 20;
        break;
      } else if ($87 == 24) {
        __label__ = 20;
        break;
      } else if ($87 == 29) {
        __label__ = 20;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 18:
      
      var $89 = HEAP[$ptr_addr] + 2;
      var $90 = HEAP[$enc_addr];
      var $91 = HEAP[$end_addr];
      var $92 = HEAP[$nextTokPtr_addr];
      var $93 = _big2_scanDecl($90, $89, $91, $92);
      HEAP[$0] = $93;
      __label__ = 131;
      break;
     case 19:
      
      var $95 = HEAP[$ptr_addr] + 2;
      var $96 = HEAP[$enc_addr];
      var $97 = HEAP[$end_addr];
      var $98 = HEAP[$nextTokPtr_addr];
      var $99 = _big2_scanPi($96, $95, $97, $98);
      HEAP[$0] = $99;
      __label__ = 131;
      break;
     case 20:
      
      var $101 = HEAP[$ptr_addr] + -2;
      var $102 = HEAP[$nextTokPtr_addr];
      HEAP[$102] = $101;
      HEAP[$0] = 29;
      __label__ = 131;
      break;
     case 21:
      var $103 = HEAP[$nextTokPtr_addr];
      var $104 = HEAP[$ptr_addr];
      HEAP[$103] = $104;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 22:
      
      
      
      
      if (HEAP[$ptr_addr] + 2 == HEAP[$end_addr]) {
        __label__ = 23;
        break;
      } else {
        __label__ = 24;
        break;
      }
     case 23:
      var $109 = HEAP[$nextTokPtr_addr];
      var $110 = HEAP[$end_addr];
      HEAP[$109] = $110;
      HEAP[$0] = -15;
      __label__ = 131;
      break;
     case 24:
      
      var $112 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $112;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 33;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 25:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 26;
        break;
      } else {
        __label__ = 27;
        break;
      }
     case 26:
      
      
      
      
      
      
      
      
      
      var $129 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1311] = $129;
      __label__ = 28;
      break;
     case 27:
      
      
      
      
      
      
      
      
      var $138 = HEAP[HEAP[$ptr_addr]] & 255;
      var $139 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $140 = _unicode_byte_type($138, $139);
      HEAP[$iftmp_1311] = $140;
      __label__ = 28;
      break;
     case 28:
      var $141 = HEAP[$iftmp_1311];
      if ($141 == 9) {
        __label__ = 30;
        break;
      } else if ($141 == 10) {
        __label__ = 29;
        break;
      } else if ($141 == 21) {
        __label__ = 29;
        break;
      } else {
        __label__ = 31;
        break;
      }
     case 29:
      __label__ = 32;
      break;
     case 30:
      
      
      
      
      if (HEAP[$ptr_addr] + 2 != HEAP[$end_addr]) {
        __label__ = 32;
        break;
      } else {
        __label__ = 31;
        break;
      }
     case 31:
      var $146 = HEAP[$nextTokPtr_addr];
      var $147 = HEAP[$ptr_addr];
      HEAP[$146] = $147;
      HEAP[$0] = 15;
      __label__ = 131;
      break;
     case 32:
      __label__ = 24;
      break;
     case 33:
      var $148 = HEAP[$nextTokPtr_addr];
      var $149 = HEAP[$ptr_addr];
      HEAP[$148] = $149;
      HEAP[$0] = 15;
      __label__ = 131;
      break;
     case 34:
      
      var $151 = HEAP[$ptr_addr] + 2;
      var $152 = HEAP[$enc_addr];
      var $153 = HEAP[$end_addr];
      var $154 = HEAP[$nextTokPtr_addr];
      var $155 = _big2_scanPercent($152, $151, $153, $154);
      HEAP[$0] = $155;
      __label__ = 131;
      break;
     case 35:
      
      var $157 = HEAP[$ptr_addr] + 2;
      var $158 = HEAP[$nextTokPtr_addr];
      HEAP[$158] = $157;
      HEAP[$0] = 38;
      __label__ = 131;
      break;
     case 36:
      
      var $160 = HEAP[$ptr_addr] + 2;
      var $161 = HEAP[$nextTokPtr_addr];
      HEAP[$161] = $160;
      HEAP[$0] = 25;
      __label__ = 131;
      break;
     case 37:
      
      var $163 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $163;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 38;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 38:
      HEAP[$0] = -26;
      __label__ = 131;
      break;
     case 39:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 40;
        break;
      } else {
        __label__ = 46;
        break;
      }
     case 40:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 93) {
        __label__ = 41;
        break;
      } else {
        __label__ = 46;
        break;
      }
     case 41:
      
      
      
      
      if (HEAP[$ptr_addr] + 2 == HEAP[$end_addr]) {
        __label__ = 42;
        break;
      } else {
        __label__ = 43;
        break;
      }
     case 42:
      HEAP[$0] = -1;
      __label__ = 131;
      break;
     case 43:
      
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 2] == 0) {
        __label__ = 44;
        break;
      } else {
        __label__ = 46;
        break;
      }
     case 44:
      
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 2 + 1] == 62) {
        __label__ = 45;
        break;
      } else {
        __label__ = 46;
        break;
      }
     case 45:
      
      var $190 = HEAP[$ptr_addr] + 4;
      var $191 = HEAP[$nextTokPtr_addr];
      HEAP[$191] = $190;
      HEAP[$0] = 34;
      __label__ = 131;
      break;
     case 46:
      var $192 = HEAP[$nextTokPtr_addr];
      var $193 = HEAP[$ptr_addr];
      HEAP[$192] = $193;
      HEAP[$0] = 26;
      __label__ = 131;
      break;
     case 47:
      
      var $195 = HEAP[$ptr_addr] + 2;
      var $196 = HEAP[$nextTokPtr_addr];
      HEAP[$196] = $195;
      HEAP[$0] = 23;
      __label__ = 131;
      break;
     case 48:
      
      var $198 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $198;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 49;
        break;
      } else {
        __label__ = 50;
        break;
      }
     case 49:
      HEAP[$0] = -24;
      __label__ = 131;
      break;
     case 50:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 51;
        break;
      } else {
        __label__ = 52;
        break;
      }
     case 51:
      
      
      
      
      
      
      
      
      
      var $215 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1313] = $215;
      __label__ = 53;
      break;
     case 52:
      
      
      
      
      
      
      
      
      var $224 = HEAP[HEAP[$ptr_addr]] & 255;
      var $225 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $226 = _unicode_byte_type($224, $225);
      HEAP[$iftmp_1313] = $226;
      __label__ = 53;
      break;
     case 53:
      var $227 = HEAP[$iftmp_1313];
      if ($227 == 9) {
        __label__ = 57;
        break;
      } else if ($227 == 10) {
        __label__ = 57;
        break;
      } else if ($227 == 11) {
        __label__ = 57;
        break;
      } else if ($227 == 15) {
        __label__ = 55;
        break;
      } else if ($227 == 21) {
        __label__ = 57;
        break;
      } else if ($227 == 32) {
        __label__ = 57;
        break;
      } else if ($227 == 33) {
        __label__ = 54;
        break;
      } else if ($227 == 34) {
        __label__ = 56;
        break;
      } else if ($227 == 35) {
        __label__ = 57;
        break;
      } else if ($227 == 36) {
        __label__ = 57;
        break;
      } else {
        __label__ = 58;
        break;
      }
     case 54:
      
      var $229 = HEAP[$ptr_addr] + 2;
      var $230 = HEAP[$nextTokPtr_addr];
      HEAP[$230] = $229;
      HEAP[$0] = 36;
      __label__ = 131;
      break;
     case 55:
      
      var $232 = HEAP[$ptr_addr] + 2;
      var $233 = HEAP[$nextTokPtr_addr];
      HEAP[$233] = $232;
      HEAP[$0] = 35;
      __label__ = 131;
      break;
     case 56:
      
      var $235 = HEAP[$ptr_addr] + 2;
      var $236 = HEAP[$nextTokPtr_addr];
      HEAP[$236] = $235;
      HEAP[$0] = 37;
      __label__ = 131;
      break;
     case 57:
      var $237 = HEAP[$nextTokPtr_addr];
      var $238 = HEAP[$ptr_addr];
      HEAP[$237] = $238;
      HEAP[$0] = 24;
      __label__ = 131;
      break;
     case 58:
      var $239 = HEAP[$nextTokPtr_addr];
      var $240 = HEAP[$ptr_addr];
      HEAP[$239] = $240;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 59:
      
      var $242 = HEAP[$ptr_addr] + 2;
      var $243 = HEAP[$nextTokPtr_addr];
      HEAP[$243] = $242;
      HEAP[$0] = 21;
      __label__ = 131;
      break;
     case 60:
      
      var $245 = HEAP[$ptr_addr] + 2;
      var $246 = HEAP[$nextTokPtr_addr];
      HEAP[$246] = $245;
      HEAP[$0] = 17;
      __label__ = 131;
      break;
     case 61:
      
      var $248 = HEAP[$ptr_addr] + 2;
      var $249 = HEAP[$enc_addr];
      var $250 = HEAP[$end_addr];
      var $251 = HEAP[$nextTokPtr_addr];
      var $252 = _big2_scanPoundName($249, $248, $250, $251);
      HEAP[$0] = $252;
      __label__ = 131;
      break;
     case 62:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 63;
        break;
      } else {
        __label__ = 64;
        break;
      }
     case 63:
      HEAP[$0] = -2;
      __label__ = 131;
      break;
     case 64:
      var $259 = HEAP[$nextTokPtr_addr];
      var $260 = HEAP[$ptr_addr];
      HEAP[$259] = $260;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 65:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 66;
        break;
      } else {
        __label__ = 67;
        break;
      }
     case 66:
      HEAP[$0] = -2;
      __label__ = 131;
      break;
     case 67:
      var $267 = HEAP[$nextTokPtr_addr];
      var $268 = HEAP[$ptr_addr];
      HEAP[$267] = $268;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 68:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 69;
        break;
      } else {
        __label__ = 70;
        break;
      }
     case 69:
      HEAP[$0] = -2;
      __label__ = 131;
      break;
     case 70:
      var $275 = HEAP[$nextTokPtr_addr];
      var $276 = HEAP[$ptr_addr];
      HEAP[$275] = $276;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 71:
      HEAP[$tok] = 18;
      
      var $278 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $278;
      __label__ = 78;
      break;
     case 72:
      HEAP[$tok] = 19;
      
      var $280 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $280;
      __label__ = 78;
      break;
     case 73:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_nmstrtPages + HEAP[HEAP[$ptr_addr]]] << 3) + (HEAP[HEAP[$ptr_addr] + 1] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr] + 1] & 31)) != 0) {
        __label__ = 74;
        break;
      } else {
        __label__ = 75;
        break;
      }
     case 74:
      
      var $306 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $306;
      HEAP[$tok] = 18;
      __label__ = 78;
      break;
     case 75:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_namePages + HEAP[HEAP[$ptr_addr]]] << 3) + (HEAP[HEAP[$ptr_addr] + 1] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr] + 1] & 31)) != 0) {
        __label__ = 76;
        break;
      } else {
        __label__ = 77;
        break;
      }
     case 76:
      
      var $332 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $332;
      HEAP[$tok] = 19;
      __label__ = 78;
      break;
     case 77:
      var $333 = HEAP[$nextTokPtr_addr];
      var $334 = HEAP[$ptr_addr];
      HEAP[$333] = $334;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 78:
      __label__ = 129;
      break;
     case 79:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 80;
        break;
      } else {
        __label__ = 81;
        break;
      }
     case 80:
      
      
      
      
      
      
      
      
      
      var $348 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1321] = $348;
      __label__ = 82;
      break;
     case 81:
      
      
      
      
      
      
      
      
      var $357 = HEAP[HEAP[$ptr_addr]] & 255;
      var $358 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $359 = _unicode_byte_type($357, $358);
      HEAP[$iftmp_1321] = $359;
      __label__ = 82;
      break;
     case 82:
      var $360 = HEAP[$iftmp_1321];
      if ($360 == 5) {
        __label__ = 86;
        break;
      } else if ($360 == 6) {
        __label__ = 89;
        break;
      } else if ($360 == 7) {
        __label__ = 92;
        break;
      } else if ($360 == 9) {
        __label__ = 95;
        break;
      } else if ($360 == 10) {
        __label__ = 95;
        break;
      } else if ($360 == 11) {
        __label__ = 95;
        break;
      } else if ($360 == 15) {
        __label__ = 125;
        break;
      } else if ($360 == 20) {
        __label__ = 95;
        break;
      } else if ($360 == 21) {
        __label__ = 95;
        break;
      } else if ($360 == 22) {
        __label__ = 85;
        break;
      } else if ($360 == 23) {
        __label__ = 96;
        break;
      } else if ($360 == 24) {
        __label__ = 85;
        break;
      } else if ($360 == 25) {
        __label__ = 85;
        break;
      } else if ($360 == 26) {
        __label__ = 85;
        break;
      } else if ($360 == 27) {
        __label__ = 85;
        break;
      } else if ($360 == 29) {
        __label__ = 83;
        break;
      } else if ($360 == 30) {
        __label__ = 95;
        break;
      } else if ($360 == 32) {
        __label__ = 95;
        break;
      } else if ($360 == 33) {
        __label__ = 122;
        break;
      } else if ($360 == 34) {
        __label__ = 119;
        break;
      } else if ($360 == 35) {
        __label__ = 95;
        break;
      } else if ($360 == 36) {
        __label__ = 95;
        break;
      } else {
        __label__ = 128;
        break;
      }
     case 83:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_namePages + HEAP[HEAP[$ptr_addr]]] << 3) + (HEAP[HEAP[$ptr_addr] + 1] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr] + 1] & 31)) == 0) {
        __label__ = 84;
        break;
      } else {
        __label__ = 85;
        break;
      }
     case 84:
      var $385 = HEAP[$nextTokPtr_addr];
      var $386 = HEAP[$ptr_addr];
      HEAP[$385] = $386;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 85:
      
      var $388 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $388;
      __label__ = 129;
      break;
     case 86:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 87;
        break;
      } else {
        __label__ = 88;
        break;
      }
     case 87:
      HEAP[$0] = -2;
      __label__ = 131;
      break;
     case 88:
      var $395 = HEAP[$nextTokPtr_addr];
      var $396 = HEAP[$ptr_addr];
      HEAP[$395] = $396;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 89:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 90;
        break;
      } else {
        __label__ = 91;
        break;
      }
     case 90:
      HEAP[$0] = -2;
      __label__ = 131;
      break;
     case 91:
      var $403 = HEAP[$nextTokPtr_addr];
      var $404 = HEAP[$ptr_addr];
      HEAP[$403] = $404;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 92:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 93;
        break;
      } else {
        __label__ = 94;
        break;
      }
     case 93:
      HEAP[$0] = -2;
      __label__ = 131;
      break;
     case 94:
      var $411 = HEAP[$nextTokPtr_addr];
      var $412 = HEAP[$ptr_addr];
      HEAP[$411] = $412;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 95:
      var $413 = HEAP[$nextTokPtr_addr];
      var $414 = HEAP[$ptr_addr];
      HEAP[$413] = $414;
      var $415 = HEAP[$tok];
      HEAP[$0] = $415;
      __label__ = 131;
      break;
     case 96:
      
      var $417 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $417;
      var $418 = HEAP[$tok];
      if ($418 == 18) {
        __label__ = 97;
        break;
      } else if ($418 == 41) {
        __label__ = 117;
        break;
      } else {
        __label__ = 118;
        break;
      }
     case 97:
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 98;
        break;
      } else {
        __label__ = 99;
        break;
      }
     case 98:
      HEAP[$0] = -1;
      __label__ = 131;
      break;
     case 99:
      HEAP[$tok] = 41;
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 100;
        break;
      } else {
        __label__ = 101;
        break;
      }
     case 100:
      
      
      
      
      
      
      
      
      
      var $435 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1329] = $435;
      __label__ = 102;
      break;
     case 101:
      
      
      
      
      
      
      
      
      var $444 = HEAP[HEAP[$ptr_addr]] & 255;
      var $445 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $446 = _unicode_byte_type($444, $445);
      HEAP[$iftmp_1329] = $446;
      __label__ = 102;
      break;
     case 102:
      var $447 = HEAP[$iftmp_1329];
      if ($447 == 5) {
        __label__ = 106;
        break;
      } else if ($447 == 6) {
        __label__ = 109;
        break;
      } else if ($447 == 7) {
        __label__ = 112;
        break;
      } else if ($447 == 22) {
        __label__ = 105;
        break;
      } else if ($447 == 24) {
        __label__ = 105;
        break;
      } else if ($447 == 25) {
        __label__ = 105;
        break;
      } else if ($447 == 26) {
        __label__ = 105;
        break;
      } else if ($447 == 27) {
        __label__ = 105;
        break;
      } else if ($447 == 29) {
        __label__ = 103;
        break;
      } else {
        __label__ = 115;
        break;
      }
     case 103:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_namePages + HEAP[HEAP[$ptr_addr]]] << 3) + (HEAP[HEAP[$ptr_addr] + 1] >>> 5)) * 4] & 1 << (HEAP[HEAP[$ptr_addr] + 1] & 31)) == 0) {
        __label__ = 104;
        break;
      } else {
        __label__ = 105;
        break;
      }
     case 104:
      var $472 = HEAP[$nextTokPtr_addr];
      var $473 = HEAP[$ptr_addr];
      HEAP[$472] = $473;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 105:
      
      var $475 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $475;
      __label__ = 116;
      break;
     case 106:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 107;
        break;
      } else {
        __label__ = 108;
        break;
      }
     case 107:
      HEAP[$0] = -2;
      __label__ = 131;
      break;
     case 108:
      var $482 = HEAP[$nextTokPtr_addr];
      var $483 = HEAP[$ptr_addr];
      HEAP[$482] = $483;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 109:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 110;
        break;
      } else {
        __label__ = 111;
        break;
      }
     case 110:
      HEAP[$0] = -2;
      __label__ = 131;
      break;
     case 111:
      var $490 = HEAP[$nextTokPtr_addr];
      var $491 = HEAP[$ptr_addr];
      HEAP[$490] = $491;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 112:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 113;
        break;
      } else {
        __label__ = 114;
        break;
      }
     case 113:
      HEAP[$0] = -2;
      __label__ = 131;
      break;
     case 114:
      var $498 = HEAP[$nextTokPtr_addr];
      var $499 = HEAP[$ptr_addr];
      HEAP[$498] = $499;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 115:
      HEAP[$tok] = 19;
      __label__ = 116;
      break;
     case 116:
      __label__ = 118;
      break;
     case 117:
      HEAP[$tok] = 19;
      __label__ = 118;
      break;
     case 118:
      __label__ = 129;
      break;
     case 119:
      
      
      if (HEAP[$tok] == 19) {
        __label__ = 120;
        break;
      } else {
        __label__ = 121;
        break;
      }
     case 120:
      var $502 = HEAP[$nextTokPtr_addr];
      var $503 = HEAP[$ptr_addr];
      HEAP[$502] = $503;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 121:
      
      var $505 = HEAP[$ptr_addr] + 2;
      var $506 = HEAP[$nextTokPtr_addr];
      HEAP[$506] = $505;
      HEAP[$0] = 32;
      __label__ = 131;
      break;
     case 122:
      
      
      if (HEAP[$tok] == 19) {
        __label__ = 123;
        break;
      } else {
        __label__ = 124;
        break;
      }
     case 123:
      var $509 = HEAP[$nextTokPtr_addr];
      var $510 = HEAP[$ptr_addr];
      HEAP[$509] = $510;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 124:
      
      var $512 = HEAP[$ptr_addr] + 2;
      var $513 = HEAP[$nextTokPtr_addr];
      HEAP[$513] = $512;
      HEAP[$0] = 31;
      __label__ = 131;
      break;
     case 125:
      
      
      if (HEAP[$tok] == 19) {
        __label__ = 126;
        break;
      } else {
        __label__ = 127;
        break;
      }
     case 126:
      var $516 = HEAP[$nextTokPtr_addr];
      var $517 = HEAP[$ptr_addr];
      HEAP[$516] = $517;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 127:
      
      var $519 = HEAP[$ptr_addr] + 2;
      var $520 = HEAP[$nextTokPtr_addr];
      HEAP[$520] = $519;
      HEAP[$0] = 30;
      __label__ = 131;
      break;
     case 128:
      var $521 = HEAP[$nextTokPtr_addr];
      var $522 = HEAP[$ptr_addr];
      HEAP[$521] = $522;
      HEAP[$0] = 0;
      __label__ = 131;
      break;
     case 129:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 79;
        break;
      } else {
        __label__ = 130;
        break;
      }
     case 130:
      
      var $527 = 0 - HEAP[$tok];
      HEAP[$0] = $527;
      __label__ = 131;
      break;
     case 131:
      var $528 = HEAP[$0];
      HEAP[$retval] = $528;
      __label__ = 132;
      break;
     case 132:
      var $retval131 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval131;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _big2_attributeValueTok($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 33;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 33);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_1339 = __stackBase__ + 20;
      var $iftmp_1337 = __stackBase__ + 21;
      var $0 = __stackBase__ + 25;
      var $start = __stackBase__ + 29;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -4;
      __label__ = 33;
      break;
     case 2:
      var $4 = HEAP[$ptr_addr];
      HEAP[$start] = $4;
      __label__ = 31;
      break;
     case 3:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      
      
      
      
      
      
      
      
      
      var $18 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1337] = $18;
      __label__ = 6;
      break;
     case 5:
      
      
      
      
      
      
      
      
      var $27 = HEAP[HEAP[$ptr_addr]] & 255;
      var $28 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $29 = _unicode_byte_type($27, $28);
      HEAP[$iftmp_1337] = $29;
      __label__ = 6;
      break;
     case 6:
      var $30 = HEAP[$iftmp_1337];
      if ($30 == 2) {
        __label__ = 13;
        break;
      } else if ($30 == 3) {
        __label__ = 10;
        break;
      } else if ($30 == 5) {
        __label__ = 7;
        break;
      } else if ($30 == 6) {
        __label__ = 8;
        break;
      } else if ($30 == 7) {
        __label__ = 9;
        break;
      } else if ($30 == 9) {
        __label__ = 17;
        break;
      } else if ($30 == 10) {
        __label__ = 14;
        break;
      } else if ($30 == 21) {
        __label__ = 27;
        break;
      } else {
        __label__ = 30;
        break;
      }
     case 7:
      
      var $32 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $32;
      __label__ = 31;
      break;
     case 8:
      
      var $34 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $34;
      __label__ = 31;
      break;
     case 9:
      
      var $36 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $36;
      __label__ = 31;
      break;
     case 10:
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$start]) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      
      var $41 = HEAP[$ptr_addr] + 2;
      var $42 = HEAP[$enc_addr];
      var $43 = HEAP[$end_addr];
      var $44 = HEAP[$nextTokPtr_addr];
      var $45 = _big2_scanRef($42, $41, $43, $44);
      HEAP[$0] = $45;
      __label__ = 33;
      break;
     case 12:
      var $46 = HEAP[$nextTokPtr_addr];
      var $47 = HEAP[$ptr_addr];
      HEAP[$46] = $47;
      HEAP[$0] = 6;
      __label__ = 33;
      break;
     case 13:
      var $48 = HEAP[$nextTokPtr_addr];
      var $49 = HEAP[$ptr_addr];
      HEAP[$48] = $49;
      HEAP[$0] = 0;
      __label__ = 33;
      break;
     case 14:
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$start]) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      
      var $54 = HEAP[$ptr_addr] + 2;
      var $55 = HEAP[$nextTokPtr_addr];
      HEAP[$55] = $54;
      HEAP[$0] = 7;
      __label__ = 33;
      break;
     case 16:
      var $56 = HEAP[$nextTokPtr_addr];
      var $57 = HEAP[$ptr_addr];
      HEAP[$56] = $57;
      HEAP[$0] = 6;
      __label__ = 33;
      break;
     case 17:
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$start]) {
        __label__ = 18;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 18:
      
      var $62 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $62;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 19;
        break;
      } else {
        __label__ = 20;
        break;
      }
     case 19:
      HEAP[$0] = -3;
      __label__ = 33;
      break;
     case 20:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 21;
        break;
      } else {
        __label__ = 22;
        break;
      }
     case 21:
      
      
      
      
      
      
      
      
      
      
      var $80 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]] == 10;
      HEAP[$iftmp_1339] = $80;
      __label__ = 23;
      break;
     case 22:
      
      
      
      
      
      
      
      
      var $89 = HEAP[HEAP[$ptr_addr]] & 255;
      var $90 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $91 = _unicode_byte_type($89, $90);
      
      var $93 = $91 == 10;
      HEAP[$iftmp_1339] = $93;
      __label__ = 23;
      break;
     case 23:
      
      
      if (HEAP[$iftmp_1339] != 0) {
        __label__ = 24;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 24:
      
      var $96 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $96;
      __label__ = 25;
      break;
     case 25:
      var $97 = HEAP[$nextTokPtr_addr];
      var $98 = HEAP[$ptr_addr];
      HEAP[$97] = $98;
      HEAP[$0] = 7;
      __label__ = 33;
      break;
     case 26:
      var $99 = HEAP[$nextTokPtr_addr];
      var $100 = HEAP[$ptr_addr];
      HEAP[$99] = $100;
      HEAP[$0] = 6;
      __label__ = 33;
      break;
     case 27:
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$start]) {
        __label__ = 28;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 28:
      
      var $105 = HEAP[$ptr_addr] + 2;
      var $106 = HEAP[$nextTokPtr_addr];
      HEAP[$106] = $105;
      HEAP[$0] = 39;
      __label__ = 33;
      break;
     case 29:
      var $107 = HEAP[$nextTokPtr_addr];
      var $108 = HEAP[$ptr_addr];
      HEAP[$107] = $108;
      HEAP[$0] = 6;
      __label__ = 33;
      break;
     case 30:
      
      var $110 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $110;
      __label__ = 31;
      break;
     case 31:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 3;
        break;
      } else {
        __label__ = 32;
        break;
      }
     case 32:
      var $114 = HEAP[$nextTokPtr_addr];
      var $115 = HEAP[$ptr_addr];
      HEAP[$114] = $115;
      HEAP[$0] = 6;
      __label__ = 33;
      break;
     case 33:
      var $116 = HEAP[$0];
      HEAP[$retval] = $116;
      __label__ = 34;
      break;
     case 34:
      var $retval33 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval33;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _big2_entityValueTok($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 41;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 41);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_1344 = __stackBase__ + 20;
      var $iftmp_1343 = __stackBase__ + 21;
      var $iftmp_1341 = __stackBase__ + 25;
      var $0 = __stackBase__ + 29;
      var $start = __stackBase__ + 33;
      var $tok = __stackBase__ + 37;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -4;
      __label__ = 35;
      break;
     case 2:
      var $4 = HEAP[$ptr_addr];
      HEAP[$start] = $4;
      __label__ = 33;
      break;
     case 3:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      
      
      
      
      
      
      
      
      
      var $18 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1341] = $18;
      __label__ = 6;
      break;
     case 5:
      
      
      
      
      
      
      
      
      var $27 = HEAP[HEAP[$ptr_addr]] & 255;
      var $28 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $29 = _unicode_byte_type($27, $28);
      HEAP[$iftmp_1341] = $29;
      __label__ = 6;
      break;
     case 6:
      var $30 = HEAP[$iftmp_1341];
      if ($30 == 3) {
        __label__ = 10;
        break;
      } else if ($30 == 5) {
        __label__ = 7;
        break;
      } else if ($30 == 6) {
        __label__ = 8;
        break;
      } else if ($30 == 7) {
        __label__ = 9;
        break;
      } else if ($30 == 9) {
        __label__ = 22;
        break;
      } else if ($30 == 10) {
        __label__ = 19;
        break;
      } else if ($30 == 30) {
        __label__ = 13;
        break;
      } else {
        __label__ = 32;
        break;
      }
     case 7:
      
      var $32 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $32;
      __label__ = 33;
      break;
     case 8:
      
      var $34 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $34;
      __label__ = 33;
      break;
     case 9:
      
      var $36 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $36;
      __label__ = 33;
      break;
     case 10:
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$start]) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      
      var $41 = HEAP[$ptr_addr] + 2;
      var $42 = HEAP[$enc_addr];
      var $43 = HEAP[$end_addr];
      var $44 = HEAP[$nextTokPtr_addr];
      var $45 = _big2_scanRef($42, $41, $43, $44);
      HEAP[$0] = $45;
      __label__ = 35;
      break;
     case 12:
      var $46 = HEAP[$nextTokPtr_addr];
      var $47 = HEAP[$ptr_addr];
      HEAP[$46] = $47;
      HEAP[$0] = 6;
      __label__ = 35;
      break;
     case 13:
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$start]) {
        __label__ = 14;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 14:
      
      var $52 = HEAP[$ptr_addr] + 2;
      var $53 = HEAP[$enc_addr];
      var $54 = HEAP[$end_addr];
      var $55 = HEAP[$nextTokPtr_addr];
      var $56 = _big2_scanPercent($53, $52, $54, $55);
      HEAP[$tok] = $56;
      
      
      if (HEAP[$tok] != 22) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      var $59 = HEAP[$tok];
      HEAP[$iftmp_1343] = $59;
      __label__ = 17;
      break;
     case 16:
      HEAP[$iftmp_1343] = 0;
      __label__ = 17;
      break;
     case 17:
      var $60 = HEAP[$iftmp_1343];
      HEAP[$0] = $60;
      __label__ = 35;
      break;
     case 18:
      var $61 = HEAP[$nextTokPtr_addr];
      var $62 = HEAP[$ptr_addr];
      HEAP[$61] = $62;
      HEAP[$0] = 6;
      __label__ = 35;
      break;
     case 19:
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$start]) {
        __label__ = 20;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 20:
      
      var $67 = HEAP[$ptr_addr] + 2;
      var $68 = HEAP[$nextTokPtr_addr];
      HEAP[$68] = $67;
      HEAP[$0] = 7;
      __label__ = 35;
      break;
     case 21:
      var $69 = HEAP[$nextTokPtr_addr];
      var $70 = HEAP[$ptr_addr];
      HEAP[$69] = $70;
      HEAP[$0] = 6;
      __label__ = 35;
      break;
     case 22:
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$start]) {
        __label__ = 23;
        break;
      } else {
        __label__ = 31;
        break;
      }
     case 23:
      
      var $75 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $75;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 24;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 24:
      HEAP[$0] = -3;
      __label__ = 35;
      break;
     case 25:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 26;
        break;
      } else {
        __label__ = 27;
        break;
      }
     case 26:
      
      
      
      
      
      
      
      
      
      
      var $93 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]] == 10;
      HEAP[$iftmp_1344] = $93;
      __label__ = 28;
      break;
     case 27:
      
      
      
      
      
      
      
      
      var $102 = HEAP[HEAP[$ptr_addr]] & 255;
      var $103 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $104 = _unicode_byte_type($102, $103);
      
      var $106 = $104 == 10;
      HEAP[$iftmp_1344] = $106;
      __label__ = 28;
      break;
     case 28:
      
      
      if (HEAP[$iftmp_1344] != 0) {
        __label__ = 29;
        break;
      } else {
        __label__ = 30;
        break;
      }
     case 29:
      
      var $109 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $109;
      __label__ = 30;
      break;
     case 30:
      var $110 = HEAP[$nextTokPtr_addr];
      var $111 = HEAP[$ptr_addr];
      HEAP[$110] = $111;
      HEAP[$0] = 7;
      __label__ = 35;
      break;
     case 31:
      var $112 = HEAP[$nextTokPtr_addr];
      var $113 = HEAP[$ptr_addr];
      HEAP[$112] = $113;
      HEAP[$0] = 6;
      __label__ = 35;
      break;
     case 32:
      
      var $115 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $115;
      __label__ = 33;
      break;
     case 33:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 3;
        break;
      } else {
        __label__ = 34;
        break;
      }
     case 34:
      var $119 = HEAP[$nextTokPtr_addr];
      var $120 = HEAP[$ptr_addr];
      HEAP[$119] = $120;
      HEAP[$0] = 6;
      __label__ = 35;
      break;
     case 35:
      var $121 = HEAP[$0];
      HEAP[$retval] = $121;
      __label__ = 36;
      break;
     case 36:
      var $retval35 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval35;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _big2_ignoreSectionTok($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 36;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $iftmp_1349 = __stackBase__ + 24;
      var $level = __stackBase__ + 28;
      var $n = __stackBase__ + 32;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      HEAP[$level] = 0;
      
      
      
      
      var $5 = HEAP[$end_addr] - HEAP[$ptr_addr];
      HEAP[$n] = $5;
      
      
      
      
      if ((HEAP[$n] & 1 & 255) != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      
      var $10 = HEAP[$n] & -2;
      HEAP[$n] = $10;
      
      
      var $13 = HEAP[$ptr_addr] + HEAP[$n];
      HEAP[$end_addr] = $13;
      __label__ = 2;
      break;
     case 2:
      __label__ = 40;
      break;
     case 3:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      
      
      
      
      
      
      
      
      
      var $27 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1349] = $27;
      __label__ = 6;
      break;
     case 5:
      
      
      
      
      
      
      
      
      var $36 = HEAP[HEAP[$ptr_addr]] & 255;
      var $37 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $38 = _unicode_byte_type($36, $37);
      HEAP[$iftmp_1349] = $38;
      __label__ = 6;
      break;
     case 6:
      var $39 = HEAP[$iftmp_1349];
      if ($39 == 0) {
        __label__ = 16;
        break;
      } else if ($39 == 1) {
        __label__ = 16;
        break;
      } else if ($39 == 2) {
        __label__ = 17;
        break;
      } else if ($39 == 4) {
        __label__ = 27;
        break;
      } else if ($39 == 5) {
        __label__ = 7;
        break;
      } else if ($39 == 6) {
        __label__ = 10;
        break;
      } else if ($39 == 7) {
        __label__ = 13;
        break;
      } else if ($39 == 8) {
        __label__ = 16;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 7:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 1) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      HEAP[$0] = -2;
      __label__ = 42;
      break;
     case 9:
      
      var $47 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $47;
      __label__ = 40;
      break;
     case 10:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 2) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      HEAP[$0] = -2;
      __label__ = 42;
      break;
     case 12:
      
      var $55 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $55;
      __label__ = 40;
      break;
     case 13:
      
      
      
      
      
      
      if (HEAP[$end_addr] - HEAP[$ptr_addr] <= 3) {
        __label__ = 14;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 14:
      HEAP[$0] = -2;
      __label__ = 42;
      break;
     case 15:
      
      var $63 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $63;
      __label__ = 40;
      break;
     case 16:
      var $64 = HEAP[$nextTokPtr_addr];
      var $65 = HEAP[$ptr_addr];
      HEAP[$64] = $65;
      HEAP[$0] = 0;
      __label__ = 42;
      break;
     case 17:
      
      var $67 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $67;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 18;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 18:
      HEAP[$0] = -1;
      __label__ = 42;
      break;
     case 19:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 20;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 20:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 33) {
        __label__ = 21;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 21:
      
      var $80 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $80;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 22;
        break;
      } else {
        __label__ = 23;
        break;
      }
     case 22:
      HEAP[$0] = -1;
      __label__ = 42;
      break;
     case 23:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 24;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 24:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 91) {
        __label__ = 25;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 25:
      
      var $93 = HEAP[$level] + 1;
      HEAP[$level] = $93;
      
      var $95 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $95;
      __label__ = 26;
      break;
     case 26:
      __label__ = 40;
      break;
     case 27:
      
      var $97 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $97;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 28;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 28:
      HEAP[$0] = -1;
      __label__ = 42;
      break;
     case 29:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 30;
        break;
      } else {
        __label__ = 38;
        break;
      }
     case 30:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 93) {
        __label__ = 31;
        break;
      } else {
        __label__ = 38;
        break;
      }
     case 31:
      
      var $110 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $110;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 32;
        break;
      } else {
        __label__ = 33;
        break;
      }
     case 32:
      HEAP[$0] = -1;
      __label__ = 42;
      break;
     case 33:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 34;
        break;
      } else {
        __label__ = 38;
        break;
      }
     case 34:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 62) {
        __label__ = 35;
        break;
      } else {
        __label__ = 38;
        break;
      }
     case 35:
      
      var $123 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $123;
      
      
      if (HEAP[$level] == 0) {
        __label__ = 36;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 36:
      var $126 = HEAP[$nextTokPtr_addr];
      var $127 = HEAP[$ptr_addr];
      HEAP[$126] = $127;
      HEAP[$0] = 42;
      __label__ = 42;
      break;
     case 37:
      
      var $129 = HEAP[$level] - 1;
      HEAP[$level] = $129;
      __label__ = 38;
      break;
     case 38:
      __label__ = 40;
      break;
     case 39:
      
      var $131 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $131;
      __label__ = 40;
      break;
     case 40:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 3;
        break;
      } else {
        __label__ = 41;
        break;
      }
     case 41:
      HEAP[$0] = -1;
      __label__ = 42;
      break;
     case 42:
      var $135 = HEAP[$0];
      HEAP[$retval] = $135;
      __label__ = 43;
      break;
     case 43:
      var $retval42 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval42;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _big2_isPublicId($enc, $ptr, $end, $badPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 32;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $badPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_1359 = __stackBase__ + 20;
      var $0 = __stackBase__ + 24;
      var $iftmp_1357 = __stackBase__ + 28;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$badPtr_addr] = $badPtr;
      
      var $2 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $2;
      
      var $4 = HEAP[$end_addr] + -2;
      HEAP[$end_addr] = $4;
      __label__ = 19;
      break;
     case 1:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      
      
      
      
      
      
      
      
      var $18 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1357] = $18;
      __label__ = 4;
      break;
     case 3:
      
      
      
      
      
      
      
      
      var $27 = HEAP[HEAP[$ptr_addr]] & 255;
      var $28 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $29 = _unicode_byte_type($27, $28);
      HEAP[$iftmp_1357] = $29;
      __label__ = 4;
      break;
     case 4:
      var $30 = HEAP[$iftmp_1357];
      if ($30 == 9) {
        __label__ = 5;
        break;
      } else if ($30 == 10) {
        __label__ = 5;
        break;
      } else if ($30 == 13) {
        __label__ = 5;
        break;
      } else if ($30 == 14) {
        __label__ = 5;
        break;
      } else if ($30 == 15) {
        __label__ = 5;
        break;
      } else if ($30 == 16) {
        __label__ = 5;
        break;
      } else if ($30 == 17) {
        __label__ = 5;
        break;
      } else if ($30 == 18) {
        __label__ = 5;
        break;
      } else if ($30 == 19) {
        __label__ = 5;
        break;
      } else if ($30 == 21) {
        __label__ = 6;
        break;
      } else if ($30 == 22) {
        __label__ = 10;
        break;
      } else if ($30 == 23) {
        __label__ = 5;
        break;
      } else if ($30 == 24) {
        __label__ = 5;
        break;
      } else if ($30 == 25) {
        __label__ = 5;
        break;
      } else if ($30 == 26) {
        __label__ = 10;
        break;
      } else if ($30 == 27) {
        __label__ = 5;
        break;
      } else if ($30 == 30) {
        __label__ = 5;
        break;
      } else if ($30 == 31) {
        __label__ = 5;
        break;
      } else if ($30 == 32) {
        __label__ = 5;
        break;
      } else if ($30 == 33) {
        __label__ = 5;
        break;
      } else if ($30 == 34) {
        __label__ = 5;
        break;
      } else if ($30 == 35) {
        __label__ = 5;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 5:
      __label__ = 18;
      break;
     case 6:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 7:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 9) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      var $39 = HEAP[$badPtr_addr];
      var $40 = HEAP[$ptr_addr];
      HEAP[$39] = $40;
      HEAP[$0] = 0;
      __label__ = 21;
      break;
     case 9:
      __label__ = 18;
      break;
     case 10:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      
      
      
      
      var $49 = HEAP[HEAP[$ptr_addr] + 1] & -128;
      
      if ($49 == 0) {
        __label__ = 18;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 12:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 13:
      
      
      
      var $58 = HEAP[HEAP[$ptr_addr] + 1];
      HEAP[$iftmp_1359] = $58;
      __label__ = 15;
      break;
     case 14:
      HEAP[$iftmp_1359] = -1;
      __label__ = 15;
      break;
     case 15:
      var $59 = HEAP[$iftmp_1359];
      if ($59 == 36) {
        __label__ = 16;
        break;
      } else if ($59 == 64) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      __label__ = 18;
      break;
     case 17:
      var $60 = HEAP[$badPtr_addr];
      var $61 = HEAP[$ptr_addr];
      HEAP[$60] = $61;
      HEAP[$0] = 0;
      __label__ = 21;
      break;
     case 18:
      
      var $63 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $63;
      __label__ = 19;
      break;
     case 19:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 20;
        break;
      }
     case 20:
      HEAP[$0] = 1;
      __label__ = 21;
      break;
     case 21:
      var $67 = HEAP[$0];
      HEAP[$retval] = $67;
      __label__ = 22;
      break;
     case 22:
      var $retval21 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval21;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _big2_getAtts($enc, $ptr, $attsMax, $atts) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 44;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 44);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $attsMax_addr = __stackBase__ + 8;
      var $atts_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $iftmp_1362 = __stackBase__ + 24;
      var $iftmp_1360 = __stackBase__ + 28;
      var $state = __stackBase__ + 32;
      var $nAtts = __stackBase__ + 36;
      var $open = __stackBase__ + 40;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$attsMax_addr] = $attsMax;
      HEAP[$atts_addr] = $atts;
      HEAP[$state] = 1;
      HEAP[$nAtts] = 0;
      HEAP[$open] = 0;
      
      var $2 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $2;
      __label__ = 1;
      break;
     case 1:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      
      
      
      
      
      
      
      
      var $16 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1360] = $16;
      __label__ = 4;
      break;
     case 3:
      
      
      
      
      
      
      
      
      var $25 = HEAP[HEAP[$ptr_addr]] & 255;
      var $26 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $27 = _unicode_byte_type($25, $26);
      HEAP[$iftmp_1360] = $27;
      __label__ = 4;
      break;
     case 4:
      var $28 = HEAP[$iftmp_1360];
      if ($28 == 3) {
        __label__ = 43;
        break;
      } else if ($28 == 5) {
        __label__ = 5;
        break;
      } else if ($28 == 6) {
        __label__ = 10;
        break;
      } else if ($28 == 7) {
        __label__ = 15;
        break;
      } else if ($28 == 9) {
        __label__ = 62;
        break;
      } else if ($28 == 10) {
        __label__ = 62;
        break;
      } else if ($28 == 11) {
        __label__ = 68;
        break;
      } else if ($28 == 12) {
        __label__ = 25;
        break;
      } else if ($28 == 13) {
        __label__ = 34;
        break;
      } else if ($28 == 17) {
        __label__ = 68;
        break;
      } else if ($28 == 21) {
        __label__ = 46;
        break;
      } else if ($28 == 22) {
        __label__ = 20;
        break;
      } else if ($28 == 24) {
        __label__ = 20;
        break;
      } else if ($28 == 29) {
        __label__ = 20;
        break;
      } else {
        __label__ = 70;
        break;
      }
     case 5:
      
      
      if (HEAP[$state] == 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 6:
      
      
      
      if (HEAP[$nAtts] < HEAP[$attsMax_addr]) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      
      
      
      var $37 = HEAP[$atts_addr] + 16 * HEAP[$nAtts];
      var $38 = HEAP[$ptr_addr];
      HEAP[$37] = $38;
      
      
      
      var $42 = HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 12;
      HEAP[$42] = 1;
      __label__ = 8;
      break;
     case 8:
      HEAP[$state] = 1;
      __label__ = 9;
      break;
     case 9:
      
      var $44 = HEAP[$ptr_addr];
      HEAP[$ptr_addr] = $44;
      __label__ = 70;
      break;
     case 10:
      
      
      if (HEAP[$state] == 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 11:
      
      
      
      if (HEAP[$nAtts] < HEAP[$attsMax_addr]) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      
      
      
      var $53 = HEAP[$atts_addr] + 16 * HEAP[$nAtts];
      var $54 = HEAP[$ptr_addr];
      HEAP[$53] = $54;
      
      
      
      var $58 = HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 12;
      HEAP[$58] = 1;
      __label__ = 13;
      break;
     case 13:
      HEAP[$state] = 1;
      __label__ = 14;
      break;
     case 14:
      
      var $60 = HEAP[$ptr_addr] + 1;
      HEAP[$ptr_addr] = $60;
      __label__ = 70;
      break;
     case 15:
      
      
      if (HEAP[$state] == 0) {
        __label__ = 16;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 16:
      
      
      
      if (HEAP[$nAtts] < HEAP[$attsMax_addr]) {
        __label__ = 17;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 17:
      
      
      
      var $69 = HEAP[$atts_addr] + 16 * HEAP[$nAtts];
      var $70 = HEAP[$ptr_addr];
      HEAP[$69] = $70;
      
      
      
      var $74 = HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 12;
      HEAP[$74] = 1;
      __label__ = 18;
      break;
     case 18:
      HEAP[$state] = 1;
      __label__ = 19;
      break;
     case 19:
      
      var $76 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $76;
      __label__ = 70;
      break;
     case 20:
      
      
      if (HEAP[$state] == 0) {
        __label__ = 21;
        break;
      } else {
        __label__ = 24;
        break;
      }
     case 21:
      
      
      
      if (HEAP[$nAtts] < HEAP[$attsMax_addr]) {
        __label__ = 22;
        break;
      } else {
        __label__ = 23;
        break;
      }
     case 22:
      
      
      
      var $85 = HEAP[$atts_addr] + 16 * HEAP[$nAtts];
      var $86 = HEAP[$ptr_addr];
      HEAP[$85] = $86;
      
      
      
      var $90 = HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 12;
      HEAP[$90] = 1;
      __label__ = 23;
      break;
     case 23:
      HEAP[$state] = 1;
      __label__ = 24;
      break;
     case 24:
      __label__ = 70;
      break;
     case 25:
      
      
      if (HEAP[$state] != 2) {
        __label__ = 26;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 26:
      
      
      
      if (HEAP[$nAtts] < HEAP[$attsMax_addr]) {
        __label__ = 27;
        break;
      } else {
        __label__ = 28;
        break;
      }
     case 27:
      
      
      
      
      var $100 = HEAP[$ptr_addr] + 2;
      var $101 = HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 4;
      HEAP[$101] = $100;
      __label__ = 28;
      break;
     case 28:
      HEAP[$state] = 2;
      HEAP[$open] = 12;
      __label__ = 33;
      break;
     case 29:
      
      
      if (HEAP[$open] == 12) {
        __label__ = 30;
        break;
      } else {
        __label__ = 33;
        break;
      }
     case 30:
      HEAP[$state] = 0;
      
      
      
      if (HEAP[$nAtts] < HEAP[$attsMax_addr]) {
        __label__ = 31;
        break;
      } else {
        __label__ = 32;
        break;
      }
     case 31:
      
      
      
      var $110 = HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 8;
      var $111 = HEAP[$ptr_addr];
      HEAP[$110] = $111;
      __label__ = 32;
      break;
     case 32:
      
      var $113 = HEAP[$nAtts] + 1;
      HEAP[$nAtts] = $113;
      __label__ = 33;
      break;
     case 33:
      __label__ = 70;
      break;
     case 34:
      
      
      if (HEAP[$state] != 2) {
        __label__ = 35;
        break;
      } else {
        __label__ = 38;
        break;
      }
     case 35:
      
      
      
      if (HEAP[$nAtts] < HEAP[$attsMax_addr]) {
        __label__ = 36;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 36:
      
      
      
      
      var $123 = HEAP[$ptr_addr] + 2;
      var $124 = HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 4;
      HEAP[$124] = $123;
      __label__ = 37;
      break;
     case 37:
      HEAP[$state] = 2;
      HEAP[$open] = 13;
      __label__ = 42;
      break;
     case 38:
      
      
      if (HEAP[$open] == 13) {
        __label__ = 39;
        break;
      } else {
        __label__ = 42;
        break;
      }
     case 39:
      HEAP[$state] = 0;
      
      
      
      if (HEAP[$nAtts] < HEAP[$attsMax_addr]) {
        __label__ = 40;
        break;
      } else {
        __label__ = 41;
        break;
      }
     case 40:
      
      
      
      var $133 = HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 8;
      var $134 = HEAP[$ptr_addr];
      HEAP[$133] = $134;
      __label__ = 41;
      break;
     case 41:
      
      var $136 = HEAP[$nAtts] + 1;
      HEAP[$nAtts] = $136;
      __label__ = 42;
      break;
     case 42:
      __label__ = 70;
      break;
     case 43:
      
      
      
      if (HEAP[$nAtts] < HEAP[$attsMax_addr]) {
        __label__ = 44;
        break;
      } else {
        __label__ = 45;
        break;
      }
     case 44:
      
      
      
      var $143 = HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 12;
      HEAP[$143] = 0;
      __label__ = 45;
      break;
     case 45:
      __label__ = 70;
      break;
     case 46:
      
      
      if (HEAP[$state] == 1) {
        __label__ = 47;
        break;
      } else {
        __label__ = 48;
        break;
      }
     case 47:
      HEAP[$state] = 0;
      __label__ = 61;
      break;
     case 48:
      
      
      if (HEAP[$state] == 2) {
        __label__ = 49;
        break;
      } else {
        __label__ = 61;
        break;
      }
     case 49:
      
      
      
      if (HEAP[$nAtts] < HEAP[$attsMax_addr]) {
        __label__ = 50;
        break;
      } else {
        __label__ = 61;
        break;
      }
     case 50:
      
      
      
      
      
      
      if (HEAP[HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 12] != 0) {
        __label__ = 51;
        break;
      } else {
        __label__ = 61;
        break;
      }
     case 51:
      
      
      
      
      
      
      
      if (HEAP[HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 4] == HEAP[$ptr_addr]) {
        __label__ = 60;
        break;
      } else {
        __label__ = 52;
        break;
      }
     case 52:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 0) {
        __label__ = 60;
        break;
      } else {
        __label__ = 53;
        break;
      }
     case 53:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] != 32) {
        __label__ = 60;
        break;
      } else {
        __label__ = 54;
        break;
      }
     case 54:
      
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 2] != 0) {
        __label__ = 56;
        break;
      } else {
        __label__ = 55;
        break;
      }
     case 55:
      
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 2 + 1] == 32) {
        __label__ = 60;
        break;
      } else {
        __label__ = 56;
        break;
      }
     case 56:
      
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 2] == 0) {
        __label__ = 57;
        break;
      } else {
        __label__ = 58;
        break;
      }
     case 57:
      
      
      
      
      
      
      
      
      
      
      var $197 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 2 + 1]];
      HEAP[$iftmp_1362] = $197;
      __label__ = 59;
      break;
     case 58:
      
      
      
      
      
      
      
      
      
      
      var $208 = HEAP[HEAP[$ptr_addr] + 2] & 255;
      var $209 = HEAP[HEAP[$ptr_addr] + 2 + 1] & 255;
      var $210 = _unicode_byte_type($208, $209);
      HEAP[$iftmp_1362] = $210;
      __label__ = 59;
      break;
     case 59:
      
      
      
      if (HEAP[$iftmp_1362] == HEAP[$open]) {
        __label__ = 60;
        break;
      } else {
        __label__ = 61;
        break;
      }
     case 60:
      
      
      
      var $217 = HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 12;
      HEAP[$217] = 0;
      __label__ = 61;
      break;
     case 61:
      __label__ = 70;
      break;
     case 62:
      
      
      if (HEAP[$state] == 1) {
        __label__ = 63;
        break;
      } else {
        __label__ = 64;
        break;
      }
     case 63:
      HEAP[$state] = 0;
      __label__ = 67;
      break;
     case 64:
      
      
      if (HEAP[$state] == 2) {
        __label__ = 65;
        break;
      } else {
        __label__ = 67;
        break;
      }
     case 65:
      
      
      
      if (HEAP[$nAtts] < HEAP[$attsMax_addr]) {
        __label__ = 66;
        break;
      } else {
        __label__ = 67;
        break;
      }
     case 66:
      
      
      
      var $228 = HEAP[$atts_addr] + 16 * HEAP[$nAtts] + 12;
      HEAP[$228] = 0;
      __label__ = 67;
      break;
     case 67:
      __label__ = 70;
      break;
     case 68:
      
      
      if (HEAP[$state] != 2) {
        __label__ = 69;
        break;
      } else {
        __label__ = 70;
        break;
      }
     case 69:
      var $231 = HEAP[$nAtts];
      HEAP[$0] = $231;
      var $232 = HEAP[$0];
      HEAP[$retval] = $232;
      __label__ = 71;
      break;
     case 70:
      
      var $234 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $234;
      __label__ = 1;
      break;
     case 71:
      var $retval70 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval70;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _big2_charRefNumber($enc, $ptr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 36;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $ptr_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $iftmp_1365 = __stackBase__ + 12;
      var $0 = __stackBase__ + 16;
      var $iftmp_1364 = __stackBase__ + 20;
      var $result = __stackBase__ + 24;
      var $c = __stackBase__ + 28;
      var $c17 = __stackBase__ + 32;
      
      HEAP[__stackBase__] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$result] = 0;
      
      var $2 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $2;
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 0) {
        __label__ = 16;
        break;
      } else {
        __label__ = 1;
        break;
      }
     case 1:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] != 120) {
        __label__ = 16;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      
      var $12 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $12;
      __label__ = 13;
      break;
     case 3:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      
      
      
      var $20 = HEAP[HEAP[$ptr_addr] + 1];
      HEAP[$iftmp_1364] = $20;
      __label__ = 6;
      break;
     case 5:
      HEAP[$iftmp_1364] = -1;
      __label__ = 6;
      break;
     case 6:
      var $21 = HEAP[$iftmp_1364];
      HEAP[$c] = $21;
      var $22 = HEAP[$c];
      if ($22 == 48) {
        __label__ = 7;
        break;
      } else if ($22 == 49) {
        __label__ = 7;
        break;
      } else if ($22 == 50) {
        __label__ = 7;
        break;
      } else if ($22 == 51) {
        __label__ = 7;
        break;
      } else if ($22 == 52) {
        __label__ = 7;
        break;
      } else if ($22 == 53) {
        __label__ = 7;
        break;
      } else if ($22 == 54) {
        __label__ = 7;
        break;
      } else if ($22 == 55) {
        __label__ = 7;
        break;
      } else if ($22 == 56) {
        __label__ = 7;
        break;
      } else if ($22 == 57) {
        __label__ = 7;
        break;
      } else if ($22 == 65) {
        __label__ = 8;
        break;
      } else if ($22 == 66) {
        __label__ = 8;
        break;
      } else if ($22 == 67) {
        __label__ = 8;
        break;
      } else if ($22 == 68) {
        __label__ = 8;
        break;
      } else if ($22 == 69) {
        __label__ = 8;
        break;
      } else if ($22 == 70) {
        __label__ = 8;
        break;
      } else if ($22 == 97) {
        __label__ = 9;
        break;
      } else if ($22 == 98) {
        __label__ = 9;
        break;
      } else if ($22 == 99) {
        __label__ = 9;
        break;
      } else if ($22 == 100) {
        __label__ = 9;
        break;
      } else if ($22 == 101) {
        __label__ = 9;
        break;
      } else if ($22 == 102) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 7:
      
      var $24 = HEAP[$result] << 4;
      HEAP[$result] = $24;
      
      
      
      var $28 = HEAP[$c] - 48 | HEAP[$result];
      HEAP[$result] = $28;
      __label__ = 10;
      break;
     case 8:
      
      var $30 = HEAP[$result] << 4;
      HEAP[$result] = $30;
      
      
      
      var $34 = HEAP[$c] - 55 + HEAP[$result];
      HEAP[$result] = $34;
      __label__ = 10;
      break;
     case 9:
      
      var $36 = HEAP[$result] << 4;
      HEAP[$result] = $36;
      
      
      
      var $40 = HEAP[$c] - 87 + HEAP[$result];
      HEAP[$result] = $40;
      __label__ = 10;
      break;
     case 10:
      
      
      if (HEAP[$result] > 1114111) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      HEAP[$0] = -1;
      __label__ = 26;
      break;
     case 12:
      
      var $44 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $44;
      __label__ = 13;
      break;
     case 13:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 14;
        break;
      }
     case 14:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] != 59) {
        __label__ = 3;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 15:
      __label__ = 25;
      break;
     case 16:
      __label__ = 23;
      break;
     case 17:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 18;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 18:
      
      
      
      var $60 = HEAP[HEAP[$ptr_addr] + 1];
      HEAP[$iftmp_1365] = $60;
      __label__ = 20;
      break;
     case 19:
      HEAP[$iftmp_1365] = -1;
      __label__ = 20;
      break;
     case 20:
      var $61 = HEAP[$iftmp_1365];
      HEAP[$c17] = $61;
      
      var $63 = HEAP[$result] * 10;
      HEAP[$result] = $63;
      
      
      
      var $67 = HEAP[$c17] - 48 + HEAP[$result];
      HEAP[$result] = $67;
      
      
      if (HEAP[$result] > 1114111) {
        __label__ = 21;
        break;
      } else {
        __label__ = 22;
        break;
      }
     case 21:
      HEAP[$0] = -1;
      __label__ = 26;
      break;
     case 22:
      
      var $71 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $71;
      __label__ = 23;
      break;
     case 23:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] != 0) {
        __label__ = 17;
        break;
      } else {
        __label__ = 24;
        break;
      }
     case 24:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] != 59) {
        __label__ = 17;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 25:
      var $80 = HEAP[$result];
      var $81 = _checkCharRefNumber($80);
      HEAP[$0] = $81;
      __label__ = 26;
      break;
     case 26:
      var $82 = HEAP[$0];
      HEAP[$retval] = $82;
      __label__ = 27;
      break;
     case 27:
      var $retval27 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval27;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _big2_predefinedEntityName($enc, $ptr, $end) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $retval = __stackBase__ + 12;
      var $iftmp_1369 = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $iftmp_1368 = __stackBase__ + 24;
      
      HEAP[__stackBase__] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      
      
      
      
      
      var $6 = (HEAP[$end_addr] - HEAP[$ptr_addr]) / 2 | 0;
      if ($6 == 2) {
        __label__ = 1;
        break;
      } else if ($6 == 3) {
        __label__ = 10;
        break;
      } else if ($6 == 4) {
        __label__ = 18;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 1:
      
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 2] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 2:
      
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 2 + 1] == 116) {
        __label__ = 3;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 3:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      
      
      
      var $24 = HEAP[HEAP[$ptr_addr] + 1];
      HEAP[$iftmp_1368] = $24;
      __label__ = 6;
      break;
     case 5:
      HEAP[$iftmp_1368] = -1;
      __label__ = 6;
      break;
     case 6:
      var $25 = HEAP[$iftmp_1368];
      if ($25 == 103) {
        __label__ = 8;
        break;
      } else if ($25 == 108) {
        __label__ = 7;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 7:
      HEAP[$0] = 60;
      __label__ = 38;
      break;
     case 8:
      HEAP[$0] = 62;
      __label__ = 38;
      break;
     case 9:
      __label__ = 37;
      break;
     case 10:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 11:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 97) {
        __label__ = 12;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 12:
      
      var $35 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $35;
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 13:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 109) {
        __label__ = 14;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 14:
      
      var $45 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $45;
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 15;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 15:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 112) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      HEAP[$0] = 38;
      __label__ = 38;
      break;
     case 17:
      __label__ = 37;
      break;
     case 18:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 19;
        break;
      } else {
        __label__ = 20;
        break;
      }
     case 19:
      
      
      
      var $61 = HEAP[HEAP[$ptr_addr] + 1];
      HEAP[$iftmp_1369] = $61;
      __label__ = 21;
      break;
     case 20:
      HEAP[$iftmp_1369] = -1;
      __label__ = 21;
      break;
     case 21:
      var $62 = HEAP[$iftmp_1369];
      if ($62 == 97) {
        __label__ = 30;
        break;
      } else if ($62 == 113) {
        __label__ = 22;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 22:
      
      var $64 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $64;
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 23;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 23:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 117) {
        __label__ = 24;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 24:
      
      var $74 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $74;
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 25;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 25:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 111) {
        __label__ = 26;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 26:
      
      var $84 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $84;
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 27;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 27:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 116) {
        __label__ = 28;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 28:
      HEAP[$0] = 34;
      __label__ = 38;
      break;
     case 29:
      __label__ = 37;
      break;
     case 30:
      
      var $94 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $94;
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 31;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 31:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 112) {
        __label__ = 32;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 32:
      
      var $104 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $104;
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 33;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 33:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 111) {
        __label__ = 34;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 34:
      
      var $114 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $114;
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 35;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 35:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 115) {
        __label__ = 36;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 36:
      HEAP[$0] = 39;
      __label__ = 38;
      break;
     case 37:
      HEAP[$0] = 0;
      __label__ = 38;
      break;
     case 38:
      var $123 = HEAP[$0];
      HEAP[$retval] = $123;
      __label__ = 39;
      break;
     case 39:
      var $retval38 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval38;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _big2_sameName($enc, $ptr1, $ptr2) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr1_addr = __stackBase__ + 4;
      var $ptr2_addr = __stackBase__ + 8;
      var $retval = __stackBase__ + 12;
      var $iftmp_1372 = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $iftmp_1370 = __stackBase__ + 24;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr1_addr] = $ptr1;
      HEAP[$ptr2_addr] = $ptr2;
      __label__ = 1;
      break;
     case 1:
      
      
      
      
      if (HEAP[HEAP[$ptr1_addr]] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      
      
      
      
      
      
      
      
      var $14 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr1_addr] + 1]];
      HEAP[$iftmp_1370] = $14;
      __label__ = 4;
      break;
     case 3:
      
      
      
      
      
      
      
      
      var $23 = HEAP[HEAP[$ptr1_addr]] & 255;
      var $24 = HEAP[HEAP[$ptr1_addr] + 1] & 255;
      var $25 = _unicode_byte_type($23, $24);
      HEAP[$iftmp_1370] = $25;
      __label__ = 4;
      break;
     case 4:
      var $26 = HEAP[$iftmp_1370];
      if ($26 == 5) {
        __label__ = 9;
        break;
      } else if ($26 == 6) {
        __label__ = 7;
        break;
      } else if ($26 == 7) {
        __label__ = 5;
        break;
      } else if ($26 == 22) {
        __label__ = 14;
        break;
      } else if ($26 == 23) {
        __label__ = 14;
        break;
      } else if ($26 == 24) {
        __label__ = 14;
        break;
      } else if ($26 == 25) {
        __label__ = 14;
        break;
      } else if ($26 == 26) {
        __label__ = 14;
        break;
      } else if ($26 == 27) {
        __label__ = 14;
        break;
      } else if ($26 == 29) {
        __label__ = 14;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 5:
      
      
      
      
      
      var $32 = HEAP[HEAP[$ptr1_addr]] != HEAP[HEAP[$ptr2_addr]];
      
      var $34 = HEAP[$ptr1_addr] + 1;
      HEAP[$ptr1_addr] = $34;
      
      var $36 = HEAP[$ptr2_addr] + 1;
      HEAP[$ptr2_addr] = $36;
      
      if ($32 != 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      HEAP[$0] = 0;
      __label__ = 26;
      break;
     case 7:
      
      
      
      
      
      var $42 = HEAP[HEAP[$ptr1_addr]] != HEAP[HEAP[$ptr2_addr]];
      
      var $44 = HEAP[$ptr1_addr] + 1;
      HEAP[$ptr1_addr] = $44;
      
      var $46 = HEAP[$ptr2_addr] + 1;
      HEAP[$ptr2_addr] = $46;
      
      if ($42 != 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      HEAP[$0] = 0;
      __label__ = 26;
      break;
     case 9:
      
      
      
      
      
      var $52 = HEAP[HEAP[$ptr1_addr]] != HEAP[HEAP[$ptr2_addr]];
      
      var $54 = HEAP[$ptr1_addr] + 1;
      HEAP[$ptr1_addr] = $54;
      
      var $56 = HEAP[$ptr2_addr] + 1;
      HEAP[$ptr2_addr] = $56;
      
      if ($52 != 0) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      HEAP[$0] = 0;
      __label__ = 26;
      break;
     case 11:
      
      
      
      
      
      var $62 = HEAP[HEAP[$ptr1_addr]] != HEAP[HEAP[$ptr2_addr]];
      
      var $64 = HEAP[$ptr1_addr] + 1;
      HEAP[$ptr1_addr] = $64;
      
      var $66 = HEAP[$ptr2_addr] + 1;
      HEAP[$ptr2_addr] = $66;
      
      if ($62 != 0) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      HEAP[$0] = 0;
      __label__ = 26;
      break;
     case 13:
      __label__ = 25;
      break;
     case 14:
      
      
      
      
      
      var $72 = HEAP[HEAP[$ptr2_addr]] != HEAP[HEAP[$ptr1_addr]];
      
      var $74 = HEAP[$ptr2_addr] + 1;
      HEAP[$ptr2_addr] = $74;
      
      var $76 = HEAP[$ptr1_addr] + 1;
      HEAP[$ptr1_addr] = $76;
      
      if ($72 != 0) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      HEAP[$0] = 0;
      __label__ = 26;
      break;
     case 16:
      
      
      
      
      
      var $82 = HEAP[HEAP[$ptr2_addr]] != HEAP[HEAP[$ptr1_addr]];
      
      var $84 = HEAP[$ptr2_addr] + 1;
      HEAP[$ptr2_addr] = $84;
      
      var $86 = HEAP[$ptr1_addr] + 1;
      HEAP[$ptr1_addr] = $86;
      
      if ($82 != 0) {
        __label__ = 17;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 17:
      HEAP[$0] = 0;
      __label__ = 26;
      break;
     case 18:
      __label__ = 25;
      break;
     case 19:
      
      
      
      
      if (HEAP[HEAP[$ptr2_addr]] == 0) {
        __label__ = 20;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 20:
      
      
      
      
      
      
      
      
      
      var $100 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr2_addr] + 1]];
      HEAP[$iftmp_1372] = $100;
      __label__ = 22;
      break;
     case 21:
      
      
      
      
      
      
      
      
      var $109 = HEAP[HEAP[$ptr2_addr]] & 255;
      var $110 = HEAP[HEAP[$ptr2_addr] + 1] & 255;
      var $111 = _unicode_byte_type($109, $110);
      HEAP[$iftmp_1372] = $111;
      __label__ = 22;
      break;
     case 22:
      var $112 = HEAP[$iftmp_1372];
      if ($112 == 5) {
        __label__ = 23;
        break;
      } else if ($112 == 6) {
        __label__ = 23;
        break;
      } else if ($112 == 7) {
        __label__ = 23;
        break;
      } else if ($112 == 22) {
        __label__ = 23;
        break;
      } else if ($112 == 23) {
        __label__ = 23;
        break;
      } else if ($112 == 24) {
        __label__ = 23;
        break;
      } else if ($112 == 25) {
        __label__ = 23;
        break;
      } else if ($112 == 26) {
        __label__ = 23;
        break;
      } else if ($112 == 27) {
        __label__ = 23;
        break;
      } else if ($112 == 29) {
        __label__ = 23;
        break;
      } else {
        __label__ = 24;
        break;
      }
     case 23:
      HEAP[$0] = 0;
      __label__ = 26;
      break;
     case 24:
      HEAP[$0] = 1;
      __label__ = 26;
      break;
     case 25:
      __label__ = 1;
      break;
     case 26:
      var $113 = HEAP[$0];
      HEAP[$retval] = $113;
      __label__ = 27;
      break;
     case 27:
      var $retval31 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval31;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _big2_nameMatchesAscii($enc, $ptr1, $end1, $ptr2) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 24;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $ptr1_addr = __stackBase__ + 4;
      var $end1_addr = __stackBase__ + 8;
      var $ptr2_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      
      HEAP[__stackBase__] = $enc;
      HEAP[$ptr1_addr] = $ptr1;
      HEAP[$end1_addr] = $end1;
      HEAP[$ptr2_addr] = $ptr2;
      __label__ = 7;
      break;
     case 1:
      
      
      
      if (HEAP[$ptr1_addr] == HEAP[$end1_addr]) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      HEAP[$0] = 0;
      __label__ = 9;
      break;
     case 3:
      
      
      
      
      if (HEAP[HEAP[$ptr1_addr]] != 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 4:
      
      
      
      
      
      
      if (HEAP[HEAP[$ptr1_addr] + 1] != HEAP[HEAP[$ptr2_addr]]) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      HEAP[$0] = 0;
      __label__ = 9;
      break;
     case 6:
      
      var $15 = HEAP[$ptr1_addr] + 2;
      HEAP[$ptr1_addr] = $15;
      
      var $17 = HEAP[$ptr2_addr] + 1;
      HEAP[$ptr2_addr] = $17;
      __label__ = 7;
      break;
     case 7:
      
      
      
      if (HEAP[HEAP[$ptr2_addr]] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 8:
      
      
      
      var $24 = HEAP[$ptr1_addr] == HEAP[$end1_addr];
      HEAP[$0] = $24;
      __label__ = 9;
      break;
     case 9:
      var $25 = HEAP[$0];
      HEAP[$retval] = $25;
      __label__ = 10;
      break;
     case 10:
      var $retval9 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval9;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _big2_nameLength($enc, $ptr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 24;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      var $iftmp_1374 = __stackBase__ + 16;
      var $start = __stackBase__ + 20;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      var $1 = HEAP[$ptr_addr];
      HEAP[$start] = $1;
      __label__ = 1;
      break;
     case 1:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      
      
      
      
      
      
      
      
      var $15 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1374] = $15;
      __label__ = 4;
      break;
     case 3:
      
      
      
      
      
      
      
      
      var $24 = HEAP[HEAP[$ptr_addr]] & 255;
      var $25 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $26 = _unicode_byte_type($24, $25);
      HEAP[$iftmp_1374] = $26;
      __label__ = 4;
      break;
     case 4:
      var $27 = HEAP[$iftmp_1374];
      if ($27 == 5) {
        __label__ = 5;
        break;
      } else if ($27 == 6) {
        __label__ = 6;
        break;
      } else if ($27 == 7) {
        __label__ = 7;
        break;
      } else if ($27 == 22) {
        __label__ = 8;
        break;
      } else if ($27 == 23) {
        __label__ = 8;
        break;
      } else if ($27 == 24) {
        __label__ = 8;
        break;
      } else if ($27 == 25) {
        __label__ = 8;
        break;
      } else if ($27 == 26) {
        __label__ = 8;
        break;
      } else if ($27 == 27) {
        __label__ = 8;
        break;
      } else if ($27 == 29) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 5:
      
      var $29 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $29;
      __label__ = 10;
      break;
     case 6:
      
      var $31 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $31;
      __label__ = 10;
      break;
     case 7:
      
      var $33 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $33;
      __label__ = 10;
      break;
     case 8:
      
      var $35 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $35;
      __label__ = 10;
      break;
     case 9:
      
      
      
      
      var $40 = HEAP[$ptr_addr] - HEAP[$start];
      HEAP[$0] = $40;
      var $41 = HEAP[$0];
      HEAP[$retval] = $41;
      __label__ = 11;
      break;
     case 10:
      __label__ = 1;
      break;
     case 11:
      var $retval10 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval10;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _big2_skipS($enc, $ptr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 20;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      var $iftmp_1378 = __stackBase__ + 16;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      __label__ = 1;
      break;
     case 1:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      
      
      
      
      
      
      
      
      var $14 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1378] = $14;
      __label__ = 4;
      break;
     case 3:
      
      
      
      
      
      
      
      
      var $23 = HEAP[HEAP[$ptr_addr]] & 255;
      var $24 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $25 = _unicode_byte_type($23, $24);
      HEAP[$iftmp_1378] = $25;
      __label__ = 4;
      break;
     case 4:
      var $26 = HEAP[$iftmp_1378];
      if ($26 == 9) {
        __label__ = 5;
        break;
      } else if ($26 == 10) {
        __label__ = 5;
        break;
      } else if ($26 == 21) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      
      var $28 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $28;
      __label__ = 1;
      break;
     case 6:
      var $29 = HEAP[$ptr_addr];
      HEAP[$0] = $29;
      var $30 = HEAP[$0];
      HEAP[$retval] = $30;
      __label__ = 7;
      break;
     case 7:
      var $retval6 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval6;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _big2_updatePosition($enc, $ptr, $end, $pos) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 21;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 21);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $pos_addr = __stackBase__ + 12;
      var $iftmp_1382 = __stackBase__ + 16;
      var $iftmp_1380 = __stackBase__ + 17;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$pos_addr] = $pos;
      __label__ = 18;
      break;
     case 1:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      
      
      
      
      
      
      
      
      var $13 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]];
      HEAP[$iftmp_1380] = $13;
      __label__ = 4;
      break;
     case 3:
      
      
      
      
      
      
      
      
      var $22 = HEAP[HEAP[$ptr_addr]] & 255;
      var $23 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $24 = _unicode_byte_type($22, $23);
      HEAP[$iftmp_1380] = $24;
      __label__ = 4;
      break;
     case 4:
      var $25 = HEAP[$iftmp_1380];
      if ($25 == 5) {
        __label__ = 5;
        break;
      } else if ($25 == 6) {
        __label__ = 6;
        break;
      } else if ($25 == 7) {
        __label__ = 7;
        break;
      } else if ($25 == 9) {
        __label__ = 9;
        break;
      } else if ($25 == 10) {
        __label__ = 8;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 5:
      
      var $27 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $27;
      __label__ = 17;
      break;
     case 6:
      
      var $29 = HEAP[$ptr_addr] + 3;
      HEAP[$ptr_addr] = $29;
      __label__ = 17;
      break;
     case 7:
      
      var $31 = HEAP[$ptr_addr] + 4;
      HEAP[$ptr_addr] = $31;
      __label__ = 17;
      break;
     case 8:
      
      var $33 = HEAP[$pos_addr] + 4;
      HEAP[$33] = -1;
      
      
      
      var $37 = HEAP[HEAP[$pos_addr]] + 1;
      
      var $39 = HEAP[$pos_addr];
      HEAP[$39] = $37;
      
      var $41 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $41;
      __label__ = 17;
      break;
     case 9:
      
      
      
      var $45 = HEAP[HEAP[$pos_addr]] + 1;
      
      var $47 = HEAP[$pos_addr];
      HEAP[$47] = $45;
      
      var $49 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $49;
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 10;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 10:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      
      
      
      
      
      
      
      
      
      
      var $67 = HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[$ptr_addr] + 1]] == 10;
      HEAP[$iftmp_1382] = $67;
      __label__ = 13;
      break;
     case 12:
      
      
      
      
      
      
      
      
      var $76 = HEAP[HEAP[$ptr_addr]] & 255;
      var $77 = HEAP[HEAP[$ptr_addr] + 1] & 255;
      var $78 = _unicode_byte_type($76, $77);
      
      var $80 = $78 == 10;
      HEAP[$iftmp_1382] = $80;
      __label__ = 13;
      break;
     case 13:
      
      
      if (HEAP[$iftmp_1382] != 0) {
        __label__ = 14;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 14:
      
      var $83 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $83;
      __label__ = 15;
      break;
     case 15:
      
      var $85 = HEAP[$pos_addr] + 4;
      HEAP[$85] = -1;
      __label__ = 17;
      break;
     case 16:
      
      var $87 = HEAP[$ptr_addr] + 2;
      HEAP[$ptr_addr] = $87;
      __label__ = 17;
      break;
     case 17:
      
      
      
      var $91 = HEAP[HEAP[$pos_addr] + 4] + 1;
      
      var $93 = HEAP[$pos_addr] + 4;
      HEAP[$93] = $91;
      __label__ = 18;
      break;
     case 18:
      
      
      
      if (HEAP[$ptr_addr] < HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 19:
      __label__ = 20;
      break;
     case 20:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _streqci($s1, $s2) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 18;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 18);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $s1_addr = __stackBase__;
      var $s2_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      var $c1 = __stackBase__ + 16;
      var $c2 = __stackBase__ + 17;
      
      HEAP[$s1_addr] = $s1;
      HEAP[$s2_addr] = $s2;
      __label__ = 1;
      break;
     case 1:
      
      var $2 = HEAP[HEAP[$s1_addr]];
      HEAP[$c1] = $2;
      
      var $4 = HEAP[$s1_addr] + 1;
      HEAP[$s1_addr] = $4;
      
      var $6 = HEAP[HEAP[$s2_addr]];
      HEAP[$c2] = $6;
      
      var $8 = HEAP[$s2_addr] + 1;
      HEAP[$s2_addr] = $8;
      
      
      if (HEAP[$c1] > 96) {
        __label__ = 2;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 2:
      
      
      if (HEAP[$c1] <= 122) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      var $14 = HEAP[$c1] + -32;
      HEAP[$c1] = $14;
      __label__ = 4;
      break;
     case 4:
      
      
      if (HEAP[$c2] > 96) {
        __label__ = 5;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 5:
      
      
      if (HEAP[$c2] <= 122) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      
      var $20 = HEAP[$c2] + -32;
      HEAP[$c2] = $20;
      __label__ = 7;
      break;
     case 7:
      
      
      
      if (HEAP[$c1] != HEAP[$c2]) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      HEAP[$0] = 0;
      __label__ = 12;
      break;
     case 9:
      
      
      if (HEAP[$c1] == 0) {
        __label__ = 11;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 10:
      __label__ = 1;
      break;
     case 11:
      HEAP[$0] = 1;
      __label__ = 12;
      break;
     case 12:
      var $26 = HEAP[$0];
      HEAP[$retval] = $26;
      __label__ = 13;
      break;
     case 13:
      var $retval12 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval12;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _initUpdatePosition($enc, $ptr, $end, $pos) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $pos_addr = __stackBase__ + 12;
      
      HEAP[__stackBase__] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$pos_addr] = $pos;
      var $0 = HEAP[$ptr_addr];
      var $1 = HEAP[$end_addr];
      var $2 = HEAP[$pos_addr];
      _normal_updatePosition(_utf8_encoding, $0, $1, $2);
      __label__ = 1;
      break;
     case 1:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _toAscii($enc, $ptr, $end) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 25;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 25);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $retval = __stackBase__ + 12;
      var $0 = __stackBase__ + 16;
      var $buf = __stackBase__ + 20;
      var $p = __stackBase__ + 21;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      
      HEAP[$p] = $buf;
      
      
      var $3 = HEAP[HEAP[$enc_addr] + 60];
      
      var $5 = HEAP[$p] + 1;
      var $6 = HEAP[$enc_addr];
      var $7 = HEAP[$end_addr];
      FUNCTION_TABLE[$3]($6, $ptr_addr, $7, $p, $5);
      
      
      
      if ($buf == HEAP[$p]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -1;
      __label__ = 3;
      break;
     case 2:
      
      
      var $12 = HEAP[$buf];
      HEAP[$0] = $12;
      __label__ = 3;
      break;
     case 3:
      var $13 = HEAP[$0];
      HEAP[$retval] = $13;
      __label__ = 4;
      break;
     case 4:
      var $retval5 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval5;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _isSpace($c) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 12;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      
      var $retval = __stackBase__ + 4;
      var $0 = __stackBase__ + 8;
      
      HEAP[__stackBase__] = $c;
      var $1 = HEAP[__stackBase__];
      if ($1 == 9) {
        __label__ = 1;
        break;
      } else if ($1 == 10) {
        __label__ = 1;
        break;
      } else if ($1 == 13) {
        __label__ = 1;
        break;
      } else if ($1 == 32) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = 1;
      __label__ = 3;
      break;
     case 2:
      HEAP[$0] = 0;
      __label__ = 3;
      break;
     case 3:
      var $2 = HEAP[$0];
      HEAP[$retval] = $2;
      __label__ = 4;
      break;
     case 4:
      var $retval3 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval3;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _parsePseudoAttribute($enc, $ptr, $end, $namePtr, $nameEndPtr, $valPtr, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 41;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 41);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $namePtr_addr = __stackBase__ + 12;
      var $nameEndPtr_addr = __stackBase__ + 16;
      var $valPtr_addr = __stackBase__ + 20;
      var $nextTokPtr_addr = __stackBase__ + 24;
      var $retval = __stackBase__ + 28;
      var $0 = __stackBase__ + 32;
      var $c = __stackBase__ + 36;
      var $open = __stackBase__ + 40;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$namePtr_addr] = $namePtr;
      HEAP[$nameEndPtr_addr] = $nameEndPtr;
      HEAP[$valPtr_addr] = $valPtr;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      var $4 = HEAP[$namePtr_addr];
      HEAP[$4] = 0;
      HEAP[$0] = 1;
      __label__ = 41;
      break;
     case 2:
      var $5 = HEAP[$enc_addr];
      var $6 = HEAP[$ptr_addr];
      var $7 = HEAP[$end_addr];
      var $8 = _toAscii($5, $6, $7);
      var $9 = _isSpace($8);
      
      if ($9 == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      var $11 = HEAP[$nextTokPtr_addr];
      var $12 = HEAP[$ptr_addr];
      HEAP[$11] = $12;
      HEAP[$0] = 0;
      __label__ = 41;
      break;
     case 4:
      
      
      
      
      var $17 = HEAP[$ptr_addr] + HEAP[HEAP[$enc_addr] + 68];
      HEAP[$ptr_addr] = $17;
      var $18 = HEAP[$enc_addr];
      var $19 = HEAP[$ptr_addr];
      var $20 = HEAP[$end_addr];
      var $21 = _toAscii($18, $19, $20);
      var $22 = _isSpace($21);
      
      if ($22 != 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 5:
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      var $27 = HEAP[$namePtr_addr];
      HEAP[$27] = 0;
      HEAP[$0] = 1;
      __label__ = 41;
      break;
     case 7:
      var $28 = HEAP[$namePtr_addr];
      var $29 = HEAP[$ptr_addr];
      HEAP[$28] = $29;
      __label__ = 8;
      break;
     case 8:
      var $30 = HEAP[$enc_addr];
      var $31 = HEAP[$ptr_addr];
      var $32 = HEAP[$end_addr];
      var $33 = _toAscii($30, $31, $32);
      HEAP[$c] = $33;
      
      var $35 = HEAP[$c] == -1;
      if ($35) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      var $36 = HEAP[$nextTokPtr_addr];
      var $37 = HEAP[$ptr_addr];
      HEAP[$36] = $37;
      HEAP[$0] = 0;
      __label__ = 41;
      break;
     case 10:
      
      
      if (HEAP[$c] == 61) {
        __label__ = 11;
        break;
      } else {
        __label__ = 12;
        break;
      }
     case 11:
      var $40 = HEAP[$nameEndPtr_addr];
      var $41 = HEAP[$ptr_addr];
      HEAP[$40] = $41;
      __label__ = 19;
      break;
     case 12:
      var $42 = HEAP[$c];
      var $43 = _isSpace($42);
      
      if ($43 != 0) {
        __label__ = 13;
        break;
      } else {
        __label__ = 18;
        break;
      }
     case 13:
      var $45 = HEAP[$nameEndPtr_addr];
      var $46 = HEAP[$ptr_addr];
      HEAP[$45] = $46;
      __label__ = 14;
      break;
     case 14:
      
      
      
      
      var $51 = HEAP[$ptr_addr] + HEAP[HEAP[$enc_addr] + 68];
      HEAP[$ptr_addr] = $51;
      var $52 = HEAP[$enc_addr];
      var $53 = HEAP[$ptr_addr];
      var $54 = HEAP[$end_addr];
      var $55 = _toAscii($52, $53, $54);
      HEAP[$c] = $55;
      var $56 = HEAP[$c];
      var $57 = _isSpace($56);
      
      if ($57 != 0) {
        __label__ = 14;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 15:
      
      
      if (HEAP[$c] != 61) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      var $61 = HEAP[$nextTokPtr_addr];
      var $62 = HEAP[$ptr_addr];
      HEAP[$61] = $62;
      HEAP[$0] = 0;
      __label__ = 41;
      break;
     case 17:
      __label__ = 19;
      break;
     case 18:
      
      
      
      
      var $67 = HEAP[$ptr_addr] + HEAP[HEAP[$enc_addr] + 68];
      HEAP[$ptr_addr] = $67;
      __label__ = 8;
      break;
     case 19:
      
      
      
      
      if (HEAP[HEAP[$namePtr_addr]] == HEAP[$ptr_addr]) {
        __label__ = 20;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 20:
      var $72 = HEAP[$nextTokPtr_addr];
      var $73 = HEAP[$ptr_addr];
      HEAP[$72] = $73;
      HEAP[$0] = 0;
      __label__ = 41;
      break;
     case 21:
      
      
      
      
      var $78 = HEAP[$ptr_addr] + HEAP[HEAP[$enc_addr] + 68];
      HEAP[$ptr_addr] = $78;
      var $79 = HEAP[$enc_addr];
      var $80 = HEAP[$ptr_addr];
      var $81 = HEAP[$end_addr];
      var $82 = _toAscii($79, $80, $81);
      HEAP[$c] = $82;
      __label__ = 23;
      break;
     case 22:
      
      
      
      
      var $87 = HEAP[$ptr_addr] + HEAP[HEAP[$enc_addr] + 68];
      HEAP[$ptr_addr] = $87;
      var $88 = HEAP[$enc_addr];
      var $89 = HEAP[$ptr_addr];
      var $90 = HEAP[$end_addr];
      var $91 = _toAscii($88, $89, $90);
      HEAP[$c] = $91;
      __label__ = 23;
      break;
     case 23:
      var $92 = HEAP[$c];
      var $93 = _isSpace($92);
      
      if ($93 != 0) {
        __label__ = 22;
        break;
      } else {
        __label__ = 24;
        break;
      }
     case 24:
      
      
      if (HEAP[$c] != 34) {
        __label__ = 25;
        break;
      } else {
        __label__ = 27;
        break;
      }
     case 25:
      
      
      if (HEAP[$c] != 39) {
        __label__ = 26;
        break;
      } else {
        __label__ = 27;
        break;
      }
     case 26:
      var $99 = HEAP[$nextTokPtr_addr];
      var $100 = HEAP[$ptr_addr];
      HEAP[$99] = $100;
      HEAP[$0] = 0;
      __label__ = 41;
      break;
     case 27:
      
      var $102 = HEAP[$c] & 255;
      HEAP[$open] = $102;
      
      
      
      
      var $107 = HEAP[$ptr_addr] + HEAP[HEAP[$enc_addr] + 68];
      HEAP[$ptr_addr] = $107;
      var $108 = HEAP[$valPtr_addr];
      var $109 = HEAP[$ptr_addr];
      HEAP[$108] = $109;
      __label__ = 28;
      break;
     case 28:
      var $110 = HEAP[$enc_addr];
      var $111 = HEAP[$ptr_addr];
      var $112 = HEAP[$end_addr];
      var $113 = _toAscii($110, $111, $112);
      HEAP[$c] = $113;
      
      
      
      
      if (HEAP[$open] == HEAP[$c]) {
        __label__ = 40;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 29:
      
      
      if (HEAP[$c] <= 96) {
        __label__ = 31;
        break;
      } else {
        __label__ = 30;
        break;
      }
     case 30:
      
      
      if (HEAP[$c] > 122) {
        __label__ = 31;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 31:
      
      
      if (HEAP[$c] <= 64) {
        __label__ = 33;
        break;
      } else {
        __label__ = 32;
        break;
      }
     case 32:
      
      
      if (HEAP[$c] > 90) {
        __label__ = 33;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 33:
      
      
      if (HEAP[$c] <= 47) {
        __label__ = 35;
        break;
      } else {
        __label__ = 34;
        break;
      }
     case 34:
      
      
      if (HEAP[$c] > 57) {
        __label__ = 35;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 35:
      
      
      if (HEAP[$c] != 46) {
        __label__ = 36;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 36:
      
      
      if (HEAP[$c] != 45) {
        __label__ = 37;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 37:
      
      
      if (HEAP[$c] != 95) {
        __label__ = 38;
        break;
      } else {
        __label__ = 39;
        break;
      }
     case 38:
      var $136 = HEAP[$nextTokPtr_addr];
      var $137 = HEAP[$ptr_addr];
      HEAP[$136] = $137;
      HEAP[$0] = 0;
      __label__ = 41;
      break;
     case 39:
      
      
      
      
      var $142 = HEAP[$ptr_addr] + HEAP[HEAP[$enc_addr] + 68];
      HEAP[$ptr_addr] = $142;
      __label__ = 28;
      break;
     case 40:
      
      
      
      
      var $147 = HEAP[$ptr_addr] + HEAP[HEAP[$enc_addr] + 68];
      var $148 = HEAP[$nextTokPtr_addr];
      HEAP[$148] = $147;
      HEAP[$0] = 1;
      __label__ = 41;
      break;
     case 41:
      var $149 = HEAP[$0];
      HEAP[$retval] = $149;
      __label__ = 42;
      break;
     case 42:
      var $retval41 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval41;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _doParseXmlDecl($encodingFinder, $isGeneralTextEntity, $enc, $ptr, $end, $badPtr, $versionPtr, $versionEndPtr, $encodingName, $encoding, $standalone) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 68;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 68);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $encodingFinder_addr = __stackBase__;
      var $isGeneralTextEntity_addr = __stackBase__ + 4;
      var $enc_addr = __stackBase__ + 8;
      var $ptr_addr = __stackBase__ + 12;
      var $end_addr = __stackBase__ + 16;
      var $badPtr_addr = __stackBase__ + 20;
      var $versionPtr_addr = __stackBase__ + 24;
      var $versionEndPtr_addr = __stackBase__ + 28;
      var $encodingName_addr = __stackBase__ + 32;
      var $encoding_addr = __stackBase__ + 36;
      var $standalone_addr = __stackBase__ + 40;
      var $retval = __stackBase__ + 44;
      var $0 = __stackBase__ + 48;
      var $val = __stackBase__ + 52;
      var $name = __stackBase__ + 56;
      var $nameEnd = __stackBase__ + 60;
      var $c = __stackBase__ + 64;
      
      HEAP[$encodingFinder_addr] = $encodingFinder;
      HEAP[$isGeneralTextEntity_addr] = $isGeneralTextEntity;
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$badPtr_addr] = $badPtr;
      HEAP[$versionPtr_addr] = $versionPtr;
      HEAP[$versionEndPtr_addr] = $versionEndPtr;
      HEAP[$encodingName_addr] = $encodingName;
      HEAP[$encoding_addr] = $encoding;
      HEAP[$standalone_addr] = $standalone;
      HEAP[$val] = 0;
      HEAP[$name] = 0;
      HEAP[$nameEnd] = 0;
      
      
      
      
      
      var $6 = HEAP[$ptr_addr] + HEAP[HEAP[$enc_addr] + 68] * 5;
      HEAP[$ptr_addr] = $6;
      
      
      
      var $10 = HEAP[HEAP[$enc_addr] + 68] * -2;
      
      var $12 = HEAP[$end_addr] + $10;
      HEAP[$end_addr] = $12;
      var $13 = HEAP[$ptr_addr];
      var $14 = HEAP[$enc_addr];
      var $15 = HEAP[$end_addr];
      var $16 = _parsePseudoAttribute($14, $13, $15, $name, $nameEnd, $val, $ptr_addr);
      
      if ($16 == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 1;
        break;
      }
     case 1:
      
      
      if (HEAP[$name] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      var $20 = HEAP[$ptr_addr];
      var $21 = HEAP[$badPtr_addr];
      HEAP[$21] = $20;
      HEAP[$0] = 0;
      __label__ = 49;
      break;
     case 3:
      
      
      var $24 = HEAP[HEAP[$enc_addr] + 28];
      var $25 = HEAP[$nameEnd];
      var $26 = HEAP[$name];
      var $27 = HEAP[$enc_addr];
      var $28 = FUNCTION_TABLE[$24]($27, $26, $25, _KW_version);
      
      if ($28 == 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 4:
      
      
      if (HEAP[$isGeneralTextEntity_addr] == 0) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      var $32 = HEAP[$name];
      var $33 = HEAP[$badPtr_addr];
      HEAP[$33] = $32;
      HEAP[$0] = 0;
      __label__ = 49;
      break;
     case 6:
      __label__ = 17;
      break;
     case 7:
      
      
      if (HEAP[$versionPtr_addr] != 0) {
        __label__ = 8;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 8:
      var $36 = HEAP[$val];
      var $37 = HEAP[$versionPtr_addr];
      HEAP[$37] = $36;
      __label__ = 9;
      break;
     case 9:
      
      
      if (HEAP[$versionEndPtr_addr] != 0) {
        __label__ = 10;
        break;
      } else {
        __label__ = 11;
        break;
      }
     case 10:
      var $40 = HEAP[$ptr_addr];
      var $41 = HEAP[$versionEndPtr_addr];
      HEAP[$41] = $40;
      __label__ = 11;
      break;
     case 11:
      var $42 = HEAP[$ptr_addr];
      var $43 = HEAP[$enc_addr];
      var $44 = HEAP[$end_addr];
      var $45 = _parsePseudoAttribute($43, $42, $44, $name, $nameEnd, $val, $ptr_addr);
      
      if ($45 == 0) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      var $47 = HEAP[$ptr_addr];
      var $48 = HEAP[$badPtr_addr];
      HEAP[$48] = $47;
      HEAP[$0] = 0;
      __label__ = 49;
      break;
     case 13:
      
      
      if (HEAP[$name] == 0) {
        __label__ = 14;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 14:
      
      
      if (HEAP[$isGeneralTextEntity_addr] != 0) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      var $53 = HEAP[$ptr_addr];
      var $54 = HEAP[$badPtr_addr];
      HEAP[$54] = $53;
      HEAP[$0] = 0;
      __label__ = 49;
      break;
     case 16:
      HEAP[$0] = 1;
      __label__ = 49;
      break;
     case 17:
      
      
      var $57 = HEAP[HEAP[$enc_addr] + 28];
      var $58 = HEAP[$nameEnd];
      var $59 = HEAP[$name];
      var $60 = HEAP[$enc_addr];
      var $61 = FUNCTION_TABLE[$57]($60, $59, $58, _KW_encoding);
      
      if ($61 != 0) {
        __label__ = 18;
        break;
      } else {
        __label__ = 31;
        break;
      }
     case 18:
      var $63 = HEAP[$val];
      var $64 = HEAP[$enc_addr];
      var $65 = HEAP[$end_addr];
      var $66 = _toAscii($64, $63, $65);
      HEAP[$c] = $66;
      
      
      if (HEAP[$c] <= 96) {
        __label__ = 20;
        break;
      } else {
        __label__ = 19;
        break;
      }
     case 19:
      
      
      if (HEAP[$c] > 122) {
        __label__ = 20;
        break;
      } else {
        __label__ = 23;
        break;
      }
     case 20:
      
      
      if (HEAP[$c] <= 64) {
        __label__ = 22;
        break;
      } else {
        __label__ = 21;
        break;
      }
     case 21:
      
      
      if (HEAP[$c] > 90) {
        __label__ = 22;
        break;
      } else {
        __label__ = 23;
        break;
      }
     case 22:
      var $75 = HEAP[$val];
      var $76 = HEAP[$badPtr_addr];
      HEAP[$76] = $75;
      HEAP[$0] = 0;
      __label__ = 49;
      break;
     case 23:
      
      
      if (HEAP[$encodingName_addr] != 0) {
        __label__ = 24;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 24:
      var $79 = HEAP[$val];
      var $80 = HEAP[$encodingName_addr];
      HEAP[$80] = $79;
      __label__ = 25;
      break;
     case 25:
      
      
      if (HEAP[$encoding_addr] != 0) {
        __label__ = 26;
        break;
      } else {
        __label__ = 27;
        break;
      }
     case 26:
      
      
      
      
      
      var $88 = HEAP[$ptr_addr] + (0 - HEAP[HEAP[$enc_addr] + 68]);
      var $89 = HEAP[$val];
      var $90 = HEAP[$encodingFinder_addr];
      var $91 = HEAP[$enc_addr];
      var $92 = FUNCTION_TABLE[$90]($91, $89, $88);
      var $93 = HEAP[$encoding_addr];
      HEAP[$93] = $92;
      __label__ = 27;
      break;
     case 27:
      var $94 = HEAP[$ptr_addr];
      var $95 = HEAP[$enc_addr];
      var $96 = HEAP[$end_addr];
      var $97 = _parsePseudoAttribute($95, $94, $96, $name, $nameEnd, $val, $ptr_addr);
      
      if ($97 == 0) {
        __label__ = 28;
        break;
      } else {
        __label__ = 29;
        break;
      }
     case 28:
      var $99 = HEAP[$ptr_addr];
      var $100 = HEAP[$badPtr_addr];
      HEAP[$100] = $99;
      HEAP[$0] = 0;
      __label__ = 49;
      break;
     case 29:
      
      
      if (HEAP[$name] == 0) {
        __label__ = 30;
        break;
      } else {
        __label__ = 31;
        break;
      }
     case 30:
      HEAP[$0] = 1;
      __label__ = 49;
      break;
     case 31:
      
      
      var $105 = HEAP[HEAP[$enc_addr] + 28];
      var $106 = HEAP[$nameEnd];
      var $107 = HEAP[$name];
      var $108 = HEAP[$enc_addr];
      var $109 = FUNCTION_TABLE[$105]($108, $107, $106, _KW_standalone);
      
      if ($109 == 0) {
        __label__ = 33;
        break;
      } else {
        __label__ = 32;
        break;
      }
     case 32:
      
      
      if (HEAP[$isGeneralTextEntity_addr] != 0) {
        __label__ = 33;
        break;
      } else {
        __label__ = 34;
        break;
      }
     case 33:
      var $113 = HEAP[$name];
      var $114 = HEAP[$badPtr_addr];
      HEAP[$114] = $113;
      HEAP[$0] = 0;
      __label__ = 49;
      break;
     case 34:
      
      
      var $117 = HEAP[HEAP[$enc_addr] + 28];
      
      
      
      
      
      var $123 = HEAP[$ptr_addr] + (0 - HEAP[HEAP[$enc_addr] + 68]);
      var $124 = HEAP[$val];
      var $125 = HEAP[$enc_addr];
      var $126 = FUNCTION_TABLE[$117]($125, $124, $123, _KW_yes);
      
      if ($126 != 0) {
        __label__ = 35;
        break;
      } else {
        __label__ = 38;
        break;
      }
     case 35:
      
      
      if (HEAP[$standalone_addr] != 0) {
        __label__ = 36;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 36:
      var $130 = HEAP[$standalone_addr];
      HEAP[$130] = 1;
      __label__ = 37;
      break;
     case 37:
      __label__ = 43;
      break;
     case 38:
      
      
      var $133 = HEAP[HEAP[$enc_addr] + 28];
      
      
      
      
      
      var $139 = HEAP[$ptr_addr] + (0 - HEAP[HEAP[$enc_addr] + 68]);
      var $140 = HEAP[$val];
      var $141 = HEAP[$enc_addr];
      var $142 = FUNCTION_TABLE[$133]($141, $140, $139, _KW_no);
      
      if ($142 != 0) {
        __label__ = 39;
        break;
      } else {
        __label__ = 42;
        break;
      }
     case 39:
      
      
      if (HEAP[$standalone_addr] != 0) {
        __label__ = 40;
        break;
      } else {
        __label__ = 41;
        break;
      }
     case 40:
      var $146 = HEAP[$standalone_addr];
      HEAP[$146] = 0;
      __label__ = 41;
      break;
     case 41:
      __label__ = 43;
      break;
     case 42:
      var $147 = HEAP[$val];
      var $148 = HEAP[$badPtr_addr];
      HEAP[$148] = $147;
      HEAP[$0] = 0;
      __label__ = 49;
      break;
     case 43:
      __label__ = 45;
      break;
     case 44:
      
      
      
      
      var $153 = HEAP[$ptr_addr] + HEAP[HEAP[$enc_addr] + 68];
      HEAP[$ptr_addr] = $153;
      __label__ = 45;
      break;
     case 45:
      var $154 = HEAP[$ptr_addr];
      var $155 = HEAP[$enc_addr];
      var $156 = HEAP[$end_addr];
      var $157 = _toAscii($155, $154, $156);
      var $158 = _isSpace($157);
      
      if ($158 != 0) {
        __label__ = 44;
        break;
      } else {
        __label__ = 46;
        break;
      }
     case 46:
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 47;
        break;
      } else {
        __label__ = 48;
        break;
      }
     case 47:
      var $163 = HEAP[$ptr_addr];
      var $164 = HEAP[$badPtr_addr];
      HEAP[$164] = $163;
      HEAP[$0] = 0;
      __label__ = 49;
      break;
     case 48:
      HEAP[$0] = 1;
      __label__ = 49;
      break;
     case 49:
      var $165 = HEAP[$0];
      HEAP[$retval] = $165;
      __label__ = 50;
      break;
     case 50:
      var $retval49 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval49;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _checkCharRefNumber($result) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 12;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $result_addr = __stackBase__;
      var $retval = __stackBase__ + 4;
      var $0 = __stackBase__ + 8;
      
      HEAP[$result_addr] = $result;
      
      var $2 = HEAP[$result_addr] >> 8;
      if ($2 == 0) {
        __label__ = 2;
        break;
      } else if ($2 == 216) {
        __label__ = 1;
        break;
      } else if ($2 == 217) {
        __label__ = 1;
        break;
      } else if ($2 == 218) {
        __label__ = 1;
        break;
      } else if ($2 == 219) {
        __label__ = 1;
        break;
      } else if ($2 == 220) {
        __label__ = 1;
        break;
      } else if ($2 == 221) {
        __label__ = 1;
        break;
      } else if ($2 == 222) {
        __label__ = 1;
        break;
      } else if ($2 == 223) {
        __label__ = 1;
        break;
      } else if ($2 == 255) {
        __label__ = 5;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 1:
      HEAP[$0] = -1;
      __label__ = 9;
      break;
     case 2:
      
      
      
      
      if (HEAP[_latin1_encoding + 76 + HEAP[$result_addr]] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      HEAP[$0] = -1;
      __label__ = 9;
      break;
     case 4:
      __label__ = 8;
      break;
     case 5:
      
      
      if (HEAP[$result_addr] == 65534) {
        __label__ = 7;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 6:
      
      
      if (HEAP[$result_addr] == 65535) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      HEAP[$0] = -1;
      __label__ = 9;
      break;
     case 8:
      var $11 = HEAP[$result_addr];
      HEAP[$0] = $11;
      __label__ = 9;
      break;
     case 9:
      var $12 = HEAP[$0];
      HEAP[$retval] = $12;
      __label__ = 10;
      break;
     case 10:
      var $retval9 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval9;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XmlUtf8Encode($c, $buf) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $c_addr = __stackBase__;
      var $buf_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      
      HEAP[$c_addr] = $c;
      HEAP[$buf_addr] = $buf;
      
      
      if (HEAP[$c_addr] < 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = 0;
      __label__ = 11;
      break;
     case 2:
      
      
      if (HEAP[$c_addr] <= 127) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      var $6 = HEAP[$c_addr] & 255;
      
      var $8 = HEAP[$buf_addr];
      HEAP[$8] = $6;
      HEAP[$0] = 1;
      __label__ = 11;
      break;
     case 4:
      
      
      if (HEAP[$c_addr] <= 2047) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      
      
      
      var $14 = HEAP[$c_addr] >> 6 & 255 | -64;
      
      var $16 = HEAP[$buf_addr];
      HEAP[$16] = $14;
      
      
      
      var $20 = HEAP[$c_addr] & 255 & 63 | -128;
      
      var $22 = HEAP[$buf_addr] + 1;
      HEAP[$22] = $20;
      HEAP[$0] = 2;
      __label__ = 11;
      break;
     case 6:
      
      
      if (HEAP[$c_addr] <= 65535) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      
      
      
      var $28 = HEAP[$c_addr] >> 12 & 255 | -32;
      
      var $30 = HEAP[$buf_addr];
      HEAP[$30] = $28;
      
      
      
      
      var $35 = HEAP[$c_addr] >> 6 & 255 & 63 | -128;
      
      var $37 = HEAP[$buf_addr] + 1;
      HEAP[$37] = $35;
      
      
      
      var $41 = HEAP[$c_addr] & 255 & 63 | -128;
      
      var $43 = HEAP[$buf_addr] + 2;
      HEAP[$43] = $41;
      HEAP[$0] = 3;
      __label__ = 11;
      break;
     case 8:
      
      
      if (HEAP[$c_addr] <= 1114111) {
        __label__ = 9;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 9:
      
      
      
      var $49 = HEAP[$c_addr] >> 18 & 255 | -16;
      
      var $51 = HEAP[$buf_addr];
      HEAP[$51] = $49;
      
      
      
      
      var $56 = HEAP[$c_addr] >> 12 & 255 & 63 | -128;
      
      var $58 = HEAP[$buf_addr] + 1;
      HEAP[$58] = $56;
      
      
      
      
      var $63 = HEAP[$c_addr] >> 6 & 255 & 63 | -128;
      
      var $65 = HEAP[$buf_addr] + 2;
      HEAP[$65] = $63;
      
      
      
      var $69 = HEAP[$c_addr] & 255 & 63 | -128;
      
      var $71 = HEAP[$buf_addr] + 3;
      HEAP[$71] = $69;
      HEAP[$0] = 4;
      __label__ = 11;
      break;
     case 10:
      HEAP[$0] = 0;
      __label__ = 11;
      break;
     case 11:
      var $72 = HEAP[$0];
      HEAP[$retval] = $72;
      __label__ = 12;
      break;
     case 12:
      var $retval11 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval11;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XmlUtf16Encode($charNum, $buf) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $charNum_addr = __stackBase__;
      var $buf_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      
      HEAP[$charNum_addr] = $charNum;
      HEAP[$buf_addr] = $buf;
      
      
      if (HEAP[$charNum_addr] < 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = 0;
      __label__ = 7;
      break;
     case 2:
      
      
      if (HEAP[$charNum_addr] <= 65535) {
        __label__ = 3;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 3:
      
      var $6 = HEAP[$charNum_addr] & 65535;
      
      var $8 = HEAP[$buf_addr];
      HEAP[$8] = $6;
      HEAP[$0] = 1;
      __label__ = 7;
      break;
     case 4:
      
      
      if (HEAP[$charNum_addr] <= 1114111) {
        __label__ = 5;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 5:
      
      var $12 = HEAP[$charNum_addr] - 65536;
      HEAP[$charNum_addr] = $12;
      
      
      
      var $16 = (HEAP[$charNum_addr] >> 10 & 65535) + -10240;
      
      var $18 = HEAP[$buf_addr];
      HEAP[$18] = $16;
      
      
      
      var $22 = (HEAP[$charNum_addr] & 65535 & 1023) + -9216;
      
      var $24 = HEAP[$buf_addr] + 2;
      HEAP[$24] = $22;
      HEAP[$0] = 2;
      __label__ = 7;
      break;
     case 6:
      HEAP[$0] = 0;
      __label__ = 7;
      break;
     case 7:
      var $25 = HEAP[$0];
      HEAP[$retval] = $25;
      __label__ = 8;
      break;
     case 8:
      var $retval7 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval7;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XmlSizeOfUnknownEncoding() {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $retval = __stackBase__;
      
      
      HEAP[__stackBase__ + 4] = 1912;
      var $1 = HEAP[__stackBase__ + 4];
      HEAP[$retval] = $1;
      __label__ = 1;
      break;
     case 1:
      var $retval1 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval1;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _unknown_isName($enc, $p) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 24;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $p_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      var $uenc = __stackBase__ + 16;
      var $c = __stackBase__ + 20;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$p_addr] = $p;
      
      var $2 = HEAP[$enc_addr];
      HEAP[$uenc] = $2;
      
      
      var $5 = HEAP[HEAP[$uenc] + 368];
      
      
      var $8 = HEAP[HEAP[$uenc] + 372];
      var $9 = HEAP[$p_addr];
      var $10 = FUNCTION_TABLE[$5]($8, $9);
      HEAP[$c] = $10;
      
      var $12 = HEAP[$c] & -65536;
      
      if ($12 != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = 0;
      __label__ = 3;
      break;
     case 2:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      var $29 = HEAP[_namingBitmap + ((HEAP[_namePages + (HEAP[$c] >> 8)] << 3) + ((HEAP[$c] & 255) >> 5)) * 4] & 1 << (HEAP[$c] & 31);
      HEAP[$0] = $29;
      __label__ = 3;
      break;
     case 3:
      var $30 = HEAP[$0];
      HEAP[$retval] = $30;
      __label__ = 4;
      break;
     case 4:
      var $retval3 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval3;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _unknown_isNmstrt($enc, $p) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 24;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $p_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $0 = __stackBase__ + 12;
      var $uenc = __stackBase__ + 16;
      var $c = __stackBase__ + 20;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$p_addr] = $p;
      
      var $2 = HEAP[$enc_addr];
      HEAP[$uenc] = $2;
      
      
      var $5 = HEAP[HEAP[$uenc] + 368];
      
      
      var $8 = HEAP[HEAP[$uenc] + 372];
      var $9 = HEAP[$p_addr];
      var $10 = FUNCTION_TABLE[$5]($8, $9);
      HEAP[$c] = $10;
      
      var $12 = HEAP[$c] & -65536;
      
      if ($12 != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = 0;
      __label__ = 3;
      break;
     case 2:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      var $29 = HEAP[_namingBitmap + ((HEAP[_nmstrtPages + (HEAP[$c] >> 8)] << 3) + ((HEAP[$c] & 255) >> 5)) * 4] & 1 << (HEAP[$c] & 31);
      HEAP[$0] = $29;
      __label__ = 3;
      break;
     case 3:
      var $30 = HEAP[$0];
      HEAP[$retval] = $30;
      __label__ = 4;
      break;
     case 4:
      var $retval3 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval3;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _unknown_isInvalid($enc, $p) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $p_addr = __stackBase__ + 4;
      var $retval = __stackBase__ + 8;
      var $iftmp_1424 = __stackBase__ + 12;
      var $0 = __stackBase__ + 16;
      var $uenc = __stackBase__ + 20;
      var $c = __stackBase__ + 24;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$p_addr] = $p;
      
      var $2 = HEAP[$enc_addr];
      HEAP[$uenc] = $2;
      
      
      var $5 = HEAP[HEAP[$uenc] + 368];
      
      
      var $8 = HEAP[HEAP[$uenc] + 372];
      var $9 = HEAP[$p_addr];
      var $10 = FUNCTION_TABLE[$5]($8, $9);
      HEAP[$c] = $10;
      
      var $12 = HEAP[$c] & -65536;
      
      if ($12 != 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 1;
        break;
      }
     case 1:
      var $14 = HEAP[$c];
      var $15 = _checkCharRefNumber($14);
      
      if ($15 < 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      HEAP[$iftmp_1424] = 1;
      __label__ = 4;
      break;
     case 3:
      HEAP[$iftmp_1424] = 0;
      __label__ = 4;
      break;
     case 4:
      var $17 = HEAP[$iftmp_1424];
      HEAP[$0] = $17;
      var $18 = HEAP[$0];
      HEAP[$retval] = $18;
      __label__ = 5;
      break;
     case 5:
      var $retval4 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval4;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _unknown_toUtf8($enc, $fromP, $fromLim, $toP, $toLim) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 40;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $fromP_addr = __stackBase__ + 4;
      var $fromLim_addr = __stackBase__ + 8;
      var $toP_addr = __stackBase__ + 12;
      var $toLim_addr = __stackBase__ + 16;
      var $uenc = __stackBase__ + 20;
      var $buf = __stackBase__ + 24;
      var $utf8 = __stackBase__ + 28;
      var $n = __stackBase__ + 32;
      var $c = __stackBase__ + 36;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$fromP_addr] = $fromP;
      HEAP[$fromLim_addr] = $fromLim;
      HEAP[$toP_addr] = $toP;
      HEAP[$toLim_addr] = $toLim;
      
      var $1 = HEAP[$enc_addr];
      HEAP[$uenc] = $1;
      __label__ = 1;
      break;
     case 1:
      
      
      
      
      if (HEAP[HEAP[$fromP_addr]] == HEAP[$fromLim_addr]) {
        __label__ = 9;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 2:
      
      
      
      
      
      
      
      var $13 = HEAP[$uenc] + 888 + HEAP[HEAP[HEAP[$fromP_addr]]] * 4;
      HEAP[$utf8] = $13;
      
      
      var $16 = HEAP[HEAP[$utf8]];
      HEAP[$n] = $16;
      
      var $18 = HEAP[$utf8] + 1;
      HEAP[$utf8] = $18;
      
      
      if (HEAP[$n] == 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 3:
      
      
      var $23 = HEAP[HEAP[$uenc] + 368];
      
      var $25 = HEAP[HEAP[$fromP_addr]];
      
      
      var $28 = HEAP[HEAP[$uenc] + 372];
      var $29 = FUNCTION_TABLE[$23]($28, $25);
      HEAP[$c] = $29;
      var $30 = HEAP[$c];
      var $buf3 = $buf;
      var $31 = _PyExpat_XmlUtf8Encode($30, $buf3);
      HEAP[$n] = $31;
      
      
      
      
      
      
      
      
      if (HEAP[$toLim_addr] - HEAP[HEAP[$toP_addr]] < HEAP[$n]) {
        __label__ = 9;
        break;
      } else {
        __label__ = 4;
        break;
      }
     case 4:
      
      HEAP[$utf8] = $buf;
      
      
      
      
      
      
      
      
      
      
      
      
      
      var $53 = HEAP[HEAP[$fromP_addr]] + (HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[HEAP[$fromP_addr]]]] - 3);
      var $54 = HEAP[$fromP_addr];
      HEAP[$54] = $53;
      __label__ = 7;
      break;
     case 5:
      
      
      
      
      
      
      
      
      if (HEAP[$toLim_addr] - HEAP[HEAP[$toP_addr]] < HEAP[$n]) {
        __label__ = 9;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 6:
      
      
      var $65 = HEAP[HEAP[$fromP_addr]] + 1;
      var $66 = HEAP[$fromP_addr];
      HEAP[$66] = $65;
      __label__ = 7;
      break;
     case 7:
      
      var $68 = HEAP[HEAP[$toP_addr]];
      
      var $70 = HEAP[HEAP[$utf8]];
      HEAP[$68] = $70;
      var $71 = $68 + 1;
      var $72 = HEAP[$toP_addr];
      HEAP[$72] = $71;
      
      var $74 = HEAP[$utf8] + 1;
      HEAP[$utf8] = $74;
      
      var $76 = HEAP[$n] - 1;
      HEAP[$n] = $76;
      
      
      if (HEAP[$n] != 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 8:
      __label__ = 1;
      break;
     case 9:
      __label__ = 10;
      break;
     case 10:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _unknown_toUtf16($enc, $fromP, $fromLim, $toP, $toLim) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 26;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 26);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $fromP_addr = __stackBase__ + 4;
      var $fromLim_addr = __stackBase__ + 8;
      var $toP_addr = __stackBase__ + 12;
      var $toLim_addr = __stackBase__ + 16;
      var $uenc = __stackBase__ + 20;
      var $c = __stackBase__ + 24;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$fromP_addr] = $fromP;
      HEAP[$fromLim_addr] = $fromLim;
      HEAP[$toP_addr] = $toP;
      HEAP[$toLim_addr] = $toLim;
      
      var $1 = HEAP[$enc_addr];
      HEAP[$uenc] = $1;
      __label__ = 5;
      break;
     case 1:
      
      
      
      
      
      
      
      var $9 = HEAP[HEAP[$uenc] + 376 + HEAP[HEAP[HEAP[$fromP_addr]]] * 2];
      HEAP[$c] = $9;
      
      
      if (HEAP[$c] == 0) {
        __label__ = 2;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 2:
      
      
      var $14 = HEAP[HEAP[$uenc] + 368];
      
      var $16 = HEAP[HEAP[$fromP_addr]];
      
      
      var $19 = HEAP[HEAP[$uenc] + 372];
      var $20 = FUNCTION_TABLE[$14]($19, $16);
      var $21 = $20 & 65535;
      HEAP[$c] = $21;
      
      
      
      
      
      
      
      
      
      
      
      
      
      var $35 = HEAP[HEAP[$fromP_addr]] + (HEAP[HEAP[$enc_addr] + 76 + HEAP[HEAP[HEAP[$fromP_addr]]]] - 3);
      var $36 = HEAP[$fromP_addr];
      HEAP[$36] = $35;
      __label__ = 4;
      break;
     case 3:
      
      
      var $39 = HEAP[HEAP[$fromP_addr]] + 1;
      var $40 = HEAP[$fromP_addr];
      HEAP[$40] = $39;
      __label__ = 4;
      break;
     case 4:
      
      var $42 = HEAP[HEAP[$toP_addr]];
      var $43 = HEAP[$c];
      HEAP[$42] = $43;
      var $44 = $42 + 2;
      var $45 = HEAP[$toP_addr];
      HEAP[$45] = $44;
      __label__ = 5;
      break;
     case 5:
      
      
      
      
      if (HEAP[HEAP[$fromP_addr]] == HEAP[$fromLim_addr]) {
        __label__ = 7;
        break;
      } else {
        __label__ = 6;
        break;
      }
     case 6:
      
      
      
      
      if (HEAP[HEAP[$toP_addr]] != HEAP[$toLim_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 7:
      __label__ = 8;
      break;
     case 8:
      STACKTOP = __stackBase__;
      return;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XmlInitUnknownEncoding($mem, $table, $convert, $userData) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 38;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 38);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $mem_addr = __stackBase__;
      var $table_addr = __stackBase__ + 4;
      var $convert_addr = __stackBase__ + 8;
      var $userData_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $iftmp_1447 = __stackBase__ + 20;
      var $0 = __stackBase__ + 22;
      var $i = __stackBase__ + 26;
      var $e = __stackBase__ + 30;
      var $c = __stackBase__ + 34;
      
      HEAP[$mem_addr] = $mem;
      HEAP[$table_addr] = $table;
      HEAP[$convert_addr] = $convert;
      HEAP[$userData_addr] = $userData;
      
      var $2 = HEAP[$mem_addr];
      HEAP[$e] = $2;
      HEAP[$i] = 0;
      __label__ = 2;
      break;
     case 1:
      
      
      
      var $6 = HEAP[_latin1_encoding + HEAP[$i]];
      
      var $8 = HEAP[$mem_addr] + HEAP[$i];
      HEAP[$8] = $6;
      
      var $10 = HEAP[$i] + 1;
      HEAP[$i] = $10;
      __label__ = 2;
      break;
     case 2:
      
      
      if (HEAP[$i] <= 367) {
        __label__ = 1;
        break;
      } else {
        __label__ = 3;
        break;
      }
     case 3:
      HEAP[$i] = 0;
      __label__ = 9;
      break;
     case 4:
      
      
      
      
      if (HEAP[_latin1_encoding + 76 + HEAP[$i]] != 28) {
        __label__ = 5;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 5:
      
      
      
      
      if (HEAP[_latin1_encoding + 76 + HEAP[$i]] != 0) {
        __label__ = 6;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 6:
      
      
      
      
      
      
      if (HEAP[HEAP[$table_addr] + 4 * HEAP[$i]] != HEAP[$i]) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      HEAP[$0] = 0;
      __label__ = 41;
      break;
     case 8:
      
      var $28 = HEAP[$i] + 1;
      HEAP[$i] = $28;
      __label__ = 9;
      break;
     case 9:
      
      
      if (HEAP[$i] <= 127) {
        __label__ = 4;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 10:
      HEAP[$i] = 0;
      __label__ = 37;
      break;
     case 11:
      
      
      
      var $34 = HEAP[HEAP[$table_addr] + 4 * HEAP[$i]];
      HEAP[$c] = $34;
      
      var $36 = HEAP[$c] == -1;
      if ($36) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      
      
      
      
      var $41 = HEAP[$e] + 76 + HEAP[$i];
      HEAP[$41] = 1;
      
      
      
      var $45 = HEAP[$e] + 376 + HEAP[$i] * 2;
      HEAP[$45] = -1;
      
      
      
      
      var $50 = HEAP[$e] + 888 + HEAP[$i] * 4;
      HEAP[$50] = 1;
      
      
      
      
      var $55 = HEAP[$e] + 888 + HEAP[$i] * 4 + 1;
      HEAP[$55] = 0;
      __label__ = 36;
      break;
     case 13:
      
      
      if (HEAP[$c] < 0) {
        __label__ = 14;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 14:
      
      var $59 = HEAP[$c] < -4;
      if ($59) {
        __label__ = 15;
        break;
      } else {
        __label__ = 16;
        break;
      }
     case 15:
      HEAP[$0] = 0;
      __label__ = 41;
      break;
     case 16:
      
      
      
      var $63 = 3 - (HEAP[$c] & 255);
      
      
      
      var $67 = HEAP[$e] + 76 + HEAP[$i];
      HEAP[$67] = $63;
      
      
      
      
      var $72 = HEAP[$e] + 888 + HEAP[$i] * 4;
      HEAP[$72] = 0;
      
      
      
      var $76 = HEAP[$e] + 376 + HEAP[$i] * 2;
      HEAP[$76] = 0;
      __label__ = 36;
      break;
     case 17:
      
      
      if (HEAP[$c] <= 127) {
        __label__ = 18;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 18:
      
      
      
      
      if (HEAP[_latin1_encoding + 76 + HEAP[$c]] != 28) {
        __label__ = 19;
        break;
      } else {
        __label__ = 22;
        break;
      }
     case 19:
      
      
      
      
      if (HEAP[_latin1_encoding + 76 + HEAP[$c]] != 0) {
        __label__ = 20;
        break;
      } else {
        __label__ = 22;
        break;
      }
     case 20:
      
      
      
      if (HEAP[$c] != HEAP[$i]) {
        __label__ = 21;
        break;
      } else {
        __label__ = 22;
        break;
      }
     case 21:
      HEAP[$0] = 0;
      __label__ = 41;
      break;
     case 22:
      
      
      
      var $93 = HEAP[_latin1_encoding + 76 + HEAP[$c]];
      
      
      
      var $97 = HEAP[$e] + 76 + HEAP[$i];
      HEAP[$97] = $93;
      
      
      
      
      var $102 = HEAP[$e] + 888 + HEAP[$i] * 4;
      HEAP[$102] = 1;
      
      
      var $105 = HEAP[$c] & 255;
      
      
      
      var $109 = HEAP[$e] + 888 + HEAP[$i] * 4 + 1;
      HEAP[$109] = $105;
      var $110 = HEAP[$i];
      
      
      if (HEAP[$c] != 0) {
        __label__ = 23;
        break;
      } else {
        __label__ = 24;
        break;
      }
     case 23:
      
      var $114 = HEAP[$c] & 65535;
      HEAP[$iftmp_1447] = $114;
      __label__ = 25;
      break;
     case 24:
      HEAP[$iftmp_1447] = -1;
      __label__ = 25;
      break;
     case 25:
      
      
      var $117 = HEAP[$e] + 376 + $110 * 2;
      var $118 = HEAP[$iftmp_1447];
      HEAP[$117] = $118;
      __label__ = 36;
      break;
     case 26:
      var $119 = HEAP[$c];
      var $120 = _checkCharRefNumber($119);
      
      if ($120 < 0) {
        __label__ = 27;
        break;
      } else {
        __label__ = 28;
        break;
      }
     case 27:
      
      
      
      
      var $126 = HEAP[$e] + 76 + HEAP[$i];
      HEAP[$126] = 0;
      
      
      
      var $130 = HEAP[$e] + 376 + HEAP[$i] * 2;
      HEAP[$130] = -1;
      
      
      
      
      var $135 = HEAP[$e] + 888 + HEAP[$i] * 4;
      HEAP[$135] = 1;
      
      
      
      
      var $140 = HEAP[$e] + 888 + HEAP[$i] * 4 + 1;
      HEAP[$140] = 0;
      __label__ = 36;
      break;
     case 28:
      
      
      if (HEAP[$c] > 65535) {
        __label__ = 29;
        break;
      } else {
        __label__ = 30;
        break;
      }
     case 29:
      HEAP[$0] = 0;
      __label__ = 41;
      break;
     case 30:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_nmstrtPages + (HEAP[$c] >> 8)] << 3) + ((HEAP[$c] & 255) >> 5)) * 4] & 1 << (HEAP[$c] & 31)) != 0) {
        __label__ = 31;
        break;
      } else {
        __label__ = 32;
        break;
      }
     case 31:
      
      
      
      
      var $164 = HEAP[$e] + 76 + HEAP[$i];
      HEAP[$164] = 22;
      __label__ = 35;
      break;
     case 32:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if ((HEAP[_namingBitmap + ((HEAP[_namePages + (HEAP[$c] >> 8)] << 3) + ((HEAP[$c] & 255) >> 5)) * 4] & 1 << (HEAP[$c] & 31)) != 0) {
        __label__ = 33;
        break;
      } else {
        __label__ = 34;
        break;
      }
     case 33:
      
      
      
      
      var $186 = HEAP[$e] + 76 + HEAP[$i];
      HEAP[$186] = 26;
      __label__ = 35;
      break;
     case 34:
      
      
      
      
      var $191 = HEAP[$e] + 76 + HEAP[$i];
      HEAP[$191] = 28;
      __label__ = 35;
      break;
     case 35:
      var $192 = HEAP[$i];
      
      
      
      
      
      var $198 = HEAP[$e] + 888 + HEAP[$i] * 4 + 1;
      var $199 = HEAP[$c];
      var $200 = _PyExpat_XmlUtf8Encode($199, $198);
      var $201 = $200 & 255;
      
      
      
      var $205 = HEAP[$e] + 888 + $192 * 4;
      HEAP[$205] = $201;
      
      
      var $208 = HEAP[$c] & 65535;
      
      
      var $211 = HEAP[$e] + 376 + HEAP[$i] * 2;
      HEAP[$211] = $208;
      __label__ = 36;
      break;
     case 36:
      
      var $213 = HEAP[$i] + 1;
      HEAP[$i] = $213;
      __label__ = 37;
      break;
     case 37:
      
      
      if (HEAP[$i] <= 255) {
        __label__ = 11;
        break;
      } else {
        __label__ = 38;
        break;
      }
     case 38:
      
      var $217 = HEAP[$e] + 372;
      var $218 = HEAP[$userData_addr];
      HEAP[$217] = $218;
      
      var $220 = HEAP[$e] + 368;
      var $221 = HEAP[$convert_addr];
      HEAP[$220] = $221;
      
      
      if (HEAP[$convert_addr] != 0) {
        __label__ = 39;
        break;
      } else {
        __label__ = 40;
        break;
      }
     case 39:
      
      
      var $226 = HEAP[$e] + 332;
      HEAP[$226] = FUNCTION_TABLE_OFFSET + 194;
      
      
      var $229 = HEAP[$e] + 336;
      HEAP[$229] = FUNCTION_TABLE_OFFSET + 194;
      
      
      var $232 = HEAP[$e] + 340;
      HEAP[$232] = FUNCTION_TABLE_OFFSET + 194;
      
      
      var $235 = HEAP[$e] + 344;
      HEAP[$235] = FUNCTION_TABLE_OFFSET + 196;
      
      
      var $238 = HEAP[$e] + 348;
      HEAP[$238] = FUNCTION_TABLE_OFFSET + 196;
      
      
      var $241 = HEAP[$e] + 352;
      HEAP[$241] = FUNCTION_TABLE_OFFSET + 196;
      
      
      var $244 = HEAP[$e] + 356;
      HEAP[$244] = FUNCTION_TABLE_OFFSET + 198;
      
      
      var $247 = HEAP[$e] + 360;
      HEAP[$247] = FUNCTION_TABLE_OFFSET + 198;
      
      
      var $250 = HEAP[$e] + 364;
      HEAP[$250] = FUNCTION_TABLE_OFFSET + 198;
      __label__ = 40;
      break;
     case 40:
      
      
      
      var $254 = HEAP[$e] + 60;
      HEAP[$254] = FUNCTION_TABLE_OFFSET + 200;
      
      
      
      var $258 = HEAP[$e] + 64;
      HEAP[$258] = FUNCTION_TABLE_OFFSET + 202;
      
      
      var $261 = HEAP[$e];
      HEAP[$0] = $261;
      __label__ = 41;
      break;
     case 41:
      var $262 = HEAP[$0];
      HEAP[$retval] = $262;
      __label__ = 42;
      break;
     case 42:
      var $retval41 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval41;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _getEncodingIndex($name) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 16;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $name_addr = __stackBase__;
      var $retval = __stackBase__ + 4;
      var $0 = __stackBase__ + 8;
      var $i = __stackBase__ + 12;
      
      HEAP[$name_addr] = $name;
      
      
      if (HEAP[$name_addr] == 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = 6;
      __label__ = 8;
      break;
     case 2:
      HEAP[$i] = 0;
      __label__ = 6;
      break;
     case 3:
      
      
      var $5 = HEAP[_encodingNames_12940 + HEAP[$i] * 4];
      var $6 = HEAP[$name_addr];
      var $7 = _streqci($6, $5);
      
      if ($7 != 0) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      var $9 = HEAP[$i];
      HEAP[$0] = $9;
      __label__ = 8;
      break;
     case 5:
      
      var $11 = HEAP[$i] + 1;
      HEAP[$i] = $11;
      __label__ = 6;
      break;
     case 6:
      
      
      if (HEAP[$i] <= 5) {
        __label__ = 3;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 7:
      HEAP[$0] = -1;
      __label__ = 8;
      break;
     case 8:
      var $14 = HEAP[$0];
      HEAP[$retval] = $14;
      __label__ = 9;
      break;
     case 9:
      var $retval8 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval8;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _initScan($encodingTable, $enc, $state, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 40;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $encodingTable_addr = __stackBase__;
      var $enc_addr = __stackBase__ + 4;
      var $state_addr = __stackBase__ + 8;
      var $ptr_addr = __stackBase__ + 12;
      var $end_addr = __stackBase__ + 16;
      var $nextTokPtr_addr = __stackBase__ + 20;
      var $retval = __stackBase__ + 24;
      var $0 = __stackBase__ + 28;
      var $encPtr = __stackBase__ + 32;
      var $e = __stackBase__ + 36;
      
      HEAP[$encodingTable_addr] = $encodingTable;
      HEAP[$enc_addr] = $enc;
      HEAP[$state_addr] = $state;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      
      
      if (HEAP[$ptr_addr] == HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = -4;
      __label__ = 39;
      break;
     case 2:
      
      
      var $6 = HEAP[HEAP[$enc_addr] + 76];
      HEAP[$encPtr] = $6;
      
      
      
      
      if (HEAP[$ptr_addr] + 1 == HEAP[$end_addr]) {
        __label__ = 3;
        break;
      } else {
        __label__ = 10;
        break;
      }
     case 3:
      
      
      
      
      var $15 = HEAP[HEAP[$enc_addr] + 73];
      if ($15 == 3) {
        __label__ = 4;
        break;
      } else if ($15 == 4) {
        __label__ = 4;
        break;
      } else if ($15 == 5) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      HEAP[$0] = -1;
      __label__ = 39;
      break;
     case 5:
      
      
      var $18 = HEAP[HEAP[$ptr_addr]];
      if ($18 == 0) {
        __label__ = 8;
        break;
      } else if ($18 == 60) {
        __label__ = 8;
        break;
      } else if ($18 == 239) {
        __label__ = 6;
        break;
      } else if ($18 == 254) {
        __label__ = 6;
        break;
      } else if ($18 == 255) {
        __label__ = 6;
        break;
      } else {
        __label__ = 9;
        break;
      }
     case 6:
      
      
      
      
      
      if (HEAP[HEAP[$enc_addr] + 73] == 0) {
        __label__ = 7;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 7:
      
      
      if (HEAP[$state_addr] == 1) {
        __label__ = 9;
        break;
      } else {
        __label__ = 8;
        break;
      }
     case 8:
      HEAP[$0] = -1;
      __label__ = 39;
      break;
     case 9:
      __label__ = 38;
      break;
     case 10:
      
      
      
      
      
      
      
      
      
      var $35 = HEAP[HEAP[$ptr_addr]] << 8 | HEAP[HEAP[$ptr_addr] + 1];
      if ($35 == 15360) {
        __label__ = 14;
        break;
      } else if ($35 == 61371) {
        __label__ = 21;
        break;
      } else if ($35 == 65279) {
        __label__ = 11;
        break;
      } else if ($35 == 65534) {
        __label__ = 18;
        break;
      } else {
        __label__ = 31;
        break;
      }
     case 11:
      
      
      
      
      
      if (HEAP[HEAP[$enc_addr] + 73] == 0) {
        __label__ = 12;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 12:
      
      
      if (HEAP[$state_addr] == 1) {
        __label__ = 38;
        break;
      } else {
        __label__ = 13;
        break;
      }
     case 13:
      
      var $44 = HEAP[$ptr_addr] + 2;
      var $45 = HEAP[$nextTokPtr_addr];
      HEAP[$45] = $44;
      
      
      var $48 = HEAP[HEAP[$encodingTable_addr] + 16];
      var $49 = HEAP[$encPtr];
      HEAP[$49] = $48;
      HEAP[$0] = 14;
      __label__ = 39;
      break;
     case 14:
      
      
      
      
      
      if (HEAP[HEAP[$enc_addr] + 73] == 4) {
        __label__ = 16;
        break;
      } else {
        __label__ = 15;
        break;
      }
     case 15:
      
      
      
      
      
      if (HEAP[HEAP[$enc_addr] + 73] == 3) {
        __label__ = 16;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 16:
      
      
      if (HEAP[$state_addr] == 1) {
        __label__ = 38;
        break;
      } else {
        __label__ = 17;
        break;
      }
     case 17:
      
      
      var $64 = HEAP[HEAP[$encodingTable_addr] + 20];
      var $65 = HEAP[$encPtr];
      HEAP[$65] = $64;
      
      
      
      
      
      var $71 = HEAP[HEAP[HEAP[$encPtr]] + HEAP[$state_addr] * 4];
      
      var $73 = HEAP[HEAP[$encPtr]];
      var $74 = HEAP[$ptr_addr];
      var $75 = HEAP[$end_addr];
      var $76 = HEAP[$nextTokPtr_addr];
      var $77 = FUNCTION_TABLE[$71]($73, $74, $75, $76);
      HEAP[$0] = $77;
      __label__ = 39;
      break;
     case 18:
      
      
      
      
      
      if (HEAP[HEAP[$enc_addr] + 73] == 0) {
        __label__ = 19;
        break;
      } else {
        __label__ = 20;
        break;
      }
     case 19:
      
      
      if (HEAP[$state_addr] == 1) {
        __label__ = 38;
        break;
      } else {
        __label__ = 20;
        break;
      }
     case 20:
      
      var $86 = HEAP[$ptr_addr] + 2;
      var $87 = HEAP[$nextTokPtr_addr];
      HEAP[$87] = $86;
      
      
      var $90 = HEAP[HEAP[$encodingTable_addr] + 20];
      var $91 = HEAP[$encPtr];
      HEAP[$91] = $90;
      HEAP[$0] = 14;
      __label__ = 39;
      break;
     case 21:
      
      
      if (HEAP[$state_addr] == 1) {
        __label__ = 22;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 22:
      
      
      
      
      var $98 = HEAP[HEAP[$enc_addr] + 73];
      HEAP[$e] = $98;
      
      
      if (HEAP[$e] == 0) {
        __label__ = 38;
        break;
      } else {
        __label__ = 23;
        break;
      }
     case 23:
      
      
      if (HEAP[$e] == 4) {
        __label__ = 38;
        break;
      } else {
        __label__ = 24;
        break;
      }
     case 24:
      
      
      if (HEAP[$e] == 5) {
        __label__ = 38;
        break;
      } else {
        __label__ = 25;
        break;
      }
     case 25:
      
      
      if (HEAP[$e] == 3) {
        __label__ = 38;
        break;
      } else {
        __label__ = 26;
        break;
      }
     case 26:
      
      
      
      
      if (HEAP[$ptr_addr] + 2 == HEAP[$end_addr]) {
        __label__ = 27;
        break;
      } else {
        __label__ = 28;
        break;
      }
     case 27:
      HEAP[$0] = -1;
      __label__ = 39;
      break;
     case 28:
      
      
      
      var $114 = HEAP[HEAP[$ptr_addr] + 2] == -65;
      if ($114) {
        __label__ = 29;
        break;
      } else {
        __label__ = 30;
        break;
      }
     case 29:
      
      var $116 = HEAP[$ptr_addr] + 3;
      var $117 = HEAP[$nextTokPtr_addr];
      HEAP[$117] = $116;
      
      
      var $120 = HEAP[HEAP[$encodingTable_addr] + 8];
      var $121 = HEAP[$encPtr];
      HEAP[$121] = $120;
      HEAP[$0] = 14;
      __label__ = 39;
      break;
     case 30:
      __label__ = 38;
      break;
     case 31:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr]] == 0) {
        __label__ = 32;
        break;
      } else {
        __label__ = 35;
        break;
      }
     case 32:
      
      
      if (HEAP[$state_addr] == 1) {
        __label__ = 33;
        break;
      } else {
        __label__ = 34;
        break;
      }
     case 33:
      
      
      
      
      
      if (HEAP[HEAP[$enc_addr] + 73] == 5) {
        __label__ = 38;
        break;
      } else {
        __label__ = 34;
        break;
      }
     case 34:
      
      
      var $135 = HEAP[HEAP[$encodingTable_addr] + 16];
      var $136 = HEAP[$encPtr];
      HEAP[$136] = $135;
      
      
      
      
      
      var $142 = HEAP[HEAP[HEAP[$encPtr]] + HEAP[$state_addr] * 4];
      
      var $144 = HEAP[HEAP[$encPtr]];
      var $145 = HEAP[$ptr_addr];
      var $146 = HEAP[$end_addr];
      var $147 = HEAP[$nextTokPtr_addr];
      var $148 = FUNCTION_TABLE[$142]($144, $145, $146, $147);
      HEAP[$0] = $148;
      __label__ = 39;
      break;
     case 35:
      
      
      
      
      if (HEAP[HEAP[$ptr_addr] + 1] == 0) {
        __label__ = 36;
        break;
      } else {
        __label__ = 38;
        break;
      }
     case 36:
      
      
      if (HEAP[$state_addr] == 1) {
        __label__ = 38;
        break;
      } else {
        __label__ = 37;
        break;
      }
     case 37:
      
      
      var $157 = HEAP[HEAP[$encodingTable_addr] + 20];
      var $158 = HEAP[$encPtr];
      HEAP[$158] = $157;
      
      
      
      
      
      var $164 = HEAP[HEAP[HEAP[$encPtr]] + HEAP[$state_addr] * 4];
      
      var $166 = HEAP[HEAP[$encPtr]];
      var $167 = HEAP[$ptr_addr];
      var $168 = HEAP[$end_addr];
      var $169 = HEAP[$nextTokPtr_addr];
      var $170 = FUNCTION_TABLE[$164]($166, $167, $168, $169);
      HEAP[$0] = $170;
      __label__ = 39;
      break;
     case 38:
      
      
      
      
      
      
      
      var $178 = HEAP[HEAP[$encodingTable_addr] + 4 * HEAP[HEAP[$enc_addr] + 73]];
      var $179 = HEAP[$encPtr];
      HEAP[$179] = $178;
      
      
      
      
      
      var $185 = HEAP[HEAP[HEAP[$encPtr]] + HEAP[$state_addr] * 4];
      
      var $187 = HEAP[HEAP[$encPtr]];
      var $188 = HEAP[$ptr_addr];
      var $189 = HEAP[$end_addr];
      var $190 = HEAP[$nextTokPtr_addr];
      var $191 = FUNCTION_TABLE[$185]($187, $188, $189, $190);
      HEAP[$0] = $191;
      __label__ = 39;
      break;
     case 39:
      var $192 = HEAP[$0];
      HEAP[$retval] = $192;
      __label__ = 40;
      break;
     case 40:
      var $retval39 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval39;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XmlGetUtf8InternalEncoding() {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $retval = __stackBase__;
      
      
      HEAP[__stackBase__ + 4] = _internal_utf8_encoding;
      var $1 = HEAP[__stackBase__ + 4];
      HEAP[$retval] = $1;
      __label__ = 1;
      break;
     case 1:
      var $retval1 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval1;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XmlGetUtf16InternalEncoding() {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $retval = __stackBase__;
      
      
      HEAP[__stackBase__ + 4] = _internal_little2_encoding;
      var $1 = HEAP[__stackBase__ + 4];
      HEAP[$retval] = $1;
      __label__ = 1;
      break;
     case 1:
      var $retval1 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval1;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _initScanProlog($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 24;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      var $2 = HEAP[$enc_addr];
      var $3 = HEAP[$ptr_addr];
      var $4 = HEAP[$end_addr];
      var $5 = HEAP[$nextTokPtr_addr];
      var $6 = _initScan(_encodings, $2, 0, $3, $4, $5);
      HEAP[$0] = $6;
      var $7 = HEAP[$0];
      HEAP[$retval] = $7;
      __label__ = 1;
      break;
     case 1:
      var $retval1 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval1;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _initScanContent($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 24;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      var $2 = HEAP[$enc_addr];
      var $3 = HEAP[$ptr_addr];
      var $4 = HEAP[$end_addr];
      var $5 = HEAP[$nextTokPtr_addr];
      var $6 = _initScan(_encodings, $2, 1, $3, $4, $5);
      HEAP[$0] = $6;
      var $7 = HEAP[$0];
      HEAP[$retval] = $7;
      __label__ = 1;
      break;
     case 1:
      var $retval1 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval1;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XmlInitEncoding($p, $encPtr, $name) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 24;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $p_addr = __stackBase__;
      var $encPtr_addr = __stackBase__ + 4;
      var $name_addr = __stackBase__ + 8;
      var $retval = __stackBase__ + 12;
      var $0 = __stackBase__ + 16;
      var $i = __stackBase__ + 20;
      
      HEAP[$p_addr] = $p;
      HEAP[$encPtr_addr] = $encPtr;
      HEAP[$name_addr] = $name;
      var $1 = HEAP[$name_addr];
      var $2 = _getEncodingIndex($1);
      HEAP[$i] = $2;
      
      var $4 = HEAP[$i] == -1;
      if ($4) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = 0;
      __label__ = 3;
      break;
     case 2:
      
      var $6 = HEAP[$i] & 255;
      
      
      var $9 = HEAP[$p_addr] + 73;
      HEAP[$9] = $6;
      
      
      
      var $13 = HEAP[$p_addr];
      HEAP[$13] = FUNCTION_TABLE_OFFSET + 204;
      
      
      
      var $17 = HEAP[$p_addr] + 4;
      HEAP[$17] = FUNCTION_TABLE_OFFSET + 206;
      
      
      var $20 = HEAP[$p_addr] + 52;
      HEAP[$20] = FUNCTION_TABLE_OFFSET + 208;
      
      var $22 = HEAP[$p_addr] + 76;
      var $23 = HEAP[$encPtr_addr];
      HEAP[$22] = $23;
      
      var $25 = HEAP[$p_addr];
      var $26 = HEAP[$encPtr_addr];
      HEAP[$26] = $25;
      HEAP[$0] = 1;
      __label__ = 3;
      break;
     case 3:
      var $27 = HEAP[$0];
      HEAP[$retval] = $27;
      __label__ = 4;
      break;
     case 4:
      var $retval3 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval3;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _findEncoding($enc, $ptr, $end) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 156;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 156);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $retval = __stackBase__ + 12;
      var $0 = __stackBase__ + 16;
      var $buf = __stackBase__ + 20;
      var $p = __stackBase__ + 148;
      var $i = __stackBase__ + 152;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      
      HEAP[$p] = $buf;
      
      
      var $3 = HEAP[HEAP[$enc_addr] + 60];
      
      
      var $6 = HEAP[$p] + 128 + -1;
      var $7 = HEAP[$enc_addr];
      var $8 = HEAP[$end_addr];
      FUNCTION_TABLE[$3]($7, $ptr_addr, $8, $p, $6);
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = 0;
      __label__ = 8;
      break;
     case 2:
      var $12 = HEAP[$p];
      HEAP[$12] = 0;
      var $buf3 = $buf;
      var $13 = _streqci($buf3, _KW_UTF_16);
      
      if ($13 != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 3:
      
      
      
      
      if (HEAP[HEAP[$enc_addr] + 68] == 2) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      var $19 = HEAP[$enc_addr];
      HEAP[$0] = $19;
      __label__ = 8;
      break;
     case 5:
      var $buf7 = $buf;
      var $20 = _getEncodingIndex($buf7);
      HEAP[$i] = $20;
      
      var $22 = HEAP[$i] == -1;
      if ($22) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      HEAP[$0] = 0;
      __label__ = 8;
      break;
     case 7:
      
      
      var $25 = HEAP[_encodings + HEAP[$i] * 4];
      HEAP[$0] = $25;
      __label__ = 8;
      break;
     case 8:
      var $26 = HEAP[$0];
      HEAP[$retval] = $26;
      __label__ = 9;
      break;
     case 9:
      var $retval11 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval11;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XmlParseXmlDecl($isGeneralTextEntity, $enc, $ptr, $end, $badPtr, $versionPtr, $versionEndPtr, $encodingName, $encoding, $standalone) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 48;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 48);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $isGeneralTextEntity_addr = __stackBase__;
      var $enc_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $badPtr_addr = __stackBase__ + 16;
      var $versionPtr_addr = __stackBase__ + 20;
      var $versionEndPtr_addr = __stackBase__ + 24;
      var $encodingName_addr = __stackBase__ + 28;
      var $encoding_addr = __stackBase__ + 32;
      var $standalone_addr = __stackBase__ + 36;
      var $retval = __stackBase__ + 40;
      var $0 = __stackBase__ + 44;
      
      HEAP[$isGeneralTextEntity_addr] = $isGeneralTextEntity;
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$badPtr_addr] = $badPtr;
      HEAP[$versionPtr_addr] = $versionPtr;
      HEAP[$versionEndPtr_addr] = $versionEndPtr;
      HEAP[$encodingName_addr] = $encodingName;
      HEAP[$encoding_addr] = $encoding;
      HEAP[$standalone_addr] = $standalone;
      var $1 = HEAP[$isGeneralTextEntity_addr];
      var $2 = HEAP[$enc_addr];
      var $3 = HEAP[$ptr_addr];
      var $4 = HEAP[$end_addr];
      var $5 = HEAP[$badPtr_addr];
      var $6 = HEAP[$versionPtr_addr];
      var $7 = HEAP[$versionEndPtr_addr];
      var $8 = HEAP[$encodingName_addr];
      var $9 = HEAP[$encoding_addr];
      var $10 = HEAP[$standalone_addr];
      var $11 = _doParseXmlDecl(FUNCTION_TABLE_OFFSET + 210, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10);
      HEAP[$0] = $11;
      var $12 = HEAP[$0];
      HEAP[$retval] = $12;
      __label__ = 1;
      break;
     case 1:
      var $retval1 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval1;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XmlGetUtf8InternalEncodingNS() {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $retval = __stackBase__;
      
      
      HEAP[__stackBase__ + 4] = _internal_utf8_encoding_ns;
      var $1 = HEAP[__stackBase__ + 4];
      HEAP[$retval] = $1;
      __label__ = 1;
      break;
     case 1:
      var $retval1 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval1;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XmlGetUtf16InternalEncodingNS() {
    var __stackBase__ = STACKTOP;
    STACKTOP += 8;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $retval = __stackBase__;
      
      
      HEAP[__stackBase__ + 4] = _internal_little2_encoding_ns;
      var $1 = HEAP[__stackBase__ + 4];
      HEAP[$retval] = $1;
      __label__ = 1;
      break;
     case 1:
      var $retval1 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval1;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _initScanPrologNS($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 24;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      var $2 = HEAP[$enc_addr];
      var $3 = HEAP[$ptr_addr];
      var $4 = HEAP[$end_addr];
      var $5 = HEAP[$nextTokPtr_addr];
      var $6 = _initScan(_encodingsNS, $2, 0, $3, $4, $5);
      HEAP[$0] = $6;
      var $7 = HEAP[$0];
      HEAP[$retval] = $7;
      __label__ = 1;
      break;
     case 1:
      var $retval1 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval1;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _initScanContentNS($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 24;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $nextTokPtr_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$nextTokPtr_addr] = $nextTokPtr;
      
      var $2 = HEAP[$enc_addr];
      var $3 = HEAP[$ptr_addr];
      var $4 = HEAP[$end_addr];
      var $5 = HEAP[$nextTokPtr_addr];
      var $6 = _initScan(_encodingsNS, $2, 1, $3, $4, $5);
      HEAP[$0] = $6;
      var $7 = HEAP[$0];
      HEAP[$retval] = $7;
      __label__ = 1;
      break;
     case 1:
      var $retval1 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval1;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XmlInitEncodingNS($p, $encPtr, $name) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 24;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $p_addr = __stackBase__;
      var $encPtr_addr = __stackBase__ + 4;
      var $name_addr = __stackBase__ + 8;
      var $retval = __stackBase__ + 12;
      var $0 = __stackBase__ + 16;
      var $i = __stackBase__ + 20;
      
      HEAP[$p_addr] = $p;
      HEAP[$encPtr_addr] = $encPtr;
      HEAP[$name_addr] = $name;
      var $1 = HEAP[$name_addr];
      var $2 = _getEncodingIndex($1);
      HEAP[$i] = $2;
      
      var $4 = HEAP[$i] == -1;
      if ($4) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = 0;
      __label__ = 3;
      break;
     case 2:
      
      var $6 = HEAP[$i] & 255;
      
      
      var $9 = HEAP[$p_addr] + 73;
      HEAP[$9] = $6;
      
      
      
      var $13 = HEAP[$p_addr];
      HEAP[$13] = FUNCTION_TABLE_OFFSET + 212;
      
      
      
      var $17 = HEAP[$p_addr] + 4;
      HEAP[$17] = FUNCTION_TABLE_OFFSET + 214;
      
      
      var $20 = HEAP[$p_addr] + 52;
      HEAP[$20] = FUNCTION_TABLE_OFFSET + 208;
      
      var $22 = HEAP[$p_addr] + 76;
      var $23 = HEAP[$encPtr_addr];
      HEAP[$22] = $23;
      
      var $25 = HEAP[$p_addr];
      var $26 = HEAP[$encPtr_addr];
      HEAP[$26] = $25;
      HEAP[$0] = 1;
      __label__ = 3;
      break;
     case 3:
      var $27 = HEAP[$0];
      HEAP[$retval] = $27;
      __label__ = 4;
      break;
     case 4:
      var $retval3 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval3;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _findEncodingNS($enc, $ptr, $end) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 156;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 156);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $enc_addr = __stackBase__;
      var $ptr_addr = __stackBase__ + 4;
      var $end_addr = __stackBase__ + 8;
      var $retval = __stackBase__ + 12;
      var $0 = __stackBase__ + 16;
      var $buf = __stackBase__ + 20;
      var $p = __stackBase__ + 148;
      var $i = __stackBase__ + 152;
      
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      
      HEAP[$p] = $buf;
      
      
      var $3 = HEAP[HEAP[$enc_addr] + 60];
      
      
      var $6 = HEAP[$p] + 128 + -1;
      var $7 = HEAP[$enc_addr];
      var $8 = HEAP[$end_addr];
      FUNCTION_TABLE[$3]($7, $ptr_addr, $8, $p, $6);
      
      
      
      if (HEAP[$ptr_addr] != HEAP[$end_addr]) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      HEAP[$0] = 0;
      __label__ = 8;
      break;
     case 2:
      var $12 = HEAP[$p];
      HEAP[$12] = 0;
      var $buf3 = $buf;
      var $13 = _streqci($buf3, _KW_UTF_16);
      
      if ($13 != 0) {
        __label__ = 3;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 3:
      
      
      
      
      if (HEAP[HEAP[$enc_addr] + 68] == 2) {
        __label__ = 4;
        break;
      } else {
        __label__ = 5;
        break;
      }
     case 4:
      var $19 = HEAP[$enc_addr];
      HEAP[$0] = $19;
      __label__ = 8;
      break;
     case 5:
      var $buf7 = $buf;
      var $20 = _getEncodingIndex($buf7);
      HEAP[$i] = $20;
      
      var $22 = HEAP[$i] == -1;
      if ($22) {
        __label__ = 6;
        break;
      } else {
        __label__ = 7;
        break;
      }
     case 6:
      HEAP[$0] = 0;
      __label__ = 8;
      break;
     case 7:
      
      
      var $25 = HEAP[_encodingsNS + HEAP[$i] * 4];
      HEAP[$0] = $25;
      __label__ = 8;
      break;
     case 8:
      var $26 = HEAP[$0];
      HEAP[$retval] = $26;
      __label__ = 9;
      break;
     case 9:
      var $retval11 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval11;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XmlParseXmlDeclNS($isGeneralTextEntity, $enc, $ptr, $end, $badPtr, $versionPtr, $versionEndPtr, $encodingName, $encoding, $standalone) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 48;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 48);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $isGeneralTextEntity_addr = __stackBase__;
      var $enc_addr = __stackBase__ + 4;
      var $ptr_addr = __stackBase__ + 8;
      var $end_addr = __stackBase__ + 12;
      var $badPtr_addr = __stackBase__ + 16;
      var $versionPtr_addr = __stackBase__ + 20;
      var $versionEndPtr_addr = __stackBase__ + 24;
      var $encodingName_addr = __stackBase__ + 28;
      var $encoding_addr = __stackBase__ + 32;
      var $standalone_addr = __stackBase__ + 36;
      var $retval = __stackBase__ + 40;
      var $0 = __stackBase__ + 44;
      
      HEAP[$isGeneralTextEntity_addr] = $isGeneralTextEntity;
      HEAP[$enc_addr] = $enc;
      HEAP[$ptr_addr] = $ptr;
      HEAP[$end_addr] = $end;
      HEAP[$badPtr_addr] = $badPtr;
      HEAP[$versionPtr_addr] = $versionPtr;
      HEAP[$versionEndPtr_addr] = $versionEndPtr;
      HEAP[$encodingName_addr] = $encodingName;
      HEAP[$encoding_addr] = $encoding;
      HEAP[$standalone_addr] = $standalone;
      var $1 = HEAP[$isGeneralTextEntity_addr];
      var $2 = HEAP[$enc_addr];
      var $3 = HEAP[$ptr_addr];
      var $4 = HEAP[$end_addr];
      var $5 = HEAP[$badPtr_addr];
      var $6 = HEAP[$versionPtr_addr];
      var $7 = HEAP[$versionEndPtr_addr];
      var $8 = HEAP[$encodingName_addr];
      var $9 = HEAP[$encoding_addr];
      var $10 = HEAP[$standalone_addr];
      var $11 = _doParseXmlDecl(FUNCTION_TABLE_OFFSET + 216, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10);
      HEAP[$0] = $11;
      var $12 = HEAP[$0];
      HEAP[$retval] = $12;
      __label__ = 1;
      break;
     case 1:
      var $retval1 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval1;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  function _PyExpat_XmlInitUnknownEncodingNS($mem, $table, $convert, $userData) {
    var __stackBase__ = STACKTOP;
    STACKTOP += 28;
    assert(STACKTOP < STACK_MAX);
    _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1;
    while (1) switch (__label__) {
     case -1:
      var $mem_addr = __stackBase__;
      var $table_addr = __stackBase__ + 4;
      var $convert_addr = __stackBase__ + 8;
      var $userData_addr = __stackBase__ + 12;
      var $retval = __stackBase__ + 16;
      var $0 = __stackBase__ + 20;
      var $enc = __stackBase__ + 24;
      
      HEAP[$mem_addr] = $mem;
      HEAP[$table_addr] = $table;
      HEAP[$convert_addr] = $convert;
      HEAP[$userData_addr] = $userData;
      var $1 = HEAP[$mem_addr];
      var $2 = HEAP[$table_addr];
      var $3 = HEAP[$convert_addr];
      var $4 = HEAP[$userData_addr];
      var $5 = _PyExpat_XmlInitUnknownEncoding($1, $2, $3, $4);
      HEAP[$enc] = $5;
      
      
      if (HEAP[$enc] != 0) {
        __label__ = 1;
        break;
      } else {
        __label__ = 2;
        break;
      }
     case 1:
      
      
      
      var $11 = HEAP[$enc] + 76 + 58;
      HEAP[$11] = 23;
      __label__ = 2;
      break;
     case 2:
      var $12 = HEAP[$enc];
      HEAP[$0] = $12;
      var $13 = HEAP[$0];
      HEAP[$retval] = $13;
      __label__ = 3;
      break;
     case 3:
      var $retval2 = HEAP[$retval];
      STACKTOP = __stackBase__;
      return $retval2;
     default:
      assert(0, "bad label: " + __label__);
    }
  }
  FUNCTION_TABLE = FUNCTION_TABLE.concat([ 0, 0, _error_external_entity_ref_handler, 0, _conv_string_to_unicode, 0, _conv_string_to_utf8, 0, _noop_character_data_handler, 0, _PyUnknownEncodingHandler, 0, _PyExpat_XML_ErrorString, 0, _PyExpat_XML_GetErrorCode, 0, _PyExpat_XML_GetCurrentColumnNumber, 0, _PyExpat_XML_GetCurrentLineNumber, 0, _PyExpat_XML_Parse, 0, _PyExpat_XML_ParserCreate_MM, 0, _PyExpat_XML_ParserFree, 0, _PyExpat_XML_SetCharacterDataHandler, 0, _PyExpat_XML_SetCommentHandler, 0, _PyExpat_XML_SetDefaultHandlerExpand, 0, _PyExpat_XML_SetElementHandler, 0, _PyExpat_XML_SetNamespaceDeclHandler, 0, _PyExpat_XML_SetProcessingInstructionHandler, 0, _PyExpat_XML_SetUnknownEncodingHandler, 0, _PyExpat_XML_SetUserData, 0, _malloc, 0, _realloc, 0, _free, 0, _prologInitProcessor, 0, _externalEntityInitProcessor, 0, _externalParEntInitProcessor, 0, _errorProcessor, 0, _externalEntityInitProcessor2, 0, _externalEntityInitProcessor3, 0, _externalEntityContentProcessor, 0, _cdataSectionProcessor, 0, _contentProcessor, 0, _prologProcessor, 0, _PyExpat_XmlInitEncodingNS, 0, _PyExpat_XmlInitEncoding, 0, _PyExpat_XmlParseXmlDeclNS, 0, _PyExpat_XmlParseXmlDecl, 0, _PyExpat_XmlInitUnknownEncodingNS, 0, _PyExpat_XmlInitUnknownEncoding, 0, _entityValueInitProcessor, 0, _externalParEntProcessor, 0, _entityValueProcessor, 0, _ignoreSectionProcessor, 0, _epilogProcessor, 0, _internalEntityProcessor, 0, _prolog1, 0, _doctype0, 0, _error, 0, _doctype1, 0, _internalSubset, 0, _prolog2, 0, _doctype3, 0, _doctype2, 0, _doctype4, 0, _entity0, 0, _attlist0, 0, _element0, 0, _notation0, 0, _doctype5, 0, _externalSubset1, 0, _condSect0, 0, _entity1, 0, _entity2, 0, _entity7, 0, _entity4, 0, _entity3, 0, _declClose, 0, _entity5, 0, _entity6, 0, _entity9, 0, _entity8, 0, _entity10, 0, _notation1, 0, _notation3, 0, _notation2, 0, _notation4, 0, _attlist1, 0, _attlist2, 0, _attlist8, 0, _attlist5, 0, _attlist3, 0, _attlist4, 0, _attlist6, 0, _attlist7, 0, _attlist9, 0, _element1, 0, _element2, 0, _element3, 0, _element6, 0, _element7, 0, _element4, 0, _element5, 0, _condSect1, 0, _condSect2, 0, _prolog0, 0, _externalSubset0, 0, _unknown_isName, 0, _unknown_isNmstrt, 0, _unknown_isInvalid, 0, _unknown_toUtf8, 0, _unknown_toUtf16, 0, _initScanProlog, 0, _initScanContent, 0, _initUpdatePosition, 0, _findEncoding, 0, _initScanPrologNS, 0, _initScanContentNS, 0, _findEncodingNS, 0, _xmlparse_Parse, 0, _xmlparse_ParseFile, 0, _xmlparse_SetBase, 0, _xmlparse_GetBase, 0, _xmlparse_ExternalEntityParserCreate, 0, _xmlparse_SetParamEntityParsing, 0, _xmlparse_GetInputContext, 0, _xmlparse_UseForeignDTD, 0, _xmlparse_dealloc, 0, _xmlparse_getattr, 0, _xmlparse_setattr, 0, _xmlparse_traverse, 0, _xmlparse_clear, 0, _pyexpat_ParserCreate, 0, _pyexpat_ErrorString, 0, _PyExpat_XML_SetStartElementHandler, 0, _my_StartElementHandler, 0, _PyExpat_XML_SetEndElementHandler, 0, _my_EndElementHandler, 0, _my_ProcessingInstructionHandler, 0, _my_CharacterDataHandler, 0, _PyExpat_XML_SetUnparsedEntityDeclHandler, 0, _my_UnparsedEntityDeclHandler, 0, _PyExpat_XML_SetNotationDeclHandler, 0, _my_NotationDeclHandler, 0, _PyExpat_XML_SetStartNamespaceDeclHandler, 0, _my_StartNamespaceDeclHandler, 0, _PyExpat_XML_SetEndNamespaceDeclHandler, 0, _my_EndNamespaceDeclHandler, 0, _my_CommentHandler, 0, _PyExpat_XML_SetStartCdataSectionHandler, 0, _my_StartCdataSectionHandler, 0, _PyExpat_XML_SetEndCdataSectionHandler, 0, _my_EndCdataSectionHandler, 0, _PyExpat_XML_SetDefaultHandler, 0, _my_DefaultHandler, 0, _my_DefaultHandlerExpandHandler, 0, _PyExpat_XML_SetNotStandaloneHandler, 0, _my_NotStandaloneHandler, 0, _PyExpat_XML_SetExternalEntityRefHandler, 0, _my_ExternalEntityRefHandler, 0, _PyExpat_XML_SetStartDoctypeDeclHandler, 0, _my_StartDoctypeDeclHandler, 0, _PyExpat_XML_SetEndDoctypeDeclHandler, 0, _my_EndDoctypeDeclHandler, 0, _PyExpat_XML_SetEntityDeclHandler, 0, _my_EntityDeclHandler, 0, _PyExpat_XML_SetXmlDeclHandler, 0, _my_XmlDeclHandler, 0, _PyExpat_XML_SetElementDeclHandler, 0, _my_ElementDeclHandler, 0, _PyExpat_XML_SetAttlistDeclHandler, 0, _my_AttlistDeclHandler, 0, _PyExpat_XML_SetSkippedEntityHandler, 0, _my_SkippedEntityHandler, 0, _normal_prologTok, 0, _normal_contentTok, 0, _normal_cdataSectionTok, 0, _normal_ignoreSectionTok, 0, _normal_attributeValueTok, 0, _normal_entityValueTok, 0, _normal_sameName, 0, _normal_nameMatchesAscii, 0, _normal_nameLength, 0, _normal_skipS, 0, _normal_getAtts, 0, _normal_charRefNumber, 0, _normal_predefinedEntityName, 0, _normal_updatePosition, 0, _normal_isPublicId, 0, _utf8_toUtf8, 0, _utf8_toUtf16, 0, _utf8_isName2, 0, _utf8_isName3, 0, _isNever, 0, _utf8_isNmstrt2, 0, _utf8_isNmstrt3, 0, _utf8_isInvalid2, 0, _utf8_isInvalid3, 0, _utf8_isInvalid4, 0, _latin1_toUtf8, 0, _latin1_toUtf16, 0, _ascii_toUtf8, 0, _little2_prologTok, 0, _little2_contentTok, 0, _little2_cdataSectionTok, 0, _little2_ignoreSectionTok, 0, _little2_attributeValueTok, 0, _little2_entityValueTok, 0, _little2_sameName, 0, _little2_nameMatchesAscii, 0, _little2_nameLength, 0, _little2_skipS, 0, _little2_getAtts, 0, _little2_charRefNumber, 0, _little2_predefinedEntityName, 0, _little2_updatePosition, 0, _little2_isPublicId, 0, _little2_toUtf8, 0, _little2_toUtf16, 0, _big2_prologTok, 0, _big2_contentTok, 0, _big2_cdataSectionTok, 0, _big2_ignoreSectionTok, 0, _big2_attributeValueTok, 0, _big2_entityValueTok, 0, _big2_sameName, 0, _big2_nameMatchesAscii, 0, _big2_nameLength, 0, _big2_skipS, 0, _big2_getAtts, 0, _big2_charRefNumber, 0, _big2_predefinedEntityName, 0, _big2_updatePosition, 0, _big2_isPublicId, 0, _big2_toUtf8, 0, _big2_toUtf16, 0 ]);
  function run(args) {
    __str = allocate([ 37, 46, 50, 48, 48, 115, 58, 32, 108, 105, 110, 101, 32, 37, 105, 44, 32, 99, 111, 108, 117, 109, 110, 32, 37, 105, 0 ], "i8", ALLOC_NORMAL);
    _ErrorObject = allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
    __str1 = allocate([ 115, 0 ], "i8", ALLOC_NORMAL);
    __str2 = allocate([ 99, 111, 100, 101, 0 ], "i8", ALLOC_NORMAL);
    __str3 = allocate([ 111, 102, 102, 115, 101, 116, 0 ], "i8", ALLOC_NORMAL);
    __str4 = allocate([ 108, 105, 110, 101, 110, 111, 0 ], "i8", ALLOC_NORMAL);
    __str5 = allocate([ 115, 116, 114, 105, 99, 116, 0 ], "i8", ALLOC_NORMAL);
    __str6 = allocate([ 46, 46, 47, 99, 112, 121, 116, 104, 111, 110, 47, 77, 111, 100, 117, 108, 101, 115, 47, 112, 121, 101, 120, 112, 97, 116, 46, 99, 0 ], "i8", ALLOC_NORMAL);
    __str7 = allocate([ 67, 104, 97, 114, 97, 99, 116, 101, 114, 68, 97, 116, 97, 0 ], "i8", ALLOC_NORMAL);
    __str8 = allocate([ 40, 78, 78, 41, 0 ], "i8", ALLOC_NORMAL);
    __str9 = allocate([ 83, 116, 97, 114, 116, 69, 108, 101, 109, 101, 110, 116, 0 ], "i8", ALLOC_NORMAL);
    __str10 = allocate([ 40, 78, 41, 0 ], "i8", ALLOC_NORMAL);
    __str11 = allocate([ 69, 110, 100, 69, 108, 101, 109, 101, 110, 116, 0 ], "i8", ALLOC_NORMAL);
    __str12 = allocate([ 40, 78, 79, 38, 41, 0 ], "i8", ALLOC_NORMAL);
    __str13 = allocate([ 80, 114, 111, 99, 101, 115, 115, 105, 110, 103, 73, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 0 ], "i8", ALLOC_NORMAL);
    __str14 = allocate([ 40, 78, 78, 78, 78, 78, 41, 0 ], "i8", ALLOC_NORMAL);
    __str15 = allocate([ 85, 110, 112, 97, 114, 115, 101, 100, 69, 110, 116, 105, 116, 121, 68, 101, 99, 108, 0 ], "i8", ALLOC_NORMAL);
    __str16 = allocate([ 78, 105, 78, 78, 78, 78, 78, 0 ], "i8", ALLOC_NORMAL);
    __str17 = allocate([ 69, 110, 116, 105, 116, 121, 68, 101, 99, 108, 0 ], "i8", ALLOC_NORMAL);
    __str18 = allocate([ 40, 79, 38, 79, 38, 105, 41, 0 ], "i8", ALLOC_NORMAL);
    __str19 = allocate([ 88, 109, 108, 68, 101, 99, 108, 0 ], "i8", ALLOC_NORMAL);
    __str20 = allocate([ 109, 111, 100, 101, 108, 45, 62, 110, 117, 109, 99, 104, 105, 108, 100, 114, 101, 110, 32, 60, 32, 50, 49, 52, 55, 52, 56, 51, 54, 52, 55, 0 ], "i8", ALLOC_NORMAL);
    ___PRETTY_FUNCTION___9695 = allocate([ 99, 111, 110, 118, 95, 99, 111, 110, 116, 101, 110, 116, 95, 109, 111, 100, 101, 108, 0 ], "i8", ALLOC_NORMAL);
    __str21 = allocate([ 40, 105, 105, 79, 38, 78, 41, 0 ], "i8", ALLOC_NORMAL);
    __str22 = allocate([ 78, 78, 0 ], "i8", ALLOC_NORMAL);
    __str23 = allocate([ 69, 108, 101, 109, 101, 110, 116, 68, 101, 99, 108, 0 ], "i8", ALLOC_NORMAL);
    __str24 = allocate([ 40, 78, 78, 79, 38, 79, 38, 105, 41, 0 ], "i8", ALLOC_NORMAL);
    __str25 = allocate([ 65, 116, 116, 108, 105, 115, 116, 68, 101, 99, 108, 0 ], "i8", ALLOC_NORMAL);
    __str26 = allocate([ 78, 105, 0 ], "i8", ALLOC_NORMAL);
    __str27 = allocate([ 83, 107, 105, 112, 112, 101, 100, 69, 110, 116, 105, 116, 121, 0 ], "i8", ALLOC_NORMAL);
    __str28 = allocate([ 40, 78, 78, 78, 78, 41, 0 ], "i8", ALLOC_NORMAL);
    __str29 = allocate([ 78, 111, 116, 97, 116, 105, 111, 110, 68, 101, 99, 108, 0 ], "i8", ALLOC_NORMAL);
    __str30 = allocate([ 83, 116, 97, 114, 116, 78, 97, 109, 101, 115, 112, 97, 99, 101, 68, 101, 99, 108, 0 ], "i8", ALLOC_NORMAL);
    __str31 = allocate([ 69, 110, 100, 78, 97, 109, 101, 115, 112, 97, 99, 101, 68, 101, 99, 108, 0 ], "i8", ALLOC_NORMAL);
    __str32 = allocate([ 40, 79, 38, 41, 0 ], "i8", ALLOC_NORMAL);
    __str33 = allocate([ 67, 111, 109, 109, 101, 110, 116, 0 ], "i8", ALLOC_NORMAL);
    __str34 = allocate([ 40, 41, 0 ], "i8", ALLOC_NORMAL);
    __str35 = allocate([ 83, 116, 97, 114, 116, 67, 100, 97, 116, 97, 83, 101, 99, 116, 105, 111, 110, 0 ], "i8", ALLOC_NORMAL);
    __str36 = allocate([ 69, 110, 100, 67, 100, 97, 116, 97, 83, 101, 99, 116, 105, 111, 110, 0 ], "i8", ALLOC_NORMAL);
    __str37 = allocate([ 68, 101, 102, 97, 117, 108, 116, 0 ], "i8", ALLOC_NORMAL);
    __str38 = allocate([ 68, 101, 102, 97, 117, 108, 116, 72, 97, 110, 100, 108, 101, 114, 69, 120, 112, 97, 110, 100, 0 ], "i8", ALLOC_NORMAL);
    __str39 = allocate([ 78, 111, 116, 83, 116, 97, 110, 100, 97, 108, 111, 110, 101, 0 ], "i8", ALLOC_NORMAL);
    __str40 = allocate([ 40, 79, 38, 78, 78, 78, 41, 0 ], "i8", ALLOC_NORMAL);
    __str41 = allocate([ 69, 120, 116, 101, 114, 110, 97, 108, 69, 110, 116, 105, 116, 121, 82, 101, 102, 0 ], "i8", ALLOC_NORMAL);
    __str42 = allocate([ 40, 78, 78, 78, 105, 41, 0 ], "i8", ALLOC_NORMAL);
    __str43 = allocate([ 83, 116, 97, 114, 116, 68, 111, 99, 116, 121, 112, 101, 68, 101, 99, 108, 0 ], "i8", ALLOC_NORMAL);
    __str44 = allocate([ 69, 110, 100, 68, 111, 99, 116, 121, 112, 101, 68, 101, 99, 108, 0 ], "i8", ALLOC_NORMAL);
    _xmlparse_Parse__doc__ = allocate([ 80, 97, 114, 115, 101, 40, 100, 97, 116, 97, 91, 44, 32, 105, 115, 102, 105, 110, 97, 108, 93, 41, 10, 80, 97, 114, 115, 101, 32, 88, 77, 76, 32, 100, 97, 116, 97, 46, 32, 32, 96, 105, 115, 102, 105, 110, 97, 108, 39, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 116, 114, 117, 101, 32, 97, 116, 32, 101, 110, 100, 32, 111, 102, 32, 105, 110, 112, 117, 116, 46, 0 ], "i8", ALLOC_NORMAL);
    __str45 = allocate([ 115, 35, 124, 105, 58, 80, 97, 114, 115, 101, 0 ], "i8", ALLOC_NORMAL);
    __str46 = allocate([ 114, 101, 97, 100, 40, 41, 32, 100, 105, 100, 32, 110, 111, 116, 32, 114, 101, 116, 117, 114, 110, 32, 97, 32, 115, 116, 114, 105, 110, 103, 32, 111, 98, 106, 101, 99, 116, 32, 40, 116, 121, 112, 101, 61, 37, 46, 52, 48, 48, 115, 41, 0 ], "i8", ALLOC_NORMAL);
    __str47 = allocate([ 114, 101, 97, 100, 40, 41, 32, 114, 101, 116, 117, 114, 110, 101, 100, 32, 116, 111, 111, 32, 109, 117, 99, 104, 32, 100, 97, 116, 97, 58, 32, 37, 105, 32, 98, 121, 116, 101, 115, 32, 114, 101, 113, 117, 101, 115, 116, 101, 100, 44, 32, 37, 105, 32, 114, 101, 116, 117, 114, 110, 101, 100, 0 ], "i8", ALLOC_NORMAL);
    _xmlparse_ParseFile__doc__ = allocate([ 80, 97, 114, 115, 101, 70, 105, 108, 101, 40, 102, 105, 108, 101, 41, 10, 80, 97, 114, 115, 101, 32, 88, 77, 76, 32, 100, 97, 116, 97, 32, 102, 114, 111, 109, 32, 102, 105, 108, 101, 45, 108, 105, 107, 101, 32, 111, 98, 106, 101, 99, 116, 46, 0 ], "i8", ALLOC_NORMAL);
    __str48 = allocate([ 114, 101, 97, 100, 0 ], "i8", ALLOC_NORMAL);
    __str49 = allocate([ 97, 114, 103, 117, 109, 101, 110, 116, 32, 109, 117, 115, 116, 32, 104, 97, 118, 101, 32, 39, 114, 101, 97, 100, 39, 32, 97, 116, 116, 114, 105, 98, 117, 116, 101, 0 ], "i8", ALLOC_NORMAL);
    _xmlparse_SetBase__doc__ = allocate([ 83, 101, 116, 66, 97, 115, 101, 40, 98, 97, 115, 101, 95, 117, 114, 108, 41, 10, 83, 101, 116, 32, 116, 104, 101, 32, 98, 97, 115, 101, 32, 85, 82, 76, 32, 102, 111, 114, 32, 116, 104, 101, 32, 112, 97, 114, 115, 101, 114, 46, 0 ], "i8", ALLOC_NORMAL);
    __str50 = allocate([ 115, 58, 83, 101, 116, 66, 97, 115, 101, 0 ], "i8", ALLOC_NORMAL);
    _xmlparse_GetBase__doc__ = allocate([ 71, 101, 116, 66, 97, 115, 101, 40, 41, 32, 45, 62, 32, 117, 114, 108, 10, 82, 101, 116, 117, 114, 110, 32, 98, 97, 115, 101, 32, 85, 82, 76, 32, 115, 116, 114, 105, 110, 103, 32, 102, 111, 114, 32, 116, 104, 101, 32, 112, 97, 114, 115, 101, 114, 46, 0 ], "i8", ALLOC_NORMAL);
    __str51 = allocate([ 122, 0 ], "i8", ALLOC_NORMAL);
    _xmlparse_GetInputContext__doc__ = allocate([ 71, 101, 116, 73, 110, 112, 117, 116, 67, 111, 110, 116, 101, 120, 116, 40, 41, 32, 45, 62, 32, 115, 116, 114, 105, 110, 103, 10, 82, 101, 116, 117, 114, 110, 32, 116, 104, 101, 32, 117, 110, 116, 114, 97, 110, 115, 108, 97, 116, 101, 100, 32, 116, 101, 120, 116, 32, 111, 102, 32, 116, 104, 101, 32, 105, 110, 112, 117, 116, 32, 116, 104, 97, 116, 32, 99, 97, 117, 115, 101, 100, 32, 116, 104, 101, 32, 99, 117, 114, 114, 101, 110, 116, 32, 101, 118, 101, 110, 116, 46, 10, 73, 102, 32, 116, 104, 101, 32, 101, 118, 101, 110, 116, 32, 119, 97, 115, 32, 103, 101, 110, 101, 114, 97, 116, 101, 100, 32, 98, 121, 32, 97, 32, 108, 97, 114, 103, 101, 32, 97, 109, 111, 117, 110, 116, 32, 111, 102, 32, 116, 101, 120, 116, 32, 40, 115, 117, 99, 104, 32, 97, 115, 32, 97, 32, 115, 116, 97, 114, 116, 32, 116, 97, 103, 10, 102, 111, 114, 32, 97, 110, 32, 101, 108, 101, 109, 101, 110, 116, 32, 119, 105, 116, 104, 32, 109, 97, 110, 121, 32, 97, 116, 116, 114, 105, 98, 117, 116, 101, 115, 41, 44, 32, 110, 111, 116, 32, 97, 108, 108, 32, 111, 102, 32, 116, 104, 101, 32, 116, 101, 120, 116, 32, 109, 97, 121, 32, 98, 101, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 46, 0 ], "i8", ALLOC_NORMAL);
    _xmlparse_ExternalEntityParserCreate__doc__ = allocate([ 69, 120, 116, 101, 114, 110, 97, 108, 69, 110, 116, 105, 116, 121, 80, 97, 114, 115, 101, 114, 67, 114, 101, 97, 116, 101, 40, 99, 111, 110, 116, 101, 120, 116, 91, 44, 32, 101, 110, 99, 111, 100, 105, 110, 103, 93, 41, 10, 67, 114, 101, 97, 116, 101, 32, 97, 32, 112, 97, 114, 115, 101, 114, 32, 102, 111, 114, 32, 112, 97, 114, 115, 105, 110, 103, 32, 97, 110, 32, 101, 120, 116, 101, 114, 110, 97, 108, 32, 101, 110, 116, 105, 116, 121, 32, 98, 97, 115, 101, 100, 32, 111, 110, 32, 116, 104, 101, 10, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 32, 112, 97, 115, 115, 101, 100, 32, 116, 111, 32, 116, 104, 101, 32, 69, 120, 116, 101, 114, 110, 97, 108, 69, 110, 116, 105, 116, 121, 82, 101, 102, 72, 97, 110, 100, 108, 101, 114, 46, 0 ], "i8", ALLOC_NORMAL);
    __str52 = allocate([ 122, 124, 115, 58, 69, 120, 116, 101, 114, 110, 97, 108, 69, 110, 116, 105, 116, 121, 80, 97, 114, 115, 101, 114, 67, 114, 101, 97, 116, 101, 0 ], "i8", ALLOC_NORMAL);
    _xmlparse_SetParamEntityParsing__doc__ = allocate([ 83, 101, 116, 80, 97, 114, 97, 109, 69, 110, 116, 105, 116, 121, 80, 97, 114, 115, 105, 110, 103, 40, 102, 108, 97, 103, 41, 32, 45, 62, 32, 115, 117, 99, 99, 101, 115, 115, 10, 67, 111, 110, 116, 114, 111, 108, 115, 32, 112, 97, 114, 115, 105, 110, 103, 32, 111, 102, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 101, 110, 116, 105, 116, 105, 101, 115, 32, 40, 105, 110, 99, 108, 117, 100, 105, 110, 103, 32, 116, 104, 101, 32, 101, 120, 116, 101, 114, 110, 97, 108, 32, 68, 84, 68, 10, 115, 117, 98, 115, 101, 116, 41, 46, 32, 80, 111, 115, 115, 105, 98, 108, 101, 32, 102, 108, 97, 103, 32, 118, 97, 108, 117, 101, 115, 32, 97, 114, 101, 32, 88, 77, 76, 95, 80, 65, 82, 65, 77, 95, 69, 78, 84, 73, 84, 89, 95, 80, 65, 82, 83, 73, 78, 71, 95, 78, 69, 86, 69, 82, 44, 10, 88, 77, 76, 95, 80, 65, 82, 65, 77, 95, 69, 78, 84, 73, 84, 89, 95, 80, 65, 82, 83, 73, 78, 71, 95, 85, 78, 76, 69, 83, 83, 95, 83, 84, 65, 78, 68, 65, 76, 79, 78, 69, 32, 97, 110, 100, 10, 88, 77, 76, 95, 80, 65, 82, 65, 77, 95, 69, 78, 84, 73, 84, 89, 95, 80, 65, 82, 83, 73, 78, 71, 95, 65, 76, 87, 65, 89, 83, 46, 32, 82, 101, 116, 117, 114, 110, 115, 32, 116, 114, 117, 101, 32, 105, 102, 32, 115, 101, 116, 116, 105, 110, 103, 32, 116, 104, 101, 32, 102, 108, 97, 103, 10, 119, 97, 115, 32, 115, 117, 99, 99, 101, 115, 115, 102, 117, 108, 46, 0 ], "i8", ALLOC_NORMAL);
    __str53 = allocate([ 105, 0 ], "i8", ALLOC_NORMAL);
    _xmlparse_UseForeignDTD__doc__ = allocate([ 85, 115, 101, 70, 111, 114, 101, 105, 103, 110, 68, 84, 68, 40, 91, 102, 108, 97, 103, 93, 41, 10, 65, 108, 108, 111, 119, 115, 32, 116, 104, 101, 32, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 32, 116, 111, 32, 112, 114, 111, 118, 105, 100, 101, 32, 97, 110, 32, 97, 114, 116, 105, 102, 105, 99, 105, 97, 108, 32, 101, 120, 116, 101, 114, 110, 97, 108, 32, 115, 117, 98, 115, 101, 116, 32, 105, 102, 32, 111, 110, 101, 32, 105, 115, 10, 110, 111, 116, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 32, 97, 115, 32, 112, 97, 114, 116, 32, 111, 102, 32, 116, 104, 101, 32, 100, 111, 99, 117, 109, 101, 110, 116, 32, 105, 110, 115, 116, 97, 110, 99, 101, 46, 32, 32, 84, 104, 105, 115, 32, 114, 101, 97, 100, 105, 108, 121, 32, 97, 108, 108, 111, 119, 115, 32, 116, 104, 101, 10, 117, 115, 101, 32, 111, 102, 32, 97, 32, 39, 100, 101, 102, 97, 117, 108, 116, 39, 32, 100, 111, 99, 117, 109, 101, 110, 116, 32, 116, 121, 112, 101, 32, 99, 111, 110, 116, 114, 111, 108, 108, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 44, 32, 119, 104, 105, 108, 101, 32, 115, 116, 105, 108, 108, 10, 103, 101, 116, 116, 105, 110, 103, 32, 116, 104, 101, 32, 97, 100, 118, 97, 110, 116, 97, 103, 101, 32, 111, 102, 32, 112, 114, 111, 118, 105, 100, 105, 110, 103, 32, 100, 111, 99, 117, 109, 101, 110, 116, 32, 116, 121, 112, 101, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 32, 116, 111, 32, 116, 104, 101, 32, 112, 97, 114, 115, 101, 114, 46, 10, 39, 102, 108, 97, 103, 39, 32, 100, 101, 102, 97, 117, 108, 116, 115, 32, 116, 111, 32, 84, 114, 117, 101, 32, 105, 102, 32, 110, 111, 116, 32, 112, 114, 111, 118, 105, 100, 101, 100, 46, 0 ], "i8", ALLOC_NORMAL);
    __str54 = allocate([ 85, 115, 101, 70, 111, 114, 101, 105, 103, 110, 68, 84, 68, 0 ], "i8", ALLOC_NORMAL);
    __str55 = allocate([ 80, 97, 114, 115, 101, 0 ], "i8", ALLOC_NORMAL);
    __str56 = allocate([ 80, 97, 114, 115, 101, 70, 105, 108, 101, 0 ], "i8", ALLOC_NORMAL);
    __str57 = allocate([ 83, 101, 116, 66, 97, 115, 101, 0 ], "i8", ALLOC_NORMAL);
    __str58 = allocate([ 71, 101, 116, 66, 97, 115, 101, 0 ], "i8", ALLOC_NORMAL);
    __str59 = allocate([ 69, 120, 116, 101, 114, 110, 97, 108, 69, 110, 116, 105, 116, 121, 80, 97, 114, 115, 101, 114, 67, 114, 101, 97, 116, 101, 0 ], "i8", ALLOC_NORMAL);
    __str60 = allocate([ 83, 101, 116, 80, 97, 114, 97, 109, 69, 110, 116, 105, 116, 121, 80, 97, 114, 115, 105, 110, 103, 0 ], "i8", ALLOC_NORMAL);
    __str61 = allocate([ 71, 101, 116, 73, 110, 112, 117, 116, 67, 111, 110, 116, 101, 120, 116, 0 ], "i8", ALLOC_NORMAL);
    _xmlparse_methods = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ "i8*", 0, 0, 0, "%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8" ], ALLOC_NORMAL);
    _template_string = allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
    _template_buffer = allocate(257, "i8", ALLOC_NORMAL);
    __str62 = allocate([ 114, 101, 112, 108, 97, 99, 101, 0 ], "i8", ALLOC_NORMAL);
    __str63 = allocate([ 88, 77, 76, 95, 80, 97, 114, 115, 101, 114, 67, 114, 101, 97, 116, 101, 32, 102, 97, 105, 108, 101, 100, 0 ], "i8", ALLOC_NORMAL);
    __str64 = allocate([ 69, 114, 114, 111, 114, 67, 111, 100, 101, 0 ], "i8", ALLOC_NORMAL);
    __str65 = allocate([ 69, 114, 114, 111, 114, 76, 105, 110, 101, 78, 117, 109, 98, 101, 114, 0 ], "i8", ALLOC_NORMAL);
    __str66 = allocate([ 69, 114, 114, 111, 114, 67, 111, 108, 117, 109, 110, 78, 117, 109, 98, 101, 114, 0 ], "i8", ALLOC_NORMAL);
    __str67 = allocate([ 69, 114, 114, 111, 114, 66, 121, 116, 101, 73, 110, 100, 101, 120, 0 ], "i8", ALLOC_NORMAL);
    __str68 = allocate([ 67, 117, 114, 114, 101, 110, 116, 76, 105, 110, 101, 78, 117, 109, 98, 101, 114, 0 ], "i8", ALLOC_NORMAL);
    __str69 = allocate([ 67, 117, 114, 114, 101, 110, 116, 67, 111, 108, 117, 109, 110, 78, 117, 109, 98, 101, 114, 0 ], "i8", ALLOC_NORMAL);
    __str70 = allocate([ 67, 117, 114, 114, 101, 110, 116, 66, 121, 116, 101, 73, 110, 100, 101, 120, 0 ], "i8", ALLOC_NORMAL);
    __str71 = allocate([ 98, 117, 102, 102, 101, 114, 95, 115, 105, 122, 101, 0 ], "i8", ALLOC_NORMAL);
    __str72 = allocate([ 98, 117, 102, 102, 101, 114, 95, 116, 101, 120, 116, 0 ], "i8", ALLOC_NORMAL);
    __str73 = allocate([ 98, 117, 102, 102, 101, 114, 95, 117, 115, 101, 100, 0 ], "i8", ALLOC_NORMAL);
    __str74 = allocate([ 110, 97, 109, 101, 115, 112, 97, 99, 101, 95, 112, 114, 101, 102, 105, 120, 101, 115, 0 ], "i8", ALLOC_NORMAL);
    __str75 = allocate([ 111, 114, 100, 101, 114, 101, 100, 95, 97, 116, 116, 114, 105, 98, 117, 116, 101, 115, 0 ], "i8", ALLOC_NORMAL);
    __str76 = allocate([ 114, 101, 116, 117, 114, 110, 115, 95, 117, 110, 105, 99, 111, 100, 101, 0 ], "i8", ALLOC_NORMAL);
    __str77 = allocate([ 115, 112, 101, 99, 105, 102, 105, 101, 100, 95, 97, 116, 116, 114, 105, 98, 117, 116, 101, 115, 0 ], "i8", ALLOC_NORMAL);
    __str78 = allocate([ 105, 110, 116, 101, 114, 110, 0 ], "i8", ALLOC_NORMAL);
    __str79 = allocate([ 95, 95, 109, 101, 109, 98, 101, 114, 115, 95, 95, 0 ], "i8", ALLOC_NORMAL);
    __str80 = allocate([ 67, 97, 110, 110, 111, 116, 32, 100, 101, 108, 101, 116, 101, 32, 97, 116, 116, 114, 105, 98, 117, 116, 101, 0 ], "i8", ALLOC_NORMAL);
    __str81 = allocate([ 98, 117, 102, 102, 101, 114, 95, 115, 105, 122, 101, 32, 109, 117, 115, 116, 32, 98, 101, 32, 97, 110, 32, 105, 110, 116, 101, 103, 101, 114, 0 ], "i8", ALLOC_NORMAL);
    __str82 = allocate([ 98, 117, 102, 102, 101, 114, 95, 115, 105, 122, 101, 32, 109, 117, 115, 116, 32, 98, 101, 32, 103, 114, 101, 97, 116, 101, 114, 32, 116, 104, 97, 110, 32, 122, 101, 114, 111, 0 ], "i8", ALLOC_NORMAL);
    __str83 = allocate([ 67, 104, 97, 114, 97, 99, 116, 101, 114, 68, 97, 116, 97, 72, 97, 110, 100, 108, 101, 114, 0 ], "i8", ALLOC_NORMAL);
    _Xmlparsetype__doc__ = allocate([ 88, 77, 76, 32, 112, 97, 114, 115, 101, 114, 0 ], "i8", ALLOC_NORMAL);
    __str84 = allocate([ 112, 121, 101, 120, 112, 97, 116, 46, 120, 109, 108, 112, 97, 114, 115, 101, 114, 0 ], "i8", ALLOC_NORMAL);
    _Xmlparsetype = allocate([ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 147947, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ "i32", 0, 0, 0, "%struct._typeobject*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "void (%struct.PyObject*)*", 0, 0, 0, "i32 (%struct.PyObject*, %struct.FILE*, i32)*", 0, 0, 0, "%struct.PyObject* (%struct.PyObject*, i8*)*", 0, 0, 0, "i32 (%struct.PyObject*, i8*, %struct.PyObject*)*", 0, 0, 0, "i32 (%struct.PyObject*, %struct.PyObject*)*", 0, 0, 0, "%struct.PyObject* (%struct.PyObject*)*", 0, 0, 0, "%struct.PyNumberMethods*", 0, 0, 0, "%struct.PySequenceMethods*", 0, 0, 0, "%struct.PyMappingMethods*", 0, 0, 0, "i32 (%struct.PyObject*)*", 0, 0, 0, "%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*", 0, 0, 0, "%struct.PyObject* (%struct.PyObject*)*", 0, 0, 0, "%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*", 0, 0, 0, "i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*", 0, 0, 0, "%struct.PyBufferProcs*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*", 0, 0, 0, "i32 (%struct.PyObject*)*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8" ], ALLOC_NORMAL);
    _pyexpat_ParserCreate__doc__ = allocate([ 80, 97, 114, 115, 101, 114, 67, 114, 101, 97, 116, 101, 40, 91, 101, 110, 99, 111, 100, 105, 110, 103, 91, 44, 32, 110, 97, 109, 101, 115, 112, 97, 99, 101, 95, 115, 101, 112, 97, 114, 97, 116, 111, 114, 93, 93, 41, 32, 45, 62, 32, 112, 97, 114, 115, 101, 114, 10, 82, 101, 116, 117, 114, 110, 32, 97, 32, 110, 101, 119, 32, 88, 77, 76, 32, 112, 97, 114, 115, 101, 114, 32, 111, 98, 106, 101, 99, 116, 46, 0 ], "i8", ALLOC_NORMAL);
    __str85 = allocate([ 124, 122, 122, 79, 58, 80, 97, 114, 115, 101, 114, 67, 114, 101, 97, 116, 101, 0 ], "i8", ALLOC_NORMAL);
    _kwlist_11478 = allocate(16, "i8*", ALLOC_NORMAL);
    __str86 = allocate([ 101, 110, 99, 111, 100, 105, 110, 103, 0 ], "i8", ALLOC_NORMAL);
    __str87 = allocate([ 110, 97, 109, 101, 115, 112, 97, 99, 101, 95, 115, 101, 112, 97, 114, 97, 116, 111, 114, 0 ], "i8", ALLOC_NORMAL);
    __str88 = allocate([ 110, 97, 109, 101, 115, 112, 97, 99, 101, 95, 115, 101, 112, 97, 114, 97, 116, 111, 114, 32, 109, 117, 115, 116, 32, 98, 101, 32, 97, 116, 32, 109, 111, 115, 116, 32, 111, 110, 101, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 44, 32, 111, 109, 105, 116, 116, 101, 100, 44, 32, 111, 114, 32, 78, 111, 110, 101, 0 ], "i8", ALLOC_NORMAL);
    __str89 = allocate([ 105, 110, 116, 101, 114, 110, 32, 109, 117, 115, 116, 32, 98, 101, 32, 97, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 0 ], "i8", ALLOC_NORMAL);
    _pyexpat_ErrorString__doc__ = allocate([ 69, 114, 114, 111, 114, 83, 116, 114, 105, 110, 103, 40, 101, 114, 114, 110, 111, 41, 32, 45, 62, 32, 115, 116, 114, 105, 110, 103, 10, 82, 101, 116, 117, 114, 110, 115, 32, 115, 116, 114, 105, 110, 103, 32, 101, 114, 114, 111, 114, 32, 102, 111, 114, 32, 103, 105, 118, 101, 110, 32, 110, 117, 109, 98, 101, 114, 46, 0 ], "i8", ALLOC_NORMAL);
    __str90 = allocate([ 108, 58, 69, 114, 114, 111, 114, 83, 116, 114, 105, 110, 103, 0 ], "i8", ALLOC_NORMAL);
    _pyexpat_methods = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ "i8*", 0, 0, 0, "%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0 ], ALLOC_NORMAL);
    __str91 = allocate([ 80, 97, 114, 115, 101, 114, 67, 114, 101, 97, 116, 101, 0 ], "i8", ALLOC_NORMAL);
    __str92 = allocate([ 69, 114, 114, 111, 114, 83, 116, 114, 105, 110, 103, 0 ], "i8", ALLOC_NORMAL);
    _pyexpat_module_documentation = allocate([ 80, 121, 116, 104, 111, 110, 32, 119, 114, 97, 112, 112, 101, 114, 32, 102, 111, 114, 32, 69, 120, 112, 97, 116, 32, 112, 97, 114, 115, 101, 114, 46, 0 ], "i8", ALLOC_NORMAL);
    __str93 = allocate([ 112, 121, 101, 120, 112, 97, 116, 46, 101, 114, 114, 111, 114, 115, 0 ], "i8", ALLOC_NORMAL);
    __str94 = allocate([ 112, 121, 101, 120, 112, 97, 116, 46, 109, 111, 100, 101, 108, 0 ], "i8", ALLOC_NORMAL);
    __str95 = allocate([ 112, 121, 101, 120, 112, 97, 116, 0 ], "i8", ALLOC_NORMAL);
    __str96 = allocate([ 120, 109, 108, 46, 112, 97, 114, 115, 101, 114, 115, 46, 101, 120, 112, 97, 116, 46, 69, 120, 112, 97, 116, 69, 114, 114, 111, 114, 0 ], "i8", ALLOC_NORMAL);
    __str97 = allocate([ 101, 114, 114, 111, 114, 0 ], "i8", ALLOC_NORMAL);
    __str98 = allocate([ 69, 120, 112, 97, 116, 69, 114, 114, 111, 114, 0 ], "i8", ALLOC_NORMAL);
    __str99 = allocate([ 88, 77, 76, 80, 97, 114, 115, 101, 114, 84, 121, 112, 101, 0 ], "i8", ALLOC_NORMAL);
    __str100 = allocate([ 50, 46, 55, 46, 50, 0 ], "i8", ALLOC_NORMAL);
    __str101 = allocate([ 95, 95, 118, 101, 114, 115, 105, 111, 110, 95, 95, 0 ], "i8", ALLOC_NORMAL);
    __str102 = allocate([ 69, 88, 80, 65, 84, 95, 86, 69, 82, 83, 73, 79, 78, 0 ], "i8", ALLOC_NORMAL);
    __str103 = allocate([ 40, 105, 105, 105, 41, 0 ], "i8", ALLOC_NORMAL);
    __str104 = allocate([ 118, 101, 114, 115, 105, 111, 110, 95, 105, 110, 102, 111, 0 ], "i8", ALLOC_NORMAL);
    __str105 = allocate([ 110, 97, 116, 105, 118, 101, 95, 101, 110, 99, 111, 100, 105, 110, 103, 0 ], "i8", ALLOC_NORMAL);
    __str106 = allocate([ 85, 84, 70, 45, 56, 0 ], "i8", ALLOC_NORMAL);
    __str107 = allocate([ 109, 111, 100, 117, 108, 101, 115, 0 ], "i8", ALLOC_NORMAL);
    __str108 = allocate([ 101, 114, 114, 111, 114, 115, 0 ], "i8", ALLOC_NORMAL);
    __str109 = allocate([ 109, 111, 100, 101, 108, 0 ], "i8", ALLOC_NORMAL);
    __str110 = allocate([ 115, 105, 0 ], "i8", ALLOC_NORMAL);
    __str111 = allocate([ 102, 101, 97, 116, 117, 114, 101, 115, 0 ], "i8", ALLOC_NORMAL);
    __str112 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 78, 79, 95, 77, 69, 77, 79, 82, 89, 0 ], "i8", ALLOC_NORMAL);
    __str113 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 83, 89, 78, 84, 65, 88, 0 ], "i8", ALLOC_NORMAL);
    __str114 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 78, 79, 95, 69, 76, 69, 77, 69, 78, 84, 83, 0 ], "i8", ALLOC_NORMAL);
    __str115 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 73, 78, 86, 65, 76, 73, 68, 95, 84, 79, 75, 69, 78, 0 ], "i8", ALLOC_NORMAL);
    __str116 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 85, 78, 67, 76, 79, 83, 69, 68, 95, 84, 79, 75, 69, 78, 0 ], "i8", ALLOC_NORMAL);
    __str117 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 80, 65, 82, 84, 73, 65, 76, 95, 67, 72, 65, 82, 0 ], "i8", ALLOC_NORMAL);
    __str118 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 84, 65, 71, 95, 77, 73, 83, 77, 65, 84, 67, 72, 0 ], "i8", ALLOC_NORMAL);
    __str119 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 68, 85, 80, 76, 73, 67, 65, 84, 69, 95, 65, 84, 84, 82, 73, 66, 85, 84, 69, 0 ], "i8", ALLOC_NORMAL);
    __str120 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 74, 85, 78, 75, 95, 65, 70, 84, 69, 82, 95, 68, 79, 67, 95, 69, 76, 69, 77, 69, 78, 84, 0 ], "i8", ALLOC_NORMAL);
    __str121 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 80, 65, 82, 65, 77, 95, 69, 78, 84, 73, 84, 89, 95, 82, 69, 70, 0 ], "i8", ALLOC_NORMAL);
    __str122 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 85, 78, 68, 69, 70, 73, 78, 69, 68, 95, 69, 78, 84, 73, 84, 89, 0 ], "i8", ALLOC_NORMAL);
    __str123 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 82, 69, 67, 85, 82, 83, 73, 86, 69, 95, 69, 78, 84, 73, 84, 89, 95, 82, 69, 70, 0 ], "i8", ALLOC_NORMAL);
    __str124 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 65, 83, 89, 78, 67, 95, 69, 78, 84, 73, 84, 89, 0 ], "i8", ALLOC_NORMAL);
    __str125 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 66, 65, 68, 95, 67, 72, 65, 82, 95, 82, 69, 70, 0 ], "i8", ALLOC_NORMAL);
    __str126 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 66, 73, 78, 65, 82, 89, 95, 69, 78, 84, 73, 84, 89, 95, 82, 69, 70, 0 ], "i8", ALLOC_NORMAL);
    __str127 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 65, 84, 84, 82, 73, 66, 85, 84, 69, 95, 69, 88, 84, 69, 82, 78, 65, 76, 95, 69, 78, 84, 73, 84, 89, 95, 82, 69, 70, 0 ], "i8", ALLOC_NORMAL);
    __str128 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 77, 73, 83, 80, 76, 65, 67, 69, 68, 95, 88, 77, 76, 95, 80, 73, 0 ], "i8", ALLOC_NORMAL);
    __str129 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 85, 78, 75, 78, 79, 87, 78, 95, 69, 78, 67, 79, 68, 73, 78, 71, 0 ], "i8", ALLOC_NORMAL);
    __str130 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 73, 78, 67, 79, 82, 82, 69, 67, 84, 95, 69, 78, 67, 79, 68, 73, 78, 71, 0 ], "i8", ALLOC_NORMAL);
    __str131 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 85, 78, 67, 76, 79, 83, 69, 68, 95, 67, 68, 65, 84, 65, 95, 83, 69, 67, 84, 73, 79, 78, 0 ], "i8", ALLOC_NORMAL);
    __str132 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 69, 88, 84, 69, 82, 78, 65, 76, 95, 69, 78, 84, 73, 84, 89, 95, 72, 65, 78, 68, 76, 73, 78, 71, 0 ], "i8", ALLOC_NORMAL);
    __str133 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 78, 79, 84, 95, 83, 84, 65, 78, 68, 65, 76, 79, 78, 69, 0 ], "i8", ALLOC_NORMAL);
    __str134 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 85, 78, 69, 88, 80, 69, 67, 84, 69, 68, 95, 83, 84, 65, 84, 69, 0 ], "i8", ALLOC_NORMAL);
    __str135 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 69, 78, 84, 73, 84, 89, 95, 68, 69, 67, 76, 65, 82, 69, 68, 95, 73, 78, 95, 80, 69, 0 ], "i8", ALLOC_NORMAL);
    __str136 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 70, 69, 65, 84, 85, 82, 69, 95, 82, 69, 81, 85, 73, 82, 69, 83, 95, 88, 77, 76, 95, 68, 84, 68, 0 ], "i8", ALLOC_NORMAL);
    __str137 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 67, 65, 78, 84, 95, 67, 72, 65, 78, 71, 69, 95, 70, 69, 65, 84, 85, 82, 69, 95, 79, 78, 67, 69, 95, 80, 65, 82, 83, 73, 78, 71, 0 ], "i8", ALLOC_NORMAL);
    __str138 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 85, 78, 66, 79, 85, 78, 68, 95, 80, 82, 69, 70, 73, 88, 0 ], "i8", ALLOC_NORMAL);
    __str139 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 85, 78, 68, 69, 67, 76, 65, 82, 73, 78, 71, 95, 80, 82, 69, 70, 73, 88, 0 ], "i8", ALLOC_NORMAL);
    __str140 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 73, 78, 67, 79, 77, 80, 76, 69, 84, 69, 95, 80, 69, 0 ], "i8", ALLOC_NORMAL);
    __str141 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 88, 77, 76, 95, 68, 69, 67, 76, 0 ], "i8", ALLOC_NORMAL);
    __str142 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 84, 69, 88, 84, 95, 68, 69, 67, 76, 0 ], "i8", ALLOC_NORMAL);
    __str143 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 80, 85, 66, 76, 73, 67, 73, 68, 0 ], "i8", ALLOC_NORMAL);
    __str144 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 83, 85, 83, 80, 69, 78, 68, 69, 68, 0 ], "i8", ALLOC_NORMAL);
    __str145 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 78, 79, 84, 95, 83, 85, 83, 80, 69, 78, 68, 69, 68, 0 ], "i8", ALLOC_NORMAL);
    __str146 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 65, 66, 79, 82, 84, 69, 68, 0 ], "i8", ALLOC_NORMAL);
    __str147 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 70, 73, 78, 73, 83, 72, 69, 68, 0 ], "i8", ALLOC_NORMAL);
    __str148 = allocate([ 88, 77, 76, 95, 69, 82, 82, 79, 82, 95, 83, 85, 83, 80, 69, 78, 68, 95, 80, 69, 0 ], "i8", ALLOC_NORMAL);
    __str149 = allocate([ 95, 95, 100, 111, 99, 95, 95, 0 ], "i8", ALLOC_NORMAL);
    __str150 = allocate([ 67, 111, 110, 115, 116, 97, 110, 116, 115, 32, 117, 115, 101, 100, 32, 116, 111, 32, 100, 101, 115, 99, 114, 105, 98, 101, 32, 101, 114, 114, 111, 114, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 115, 46, 0 ], "i8", ALLOC_NORMAL);
    __str151 = allocate([ 88, 77, 76, 95, 80, 65, 82, 65, 77, 95, 69, 78, 84, 73, 84, 89, 95, 80, 65, 82, 83, 73, 78, 71, 95, 78, 69, 86, 69, 82, 0 ], "i8", ALLOC_NORMAL);
    __str152 = allocate([ 88, 77, 76, 95, 80, 65, 82, 65, 77, 95, 69, 78, 84, 73, 84, 89, 95, 80, 65, 82, 83, 73, 78, 71, 95, 85, 78, 76, 69, 83, 83, 95, 83, 84, 65, 78, 68, 65, 76, 79, 78, 69, 0 ], "i8", ALLOC_NORMAL);
    __str153 = allocate([ 88, 77, 76, 95, 80, 65, 82, 65, 77, 95, 69, 78, 84, 73, 84, 89, 95, 80, 65, 82, 83, 73, 78, 71, 95, 65, 76, 87, 65, 89, 83, 0 ], "i8", ALLOC_NORMAL);
    __str154 = allocate([ 67, 111, 110, 115, 116, 97, 110, 116, 115, 32, 117, 115, 101, 100, 32, 116, 111, 32, 105, 110, 116, 101, 114, 112, 114, 101, 116, 32, 99, 111, 110, 116, 101, 110, 116, 32, 109, 111, 100, 101, 108, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 46, 0 ], "i8", ALLOC_NORMAL);
    __str155 = allocate([ 88, 77, 76, 95, 67, 84, 89, 80, 69, 95, 69, 77, 80, 84, 89, 0 ], "i8", ALLOC_NORMAL);
    __str156 = allocate([ 88, 77, 76, 95, 67, 84, 89, 80, 69, 95, 65, 78, 89, 0 ], "i8", ALLOC_NORMAL);
    __str157 = allocate([ 88, 77, 76, 95, 67, 84, 89, 80, 69, 95, 77, 73, 88, 69, 68, 0 ], "i8", ALLOC_NORMAL);
    __str158 = allocate([ 88, 77, 76, 95, 67, 84, 89, 80, 69, 95, 78, 65, 77, 69, 0 ], "i8", ALLOC_NORMAL);
    __str159 = allocate([ 88, 77, 76, 95, 67, 84, 89, 80, 69, 95, 67, 72, 79, 73, 67, 69, 0 ], "i8", ALLOC_NORMAL);
    __str160 = allocate([ 88, 77, 76, 95, 67, 84, 89, 80, 69, 95, 83, 69, 81, 0 ], "i8", ALLOC_NORMAL);
    __str161 = allocate([ 88, 77, 76, 95, 67, 81, 85, 65, 78, 84, 95, 78, 79, 78, 69, 0 ], "i8", ALLOC_NORMAL);
    __str162 = allocate([ 88, 77, 76, 95, 67, 81, 85, 65, 78, 84, 95, 79, 80, 84, 0 ], "i8", ALLOC_NORMAL);
    __str163 = allocate([ 88, 77, 76, 95, 67, 81, 85, 65, 78, 84, 95, 82, 69, 80, 0 ], "i8", ALLOC_NORMAL);
    __str164 = allocate([ 88, 77, 76, 95, 67, 81, 85, 65, 78, 84, 95, 80, 76, 85, 83, 0 ], "i8", ALLOC_NORMAL);
    _capi_11557 = allocate(80, [ "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8* (i32)*", 0, 0, 0, "i32 (%struct.XML_ParserStruct*)*", 0, 0, 0, "i32 (%struct.XML_ParserStruct*)*", 0, 0, 0, "i32 (%struct.XML_ParserStruct*)*", 0, 0, 0, "i32 (%struct.XML_ParserStruct*, i8*, i32, i32)*", 0, 0, 0, "%struct.XML_ParserStruct* (i8*, %struct.XML_Memory_Handling_Suite*, i8*)*", 0, 0, 0, "void (%struct.XML_ParserStruct*)*", 0, 0, 0, "void (%struct.XML_ParserStruct*, void (i8*, i8*, i32)*)*", 0, 0, 0, "void (%struct.XML_ParserStruct*, void (i8*, i8*)*)*", 0, 0, 0, "void (%struct.XML_ParserStruct*, void (i8*, i8*, i32)*)*", 0, 0, 0, "void (%struct.XML_ParserStruct*, void (i8*, i8*, i8**)*, void (i8*, i8*)*)*", 0, 0, 0, "void (%struct.XML_ParserStruct*, void (i8*, i8*, i8*)*, void (i8*, i8*)*)*", 0, 0, 0, "void (%struct.XML_ParserStruct*, void (i8*, i8*, i8*)*)*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i32 (i8*, i8*, %struct.XML_Encoding*)*, i8*)*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0 ], ALLOC_NORMAL);
    __str165 = allocate([ 112, 121, 101, 120, 112, 97, 116, 46, 101, 120, 112, 97, 116, 95, 67, 65, 80, 73, 32, 49, 46, 48, 0 ], "i8", ALLOC_NORMAL);
    __str166 = allocate([ 112, 121, 101, 120, 112, 97, 116, 46, 101, 120, 112, 97, 116, 95, 67, 65, 80, 73, 0 ], "i8", ALLOC_NORMAL);
    __str167 = allocate([ 101, 120, 112, 97, 116, 95, 67, 65, 80, 73, 0 ], "i8", ALLOC_NORMAL);
    __str168 = allocate([ 83, 116, 97, 114, 116, 69, 108, 101, 109, 101, 110, 116, 72, 97, 110, 100, 108, 101, 114, 0 ], "i8", ALLOC_NORMAL);
    __str169 = allocate([ 69, 110, 100, 69, 108, 101, 109, 101, 110, 116, 72, 97, 110, 100, 108, 101, 114, 0 ], "i8", ALLOC_NORMAL);
    __str170 = allocate([ 80, 114, 111, 99, 101, 115, 115, 105, 110, 103, 73, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 72, 97, 110, 100, 108, 101, 114, 0 ], "i8", ALLOC_NORMAL);
    __str171 = allocate([ 85, 110, 112, 97, 114, 115, 101, 100, 69, 110, 116, 105, 116, 121, 68, 101, 99, 108, 72, 97, 110, 100, 108, 101, 114, 0 ], "i8", ALLOC_NORMAL);
    __str172 = allocate([ 78, 111, 116, 97, 116, 105, 111, 110, 68, 101, 99, 108, 72, 97, 110, 100, 108, 101, 114, 0 ], "i8", ALLOC_NORMAL);
    __str173 = allocate([ 83, 116, 97, 114, 116, 78, 97, 109, 101, 115, 112, 97, 99, 101, 68, 101, 99, 108, 72, 97, 110, 100, 108, 101, 114, 0 ], "i8", ALLOC_NORMAL);
    __str174 = allocate([ 69, 110, 100, 78, 97, 109, 101, 115, 112, 97, 99, 101, 68, 101, 99, 108, 72, 97, 110, 100, 108, 101, 114, 0 ], "i8", ALLOC_NORMAL);
    __str175 = allocate([ 67, 111, 109, 109, 101, 110, 116, 72, 97, 110, 100, 108, 101, 114, 0 ], "i8", ALLOC_NORMAL);
    __str176 = allocate([ 83, 116, 97, 114, 116, 67, 100, 97, 116, 97, 83, 101, 99, 116, 105, 111, 110, 72, 97, 110, 100, 108, 101, 114, 0 ], "i8", ALLOC_NORMAL);
    __str177 = allocate([ 69, 110, 100, 67, 100, 97, 116, 97, 83, 101, 99, 116, 105, 111, 110, 72, 97, 110, 100, 108, 101, 114, 0 ], "i8", ALLOC_NORMAL);
    __str178 = allocate([ 68, 101, 102, 97, 117, 108, 116, 72, 97, 110, 100, 108, 101, 114, 0 ], "i8", ALLOC_NORMAL);
    __str179 = allocate([ 78, 111, 116, 83, 116, 97, 110, 100, 97, 108, 111, 110, 101, 72, 97, 110, 100, 108, 101, 114, 0 ], "i8", ALLOC_NORMAL);
    __str180 = allocate([ 69, 120, 116, 101, 114, 110, 97, 108, 69, 110, 116, 105, 116, 121, 82, 101, 102, 72, 97, 110, 100, 108, 101, 114, 0 ], "i8", ALLOC_NORMAL);
    __str181 = allocate([ 83, 116, 97, 114, 116, 68, 111, 99, 116, 121, 112, 101, 68, 101, 99, 108, 72, 97, 110, 100, 108, 101, 114, 0 ], "i8", ALLOC_NORMAL);
    __str182 = allocate([ 69, 110, 100, 68, 111, 99, 116, 121, 112, 101, 68, 101, 99, 108, 72, 97, 110, 100, 108, 101, 114, 0 ], "i8", ALLOC_NORMAL);
    __str183 = allocate([ 69, 110, 116, 105, 116, 121, 68, 101, 99, 108, 72, 97, 110, 100, 108, 101, 114, 0 ], "i8", ALLOC_NORMAL);
    __str184 = allocate([ 88, 109, 108, 68, 101, 99, 108, 72, 97, 110, 100, 108, 101, 114, 0 ], "i8", ALLOC_NORMAL);
    __str185 = allocate([ 69, 108, 101, 109, 101, 110, 116, 68, 101, 99, 108, 72, 97, 110, 100, 108, 101, 114, 0 ], "i8", ALLOC_NORMAL);
    __str186 = allocate([ 65, 116, 116, 108, 105, 115, 116, 68, 101, 99, 108, 72, 97, 110, 100, 108, 101, 114, 0 ], "i8", ALLOC_NORMAL);
    __str187 = allocate([ 83, 107, 105, 112, 112, 101, 100, 69, 110, 116, 105, 116, 121, 72, 97, 110, 100, 108, 101, 114, 0 ], "i8", ALLOC_NORMAL);
    _handler_info = allocate(1280, [ "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8*", 0, 0, 0, "void (%struct.XML_ParserStruct*, i8*)*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8" ], ALLOC_NORMAL);
    _implicitContext = allocate([ 120, 109, 108, 61, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 119, 51, 46, 111, 114, 103, 47, 88, 77, 76, 47, 49, 57, 57, 56, 47, 110, 97, 109, 101, 115, 112, 97, 99, 101, 0 ], "i8", ALLOC_NORMAL);
    __str188 = allocate([ 115, 116, 97, 116, 117, 115, 32, 33, 61, 32, 40, 40, 118, 111, 105, 100, 32, 42, 41, 48, 41, 0 ], "i8", ALLOC_NORMAL);
    __str1189 = allocate([ 46, 46, 47, 99, 112, 121, 116, 104, 111, 110, 47, 77, 111, 100, 117, 108, 101, 115, 47, 101, 120, 112, 97, 116, 47, 120, 109, 108, 112, 97, 114, 115, 101, 46, 99, 0 ], "i8", ALLOC_NORMAL);
    ___PRETTY_FUNCTION___3804 = allocate([ 80, 121, 69, 120, 112, 97, 116, 95, 88, 77, 76, 95, 71, 101, 116, 80, 97, 114, 115, 105, 110, 103, 83, 116, 97, 116, 117, 115, 0 ], "i8", ALLOC_NORMAL);
    _message_3952 = allocate(164, "i8*", ALLOC_NORMAL);
    __str2190 = allocate([ 111, 117, 116, 32, 111, 102, 32, 109, 101, 109, 111, 114, 121, 0 ], "i8", ALLOC_NORMAL);
    __str3191 = allocate([ 115, 121, 110, 116, 97, 120, 32, 101, 114, 114, 111, 114, 0 ], "i8", ALLOC_NORMAL);
    __str4192 = allocate([ 110, 111, 32, 101, 108, 101, 109, 101, 110, 116, 32, 102, 111, 117, 110, 100, 0 ], "i8", ALLOC_NORMAL);
    __str5193 = allocate([ 110, 111, 116, 32, 119, 101, 108, 108, 45, 102, 111, 114, 109, 101, 100, 32, 40, 105, 110, 118, 97, 108, 105, 100, 32, 116, 111, 107, 101, 110, 41, 0 ], "i8", ALLOC_NORMAL);
    __str6194 = allocate([ 117, 110, 99, 108, 111, 115, 101, 100, 32, 116, 111, 107, 101, 110, 0 ], "i8", ALLOC_NORMAL);
    __str7195 = allocate([ 112, 97, 114, 116, 105, 97, 108, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 0 ], "i8", ALLOC_NORMAL);
    __str8196 = allocate([ 109, 105, 115, 109, 97, 116, 99, 104, 101, 100, 32, 116, 97, 103, 0 ], "i8", ALLOC_NORMAL);
    __str9197 = allocate([ 100, 117, 112, 108, 105, 99, 97, 116, 101, 32, 97, 116, 116, 114, 105, 98, 117, 116, 101, 0 ], "i8", ALLOC_NORMAL);
    __str10198 = allocate([ 106, 117, 110, 107, 32, 97, 102, 116, 101, 114, 32, 100, 111, 99, 117, 109, 101, 110, 116, 32, 101, 108, 101, 109, 101, 110, 116, 0 ], "i8", ALLOC_NORMAL);
    __str11199 = allocate([ 105, 108, 108, 101, 103, 97, 108, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 101, 110, 116, 105, 116, 121, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 0 ], "i8", ALLOC_NORMAL);
    __str12200 = allocate([ 117, 110, 100, 101, 102, 105, 110, 101, 100, 32, 101, 110, 116, 105, 116, 121, 0 ], "i8", ALLOC_NORMAL);
    __str13201 = allocate([ 114, 101, 99, 117, 114, 115, 105, 118, 101, 32, 101, 110, 116, 105, 116, 121, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 0 ], "i8", ALLOC_NORMAL);
    __str14202 = allocate([ 97, 115, 121, 110, 99, 104, 114, 111, 110, 111, 117, 115, 32, 101, 110, 116, 105, 116, 121, 0 ], "i8", ALLOC_NORMAL);
    __str15203 = allocate([ 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 116, 111, 32, 105, 110, 118, 97, 108, 105, 100, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 32, 110, 117, 109, 98, 101, 114, 0 ], "i8", ALLOC_NORMAL);
    __str16204 = allocate([ 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 116, 111, 32, 98, 105, 110, 97, 114, 121, 32, 101, 110, 116, 105, 116, 121, 0 ], "i8", ALLOC_NORMAL);
    __str17205 = allocate([ 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 116, 111, 32, 101, 120, 116, 101, 114, 110, 97, 108, 32, 101, 110, 116, 105, 116, 121, 32, 105, 110, 32, 97, 116, 116, 114, 105, 98, 117, 116, 101, 0 ], "i8", ALLOC_NORMAL);
    __str18206 = allocate([ 88, 77, 76, 32, 111, 114, 32, 116, 101, 120, 116, 32, 100, 101, 99, 108, 97, 114, 97, 116, 105, 111, 110, 32, 110, 111, 116, 32, 97, 116, 32, 115, 116, 97, 114, 116, 32, 111, 102, 32, 101, 110, 116, 105, 116, 121, 0 ], "i8", ALLOC_NORMAL);
    __str19207 = allocate([ 117, 110, 107, 110, 111, 119, 110, 32, 101, 110, 99, 111, 100, 105, 110, 103, 0 ], "i8", ALLOC_NORMAL);
    __str20208 = allocate([ 101, 110, 99, 111, 100, 105, 110, 103, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 32, 105, 110, 32, 88, 77, 76, 32, 100, 101, 99, 108, 97, 114, 97, 116, 105, 111, 110, 32, 105, 115, 32, 105, 110, 99, 111, 114, 114, 101, 99, 116, 0 ], "i8", ALLOC_NORMAL);
    __str21209 = allocate([ 117, 110, 99, 108, 111, 115, 101, 100, 32, 67, 68, 65, 84, 65, 32, 115, 101, 99, 116, 105, 111, 110, 0 ], "i8", ALLOC_NORMAL);
    __str22210 = allocate([ 101, 114, 114, 111, 114, 32, 105, 110, 32, 112, 114, 111, 99, 101, 115, 115, 105, 110, 103, 32, 101, 120, 116, 101, 114, 110, 97, 108, 32, 101, 110, 116, 105, 116, 121, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 0 ], "i8", ALLOC_NORMAL);
    __str23211 = allocate([ 100, 111, 99, 117, 109, 101, 110, 116, 32, 105, 115, 32, 110, 111, 116, 32, 115, 116, 97, 110, 100, 97, 108, 111, 110, 101, 0 ], "i8", ALLOC_NORMAL);
    __str24212 = allocate([ 117, 110, 101, 120, 112, 101, 99, 116, 101, 100, 32, 112, 97, 114, 115, 101, 114, 32, 115, 116, 97, 116, 101, 32, 45, 32, 112, 108, 101, 97, 115, 101, 32, 115, 101, 110, 100, 32, 97, 32, 98, 117, 103, 32, 114, 101, 112, 111, 114, 116, 0 ], "i8", ALLOC_NORMAL);
    __str25213 = allocate([ 101, 110, 116, 105, 116, 121, 32, 100, 101, 99, 108, 97, 114, 101, 100, 32, 105, 110, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 101, 110, 116, 105, 116, 121, 0 ], "i8", ALLOC_NORMAL);
    __str26214 = allocate([ 114, 101, 113, 117, 101, 115, 116, 101, 100, 32, 102, 101, 97, 116, 117, 114, 101, 32, 114, 101, 113, 117, 105, 114, 101, 115, 32, 88, 77, 76, 95, 68, 84, 68, 32, 115, 117, 112, 112, 111, 114, 116, 32, 105, 110, 32, 69, 120, 112, 97, 116, 0 ], "i8", ALLOC_NORMAL);
    __str27215 = allocate([ 99, 97, 110, 110, 111, 116, 32, 99, 104, 97, 110, 103, 101, 32, 115, 101, 116, 116, 105, 110, 103, 32, 111, 110, 99, 101, 32, 112, 97, 114, 115, 105, 110, 103, 32, 104, 97, 115, 32, 98, 101, 103, 117, 110, 0 ], "i8", ALLOC_NORMAL);
    __str28216 = allocate([ 117, 110, 98, 111, 117, 110, 100, 32, 112, 114, 101, 102, 105, 120, 0 ], "i8", ALLOC_NORMAL);
    __str29217 = allocate([ 109, 117, 115, 116, 32, 110, 111, 116, 32, 117, 110, 100, 101, 99, 108, 97, 114, 101, 32, 112, 114, 101, 102, 105, 120, 0 ], "i8", ALLOC_NORMAL);
    __str30218 = allocate([ 105, 110, 99, 111, 109, 112, 108, 101, 116, 101, 32, 109, 97, 114, 107, 117, 112, 32, 105, 110, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 101, 110, 116, 105, 116, 121, 0 ], "i8", ALLOC_NORMAL);
    __str31219 = allocate([ 88, 77, 76, 32, 100, 101, 99, 108, 97, 114, 97, 116, 105, 111, 110, 32, 110, 111, 116, 32, 119, 101, 108, 108, 45, 102, 111, 114, 109, 101, 100, 0 ], "i8", ALLOC_NORMAL);
    __str32220 = allocate([ 116, 101, 120, 116, 32, 100, 101, 99, 108, 97, 114, 97, 116, 105, 111, 110, 32, 110, 111, 116, 32, 119, 101, 108, 108, 45, 102, 111, 114, 109, 101, 100, 0 ], "i8", ALLOC_NORMAL);
    __str33221 = allocate([ 105, 108, 108, 101, 103, 97, 108, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 40, 115, 41, 32, 105, 110, 32, 112, 117, 98, 108, 105, 99, 32, 105, 100, 0 ], "i8", ALLOC_NORMAL);
    __str34222 = allocate([ 112, 97, 114, 115, 101, 114, 32, 115, 117, 115, 112, 101, 110, 100, 101, 100, 0 ], "i8", ALLOC_NORMAL);
    __str35223 = allocate([ 112, 97, 114, 115, 101, 114, 32, 110, 111, 116, 32, 115, 117, 115, 112, 101, 110, 100, 101, 100, 0 ], "i8", ALLOC_NORMAL);
    __str36224 = allocate([ 112, 97, 114, 115, 105, 110, 103, 32, 97, 98, 111, 114, 116, 101, 100, 0 ], "i8", ALLOC_NORMAL);
    __str37225 = allocate([ 112, 97, 114, 115, 105, 110, 103, 32, 102, 105, 110, 105, 115, 104, 101, 100, 0 ], "i8", ALLOC_NORMAL);
    __str38226 = allocate([ 99, 97, 110, 110, 111, 116, 32, 115, 117, 115, 112, 101, 110, 100, 32, 105, 110, 32, 101, 120, 116, 101, 114, 110, 97, 108, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 101, 110, 116, 105, 116, 121, 0 ], "i8", ALLOC_NORMAL);
    __str39227 = allocate([ 114, 101, 115, 101, 114, 118, 101, 100, 32, 112, 114, 101, 102, 105, 120, 32, 40, 120, 109, 108, 41, 32, 109, 117, 115, 116, 32, 110, 111, 116, 32, 98, 101, 32, 117, 110, 100, 101, 99, 108, 97, 114, 101, 100, 32, 111, 114, 32, 98, 111, 117, 110, 100, 32, 116, 111, 32, 97, 110, 111, 116, 104, 101, 114, 32, 110, 97, 109, 101, 115, 112, 97, 99, 101, 32, 110, 97, 109, 101, 0 ], "i8", ALLOC_NORMAL);
    __str40228 = allocate([ 114, 101, 115, 101, 114, 118, 101, 100, 32, 112, 114, 101, 102, 105, 120, 32, 40, 120, 109, 108, 110, 115, 41, 32, 109, 117, 115, 116, 32, 110, 111, 116, 32, 98, 101, 32, 100, 101, 99, 108, 97, 114, 101, 100, 32, 111, 114, 32, 117, 110, 100, 101, 99, 108, 97, 114, 101, 100, 0 ], "i8", ALLOC_NORMAL);
    __str41229 = allocate([ 112, 114, 101, 102, 105, 120, 32, 109, 117, 115, 116, 32, 110, 111, 116, 32, 98, 101, 32, 98, 111, 117, 110, 100, 32, 116, 111, 32, 111, 110, 101, 32, 111, 102, 32, 116, 104, 101, 32, 114, 101, 115, 101, 114, 118, 101, 100, 32, 110, 97, 109, 101, 115, 112, 97, 99, 101, 32, 110, 97, 109, 101, 115, 0 ], "i8", ALLOC_NORMAL);
    __str42230 = allocate([ 101, 120, 112, 97, 116, 95, 50, 46, 48, 46, 48, 0 ], "i8", ALLOC_NORMAL);
    _features_3974 = allocate([ 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1024, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_NORMAL);
    __str43231 = allocate([ 115, 105, 122, 101, 111, 102, 40, 88, 77, 76, 95, 67, 104, 97, 114, 41, 0 ], "i8", ALLOC_NORMAL);
    __str44232 = allocate([ 115, 105, 122, 101, 111, 102, 40, 88, 77, 76, 95, 76, 67, 104, 97, 114, 41, 0 ], "i8", ALLOC_NORMAL);
    __str45233 = allocate([ 88, 77, 76, 95, 68, 84, 68, 0 ], "i8", ALLOC_NORMAL);
    __str46234 = allocate([ 88, 77, 76, 95, 67, 79, 78, 84, 69, 88, 84, 95, 66, 89, 84, 69, 83, 0 ], "i8", ALLOC_NORMAL);
    __str47235 = allocate([ 88, 77, 76, 95, 78, 83, 0 ], "i8", ALLOC_NORMAL);
    _xmlLen_5245 = allocate([ 36 ], [ "i32", 0, 0, 0, 0 ], ALLOC_NORMAL);
    _xmlNamespace_5244 = allocate([ 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 119, 51, 46, 111, 114, 103, 47, 88, 77, 76, 47, 49, 57, 57, 56, 47, 110, 97, 109, 101, 115, 112, 97, 99, 101, 0 ], "i8", ALLOC_NORMAL);
    _xmlnsLen_5247 = allocate([ 29 ], [ "i32", 0, 0, 0, 0 ], ALLOC_NORMAL);
    _xmlnsNamespace_5246 = allocate([ 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 119, 51, 46, 111, 114, 103, 47, 50, 48, 48, 48, 47, 120, 109, 108, 110, 115, 47, 0 ], "i8", ALLOC_NORMAL);
    _externalSubsetName_5988 = allocate([ 35, 0 ], "i8", ALLOC_NORMAL);
    _atypeCDATA_5989 = allocate([ 67, 68, 65, 84, 65, 0 ], "i8", ALLOC_NORMAL);
    _atypeID_5990 = allocate([ 73, 68, 0 ], "i8", ALLOC_NORMAL);
    _atypeIDREF_5991 = allocate([ 73, 68, 82, 69, 70, 0 ], "i8", ALLOC_NORMAL);
    _atypeIDREFS_5992 = allocate([ 73, 68, 82, 69, 70, 83, 0 ], "i8", ALLOC_NORMAL);
    _atypeENTITY_5993 = allocate([ 69, 78, 84, 73, 84, 89, 0 ], "i8", ALLOC_NORMAL);
    _atypeENTITIES_5994 = allocate([ 69, 78, 84, 73, 84, 73, 69, 83, 0 ], "i8", ALLOC_NORMAL);
    _atypeNMTOKEN_5995 = allocate([ 78, 77, 84, 79, 75, 69, 78, 0 ], "i8", ALLOC_NORMAL);
    _atypeNMTOKENS_5996 = allocate([ 78, 77, 84, 79, 75, 69, 78, 83, 0 ], "i8", ALLOC_NORMAL);
    _enumValueSep_5998 = allocate([ 124, 0 ], "i8", ALLOC_NORMAL);
    _notationPrefix_5997 = allocate([ 78, 79, 84, 65, 84, 73, 79, 78, 40, 0 ], "i8", ALLOC_NORMAL);
    _enumValueStart_5999 = allocate([ 40, 0 ], "i8", ALLOC_NORMAL);
    _KW_ANY = allocate([ 65, 78, 89, 0 ], "i8", ALLOC_NORMAL);
    _KW_ATTLIST = allocate([ 65, 84, 84, 76, 73, 83, 84, 0 ], "i8", ALLOC_NORMAL);
    _KW_CDATA = allocate([ 67, 68, 65, 84, 65, 0 ], "i8", ALLOC_NORMAL);
    _KW_DOCTYPE = allocate([ 68, 79, 67, 84, 89, 80, 69, 0 ], "i8", ALLOC_NORMAL);
    _KW_ELEMENT = allocate([ 69, 76, 69, 77, 69, 78, 84, 0 ], "i8", ALLOC_NORMAL);
    _KW_EMPTY = allocate([ 69, 77, 80, 84, 89, 0 ], "i8", ALLOC_NORMAL);
    _KW_ENTITIES = allocate([ 69, 78, 84, 73, 84, 73, 69, 83, 0 ], "i8", ALLOC_NORMAL);
    _KW_ENTITY = allocate([ 69, 78, 84, 73, 84, 89, 0 ], "i8", ALLOC_NORMAL);
    _KW_FIXED = allocate([ 70, 73, 88, 69, 68, 0 ], "i8", ALLOC_NORMAL);
    _KW_ID = allocate([ 73, 68, 0 ], "i8", ALLOC_NORMAL);
    _KW_IDREF = allocate([ 73, 68, 82, 69, 70, 0 ], "i8", ALLOC_NORMAL);
    _KW_IDREFS = allocate([ 73, 68, 82, 69, 70, 83, 0 ], "i8", ALLOC_NORMAL);
    _KW_IGNORE = allocate([ 73, 71, 78, 79, 82, 69, 0 ], "i8", ALLOC_NORMAL);
    _KW_IMPLIED = allocate([ 73, 77, 80, 76, 73, 69, 68, 0 ], "i8", ALLOC_NORMAL);
    _KW_INCLUDE = allocate([ 73, 78, 67, 76, 85, 68, 69, 0 ], "i8", ALLOC_NORMAL);
    _KW_NDATA = allocate([ 78, 68, 65, 84, 65, 0 ], "i8", ALLOC_NORMAL);
    _KW_NMTOKEN = allocate([ 78, 77, 84, 79, 75, 69, 78, 0 ], "i8", ALLOC_NORMAL);
    _KW_NMTOKENS = allocate([ 78, 77, 84, 79, 75, 69, 78, 83, 0 ], "i8", ALLOC_NORMAL);
    _KW_NOTATION = allocate([ 78, 79, 84, 65, 84, 73, 79, 78, 0 ], "i8", ALLOC_NORMAL);
    _KW_PCDATA = allocate([ 80, 67, 68, 65, 84, 65, 0 ], "i8", ALLOC_NORMAL);
    _KW_PUBLIC = allocate([ 80, 85, 66, 76, 73, 67, 0 ], "i8", ALLOC_NORMAL);
    _KW_REQUIRED = allocate([ 82, 69, 81, 85, 73, 82, 69, 68, 0 ], "i8", ALLOC_NORMAL);
    _KW_SYSTEM = allocate([ 83, 89, 83, 84, 69, 77, 0 ], "i8", ALLOC_NORMAL);
    _types_1924 = allocate(32, "i8*", ALLOC_NORMAL);
    _namingBitmap = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 67108864, 0, 0, 0, -2013265922, 0, 0, 0, 134217726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8388609, 0, 0, 0, -8388609, 0, 0, 0, -1, 0, 0, 0, 2146697215, 0, 0, 0, -514, 0, 0, 0, 2147483647, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -8177, 0, 0, 0, -63832065, 0, 0, 0, 16777215, 0, 0, 0, 0, 0, 0, 0, -65536, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -134217217, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10432, 0, 0, 0, -5, 0, 0, 0, 1417641983, 0, 0, 0, 1048573, 0, 0, 0, -8194, 0, 0, 0, -1, 0, 0, 0, -536936449, 0, 0, 0, -1, 0, 0, 0, -65533, 0, 0, 0, -1, 0, 0, 0, -58977, 0, 0, 0, 54513663, 0, 0, 0, 0, 0, 0, 0, -131072, 0, 0, 0, 41943039, 0, 0, 0, -2, 0, 0, 0, 127, 0, 0, 0, 0, 0, 0, 0, -65536, 0, 0, 0, 460799, 0, 0, 0, 0, 0, 0, 0, 134217726, 0, 0, 0, 2046, 0, 0, 0, -131072, 0, 0, 0, -1, 0, 0, 0, 2097151999, 0, 0, 0, 3112959, 0, 0, 0, 96, 0, 0, 0, -32, 0, 0, 0, 603979775, 0, 0, 0, -16777216, 0, 0, 0, 3, 0, 0, 0, -417824, 0, 0, 0, 63307263, 0, 0, 0, -1342177280, 0, 0, 0, 196611, 0, 0, 0, -423968, 0, 0, 0, 57540095, 0, 0, 0, 1577058304, 0, 0, 0, 1835008, 0, 0, 0, -282656, 0, 0, 0, 602799615, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -417824, 0, 0, 0, 600702463, 0, 0, 0, -1342177280, 0, 0, 0, 3, 0, 0, 0, -700594208, 0, 0, 0, 62899992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -139296, 0, 0, 0, 66059775, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, -139296, 0, 0, 0, 66059775, 0, 0, 0, 1073741824, 0, 0, 0, 3, 0, 0, 0, -139296, 0, 0, 0, 67108351, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, 884735, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, -17816170, 0, 0, 0, 537750702, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -257, 0, 0, 0, 1023, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -65473, 0, 0, 0, 8388607, 0, 0, 0, 514797, 0, 0, 0, 1342177280, 0, 0, 0, -2110697471, 0, 0, 0, 2908843, 0, 0, 0, 1073741824, 0, 0, 0, -176109312, 0, 0, 0, 7, 0, 0, 0, 33622016, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 268435455, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 67108863, 0, 0, 0, 1061158911, 0, 0, 0, -1, 0, 0, 0, -1426112705, 0, 0, 0, 1073741823, 0, 0, 0, -1, 0, 0, 0, 1608515583, 0, 0, 0, 265232348, 0, 0, 0, 534519807, 0, 0, 0, 0, 0, 0, 0, 19520, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 1022, 0, 0, 0, -2, 0, 0, 0, -1, 0, 0, 0, 2097151, 0, 0, 0, -2, 0, 0, 0, -1, 0, 0, 0, 134217727, 0, 0, 0, -32, 0, 0, 0, 8191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134176768, 0, 0, 0, -2013265922, 0, 0, 0, 134217726, 0, 0, 0, 0, 0, 0, 0, 8388608, 0, 0, 0, -8388609, 0, 0, 0, -8388609, 0, 0, 0, 16777215, 0, 0, 0, 0, 0, 0, 0, -65536, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -134217217, 0, 0, 0, 196611, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 63, 0, 0, 0, 3, 0, 0, 0, -10304, 0, 0, 0, -5, 0, 0, 0, 1417641983, 0, 0, 0, 1048573, 0, 0, 0, -8194, 0, 0, 0, -1, 0, 0, 0, -536936449, 0, 0, 0, -1, 0, 0, 0, -65413, 0, 0, 0, -1, 0, 0, 0, -58977, 0, 0, 0, 54513663, 0, 0, 0, 0, 0, 0, 0, -131072, 0, 0, 0, 41943039, 0, 0, 0, -2, 0, 0, 0, -130945, 0, 0, 0, -1140850693, 0, 0, 0, -65514, 0, 0, 0, 460799, 0, 0, 0, 0, 0, 0, 0, 134217726, 0, 0, 0, 524287, 0, 0, 0, -64513, 0, 0, 0, -1, 0, 0, 0, 2097151999, 0, 0, 0, -1081345, 0, 0, 0, 67059199, 0, 0, 0, -18, 0, 0, 0, -201326593, 0, 0, 0, -14794753, 0, 0, 0, 65487, 0, 0, 0, -417810, 0, 0, 0, -741999105, 0, 0, 0, -1333773921, 0, 0, 0, 262095, 0, 0, 0, -423964, 0, 0, 0, -747766273, 0, 0, 0, 1577073031, 0, 0, 0, 2097088, 0, 0, 0, -282642, 0, 0, 0, -202506753, 0, 0, 0, 15295, 0, 0, 0, 65473, 0, 0, 0, -417810, 0, 0, 0, -204603905, 0, 0, 0, -1329579633, 0, 0, 0, 65475, 0, 0, 0, -700594196, 0, 0, 0, -1010841832, 0, 0, 0, 8404423, 0, 0, 0, 65408, 0, 0, 0, -139282, 0, 0, 0, -1007682049, 0, 0, 0, 6307295, 0, 0, 0, 65475, 0, 0, 0, -139284, 0, 0, 0, -1007682049, 0, 0, 0, 1080049119, 0, 0, 0, 65475, 0, 0, 0, -139284, 0, 0, 0, -1006633473, 0, 0, 0, 8404431, 0, 0, 0, 65475, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, 134184959, 0, 0, 0, 67076095, 0, 0, 0, 0, 0, 0, 0, -17816170, 0, 0, 0, 1006595246, 0, 0, 0, 67059551, 0, 0, 0, 0, 0, 0, 0, 50331648, 0, 0, 0, -1029700609, 0, 0, 0, -257, 0, 0, 0, -130049, 0, 0, 0, -21032993, 0, 0, 0, 50216959, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536805376, 0, 0, 0, 2, 0, 0, 0, 160, 0, 0, 0, 4128766, 0, 0, 0, -2, 0, 0, 0, -1, 0, 0, 0, 1713373183, 0, 0, 0, -2, 0, 0, 0, -1, 0, 0, 0, 2013265919, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_NORMAL);
    _nmstrtPages = allocate([ 2, 3, 4, 5, 6, 7, 8, 0, 0, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], "i8", ALLOC_NORMAL);
    _namePages = allocate([ 25, 3, 26, 27, 28, 29, 30, 0, 0, 31, 32, 33, 34, 35, 36, 37, 16, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 38, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], "i8", ALLOC_NORMAL);
    _CDATA_LSQB_1940 = allocate([ 67, 68, 65, 84, 65, 91 ], "i8", ALLOC_NORMAL);
    _utf8_encoding_ns = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 23, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i8* (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*)*", 0, 0, 0, "void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*", 0, 0, 0, "void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0 ], ALLOC_NORMAL);
    _utf8_encoding = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 22, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i8* (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*)*", 0, 0, 0, "void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*", 0, 0, 0, "void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0 ], ALLOC_NORMAL);
    _internal_utf8_encoding_ns = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 23, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i8* (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*)*", 0, 0, 0, "void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*", 0, 0, 0, "void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0 ], ALLOC_NORMAL);
    _internal_utf8_encoding = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 22, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i8* (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*)*", 0, 0, 0, "void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*", 0, 0, 0, "void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0 ], ALLOC_NORMAL);
    _latin1_encoding_ns = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 23, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 26, 28, 28, 22, 28, 28, 28, 28, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i8* (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*)*", 0, 0, 0, "void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*", 0, 0, 0, "void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8" ], ALLOC_NORMAL);
    _latin1_encoding = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 22, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 26, 28, 28, 22, 28, 28, 28, 28, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i8* (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*)*", 0, 0, 0, "void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*", 0, 0, 0, "void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8" ], ALLOC_NORMAL);
    _ascii_encoding_ns = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 23, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i8* (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*)*", 0, 0, 0, "void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*", 0, 0, 0, "void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8" ], ALLOC_NORMAL);
    _ascii_encoding = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 22, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i8* (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*)*", 0, 0, 0, "void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*", 0, 0, 0, "void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8" ], ALLOC_NORMAL);
    _CDATA_LSQB_5469 = allocate([ 67, 68, 65, 84, 65, 91 ], "i8", ALLOC_NORMAL);
    _little2_encoding_ns = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 23, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 26, 28, 28, 22, 28, 28, 28, 28, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i8* (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*)*", 0, 0, 0, "void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*", 0, 0, 0, "void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8" ], ALLOC_NORMAL);
    _little2_encoding = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 22, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 26, 28, 28, 22, 28, 28, 28, 28, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i8* (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*)*", 0, 0, 0, "void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*", 0, 0, 0, "void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8" ], ALLOC_NORMAL);
    _internal_little2_encoding_ns = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 23, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 26, 28, 28, 22, 28, 28, 28, 28, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i8* (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*)*", 0, 0, 0, "void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*", 0, 0, 0, "void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8" ], ALLOC_NORMAL);
    _internal_little2_encoding = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 22, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 26, 28, 28, 22, 28, 28, 28, 28, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i8* (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*)*", 0, 0, 0, "void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*", 0, 0, 0, "void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8" ], ALLOC_NORMAL);
    _CDATA_LSQB_9063 = allocate([ 67, 68, 65, 84, 65, 91 ], "i8", ALLOC_NORMAL);
    _big2_encoding_ns = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 23, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 26, 28, 28, 22, 28, 28, 28, 28, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i8* (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*)*", 0, 0, 0, "void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*", 0, 0, 0, "void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8" ], ALLOC_NORMAL);
    _big2_encoding = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 22, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 26, 28, 28, 22, 28, 28, 28, 28, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i8* (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*)*", 0, 0, 0, "void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*", 0, 0, 0, "i32 (%struct.ENCODING*, i8*, i8*, i8**)*", 0, 0, 0, "void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*", 0, 0, 0, "void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8" ], ALLOC_NORMAL);
    _KW_version = allocate([ 118, 101, 114, 115, 105, 111, 110, 0 ], "i8", ALLOC_NORMAL);
    _KW_encoding = allocate([ 101, 110, 99, 111, 100, 105, 110, 103, 0 ], "i8", ALLOC_NORMAL);
    _KW_standalone = allocate([ 115, 116, 97, 110, 100, 97, 108, 111, 110, 101, 0 ], "i8", ALLOC_NORMAL);
    _KW_yes = allocate([ 121, 101, 115, 0 ], "i8", ALLOC_NORMAL);
    _KW_no = allocate([ 110, 111, 0 ], "i8", ALLOC_NORMAL);
    _KW_ISO_8859_1 = allocate([ 73, 83, 79, 45, 56, 56, 53, 57, 45, 49, 0 ], "i8", ALLOC_NORMAL);
    _KW_US_ASCII = allocate([ 85, 83, 45, 65, 83, 67, 73, 73, 0 ], "i8", ALLOC_NORMAL);
    _KW_UTF_8 = allocate([ 85, 84, 70, 45, 56, 0 ], "i8", ALLOC_NORMAL);
    _KW_UTF_16 = allocate([ 85, 84, 70, 45, 49, 54, 0 ], "i8", ALLOC_NORMAL);
    _KW_UTF_16BE = allocate([ 85, 84, 70, 45, 49, 54, 66, 69, 0 ], "i8", ALLOC_NORMAL);
    _KW_UTF_16LE = allocate([ 85, 84, 70, 45, 49, 54, 76, 69, 0 ], "i8", ALLOC_NORMAL);
    _encodingNames_12940 = allocate(24, "i8*", ALLOC_NORMAL);
    _encodings = allocate(28, "%struct.ENCODING*", ALLOC_NORMAL);
    _encodingsNS = allocate(28, "%struct.ENCODING*", ALLOC_NORMAL);
    HEAP[_xmlparse_methods] = __str55;
    HEAP[_xmlparse_methods + 4] = FUNCTION_TABLE_OFFSET + 218;
    HEAP[_xmlparse_methods + 12] = _xmlparse_Parse__doc__;
    HEAP[_xmlparse_methods + 16] = __str56;
    HEAP[_xmlparse_methods + 20] = FUNCTION_TABLE_OFFSET + 220;
    HEAP[_xmlparse_methods + 28] = _xmlparse_ParseFile__doc__;
    HEAP[_xmlparse_methods + 32] = __str57;
    HEAP[_xmlparse_methods + 36] = FUNCTION_TABLE_OFFSET + 222;
    HEAP[_xmlparse_methods + 44] = _xmlparse_SetBase__doc__;
    HEAP[_xmlparse_methods + 48] = __str58;
    HEAP[_xmlparse_methods + 52] = FUNCTION_TABLE_OFFSET + 224;
    HEAP[_xmlparse_methods + 60] = _xmlparse_GetBase__doc__;
    HEAP[_xmlparse_methods + 64] = __str59;
    HEAP[_xmlparse_methods + 68] = FUNCTION_TABLE_OFFSET + 226;
    HEAP[_xmlparse_methods + 76] = _xmlparse_ExternalEntityParserCreate__doc__;
    HEAP[_xmlparse_methods + 80] = __str60;
    HEAP[_xmlparse_methods + 84] = FUNCTION_TABLE_OFFSET + 228;
    HEAP[_xmlparse_methods + 92] = _xmlparse_SetParamEntityParsing__doc__;
    HEAP[_xmlparse_methods + 96] = __str61;
    HEAP[_xmlparse_methods + 100] = FUNCTION_TABLE_OFFSET + 230;
    HEAP[_xmlparse_methods + 108] = _xmlparse_GetInputContext__doc__;
    HEAP[_xmlparse_methods + 112] = __str54;
    HEAP[_xmlparse_methods + 116] = FUNCTION_TABLE_OFFSET + 232;
    HEAP[_xmlparse_methods + 124] = _xmlparse_UseForeignDTD__doc__;
    HEAP[_Xmlparsetype + 12] = __str84;
    HEAP[_Xmlparsetype + 24] = FUNCTION_TABLE_OFFSET + 234;
    HEAP[_Xmlparsetype + 32] = FUNCTION_TABLE_OFFSET + 236;
    HEAP[_Xmlparsetype + 36] = FUNCTION_TABLE_OFFSET + 238;
    HEAP[_Xmlparsetype + 88] = _Xmlparsetype__doc__;
    HEAP[_Xmlparsetype + 92] = FUNCTION_TABLE_OFFSET + 240;
    HEAP[_Xmlparsetype + 96] = FUNCTION_TABLE_OFFSET + 242;
    HEAP[_kwlist_11478] = __str86;
    HEAP[_kwlist_11478 + 4] = __str87;
    HEAP[_kwlist_11478 + 8] = __str78;
    HEAP[_pyexpat_methods] = __str91;
    HEAP[_pyexpat_methods + 4] = FUNCTION_TABLE_OFFSET + 244;
    HEAP[_pyexpat_methods + 12] = _pyexpat_ParserCreate__doc__;
    HEAP[_pyexpat_methods + 16] = __str92;
    HEAP[_pyexpat_methods + 20] = FUNCTION_TABLE_OFFSET + 246;
    HEAP[_pyexpat_methods + 28] = _pyexpat_ErrorString__doc__;
    HEAP[_handler_info] = __str168;
    HEAP[_handler_info + 4] = FUNCTION_TABLE_OFFSET + 248;
    HEAP[_handler_info + 8] = FUNCTION_TABLE_OFFSET + 250;
    HEAP[_handler_info + 20] = __str169;
    HEAP[_handler_info + 24] = FUNCTION_TABLE_OFFSET + 252;
    HEAP[_handler_info + 28] = FUNCTION_TABLE_OFFSET + 254;
    HEAP[_handler_info + 40] = __str170;
    HEAP[_handler_info + 44] = FUNCTION_TABLE_OFFSET + 36;
    HEAP[_handler_info + 48] = FUNCTION_TABLE_OFFSET + 256;
    HEAP[_handler_info + 60] = __str83;
    HEAP[_handler_info + 64] = FUNCTION_TABLE_OFFSET + 26;
    HEAP[_handler_info + 68] = FUNCTION_TABLE_OFFSET + 258;
    HEAP[_handler_info + 80] = __str171;
    HEAP[_handler_info + 84] = FUNCTION_TABLE_OFFSET + 260;
    HEAP[_handler_info + 88] = FUNCTION_TABLE_OFFSET + 262;
    HEAP[_handler_info + 100] = __str172;
    HEAP[_handler_info + 104] = FUNCTION_TABLE_OFFSET + 264;
    HEAP[_handler_info + 108] = FUNCTION_TABLE_OFFSET + 266;
    HEAP[_handler_info + 120] = __str173;
    HEAP[_handler_info + 124] = FUNCTION_TABLE_OFFSET + 268;
    HEAP[_handler_info + 128] = FUNCTION_TABLE_OFFSET + 270;
    HEAP[_handler_info + 140] = __str174;
    HEAP[_handler_info + 144] = FUNCTION_TABLE_OFFSET + 272;
    HEAP[_handler_info + 148] = FUNCTION_TABLE_OFFSET + 274;
    HEAP[_handler_info + 160] = __str175;
    HEAP[_handler_info + 164] = FUNCTION_TABLE_OFFSET + 28;
    HEAP[_handler_info + 168] = FUNCTION_TABLE_OFFSET + 276;
    HEAP[_handler_info + 180] = __str176;
    HEAP[_handler_info + 184] = FUNCTION_TABLE_OFFSET + 278;
    HEAP[_handler_info + 188] = FUNCTION_TABLE_OFFSET + 280;
    HEAP[_handler_info + 200] = __str177;
    HEAP[_handler_info + 204] = FUNCTION_TABLE_OFFSET + 282;
    HEAP[_handler_info + 208] = FUNCTION_TABLE_OFFSET + 284;
    HEAP[_handler_info + 220] = __str178;
    HEAP[_handler_info + 224] = FUNCTION_TABLE_OFFSET + 286;
    HEAP[_handler_info + 228] = FUNCTION_TABLE_OFFSET + 288;
    HEAP[_handler_info + 240] = __str38;
    HEAP[_handler_info + 244] = FUNCTION_TABLE_OFFSET + 30;
    HEAP[_handler_info + 248] = FUNCTION_TABLE_OFFSET + 290;
    HEAP[_handler_info + 260] = __str179;
    HEAP[_handler_info + 264] = FUNCTION_TABLE_OFFSET + 292;
    HEAP[_handler_info + 268] = FUNCTION_TABLE_OFFSET + 294;
    HEAP[_handler_info + 280] = __str180;
    HEAP[_handler_info + 284] = FUNCTION_TABLE_OFFSET + 296;
    HEAP[_handler_info + 288] = FUNCTION_TABLE_OFFSET + 298;
    HEAP[_handler_info + 300] = __str181;
    HEAP[_handler_info + 304] = FUNCTION_TABLE_OFFSET + 300;
    HEAP[_handler_info + 308] = FUNCTION_TABLE_OFFSET + 302;
    HEAP[_handler_info + 320] = __str182;
    HEAP[_handler_info + 324] = FUNCTION_TABLE_OFFSET + 304;
    HEAP[_handler_info + 328] = FUNCTION_TABLE_OFFSET + 306;
    HEAP[_handler_info + 340] = __str183;
    HEAP[_handler_info + 344] = FUNCTION_TABLE_OFFSET + 308;
    HEAP[_handler_info + 348] = FUNCTION_TABLE_OFFSET + 310;
    HEAP[_handler_info + 360] = __str184;
    HEAP[_handler_info + 364] = FUNCTION_TABLE_OFFSET + 312;
    HEAP[_handler_info + 368] = FUNCTION_TABLE_OFFSET + 314;
    HEAP[_handler_info + 380] = __str185;
    HEAP[_handler_info + 384] = FUNCTION_TABLE_OFFSET + 316;
    HEAP[_handler_info + 388] = FUNCTION_TABLE_OFFSET + 318;
    HEAP[_handler_info + 400] = __str186;
    HEAP[_handler_info + 404] = FUNCTION_TABLE_OFFSET + 320;
    HEAP[_handler_info + 408] = FUNCTION_TABLE_OFFSET + 322;
    HEAP[_handler_info + 420] = __str187;
    HEAP[_handler_info + 424] = FUNCTION_TABLE_OFFSET + 324;
    HEAP[_handler_info + 428] = FUNCTION_TABLE_OFFSET + 326;
    HEAP[_message_3952 + 4] = __str2190;
    HEAP[_message_3952 + 8] = __str3191;
    HEAP[_message_3952 + 12] = __str4192;
    HEAP[_message_3952 + 16] = __str5193;
    HEAP[_message_3952 + 20] = __str6194;
    HEAP[_message_3952 + 24] = __str7195;
    HEAP[_message_3952 + 28] = __str8196;
    HEAP[_message_3952 + 32] = __str9197;
    HEAP[_message_3952 + 36] = __str10198;
    HEAP[_message_3952 + 40] = __str11199;
    HEAP[_message_3952 + 44] = __str12200;
    HEAP[_message_3952 + 48] = __str13201;
    HEAP[_message_3952 + 52] = __str14202;
    HEAP[_message_3952 + 56] = __str15203;
    HEAP[_message_3952 + 60] = __str16204;
    HEAP[_message_3952 + 64] = __str17205;
    HEAP[_message_3952 + 68] = __str18206;
    HEAP[_message_3952 + 72] = __str19207;
    HEAP[_message_3952 + 76] = __str20208;
    HEAP[_message_3952 + 80] = __str21209;
    HEAP[_message_3952 + 84] = __str22210;
    HEAP[_message_3952 + 88] = __str23211;
    HEAP[_message_3952 + 92] = __str24212;
    HEAP[_message_3952 + 96] = __str25213;
    HEAP[_message_3952 + 100] = __str26214;
    HEAP[_message_3952 + 104] = __str27215;
    HEAP[_message_3952 + 108] = __str28216;
    HEAP[_message_3952 + 112] = __str29217;
    HEAP[_message_3952 + 116] = __str30218;
    HEAP[_message_3952 + 120] = __str31219;
    HEAP[_message_3952 + 124] = __str32220;
    HEAP[_message_3952 + 128] = __str33221;
    HEAP[_message_3952 + 132] = __str34222;
    HEAP[_message_3952 + 136] = __str35223;
    HEAP[_message_3952 + 140] = __str36224;
    HEAP[_message_3952 + 144] = __str37225;
    HEAP[_message_3952 + 148] = __str38226;
    HEAP[_message_3952 + 152] = __str39227;
    HEAP[_message_3952 + 156] = __str40228;
    HEAP[_message_3952 + 160] = __str41229;
    HEAP[_features_3974 + 4] = __str43231;
    HEAP[_features_3974 + 16] = __str44232;
    HEAP[_features_3974 + 28] = __str45233;
    HEAP[_features_3974 + 40] = __str46234;
    HEAP[_features_3974 + 52] = __str47235;
    HEAP[_types_1924] = _KW_CDATA;
    HEAP[_types_1924 + 4] = _KW_ID;
    HEAP[_types_1924 + 8] = _KW_IDREF;
    HEAP[_types_1924 + 12] = _KW_IDREFS;
    HEAP[_types_1924 + 16] = _KW_ENTITY;
    HEAP[_types_1924 + 20] = _KW_ENTITIES;
    HEAP[_types_1924 + 24] = _KW_NMTOKEN;
    HEAP[_types_1924 + 28] = _KW_NMTOKENS;
    HEAP[_utf8_encoding_ns] = FUNCTION_TABLE_OFFSET + 328;
    HEAP[_utf8_encoding_ns + 4] = FUNCTION_TABLE_OFFSET + 330;
    HEAP[_utf8_encoding_ns + 8] = FUNCTION_TABLE_OFFSET + 332;
    HEAP[_utf8_encoding_ns + 12] = FUNCTION_TABLE_OFFSET + 334;
    HEAP[_utf8_encoding_ns + 16] = FUNCTION_TABLE_OFFSET + 336;
    HEAP[_utf8_encoding_ns + 20] = FUNCTION_TABLE_OFFSET + 338;
    HEAP[_utf8_encoding_ns + 24] = FUNCTION_TABLE_OFFSET + 340;
    HEAP[_utf8_encoding_ns + 28] = FUNCTION_TABLE_OFFSET + 342;
    HEAP[_utf8_encoding_ns + 32] = FUNCTION_TABLE_OFFSET + 344;
    HEAP[_utf8_encoding_ns + 36] = FUNCTION_TABLE_OFFSET + 346;
    HEAP[_utf8_encoding_ns + 40] = FUNCTION_TABLE_OFFSET + 348;
    HEAP[_utf8_encoding_ns + 44] = FUNCTION_TABLE_OFFSET + 350;
    HEAP[_utf8_encoding_ns + 48] = FUNCTION_TABLE_OFFSET + 352;
    HEAP[_utf8_encoding_ns + 52] = FUNCTION_TABLE_OFFSET + 354;
    HEAP[_utf8_encoding_ns + 56] = FUNCTION_TABLE_OFFSET + 356;
    HEAP[_utf8_encoding_ns + 60] = FUNCTION_TABLE_OFFSET + 358;
    HEAP[_utf8_encoding_ns + 64] = FUNCTION_TABLE_OFFSET + 360;
    HEAP[_utf8_encoding_ns + 332] = FUNCTION_TABLE_OFFSET + 362;
    HEAP[_utf8_encoding_ns + 336] = FUNCTION_TABLE_OFFSET + 364;
    HEAP[_utf8_encoding_ns + 340] = FUNCTION_TABLE_OFFSET + 366;
    HEAP[_utf8_encoding_ns + 344] = FUNCTION_TABLE_OFFSET + 368;
    HEAP[_utf8_encoding_ns + 348] = FUNCTION_TABLE_OFFSET + 370;
    HEAP[_utf8_encoding_ns + 352] = FUNCTION_TABLE_OFFSET + 366;
    HEAP[_utf8_encoding_ns + 356] = FUNCTION_TABLE_OFFSET + 372;
    HEAP[_utf8_encoding_ns + 360] = FUNCTION_TABLE_OFFSET + 374;
    HEAP[_utf8_encoding_ns + 364] = FUNCTION_TABLE_OFFSET + 376;
    HEAP[_utf8_encoding] = FUNCTION_TABLE_OFFSET + 328;
    HEAP[_utf8_encoding + 4] = FUNCTION_TABLE_OFFSET + 330;
    HEAP[_utf8_encoding + 8] = FUNCTION_TABLE_OFFSET + 332;
    HEAP[_utf8_encoding + 12] = FUNCTION_TABLE_OFFSET + 334;
    HEAP[_utf8_encoding + 16] = FUNCTION_TABLE_OFFSET + 336;
    HEAP[_utf8_encoding + 20] = FUNCTION_TABLE_OFFSET + 338;
    HEAP[_utf8_encoding + 24] = FUNCTION_TABLE_OFFSET + 340;
    HEAP[_utf8_encoding + 28] = FUNCTION_TABLE_OFFSET + 342;
    HEAP[_utf8_encoding + 32] = FUNCTION_TABLE_OFFSET + 344;
    HEAP[_utf8_encoding + 36] = FUNCTION_TABLE_OFFSET + 346;
    HEAP[_utf8_encoding + 40] = FUNCTION_TABLE_OFFSET + 348;
    HEAP[_utf8_encoding + 44] = FUNCTION_TABLE_OFFSET + 350;
    HEAP[_utf8_encoding + 48] = FUNCTION_TABLE_OFFSET + 352;
    HEAP[_utf8_encoding + 52] = FUNCTION_TABLE_OFFSET + 354;
    HEAP[_utf8_encoding + 56] = FUNCTION_TABLE_OFFSET + 356;
    HEAP[_utf8_encoding + 60] = FUNCTION_TABLE_OFFSET + 358;
    HEAP[_utf8_encoding + 64] = FUNCTION_TABLE_OFFSET + 360;
    HEAP[_utf8_encoding + 332] = FUNCTION_TABLE_OFFSET + 362;
    HEAP[_utf8_encoding + 336] = FUNCTION_TABLE_OFFSET + 364;
    HEAP[_utf8_encoding + 340] = FUNCTION_TABLE_OFFSET + 366;
    HEAP[_utf8_encoding + 344] = FUNCTION_TABLE_OFFSET + 368;
    HEAP[_utf8_encoding + 348] = FUNCTION_TABLE_OFFSET + 370;
    HEAP[_utf8_encoding + 352] = FUNCTION_TABLE_OFFSET + 366;
    HEAP[_utf8_encoding + 356] = FUNCTION_TABLE_OFFSET + 372;
    HEAP[_utf8_encoding + 360] = FUNCTION_TABLE_OFFSET + 374;
    HEAP[_utf8_encoding + 364] = FUNCTION_TABLE_OFFSET + 376;
    HEAP[_internal_utf8_encoding_ns] = FUNCTION_TABLE_OFFSET + 328;
    HEAP[_internal_utf8_encoding_ns + 4] = FUNCTION_TABLE_OFFSET + 330;
    HEAP[_internal_utf8_encoding_ns + 8] = FUNCTION_TABLE_OFFSET + 332;
    HEAP[_internal_utf8_encoding_ns + 12] = FUNCTION_TABLE_OFFSET + 334;
    HEAP[_internal_utf8_encoding_ns + 16] = FUNCTION_TABLE_OFFSET + 336;
    HEAP[_internal_utf8_encoding_ns + 20] = FUNCTION_TABLE_OFFSET + 338;
    HEAP[_internal_utf8_encoding_ns + 24] = FUNCTION_TABLE_OFFSET + 340;
    HEAP[_internal_utf8_encoding_ns + 28] = FUNCTION_TABLE_OFFSET + 342;
    HEAP[_internal_utf8_encoding_ns + 32] = FUNCTION_TABLE_OFFSET + 344;
    HEAP[_internal_utf8_encoding_ns + 36] = FUNCTION_TABLE_OFFSET + 346;
    HEAP[_internal_utf8_encoding_ns + 40] = FUNCTION_TABLE_OFFSET + 348;
    HEAP[_internal_utf8_encoding_ns + 44] = FUNCTION_TABLE_OFFSET + 350;
    HEAP[_internal_utf8_encoding_ns + 48] = FUNCTION_TABLE_OFFSET + 352;
    HEAP[_internal_utf8_encoding_ns + 52] = FUNCTION_TABLE_OFFSET + 354;
    HEAP[_internal_utf8_encoding_ns + 56] = FUNCTION_TABLE_OFFSET + 356;
    HEAP[_internal_utf8_encoding_ns + 60] = FUNCTION_TABLE_OFFSET + 358;
    HEAP[_internal_utf8_encoding_ns + 64] = FUNCTION_TABLE_OFFSET + 360;
    HEAP[_internal_utf8_encoding_ns + 332] = FUNCTION_TABLE_OFFSET + 362;
    HEAP[_internal_utf8_encoding_ns + 336] = FUNCTION_TABLE_OFFSET + 364;
    HEAP[_internal_utf8_encoding_ns + 340] = FUNCTION_TABLE_OFFSET + 366;
    HEAP[_internal_utf8_encoding_ns + 344] = FUNCTION_TABLE_OFFSET + 368;
    HEAP[_internal_utf8_encoding_ns + 348] = FUNCTION_TABLE_OFFSET + 370;
    HEAP[_internal_utf8_encoding_ns + 352] = FUNCTION_TABLE_OFFSET + 366;
    HEAP[_internal_utf8_encoding_ns + 356] = FUNCTION_TABLE_OFFSET + 372;
    HEAP[_internal_utf8_encoding_ns + 360] = FUNCTION_TABLE_OFFSET + 374;
    HEAP[_internal_utf8_encoding_ns + 364] = FUNCTION_TABLE_OFFSET + 376;
    HEAP[_internal_utf8_encoding] = FUNCTION_TABLE_OFFSET + 328;
    HEAP[_internal_utf8_encoding + 4] = FUNCTION_TABLE_OFFSET + 330;
    HEAP[_internal_utf8_encoding + 8] = FUNCTION_TABLE_OFFSET + 332;
    HEAP[_internal_utf8_encoding + 12] = FUNCTION_TABLE_OFFSET + 334;
    HEAP[_internal_utf8_encoding + 16] = FUNCTION_TABLE_OFFSET + 336;
    HEAP[_internal_utf8_encoding + 20] = FUNCTION_TABLE_OFFSET + 338;
    HEAP[_internal_utf8_encoding + 24] = FUNCTION_TABLE_OFFSET + 340;
    HEAP[_internal_utf8_encoding + 28] = FUNCTION_TABLE_OFFSET + 342;
    HEAP[_internal_utf8_encoding + 32] = FUNCTION_TABLE_OFFSET + 344;
    HEAP[_internal_utf8_encoding + 36] = FUNCTION_TABLE_OFFSET + 346;
    HEAP[_internal_utf8_encoding + 40] = FUNCTION_TABLE_OFFSET + 348;
    HEAP[_internal_utf8_encoding + 44] = FUNCTION_TABLE_OFFSET + 350;
    HEAP[_internal_utf8_encoding + 48] = FUNCTION_TABLE_OFFSET + 352;
    HEAP[_internal_utf8_encoding + 52] = FUNCTION_TABLE_OFFSET + 354;
    HEAP[_internal_utf8_encoding + 56] = FUNCTION_TABLE_OFFSET + 356;
    HEAP[_internal_utf8_encoding + 60] = FUNCTION_TABLE_OFFSET + 358;
    HEAP[_internal_utf8_encoding + 64] = FUNCTION_TABLE_OFFSET + 360;
    HEAP[_internal_utf8_encoding + 332] = FUNCTION_TABLE_OFFSET + 362;
    HEAP[_internal_utf8_encoding + 336] = FUNCTION_TABLE_OFFSET + 364;
    HEAP[_internal_utf8_encoding + 340] = FUNCTION_TABLE_OFFSET + 366;
    HEAP[_internal_utf8_encoding + 344] = FUNCTION_TABLE_OFFSET + 368;
    HEAP[_internal_utf8_encoding + 348] = FUNCTION_TABLE_OFFSET + 370;
    HEAP[_internal_utf8_encoding + 352] = FUNCTION_TABLE_OFFSET + 366;
    HEAP[_internal_utf8_encoding + 356] = FUNCTION_TABLE_OFFSET + 372;
    HEAP[_internal_utf8_encoding + 360] = FUNCTION_TABLE_OFFSET + 374;
    HEAP[_internal_utf8_encoding + 364] = FUNCTION_TABLE_OFFSET + 376;
    HEAP[_latin1_encoding_ns] = FUNCTION_TABLE_OFFSET + 328;
    HEAP[_latin1_encoding_ns + 4] = FUNCTION_TABLE_OFFSET + 330;
    HEAP[_latin1_encoding_ns + 8] = FUNCTION_TABLE_OFFSET + 332;
    HEAP[_latin1_encoding_ns + 12] = FUNCTION_TABLE_OFFSET + 334;
    HEAP[_latin1_encoding_ns + 16] = FUNCTION_TABLE_OFFSET + 336;
    HEAP[_latin1_encoding_ns + 20] = FUNCTION_TABLE_OFFSET + 338;
    HEAP[_latin1_encoding_ns + 24] = FUNCTION_TABLE_OFFSET + 340;
    HEAP[_latin1_encoding_ns + 28] = FUNCTION_TABLE_OFFSET + 342;
    HEAP[_latin1_encoding_ns + 32] = FUNCTION_TABLE_OFFSET + 344;
    HEAP[_latin1_encoding_ns + 36] = FUNCTION_TABLE_OFFSET + 346;
    HEAP[_latin1_encoding_ns + 40] = FUNCTION_TABLE_OFFSET + 348;
    HEAP[_latin1_encoding_ns + 44] = FUNCTION_TABLE_OFFSET + 350;
    HEAP[_latin1_encoding_ns + 48] = FUNCTION_TABLE_OFFSET + 352;
    HEAP[_latin1_encoding_ns + 52] = FUNCTION_TABLE_OFFSET + 354;
    HEAP[_latin1_encoding_ns + 56] = FUNCTION_TABLE_OFFSET + 356;
    HEAP[_latin1_encoding_ns + 60] = FUNCTION_TABLE_OFFSET + 378;
    HEAP[_latin1_encoding_ns + 64] = FUNCTION_TABLE_OFFSET + 380;
    HEAP[_latin1_encoding] = FUNCTION_TABLE_OFFSET + 328;
    HEAP[_latin1_encoding + 4] = FUNCTION_TABLE_OFFSET + 330;
    HEAP[_latin1_encoding + 8] = FUNCTION_TABLE_OFFSET + 332;
    HEAP[_latin1_encoding + 12] = FUNCTION_TABLE_OFFSET + 334;
    HEAP[_latin1_encoding + 16] = FUNCTION_TABLE_OFFSET + 336;
    HEAP[_latin1_encoding + 20] = FUNCTION_TABLE_OFFSET + 338;
    HEAP[_latin1_encoding + 24] = FUNCTION_TABLE_OFFSET + 340;
    HEAP[_latin1_encoding + 28] = FUNCTION_TABLE_OFFSET + 342;
    HEAP[_latin1_encoding + 32] = FUNCTION_TABLE_OFFSET + 344;
    HEAP[_latin1_encoding + 36] = FUNCTION_TABLE_OFFSET + 346;
    HEAP[_latin1_encoding + 40] = FUNCTION_TABLE_OFFSET + 348;
    HEAP[_latin1_encoding + 44] = FUNCTION_TABLE_OFFSET + 350;
    HEAP[_latin1_encoding + 48] = FUNCTION_TABLE_OFFSET + 352;
    HEAP[_latin1_encoding + 52] = FUNCTION_TABLE_OFFSET + 354;
    HEAP[_latin1_encoding + 56] = FUNCTION_TABLE_OFFSET + 356;
    HEAP[_latin1_encoding + 60] = FUNCTION_TABLE_OFFSET + 378;
    HEAP[_latin1_encoding + 64] = FUNCTION_TABLE_OFFSET + 380;
    HEAP[_ascii_encoding_ns] = FUNCTION_TABLE_OFFSET + 328;
    HEAP[_ascii_encoding_ns + 4] = FUNCTION_TABLE_OFFSET + 330;
    HEAP[_ascii_encoding_ns + 8] = FUNCTION_TABLE_OFFSET + 332;
    HEAP[_ascii_encoding_ns + 12] = FUNCTION_TABLE_OFFSET + 334;
    HEAP[_ascii_encoding_ns + 16] = FUNCTION_TABLE_OFFSET + 336;
    HEAP[_ascii_encoding_ns + 20] = FUNCTION_TABLE_OFFSET + 338;
    HEAP[_ascii_encoding_ns + 24] = FUNCTION_TABLE_OFFSET + 340;
    HEAP[_ascii_encoding_ns + 28] = FUNCTION_TABLE_OFFSET + 342;
    HEAP[_ascii_encoding_ns + 32] = FUNCTION_TABLE_OFFSET + 344;
    HEAP[_ascii_encoding_ns + 36] = FUNCTION_TABLE_OFFSET + 346;
    HEAP[_ascii_encoding_ns + 40] = FUNCTION_TABLE_OFFSET + 348;
    HEAP[_ascii_encoding_ns + 44] = FUNCTION_TABLE_OFFSET + 350;
    HEAP[_ascii_encoding_ns + 48] = FUNCTION_TABLE_OFFSET + 352;
    HEAP[_ascii_encoding_ns + 52] = FUNCTION_TABLE_OFFSET + 354;
    HEAP[_ascii_encoding_ns + 56] = FUNCTION_TABLE_OFFSET + 356;
    HEAP[_ascii_encoding_ns + 60] = FUNCTION_TABLE_OFFSET + 382;
    HEAP[_ascii_encoding_ns + 64] = FUNCTION_TABLE_OFFSET + 380;
    HEAP[_ascii_encoding] = FUNCTION_TABLE_OFFSET + 328;
    HEAP[_ascii_encoding + 4] = FUNCTION_TABLE_OFFSET + 330;
    HEAP[_ascii_encoding + 8] = FUNCTION_TABLE_OFFSET + 332;
    HEAP[_ascii_encoding + 12] = FUNCTION_TABLE_OFFSET + 334;
    HEAP[_ascii_encoding + 16] = FUNCTION_TABLE_OFFSET + 336;
    HEAP[_ascii_encoding + 20] = FUNCTION_TABLE_OFFSET + 338;
    HEAP[_ascii_encoding + 24] = FUNCTION_TABLE_OFFSET + 340;
    HEAP[_ascii_encoding + 28] = FUNCTION_TABLE_OFFSET + 342;
    HEAP[_ascii_encoding + 32] = FUNCTION_TABLE_OFFSET + 344;
    HEAP[_ascii_encoding + 36] = FUNCTION_TABLE_OFFSET + 346;
    HEAP[_ascii_encoding + 40] = FUNCTION_TABLE_OFFSET + 348;
    HEAP[_ascii_encoding + 44] = FUNCTION_TABLE_OFFSET + 350;
    HEAP[_ascii_encoding + 48] = FUNCTION_TABLE_OFFSET + 352;
    HEAP[_ascii_encoding + 52] = FUNCTION_TABLE_OFFSET + 354;
    HEAP[_ascii_encoding + 56] = FUNCTION_TABLE_OFFSET + 356;
    HEAP[_ascii_encoding + 60] = FUNCTION_TABLE_OFFSET + 382;
    HEAP[_ascii_encoding + 64] = FUNCTION_TABLE_OFFSET + 380;
    HEAP[_little2_encoding_ns] = FUNCTION_TABLE_OFFSET + 384;
    HEAP[_little2_encoding_ns + 4] = FUNCTION_TABLE_OFFSET + 386;
    HEAP[_little2_encoding_ns + 8] = FUNCTION_TABLE_OFFSET + 388;
    HEAP[_little2_encoding_ns + 12] = FUNCTION_TABLE_OFFSET + 390;
    HEAP[_little2_encoding_ns + 16] = FUNCTION_TABLE_OFFSET + 392;
    HEAP[_little2_encoding_ns + 20] = FUNCTION_TABLE_OFFSET + 394;
    HEAP[_little2_encoding_ns + 24] = FUNCTION_TABLE_OFFSET + 396;
    HEAP[_little2_encoding_ns + 28] = FUNCTION_TABLE_OFFSET + 398;
    HEAP[_little2_encoding_ns + 32] = FUNCTION_TABLE_OFFSET + 400;
    HEAP[_little2_encoding_ns + 36] = FUNCTION_TABLE_OFFSET + 402;
    HEAP[_little2_encoding_ns + 40] = FUNCTION_TABLE_OFFSET + 404;
    HEAP[_little2_encoding_ns + 44] = FUNCTION_TABLE_OFFSET + 406;
    HEAP[_little2_encoding_ns + 48] = FUNCTION_TABLE_OFFSET + 408;
    HEAP[_little2_encoding_ns + 52] = FUNCTION_TABLE_OFFSET + 410;
    HEAP[_little2_encoding_ns + 56] = FUNCTION_TABLE_OFFSET + 412;
    HEAP[_little2_encoding_ns + 60] = FUNCTION_TABLE_OFFSET + 414;
    HEAP[_little2_encoding_ns + 64] = FUNCTION_TABLE_OFFSET + 416;
    HEAP[_little2_encoding] = FUNCTION_TABLE_OFFSET + 384;
    HEAP[_little2_encoding + 4] = FUNCTION_TABLE_OFFSET + 386;
    HEAP[_little2_encoding + 8] = FUNCTION_TABLE_OFFSET + 388;
    HEAP[_little2_encoding + 12] = FUNCTION_TABLE_OFFSET + 390;
    HEAP[_little2_encoding + 16] = FUNCTION_TABLE_OFFSET + 392;
    HEAP[_little2_encoding + 20] = FUNCTION_TABLE_OFFSET + 394;
    HEAP[_little2_encoding + 24] = FUNCTION_TABLE_OFFSET + 396;
    HEAP[_little2_encoding + 28] = FUNCTION_TABLE_OFFSET + 398;
    HEAP[_little2_encoding + 32] = FUNCTION_TABLE_OFFSET + 400;
    HEAP[_little2_encoding + 36] = FUNCTION_TABLE_OFFSET + 402;
    HEAP[_little2_encoding + 40] = FUNCTION_TABLE_OFFSET + 404;
    HEAP[_little2_encoding + 44] = FUNCTION_TABLE_OFFSET + 406;
    HEAP[_little2_encoding + 48] = FUNCTION_TABLE_OFFSET + 408;
    HEAP[_little2_encoding + 52] = FUNCTION_TABLE_OFFSET + 410;
    HEAP[_little2_encoding + 56] = FUNCTION_TABLE_OFFSET + 412;
    HEAP[_little2_encoding + 60] = FUNCTION_TABLE_OFFSET + 414;
    HEAP[_little2_encoding + 64] = FUNCTION_TABLE_OFFSET + 416;
    HEAP[_internal_little2_encoding_ns] = FUNCTION_TABLE_OFFSET + 384;
    HEAP[_internal_little2_encoding_ns + 4] = FUNCTION_TABLE_OFFSET + 386;
    HEAP[_internal_little2_encoding_ns + 8] = FUNCTION_TABLE_OFFSET + 388;
    HEAP[_internal_little2_encoding_ns + 12] = FUNCTION_TABLE_OFFSET + 390;
    HEAP[_internal_little2_encoding_ns + 16] = FUNCTION_TABLE_OFFSET + 392;
    HEAP[_internal_little2_encoding_ns + 20] = FUNCTION_TABLE_OFFSET + 394;
    HEAP[_internal_little2_encoding_ns + 24] = FUNCTION_TABLE_OFFSET + 396;
    HEAP[_internal_little2_encoding_ns + 28] = FUNCTION_TABLE_OFFSET + 398;
    HEAP[_internal_little2_encoding_ns + 32] = FUNCTION_TABLE_OFFSET + 400;
    HEAP[_internal_little2_encoding_ns + 36] = FUNCTION_TABLE_OFFSET + 402;
    HEAP[_internal_little2_encoding_ns + 40] = FUNCTION_TABLE_OFFSET + 404;
    HEAP[_internal_little2_encoding_ns + 44] = FUNCTION_TABLE_OFFSET + 406;
    HEAP[_internal_little2_encoding_ns + 48] = FUNCTION_TABLE_OFFSET + 408;
    HEAP[_internal_little2_encoding_ns + 52] = FUNCTION_TABLE_OFFSET + 410;
    HEAP[_internal_little2_encoding_ns + 56] = FUNCTION_TABLE_OFFSET + 412;
    HEAP[_internal_little2_encoding_ns + 60] = FUNCTION_TABLE_OFFSET + 414;
    HEAP[_internal_little2_encoding_ns + 64] = FUNCTION_TABLE_OFFSET + 416;
    HEAP[_internal_little2_encoding] = FUNCTION_TABLE_OFFSET + 384;
    HEAP[_internal_little2_encoding + 4] = FUNCTION_TABLE_OFFSET + 386;
    HEAP[_internal_little2_encoding + 8] = FUNCTION_TABLE_OFFSET + 388;
    HEAP[_internal_little2_encoding + 12] = FUNCTION_TABLE_OFFSET + 390;
    HEAP[_internal_little2_encoding + 16] = FUNCTION_TABLE_OFFSET + 392;
    HEAP[_internal_little2_encoding + 20] = FUNCTION_TABLE_OFFSET + 394;
    HEAP[_internal_little2_encoding + 24] = FUNCTION_TABLE_OFFSET + 396;
    HEAP[_internal_little2_encoding + 28] = FUNCTION_TABLE_OFFSET + 398;
    HEAP[_internal_little2_encoding + 32] = FUNCTION_TABLE_OFFSET + 400;
    HEAP[_internal_little2_encoding + 36] = FUNCTION_TABLE_OFFSET + 402;
    HEAP[_internal_little2_encoding + 40] = FUNCTION_TABLE_OFFSET + 404;
    HEAP[_internal_little2_encoding + 44] = FUNCTION_TABLE_OFFSET + 406;
    HEAP[_internal_little2_encoding + 48] = FUNCTION_TABLE_OFFSET + 408;
    HEAP[_internal_little2_encoding + 52] = FUNCTION_TABLE_OFFSET + 410;
    HEAP[_internal_little2_encoding + 56] = FUNCTION_TABLE_OFFSET + 412;
    HEAP[_internal_little2_encoding + 60] = FUNCTION_TABLE_OFFSET + 414;
    HEAP[_internal_little2_encoding + 64] = FUNCTION_TABLE_OFFSET + 416;
    HEAP[_big2_encoding_ns] = FUNCTION_TABLE_OFFSET + 418;
    HEAP[_big2_encoding_ns + 4] = FUNCTION_TABLE_OFFSET + 420;
    HEAP[_big2_encoding_ns + 8] = FUNCTION_TABLE_OFFSET + 422;
    HEAP[_big2_encoding_ns + 12] = FUNCTION_TABLE_OFFSET + 424;
    HEAP[_big2_encoding_ns + 16] = FUNCTION_TABLE_OFFSET + 426;
    HEAP[_big2_encoding_ns + 20] = FUNCTION_TABLE_OFFSET + 428;
    HEAP[_big2_encoding_ns + 24] = FUNCTION_TABLE_OFFSET + 430;
    HEAP[_big2_encoding_ns + 28] = FUNCTION_TABLE_OFFSET + 432;
    HEAP[_big2_encoding_ns + 32] = FUNCTION_TABLE_OFFSET + 434;
    HEAP[_big2_encoding_ns + 36] = FUNCTION_TABLE_OFFSET + 436;
    HEAP[_big2_encoding_ns + 40] = FUNCTION_TABLE_OFFSET + 438;
    HEAP[_big2_encoding_ns + 44] = FUNCTION_TABLE_OFFSET + 440;
    HEAP[_big2_encoding_ns + 48] = FUNCTION_TABLE_OFFSET + 442;
    HEAP[_big2_encoding_ns + 52] = FUNCTION_TABLE_OFFSET + 444;
    HEAP[_big2_encoding_ns + 56] = FUNCTION_TABLE_OFFSET + 446;
    HEAP[_big2_encoding_ns + 60] = FUNCTION_TABLE_OFFSET + 448;
    HEAP[_big2_encoding_ns + 64] = FUNCTION_TABLE_OFFSET + 450;
    HEAP[_big2_encoding] = FUNCTION_TABLE_OFFSET + 418;
    HEAP[_big2_encoding + 4] = FUNCTION_TABLE_OFFSET + 420;
    HEAP[_big2_encoding + 8] = FUNCTION_TABLE_OFFSET + 422;
    HEAP[_big2_encoding + 12] = FUNCTION_TABLE_OFFSET + 424;
    HEAP[_big2_encoding + 16] = FUNCTION_TABLE_OFFSET + 426;
    HEAP[_big2_encoding + 20] = FUNCTION_TABLE_OFFSET + 428;
    HEAP[_big2_encoding + 24] = FUNCTION_TABLE_OFFSET + 430;
    HEAP[_big2_encoding + 28] = FUNCTION_TABLE_OFFSET + 432;
    HEAP[_big2_encoding + 32] = FUNCTION_TABLE_OFFSET + 434;
    HEAP[_big2_encoding + 36] = FUNCTION_TABLE_OFFSET + 436;
    HEAP[_big2_encoding + 40] = FUNCTION_TABLE_OFFSET + 438;
    HEAP[_big2_encoding + 44] = FUNCTION_TABLE_OFFSET + 440;
    HEAP[_big2_encoding + 48] = FUNCTION_TABLE_OFFSET + 442;
    HEAP[_big2_encoding + 52] = FUNCTION_TABLE_OFFSET + 444;
    HEAP[_big2_encoding + 56] = FUNCTION_TABLE_OFFSET + 446;
    HEAP[_big2_encoding + 60] = FUNCTION_TABLE_OFFSET + 448;
    HEAP[_big2_encoding + 64] = FUNCTION_TABLE_OFFSET + 450;
    HEAP[_encodingNames_12940] = _KW_ISO_8859_1;
    HEAP[_encodingNames_12940 + 4] = _KW_US_ASCII;
    HEAP[_encodingNames_12940 + 8] = _KW_UTF_8;
    HEAP[_encodingNames_12940 + 12] = _KW_UTF_16;
    HEAP[_encodingNames_12940 + 16] = _KW_UTF_16BE;
    HEAP[_encodingNames_12940 + 20] = _KW_UTF_16LE;
    HEAP[_encodings] = _latin1_encoding;
    HEAP[_encodings + 4] = _ascii_encoding;
    HEAP[_encodings + 8] = _utf8_encoding;
    HEAP[_encodings + 12] = _big2_encoding;
    HEAP[_encodings + 16] = _big2_encoding;
    HEAP[_encodings + 20] = _little2_encoding;
    HEAP[_encodings + 24] = _utf8_encoding;
    HEAP[_encodingsNS] = _latin1_encoding_ns;
    HEAP[_encodingsNS + 4] = _ascii_encoding_ns;
    HEAP[_encodingsNS + 8] = _utf8_encoding_ns;
    HEAP[_encodingsNS + 12] = _big2_encoding_ns;
    HEAP[_encodingsNS + 16] = _big2_encoding_ns;
    HEAP[_encodingsNS + 20] = _little2_encoding_ns;
    HEAP[_encodingsNS + 24] = _utf8_encoding_ns;
    __globalConstructor__();
  }
  Module["run"] = run;
  run();
  return Module;
});
